// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"

	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentRawLine",
			pos:  position{line: 25, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 27, col: 5, offset: 497},
				run: (*parser).callonDocumentRawLine1,
				expr: &seqExpr{
					pos: position{line: 27, col: 5, offset: 497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 5, offset: 497},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 28, col: 9, offset: 515},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 28, col: 9, offset: 515},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 364, col: 19, offset: 11171},
										run: (*parser).callonDocumentRawLine6,
										expr: &seqExpr{
											pos: position{line: 364, col: 19, offset: 11171},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 364, col: 19, offset: 11171},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 364, col: 24, offset: 11176},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonDocumentRawLine10,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 364, col: 45, offset: 11197},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 364, col: 49, offset: 11201},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine17,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonDocumentRawLine20,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 366, col: 5, offset: 11284},
										run: (*parser).callonDocumentRawLine27,
										expr: &seqExpr{
											pos: position{line: 366, col: 5, offset: 11284},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 366, col: 5, offset: 11284},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 366, col: 9, offset: 11288},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonDocumentRawLine31,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 366, col: 30, offset: 11309},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 366, col: 35, offset: 11314},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine38,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonDocumentRawLine41,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 30, col: 11, offset: 571},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 71, col: 10, offset: 1773},
										run: (*parser).callonDocumentRawLine49,
										expr: &seqExpr{
											pos: position{line: 71, col: 10, offset: 1773},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 71, col: 10, offset: 1773},
													val:        "ifdef::",
													ignoreCase: false,
													want:       "\"ifdef::\"",
												},
												&labeledExpr{
													pos:   position{line: 71, col: 20, offset: 1783},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 128, col: 28, offset: 3562},
														run: (*parser).callonDocumentRawLine53,
														expr: &oneOrMoreExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															expr: &charClassMatcher{
																pos:        position{line: 128, col: 28, offset: 3562},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 71, col: 51, offset: 1814},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 71, col: 55, offset: 1818},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 71, col: 60, offset: 1823},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine59,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 71, col: 93, offset: 1856},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 71, col: 97, offset: 1860},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine64,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 75, col: 11, offset: 1950},
										run: (*parser).callonDocumentRawLine68,
										expr: &seqExpr{
											pos: position{line: 75, col: 11, offset: 1950},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 75, col: 11, offset: 1950},
													val:        "ifndef::",
													ignoreCase: false,
													want:       "\"ifndef::\"",
												},
												&labeledExpr{
													pos:   position{line: 75, col: 22, offset: 1961},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 128, col: 28, offset: 3562},
														run: (*parser).callonDocumentRawLine72,
														expr: &oneOrMoreExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															expr: &charClassMatcher{
																pos:        position{line: 128, col: 28, offset: 3562},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 75, col: 53, offset: 1992},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 75, col: 57, offset: 1996},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 75, col: 62, offset: 2001},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine78,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 75, col: 95, offset: 2034},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 75, col: 99, offset: 2038},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine83,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 83, col: 11, offset: 2217},
										run: (*parser).callonDocumentRawLine87,
										expr: &seqExpr{
											pos: position{line: 83, col: 11, offset: 2217},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 83, col: 11, offset: 2217},
													val:        "ifeval::[",
													ignoreCase: false,
													want:       "\"ifeval::[\"",
												},
												&labeledExpr{
													pos:   position{line: 85, col: 5, offset: 2242},
													label: "left",
													expr: &choiceExpr{
														pos: position{line: 93, col: 5, offset: 2505},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 93, col: 6, offset: 2506},
																run: (*parser).callonDocumentRawLine92,
																expr: &seqExpr{
																	pos: position{line: 93, col: 6, offset: 2506},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 6, offset: 2506},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 11, offset: 2511},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 650, col: 5, offset: 20804},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonDocumentRawLine97,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine101,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonDocumentRawLine107,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine111,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 39, offset: 2539},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2570},
																run: (*parser).callonDocumentRawLine118,
																expr: &seqExpr{
																	pos: position{line: 94, col: 8, offset: 2570},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 94, col: 8, offset: 2570},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 94, col: 12, offset: 2574},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 650, col: 5, offset: 20804},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonDocumentRawLine123,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine127,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonDocumentRawLine133,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine137,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 94, col: 40, offset: 2602},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2632},
																run: (*parser).callonDocumentRawLine144,
																expr: &labeledExpr{
																	pos:   position{line: 95, col: 8, offset: 2632},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 650, col: 5, offset: 20804},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 650, col: 5, offset: 20804},
																				run: (*parser).callonDocumentRawLine147,
																				expr: &seqExpr{
																					pos: position{line: 650, col: 5, offset: 20804},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 650, col: 5, offset: 20804},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 650, col: 13, offset: 20812},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine151,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 650, col: 32, offset: 20831},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 657, col: 5, offset: 21072},
																				run: (*parser).callonDocumentRawLine157,
																				expr: &seqExpr{
																					pos: position{line: 657, col: 5, offset: 21072},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 657, col: 5, offset: 21072},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 657, col: 9, offset: 21076},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine161,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 657, col: 28, offset: 21095},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2686},
																run: (*parser).callonDocumentRawLine167,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2686},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2686},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 13, offset: 2691},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 16, offset: 2694},
																				run: (*parser).callonDocumentRawLine171,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 16, offset: 2694},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 16, offset: 2694},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 63, offset: 2741},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 97, col: 8, offset: 2772},
																run: (*parser).callonDocumentRawLine175,
																expr: &seqExpr{
																	pos: position{line: 97, col: 8, offset: 2772},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 97, col: 8, offset: 2772},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 97, col: 12, offset: 2776},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 97, col: 15, offset: 2779},
																				run: (*parser).callonDocumentRawLine179,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 97, col: 15, offset: 2779},
																					expr: &charClassMatcher{
																						pos:        position{line: 97, col: 15, offset: 2779},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 97, col: 62, offset: 2826},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3071, col: 12, offset: 100161},
																run: (*parser).callonDocumentRawLine183,
																expr: &seqExpr{
																	pos: position{line: 3071, col: 13, offset: 100162},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3071, col: 13, offset: 100162},
																			expr: &litMatcher{
																				pos:        position{line: 3071, col: 13, offset: 100162},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3071, col: 18, offset: 100167},
																			expr: &charClassMatcher{
																				pos:        position{line: 3071, col: 18, offset: 100167},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 85, col: 35, offset: 2272},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine190,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 86, col: 5, offset: 2284},
													label: "operand",
													expr: &choiceExpr{
														pos: position{line: 101, col: 5, offset: 2895},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 101, col: 6, offset: 2896},
																run: (*parser).callonDocumentRawLine194,
																expr: &litMatcher{
																	pos:        position{line: 101, col: 6, offset: 2896},
																	val:        "==",
																	ignoreCase: false,
																	want:       "\"==\"",
																},
															},
															&actionExpr{
																pos: position{line: 104, col: 8, offset: 2956},
																run: (*parser).callonDocumentRawLine196,
																expr: &litMatcher{
																	pos:        position{line: 104, col: 8, offset: 2956},
																	val:        "!=",
																	ignoreCase: false,
																	want:       "\"!=\"",
																},
															},
															&actionExpr{
																pos: position{line: 107, col: 8, offset: 3019},
																run: (*parser).callonDocumentRawLine198,
																expr: &litMatcher{
																	pos:        position{line: 107, col: 8, offset: 3019},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 110, col: 8, offset: 3081},
																run: (*parser).callonDocumentRawLine200,
																expr: &litMatcher{
																	pos:        position{line: 110, col: 8, offset: 3081},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 113, col: 8, offset: 3147},
																run: (*parser).callonDocumentRawLine202,
																expr: &litMatcher{
																	pos:        position{line: 113, col: 8, offset: 3147},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 116, col: 8, offset: 3212},
																run: (*parser).callonDocumentRawLine204,
																expr: &litMatcher{
																	pos:        position{line: 116, col: 8, offset: 3212},
																	val:        ">=",
																	ignoreCase: false,
																	want:       "\">=\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 86, col: 39, offset: 2318},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine207,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 87, col: 5, offset: 2330},
													label: "right",
													expr: &choiceExpr{
														pos: position{line: 93, col: 5, offset: 2505},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 93, col: 6, offset: 2506},
																run: (*parser).callonDocumentRawLine211,
																expr: &seqExpr{
																	pos: position{line: 93, col: 6, offset: 2506},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 6, offset: 2506},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 11, offset: 2511},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 650, col: 5, offset: 20804},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonDocumentRawLine216,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine220,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonDocumentRawLine226,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine230,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 39, offset: 2539},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2570},
																run: (*parser).callonDocumentRawLine237,
																expr: &seqExpr{
																	pos: position{line: 94, col: 8, offset: 2570},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 94, col: 8, offset: 2570},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 94, col: 12, offset: 2574},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 650, col: 5, offset: 20804},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonDocumentRawLine242,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine246,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonDocumentRawLine252,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine256,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 94, col: 40, offset: 2602},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2632},
																run: (*parser).callonDocumentRawLine263,
																expr: &labeledExpr{
																	pos:   position{line: 95, col: 8, offset: 2632},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 650, col: 5, offset: 20804},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 650, col: 5, offset: 20804},
																				run: (*parser).callonDocumentRawLine266,
																				expr: &seqExpr{
																					pos: position{line: 650, col: 5, offset: 20804},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 650, col: 5, offset: 20804},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 650, col: 13, offset: 20812},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine270,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 650, col: 32, offset: 20831},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 657, col: 5, offset: 21072},
																				run: (*parser).callonDocumentRawLine276,
																				expr: &seqExpr{
																					pos: position{line: 657, col: 5, offset: 21072},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 657, col: 5, offset: 21072},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 657, col: 9, offset: 21076},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine280,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 657, col: 28, offset: 21095},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2686},
																run: (*parser).callonDocumentRawLine286,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2686},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2686},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 13, offset: 2691},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 16, offset: 2694},
																				run: (*parser).callonDocumentRawLine290,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 16, offset: 2694},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 16, offset: 2694},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 63, offset: 2741},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 97, col: 8, offset: 2772},
																run: (*parser).callonDocumentRawLine294,
																expr: &seqExpr{
																	pos: position{line: 97, col: 8, offset: 2772},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 97, col: 8, offset: 2772},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 97, col: 12, offset: 2776},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 97, col: 15, offset: 2779},
																				run: (*parser).callonDocumentRawLine298,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 97, col: 15, offset: 2779},
																					expr: &charClassMatcher{
																						pos:        position{line: 97, col: 15, offset: 2779},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 97, col: 62, offset: 2826},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3071, col: 12, offset: 100161},
																run: (*parser).callonDocumentRawLine302,
																expr: &seqExpr{
																	pos: position{line: 3071, col: 13, offset: 100162},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3071, col: 13, offset: 100162},
																			expr: &litMatcher{
																				pos:        position{line: 3071, col: 13, offset: 100162},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3071, col: 18, offset: 100167},
																			expr: &charClassMatcher{
																				pos:        position{line: 3071, col: 18, offset: 100167},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 87, col: 36, offset: 2361},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 88, col: 5, offset: 2370},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine310,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 124, col: 10, offset: 3339},
										run: (*parser).callonDocumentRawLine314,
										expr: &seqExpr{
											pos: position{line: 124, col: 10, offset: 3339},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 124, col: 10, offset: 3339},
													val:        "endif::",
													ignoreCase: false,
													want:       "\"endif::\"",
												},
												&labeledExpr{
													pos:   position{line: 124, col: 20, offset: 3349},
													label: "name",
													expr: &zeroOrOneExpr{
														pos: position{line: 124, col: 25, offset: 3354},
														expr: &actionExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															run: (*parser).callonDocumentRawLine319,
															expr: &oneOrMoreExpr{
																pos: position{line: 128, col: 28, offset: 3562},
																expr: &charClassMatcher{
																	pos:        position{line: 128, col: 28, offset: 3562},
																	val:        "[^\\r\\n []",
																	chars:      []rune{'\r', '\n', ' ', '['},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 124, col: 52, offset: 3381},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 124, col: 56, offset: 3385},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 124, col: 61, offset: 3390},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine325,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 124, col: 94, offset: 3423},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 124, col: 98, offset: 3427},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentRawLine330,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 729, col: 5, offset: 23561},
										run: (*parser).callonDocumentRawLine334,
										expr: &seqExpr{
											pos: position{line: 729, col: 5, offset: 23561},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 729, col: 5, offset: 23561},
													expr: &charClassMatcher{
														pos:        position{line: 2993, col: 13, offset: 97650},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 730, col: 5, offset: 23591},
													label: "delimiter",
													expr: &choiceExpr{
														pos: position{line: 731, col: 9, offset: 23611},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 744, col: 26, offset: 24098},
																run: (*parser).callonDocumentRawLine340,
																expr: &seqExpr{
																	pos: position{line: 744, col: 26, offset: 24098},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 744, col: 26, offset: 24098},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 744, col: 33, offset: 24105},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine344,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine347,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 748, col: 26, offset: 24212},
																run: (*parser).callonDocumentRawLine354,
																expr: &seqExpr{
																	pos: position{line: 748, col: 26, offset: 24212},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 748, col: 26, offset: 24212},
																			val:        "====",
																			ignoreCase: false,
																			want:       "\"====\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 748, col: 33, offset: 24219},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine358,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine361,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 756, col: 26, offset: 24437},
																run: (*parser).callonDocumentRawLine368,
																expr: &seqExpr{
																	pos: position{line: 756, col: 26, offset: 24437},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 756, col: 26, offset: 24437},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 756, col: 32, offset: 24443},
																			label: "language",
																			expr: &actionExpr{
																				pos: position{line: 760, col: 13, offset: 24573},
																				run: (*parser).callonDocumentRawLine372,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 760, col: 14, offset: 24574},
																					expr: &charClassMatcher{
																						pos:        position{line: 760, col: 14, offset: 24574},
																						val:        "[^\\r\\n ]",
																						chars:      []rune{'\r', '\n', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 756, col: 52, offset: 24463},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine376,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine379,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 752, col: 25, offset: 24325},
																run: (*parser).callonDocumentRawLine386,
																expr: &seqExpr{
																	pos: position{line: 752, col: 25, offset: 24325},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 752, col: 25, offset: 24325},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 752, col: 31, offset: 24331},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine390,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine393,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 764, col: 26, offset: 24646},
																run: (*parser).callonDocumentRawLine400,
																expr: &seqExpr{
																	pos: position{line: 764, col: 26, offset: 24646},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 764, col: 26, offset: 24646},
																			val:        "----",
																			ignoreCase: false,
																			want:       "\"----\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 764, col: 33, offset: 24653},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine404,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine407,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 768, col: 26, offset: 24760},
																run: (*parser).callonDocumentRawLine414,
																expr: &seqExpr{
																	pos: position{line: 768, col: 26, offset: 24760},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 768, col: 26, offset: 24760},
																			val:        "....",
																			ignoreCase: false,
																			want:       "\"....\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 768, col: 33, offset: 24767},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine418,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine421,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 772, col: 30, offset: 24878},
																run: (*parser).callonDocumentRawLine428,
																expr: &seqExpr{
																	pos: position{line: 772, col: 30, offset: 24878},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 772, col: 30, offset: 24878},
																			val:        "++++",
																			ignoreCase: false,
																			want:       "\"++++\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 772, col: 37, offset: 24885},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine432,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine435,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 776, col: 24, offset: 24994},
																run: (*parser).callonDocumentRawLine442,
																expr: &seqExpr{
																	pos: position{line: 776, col: 24, offset: 24994},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 776, col: 24, offset: 24994},
																			val:        "____",
																			ignoreCase: false,
																			want:       "\"____\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 776, col: 31, offset: 25001},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine446,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine449,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 780, col: 26, offset: 25106},
																run: (*parser).callonDocumentRawLine456,
																expr: &seqExpr{
																	pos: position{line: 780, col: 26, offset: 25106},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 780, col: 26, offset: 25106},
																			val:        "****",
																			ignoreCase: false,
																			want:       "\"****\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 780, col: 33, offset: 25113},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonDocumentRawLine460,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentRawLine463,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 43, col: 5, offset: 940},
										run: (*parser).callonDocumentRawLine470,
										expr: &seqExpr{
											pos: position{line: 43, col: 5, offset: 940},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 43, col: 5, offset: 940},
													run: (*parser).callonDocumentRawLine472,
												},
												&andCodeExpr{
													pos: position{line: 47, col: 5, offset: 1084},
													run: (*parser).callonDocumentRawLine473,
												},
												&labeledExpr{
													pos:   position{line: 50, col: 5, offset: 1147},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 50, col: 12, offset: 1154},
														run: (*parser).callonDocumentRawLine475,
														expr: &oneOrMoreExpr{
															pos: position{line: 50, col: 12, offset: 1154},
															expr: &litMatcher{
																pos:        position{line: 50, col: 13, offset: 1155},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 54, col: 5, offset: 1263},
													run: (*parser).callonDocumentRawLine478,
												},
												&actionExpr{
													pos: position{line: 3083, col: 11, offset: 100401},
													run: (*parser).callonDocumentRawLine479,
													expr: &oneOrMoreExpr{
														pos: position{line: 3083, col: 11, offset: 100401},
														expr: &charClassMatcher{
															pos:        position{line: 3083, col: 12, offset: 100402},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 58, col: 12, offset: 1422},
													expr: &charClassMatcher{
														pos:        position{line: 58, col: 12, offset: 1422},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3092, col: 8, offset: 100608},
							expr: &anyMatcher{
								line: 3092, col: 9, offset: 100609,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 135, col: 1, offset: 3762},
			expr: &actionExpr{
				pos: position{line: 136, col: 5, offset: 3784},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 136, col: 5, offset: 3784},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 136, col: 5, offset: 3784},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 137, col: 9, offset: 3799},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 137, col: 9, offset: 3799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 137, col: 9, offset: 3799},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 138, col: 9, offset: 3820},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 3035, col: 17, offset: 98952},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 3035, col: 17, offset: 98952},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3035, col: 22, offset: 98957},
														expr: &choiceExpr{
															pos: position{line: 3035, col: 23, offset: 98958},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 3050, col: 5, offset: 99414},
																	run: (*parser).callonFileInclusion12,
																	expr: &seqExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 3050, col: 5, offset: 99414},
																				expr: &litMatcher{
																					pos:        position{line: 3050, col: 6, offset: 99415},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 3051, col: 5, offset: 99439},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3051, col: 14, offset: 99448},
																					expr: &choiceExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3052, col: 9, offset: 99458},
																								run: (*parser).callonFileInclusion19,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 3052, col: 9, offset: 99458},
																									expr: &charClassMatcher{
																										pos:        position{line: 3052, col: 10, offset: 99459},
																										val:        "[^\\r\\n[]�{.,;?!<> ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 3055, col: 11, offset: 99724},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 3025, col: 25, offset: 98695},
																										run: (*parser).callonFileInclusion23,
																										expr: &charClassMatcher{
																											pos:        position{line: 3025, col: 25, offset: 98695},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 3055, col: 32, offset: 99745},
																										expr: &notExpr{
																											pos: position{line: 3055, col: 34, offset: 99747},
																											expr: &choiceExpr{
																												pos: position{line: 3055, col: 36, offset: 99749},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 3092, col: 8, offset: 100608},
																														expr: &anyMatcher{
																															line: 3092, col: 9, offset: 100609,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonFileInclusion30,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 641, col: 5, offset: 20597},
																								run: (*parser).callonFileInclusion32,
																								expr: &seqExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 641, col: 5, offset: 20597},
																											run: (*parser).callonFileInclusion34,
																										},
																										&labeledExpr{
																											pos:   position{line: 644, col: 5, offset: 20666},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 644, col: 14, offset: 20675},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 664, col: 25, offset: 21328},
																														run: (*parser).callonFileInclusion37,
																														expr: &seqExpr{
																															pos: position{line: 664, col: 25, offset: 21328},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 664, col: 25, offset: 21328},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 37, offset: 21340},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion41,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 56, offset: 21359},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 664, col: 62, offset: 21365},
																																		expr: &actionExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			run: (*parser).callonFileInclusion48,
																																			expr: &seqExpr{
																																				pos: position{line: 672, col: 17, offset: 21660},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 672, col: 17, offset: 21660},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 672, col: 21, offset: 21664},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 672, col: 28, offset: 21671},
																																									run: (*parser).callonFileInclusion53,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 672, col: 28, offset: 21671},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									run: (*parser).callonFileInclusion55,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 674, col: 9, offset: 21725},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 674, col: 9, offset: 21725},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 664, col: 78, offset: 21381},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 668, col: 25, offset: 21499},
																														run: (*parser).callonFileInclusion59,
																														expr: &seqExpr{
																															pos: position{line: 668, col: 25, offset: 21499},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 668, col: 25, offset: 21499},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 668, col: 38, offset: 21512},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion63,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 668, col: 57, offset: 21531},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 668, col: 63, offset: 21537},
																																		expr: &actionExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			run: (*parser).callonFileInclusion70,
																																			expr: &seqExpr{
																																				pos: position{line: 672, col: 17, offset: 21660},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 672, col: 17, offset: 21660},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 672, col: 21, offset: 21664},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 672, col: 28, offset: 21671},
																																									run: (*parser).callonFileInclusion75,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 672, col: 28, offset: 21671},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									run: (*parser).callonFileInclusion77,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 674, col: 9, offset: 21725},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 674, col: 9, offset: 21725},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 668, col: 79, offset: 21553},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 650, col: 5, offset: 20804},
																														run: (*parser).callonFileInclusion81,
																														expr: &seqExpr{
																															pos: position{line: 650, col: 5, offset: 20804},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 650, col: 5, offset: 20804},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 650, col: 13, offset: 20812},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion85,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 650, col: 32, offset: 20831},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 657, col: 5, offset: 21072},
																														run: (*parser).callonFileInclusion91,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 5, offset: 21072},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 5, offset: 21072},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 9, offset: 21076},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion95,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 28, offset: 21095},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2764, col: 5, offset: 90546},
																								run: (*parser).callonFileInclusion101,
																								expr: &seqExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2764, col: 5, offset: 90546},
																											run: (*parser).callonFileInclusion103,
																										},
																										&labeledExpr{
																											pos:   position{line: 2767, col: 5, offset: 90622},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2769, col: 9, offset: 90720},
																														run: (*parser).callonFileInclusion106,
																														expr: &choiceExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 692, col: 27, offset: 22379},
																																	run: (*parser).callonFileInclusion108,
																																	expr: &seqExpr{
																																		pos: position{line: 692, col: 27, offset: 22379},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 692, col: 27, offset: 22379},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 692, col: 32, offset: 22384},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3064, col: 7, offset: 99986},
																																					run: (*parser).callonFileInclusion112,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3064, col: 7, offset: 99986},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3064, col: 7, offset: 99986},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 692, col: 40, offset: 22392},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonFileInclusion116,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 692, col: 47, offset: 22399},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 692, col: 51, offset: 22403},
																																				label: "label",
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 702, col: 24, offset: 22804},
																																					expr: &choiceExpr{
																																						pos: position{line: 703, col: 5, offset: 22810},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 703, col: 6, offset: 22811},
																																								run: (*parser).callonFileInclusion122,
																																								expr: &seqExpr{
																																									pos: position{line: 703, col: 6, offset: 22811},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 703, col: 6, offset: 22811},
																																											val:        "[0-9\\pL]",
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 703, col: 14, offset: 22819},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 703, col: 14, offset: 22819},
																																												val:        "[^\\r\\n{<>]",
																																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 650, col: 5, offset: 20804},
																																								run: (*parser).callonFileInclusion127,
																																								expr: &seqExpr{
																																									pos: position{line: 650, col: 5, offset: 20804},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 650, col: 5, offset: 20804},
																																											val:        "\\{",
																																											ignoreCase: false,
																																											want:       "\"\\\\{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 650, col: 13, offset: 20812},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonFileInclusion131,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 650, col: 32, offset: 20831},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 657, col: 5, offset: 21072},
																																								run: (*parser).callonFileInclusion137,
																																								expr: &seqExpr{
																																									pos: position{line: 657, col: 5, offset: 21072},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 657, col: 5, offset: 21072},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 657, col: 9, offset: 21076},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonFileInclusion141,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 657, col: 28, offset: 21095},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 707, col: 8, offset: 23045},
																																								run: (*parser).callonFileInclusion147,
																																								expr: &litMatcher{
																																									pos:        position{line: 707, col: 8, offset: 23045},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 692, col: 79, offset: 22431},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 694, col: 9, offset: 22504},
																																	run: (*parser).callonFileInclusion150,
																																	expr: &seqExpr{
																																		pos: position{line: 694, col: 9, offset: 22504},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 694, col: 9, offset: 22504},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 694, col: 14, offset: 22509},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3064, col: 7, offset: 99986},
																																					run: (*parser).callonFileInclusion154,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3064, col: 7, offset: 99986},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3064, col: 7, offset: 99986},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 694, col: 22, offset: 22517},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2772, col: 11, offset: 90824},
																														run: (*parser).callonFileInclusion158,
																														expr: &charClassMatcher{
																															pos:        position{line: 2772, col: 12, offset: 90825},
																															val:        "[<>&]",
																															chars:      []rune{'<', '>', '&'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 3058, col: 11, offset: 99830},
																								run: (*parser).callonFileInclusion160,
																								expr: &litMatcher{
																									pos:        position{line: 3058, col: 11, offset: 99830},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1141, col: 23, offset: 35577},
																	run: (*parser).callonFileInclusion162,
																	expr: &seqExpr{
																		pos: position{line: 1141, col: 23, offset: 35577},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1139, col: 32, offset: 35545},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1141, col: 51, offset: 35605},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1141, col: 56, offset: 35610},
																					run: (*parser).callonFileInclusion166,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1141, col: 56, offset: 35610},
																						expr: &charClassMatcher{
																							pos:        position{line: 1141, col: 56, offset: 35610},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1139, col: 32, offset: 35545},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 139, col: 9, offset: 3849},
											label: "attributes",
											expr: &ruleRefExpr{
												pos:  position{line: 139, col: 21, offset: 3861},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 5, offset: 4016},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonFileInclusion173,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3095, col: 8, offset: 100658},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonFileInclusion176,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3092, col: 8, offset: 100608},
									expr: &anyMatcher{
										line: 3092, col: 9, offset: 100609,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 150, col: 1, offset: 4149},
			expr: &actionExpr{
				pos: position{line: 150, col: 15, offset: 4163},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 150, col: 15, offset: 4163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 15, offset: 4163},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 150, col: 22, offset: 4170},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 157, col: 23, offset: 4353},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 157, col: 23, offset: 4353},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 23, offset: 4353},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 157, col: 30, offset: 4360},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 166, col: 19, offset: 4718},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 166, col: 19, offset: 4718},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 166, col: 19, offset: 4718},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 3071, col: 12, offset: 100161},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 3071, col: 13, offset: 100162},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3071, col: 13, offset: 100162},
																							expr: &litMatcher{
																								pos:        position{line: 3071, col: 13, offset: 100162},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 3071, col: 18, offset: 100167},
																							expr: &charClassMatcher{
																								pos:        position{line: 3071, col: 18, offset: 100167},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 166, col: 35, offset: 4734},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 166, col: 40, offset: 4739},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 3071, col: 12, offset: 100161},
																				run: (*parser).callonLineRanges20,
																				expr: &seqExpr{
																					pos: position{line: 3071, col: 13, offset: 100162},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3071, col: 13, offset: 100162},
																							expr: &litMatcher{
																								pos:        position{line: 3071, col: 13, offset: 100162},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 3071, col: 18, offset: 100167},
																							expr: &charClassMatcher{
																								pos:        position{line: 3071, col: 18, offset: 100167},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 170, col: 20, offset: 4860},
																run: (*parser).callonLineRanges26,
																expr: &labeledExpr{
																	pos:   position{line: 170, col: 20, offset: 4860},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 3071, col: 12, offset: 100161},
																		run: (*parser).callonLineRanges28,
																		expr: &seqExpr{
																			pos: position{line: 3071, col: 13, offset: 100162},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3071, col: 13, offset: 100162},
																					expr: &litMatcher{
																						pos:        position{line: 3071, col: 13, offset: 100162},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 3071, col: 18, offset: 100167},
																					expr: &charClassMatcher{
																						pos:        position{line: 3071, col: 18, offset: 100167},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 158, col: 5, offset: 4399},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 158, col: 12, offset: 4406},
														expr: &actionExpr{
															pos: position{line: 159, col: 9, offset: 4416},
															run: (*parser).callonLineRanges36,
															expr: &seqExpr{
																pos: position{line: 159, col: 9, offset: 4416},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 159, col: 10, offset: 4417},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 160, col: 9, offset: 4534},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 160, col: 16, offset: 4541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 166, col: 19, offset: 4718},
																					run: (*parser).callonLineRanges41,
																					expr: &seqExpr{
																						pos: position{line: 166, col: 19, offset: 4718},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 166, col: 19, offset: 4718},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 3071, col: 12, offset: 100161},
																									run: (*parser).callonLineRanges44,
																									expr: &seqExpr{
																										pos: position{line: 3071, col: 13, offset: 100162},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3071, col: 13, offset: 100162},
																												expr: &litMatcher{
																													pos:        position{line: 3071, col: 13, offset: 100162},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 3071, col: 18, offset: 100167},
																												expr: &charClassMatcher{
																													pos:        position{line: 3071, col: 18, offset: 100167},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 166, col: 35, offset: 4734},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 166, col: 40, offset: 4739},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 3071, col: 12, offset: 100161},
																									run: (*parser).callonLineRanges52,
																									expr: &seqExpr{
																										pos: position{line: 3071, col: 13, offset: 100162},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3071, col: 13, offset: 100162},
																												expr: &litMatcher{
																													pos:        position{line: 3071, col: 13, offset: 100162},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 3071, col: 18, offset: 100167},
																												expr: &charClassMatcher{
																													pos:        position{line: 3071, col: 18, offset: 100167},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 170, col: 20, offset: 4860},
																					run: (*parser).callonLineRanges58,
																					expr: &labeledExpr{
																						pos:   position{line: 170, col: 20, offset: 4860},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 3071, col: 12, offset: 100161},
																							run: (*parser).callonLineRanges60,
																							expr: &seqExpr{
																								pos: position{line: 3071, col: 13, offset: 100162},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3071, col: 13, offset: 100162},
																										expr: &litMatcher{
																											pos:        position{line: 3071, col: 13, offset: 100162},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 3071, col: 18, offset: 100167},
																										expr: &charClassMatcher{
																											pos:        position{line: 3071, col: 18, offset: 100167},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 166, col: 19, offset: 4718},
										run: (*parser).callonLineRanges66,
										expr: &seqExpr{
											pos: position{line: 166, col: 19, offset: 4718},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 166, col: 19, offset: 4718},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 3071, col: 12, offset: 100161},
														run: (*parser).callonLineRanges69,
														expr: &seqExpr{
															pos: position{line: 3071, col: 13, offset: 100162},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3071, col: 13, offset: 100162},
																	expr: &litMatcher{
																		pos:        position{line: 3071, col: 13, offset: 100162},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 3071, col: 18, offset: 100167},
																	expr: &charClassMatcher{
																		pos:        position{line: 3071, col: 18, offset: 100167},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 166, col: 35, offset: 4734},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 166, col: 40, offset: 4739},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 3071, col: 12, offset: 100161},
														run: (*parser).callonLineRanges77,
														expr: &seqExpr{
															pos: position{line: 3071, col: 13, offset: 100162},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3071, col: 13, offset: 100162},
																	expr: &litMatcher{
																		pos:        position{line: 3071, col: 13, offset: 100162},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 3071, col: 18, offset: 100167},
																	expr: &charClassMatcher{
																		pos:        position{line: 3071, col: 18, offset: 100167},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 170, col: 20, offset: 4860},
										run: (*parser).callonLineRanges83,
										expr: &labeledExpr{
											pos:   position{line: 170, col: 20, offset: 4860},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 3071, col: 12, offset: 100161},
												run: (*parser).callonLineRanges85,
												expr: &seqExpr{
													pos: position{line: 3071, col: 13, offset: 100162},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3071, col: 13, offset: 100162},
															expr: &litMatcher{
																pos:        position{line: 3071, col: 13, offset: 100162},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 3071, col: 18, offset: 100167},
															expr: &charClassMatcher{
																pos:        position{line: 3071, col: 18, offset: 100167},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3092, col: 8, offset: 100608},
							expr: &anyMatcher{
								line: 3092, col: 9, offset: 100609,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 175, col: 1, offset: 4996},
			expr: &actionExpr{
				pos: position{line: 175, col: 14, offset: 5009},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 175, col: 14, offset: 5009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 175, col: 14, offset: 5009},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 179, col: 22, offset: 5146},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 179, col: 22, offset: 5146},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 179, col: 22, offset: 5146},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 188, col: 13, offset: 5456},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 188, col: 13, offset: 5456},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 188, col: 13, offset: 5456},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 188, col: 18, offset: 5461},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2997, col: 14, offset: 97724},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2997, col: 14, offset: 97724},
																			expr: &charClassMatcher{
																				pos:        position{line: 2997, col: 14, offset: 97724},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 194, col: 16, offset: 5661},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 194, col: 16, offset: 5661},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 194, col: 16, offset: 5661},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 194, col: 23, offset: 5668},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 194, col: 23, offset: 5668},
																							expr: &litMatcher{
																								pos:        position{line: 194, col: 24, offset: 5669},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 197, col: 5, offset: 5723},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 190, col: 9, offset: 5549},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 190, col: 9, offset: 5549},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 190, col: 9, offset: 5549},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 190, col: 13, offset: 5553},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 190, col: 18, offset: 5558},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2997, col: 14, offset: 97724},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2997, col: 14, offset: 97724},
																					expr: &charClassMatcher{
																						pos:        position{line: 2997, col: 14, offset: 97724},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 194, col: 16, offset: 5661},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 194, col: 16, offset: 5661},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 194, col: 16, offset: 5661},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 194, col: 23, offset: 5668},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 194, col: 23, offset: 5668},
																									expr: &litMatcher{
																										pos:        position{line: 194, col: 24, offset: 5669},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 197, col: 5, offset: 5723},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 180, col: 5, offset: 5167},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 180, col: 12, offset: 5174},
												expr: &actionExpr{
													pos: position{line: 181, col: 9, offset: 5184},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 181, col: 9, offset: 5184},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 181, col: 10, offset: 5185},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 182, col: 9, offset: 5302},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 188, col: 13, offset: 5456},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 188, col: 13, offset: 5456},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 188, col: 13, offset: 5456},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 188, col: 18, offset: 5461},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2997, col: 14, offset: 97724},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2997, col: 14, offset: 97724},
																								expr: &charClassMatcher{
																									pos:        position{line: 2997, col: 14, offset: 97724},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 194, col: 16, offset: 5661},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 194, col: 16, offset: 5661},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 194, col: 16, offset: 5661},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 194, col: 23, offset: 5668},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 194, col: 23, offset: 5668},
																												expr: &litMatcher{
																													pos:        position{line: 194, col: 24, offset: 5669},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 197, col: 5, offset: 5723},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 190, col: 9, offset: 5549},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 190, col: 9, offset: 5549},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 190, col: 9, offset: 5549},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 190, col: 13, offset: 5553},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 190, col: 18, offset: 5558},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2997, col: 14, offset: 97724},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2997, col: 14, offset: 97724},
																										expr: &charClassMatcher{
																											pos:        position{line: 2997, col: 14, offset: 97724},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 194, col: 16, offset: 5661},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 194, col: 16, offset: 5661},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 194, col: 16, offset: 5661},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 194, col: 23, offset: 5668},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 194, col: 23, offset: 5668},
																														expr: &litMatcher{
																															pos:        position{line: 194, col: 24, offset: 5669},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 197, col: 5, offset: 5723},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3092, col: 8, offset: 100608},
							expr: &anyMatcher{
								line: 3092, col: 9, offset: 100609,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 204, col: 1, offset: 5890},
			expr: &actionExpr{
				pos: position{line: 204, col: 21, offset: 5910},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 204, col: 21, offset: 5910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 204, col: 21, offset: 5910},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 29, offset: 5918},
								expr: &choiceExpr{
									pos: position{line: 204, col: 30, offset: 5919},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 208, col: 25, offset: 6099},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 208, col: 25, offset: 6099},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 208, col: 25, offset: 6099},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 208, col: 33, offset: 6107},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 208, col: 38, offset: 6112},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2997, col: 14, offset: 97724},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2997, col: 14, offset: 97724},
																	expr: &charClassMatcher{
																		pos:        position{line: 2997, col: 14, offset: 97724},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 208, col: 78, offset: 6152},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 212, col: 23, offset: 6247},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 212, col: 23, offset: 6247},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 212, col: 23, offset: 6247},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 212, col: 31, offset: 6255},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 212, col: 36, offset: 6260},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2997, col: 14, offset: 97724},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2997, col: 14, offset: 97724},
																	expr: &charClassMatcher{
																		pos:        position{line: 2997, col: 14, offset: 97724},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 212, col: 76, offset: 6300},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 204, col: 74, offset: 5963},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 204, col: 74, offset: 5963,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3095, col: 8, offset: 100658},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3092, col: 8, offset: 100608},
									expr: &anyMatcher{
										line: 3092, col: 9, offset: 100609,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 228, col: 1, offset: 6786},
			expr: &actionExpr{
				pos: position{line: 229, col: 5, offset: 6810},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 229, col: 5, offset: 6810},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 229, col: 5, offset: 6810},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 5, offset: 6819},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 230, col: 16, offset: 6830},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 17, offset: 6831},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 5, offset: 6853},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 13, offset: 6861},
								expr: &choiceExpr{
									pos: position{line: 232, col: 9, offset: 6871},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 232, col: 9, offset: 6871},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 233, col: 11, offset: 6932},
											name: "UserMacroBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 234, col: 11, offset: 6997},
											name: "ShortcutParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 235, col: 11, offset: 7025},
											name: "DocumentHeader",
										},
										&ruleRefExpr{
											pos:  position{line: 236, col: 11, offset: 7105},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 364, col: 19, offset: 11171},
											run: (*parser).callonDocumentFragment17,
											expr: &seqExpr{
												pos: position{line: 364, col: 19, offset: 11171},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 364, col: 19, offset: 11171},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 364, col: 24, offset: 11176},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															run: (*parser).callonDocumentFragment21,
															expr: &seqExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 324, col: 18, offset: 10072},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 324, col: 28, offset: 10082},
																		expr: &charClassMatcher{
																			pos:        position{line: 324, col: 29, offset: 10083},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 364, col: 45, offset: 11197},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 364, col: 49, offset: 11201},
														expr: &actionExpr{
															pos: position{line: 3079, col: 10, offset: 100334},
															run: (*parser).callonDocumentFragment28,
															expr: &charClassMatcher{
																pos:        position{line: 3079, col: 11, offset: 100335},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment31,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 366, col: 5, offset: 11284},
											run: (*parser).callonDocumentFragment38,
											expr: &seqExpr{
												pos: position{line: 366, col: 5, offset: 11284},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 366, col: 5, offset: 11284},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 366, col: 9, offset: 11288},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															run: (*parser).callonDocumentFragment42,
															expr: &seqExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 324, col: 18, offset: 10072},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 324, col: 28, offset: 10082},
																		expr: &charClassMatcher{
																			pos:        position{line: 324, col: 29, offset: 10083},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 366, col: 30, offset: 11309},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 366, col: 35, offset: 11314},
														expr: &actionExpr{
															pos: position{line: 3079, col: 10, offset: 100334},
															run: (*parser).callonDocumentFragment49,
															expr: &charClassMatcher{
																pos:        position{line: 3079, col: 11, offset: 100335},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment52,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 683, col: 14, offset: 22026},
											run: (*parser).callonDocumentFragment59,
											expr: &seqExpr{
												pos: position{line: 683, col: 14, offset: 22026},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														expr: &notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 683, col: 19, offset: 22031},
														expr: &actionExpr{
															pos: position{line: 3079, col: 10, offset: 100334},
															run: (*parser).callonDocumentFragment65,
															expr: &charClassMatcher{
																pos:        position{line: 3079, col: 11, offset: 100335},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment68,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2633, col: 5, offset: 86740},
											run: (*parser).callonDocumentFragment75,
											expr: &seqExpr{
												pos: position{line: 2633, col: 5, offset: 86740},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2633, col: 5, offset: 86740},
														run: (*parser).callonDocumentFragment77,
													},
													&labeledExpr{
														pos:   position{line: 2636, col: 5, offset: 86803},
														label: "level",
														expr: &actionExpr{
															pos: position{line: 2636, col: 12, offset: 86810},
															run: (*parser).callonDocumentFragment79,
															expr: &oneOrMoreExpr{
																pos: position{line: 2636, col: 12, offset: 86810},
																expr: &litMatcher{
																	pos:        position{line: 2636, col: 13, offset: 86811},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 2640, col: 5, offset: 86919},
														run: (*parser).callonDocumentFragment82,
													},
													&actionExpr{
														pos: position{line: 3083, col: 11, offset: 100401},
														run: (*parser).callonDocumentFragment83,
														expr: &oneOrMoreExpr{
															pos: position{line: 3083, col: 11, offset: 100401},
															expr: &charClassMatcher{
																pos:        position{line: 3083, col: 12, offset: 100402},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2644, col: 12, offset: 87078},
														label: "title",
														expr: &actionExpr{
															pos: position{line: 2648, col: 17, offset: 87197},
															run: (*parser).callonDocumentFragment87,
															expr: &oneOrMoreExpr{
																pos: position{line: 2648, col: 17, offset: 87197},
																expr: &charClassMatcher{
																	pos:        position{line: 2648, col: 17, offset: 87197},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment91,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 796, col: 5, offset: 25530},
											run: (*parser).callonDocumentFragment98,
											expr: &seqExpr{
												pos: position{line: 796, col: 5, offset: 25530},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 744, col: 26, offset: 24098},
														run: (*parser).callonDocumentFragment100,
														expr: &seqExpr{
															pos: position{line: 744, col: 26, offset: 24098},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 744, col: 26, offset: 24098},
																	val:        "////",
																	ignoreCase: false,
																	want:       "\"////\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 744, col: 33, offset: 24105},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment104,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment107,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 797, col: 5, offset: 25561},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 808, col: 5, offset: 25885},
															expr: &actionExpr{
																pos: position{line: 808, col: 6, offset: 25886},
																run: (*parser).callonDocumentFragment116,
																expr: &seqExpr{
																	pos: position{line: 808, col: 6, offset: 25886},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 808, col: 6, offset: 25886},
																			expr: &choiceExpr{
																				pos: position{line: 805, col: 29, offset: 25828},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 744, col: 26, offset: 24098},
																						run: (*parser).callonDocumentFragment120,
																						expr: &seqExpr{
																							pos: position{line: 744, col: 26, offset: 24098},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 744, col: 26, offset: 24098},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 744, col: 33, offset: 24105},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment124,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment127,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 809, col: 5, offset: 25916},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment137,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment143,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment147,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 798, col: 5, offset: 25595},
														expr: &choiceExpr{
															pos: position{line: 805, col: 29, offset: 25828},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 744, col: 26, offset: 24098},
																	run: (*parser).callonDocumentFragment156,
																	expr: &seqExpr{
																		pos: position{line: 744, col: 26, offset: 24098},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 744, col: 26, offset: 24098},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 744, col: 33, offset: 24105},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment160,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment163,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 817, col: 5, offset: 26069},
											run: (*parser).callonDocumentFragment172,
											expr: &seqExpr{
												pos: position{line: 817, col: 5, offset: 26069},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 748, col: 26, offset: 24212},
														run: (*parser).callonDocumentFragment174,
														expr: &seqExpr{
															pos: position{line: 748, col: 26, offset: 24212},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 748, col: 26, offset: 24212},
																	val:        "====",
																	ignoreCase: false,
																	want:       "\"====\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 748, col: 33, offset: 24219},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment178,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment181,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 818, col: 5, offset: 26100},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 829, col: 4, offset: 26423},
															expr: &actionExpr{
																pos: position{line: 829, col: 5, offset: 26424},
																run: (*parser).callonDocumentFragment190,
																expr: &seqExpr{
																	pos: position{line: 829, col: 5, offset: 26424},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 829, col: 5, offset: 26424},
																			expr: &choiceExpr{
																				pos: position{line: 826, col: 29, offset: 26367},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 748, col: 26, offset: 24212},
																						run: (*parser).callonDocumentFragment194,
																						expr: &seqExpr{
																							pos: position{line: 748, col: 26, offset: 24212},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 748, col: 26, offset: 24212},
																									val:        "====",
																									ignoreCase: false,
																									want:       "\"====\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 748, col: 33, offset: 24219},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment198,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment201,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 830, col: 5, offset: 26454},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment211,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment217,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment221,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 819, col: 5, offset: 26134},
														expr: &choiceExpr{
															pos: position{line: 826, col: 29, offset: 26367},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 748, col: 26, offset: 24212},
																	run: (*parser).callonDocumentFragment230,
																	expr: &seqExpr{
																		pos: position{line: 748, col: 26, offset: 24212},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 748, col: 26, offset: 24212},
																				val:        "====",
																				ignoreCase: false,
																				want:       "\"====\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 748, col: 33, offset: 24219},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment234,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment237,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 901, col: 5, offset: 28234},
											run: (*parser).callonDocumentFragment246,
											expr: &seqExpr{
												pos: position{line: 901, col: 5, offset: 28234},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 901, col: 5, offset: 28234},
														label: "delimiter",
														expr: &actionExpr{
															pos: position{line: 756, col: 26, offset: 24437},
															run: (*parser).callonDocumentFragment249,
															expr: &seqExpr{
																pos: position{line: 756, col: 26, offset: 24437},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 756, col: 26, offset: 24437},
																		val:        "```",
																		ignoreCase: false,
																		want:       "\"```\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 756, col: 32, offset: 24443},
																		label: "language",
																		expr: &actionExpr{
																			pos: position{line: 760, col: 13, offset: 24573},
																			run: (*parser).callonDocumentFragment253,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 760, col: 14, offset: 24574},
																				expr: &charClassMatcher{
																					pos:        position{line: 760, col: 14, offset: 24574},
																					val:        "[^\\r\\n ]",
																					chars:      []rune{'\r', '\n', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 756, col: 52, offset: 24463},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonDocumentFragment257,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentFragment260,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 902, col: 5, offset: 28280},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 916, col: 5, offset: 28797},
															expr: &actionExpr{
																pos: position{line: 916, col: 6, offset: 28798},
																run: (*parser).callonDocumentFragment269,
																expr: &seqExpr{
																	pos: position{line: 916, col: 6, offset: 28798},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 916, col: 6, offset: 28798},
																			expr: &choiceExpr{
																				pos: position{line: 847, col: 28, offset: 26903},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 752, col: 25, offset: 24325},
																						run: (*parser).callonDocumentFragment273,
																						expr: &seqExpr{
																							pos: position{line: 752, col: 25, offset: 24325},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 752, col: 25, offset: 24325},
																									val:        "```",
																									ignoreCase: false,
																									want:       "\"```\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 752, col: 31, offset: 24331},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment277,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment280,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 917, col: 5, offset: 28833},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment290,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment296,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment300,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 903, col: 5, offset: 28319},
														expr: &choiceExpr{
															pos: position{line: 847, col: 28, offset: 26903},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 752, col: 25, offset: 24325},
																	run: (*parser).callonDocumentFragment309,
																	expr: &seqExpr{
																		pos: position{line: 752, col: 25, offset: 24325},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 752, col: 25, offset: 24325},
																				val:        "```",
																				ignoreCase: false,
																				want:       "\"```\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 752, col: 31, offset: 24331},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment313,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment316,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 838, col: 5, offset: 26607},
											run: (*parser).callonDocumentFragment325,
											expr: &seqExpr{
												pos: position{line: 838, col: 5, offset: 26607},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 752, col: 25, offset: 24325},
														run: (*parser).callonDocumentFragment327,
														expr: &seqExpr{
															pos: position{line: 752, col: 25, offset: 24325},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 752, col: 25, offset: 24325},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 752, col: 31, offset: 24331},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment331,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment334,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 839, col: 5, offset: 26637},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 850, col: 5, offset: 26958},
															expr: &actionExpr{
																pos: position{line: 850, col: 6, offset: 26959},
																run: (*parser).callonDocumentFragment343,
																expr: &seqExpr{
																	pos: position{line: 850, col: 6, offset: 26959},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 850, col: 6, offset: 26959},
																			expr: &choiceExpr{
																				pos: position{line: 847, col: 28, offset: 26903},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 752, col: 25, offset: 24325},
																						run: (*parser).callonDocumentFragment347,
																						expr: &seqExpr{
																							pos: position{line: 752, col: 25, offset: 24325},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 752, col: 25, offset: 24325},
																									val:        "```",
																									ignoreCase: false,
																									want:       "\"```\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 752, col: 31, offset: 24331},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment351,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment354,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 851, col: 5, offset: 26988},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment364,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment370,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment374,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 840, col: 5, offset: 26670},
														expr: &choiceExpr{
															pos: position{line: 847, col: 28, offset: 26903},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 752, col: 25, offset: 24325},
																	run: (*parser).callonDocumentFragment383,
																	expr: &seqExpr{
																		pos: position{line: 752, col: 25, offset: 24325},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 752, col: 25, offset: 24325},
																				val:        "```",
																				ignoreCase: false,
																				want:       "\"```\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 752, col: 31, offset: 24331},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment387,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment390,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 859, col: 5, offset: 27143},
											run: (*parser).callonDocumentFragment399,
											expr: &seqExpr{
												pos: position{line: 859, col: 5, offset: 27143},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 764, col: 26, offset: 24646},
														run: (*parser).callonDocumentFragment401,
														expr: &seqExpr{
															pos: position{line: 764, col: 26, offset: 24646},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 764, col: 26, offset: 24646},
																	val:        "----",
																	ignoreCase: false,
																	want:       "\"----\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 764, col: 33, offset: 24653},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment405,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment408,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 860, col: 5, offset: 27174},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 871, col: 5, offset: 27503},
															expr: &actionExpr{
																pos: position{line: 871, col: 6, offset: 27504},
																run: (*parser).callonDocumentFragment417,
																expr: &seqExpr{
																	pos: position{line: 871, col: 6, offset: 27504},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 871, col: 6, offset: 27504},
																			expr: &choiceExpr{
																				pos: position{line: 868, col: 29, offset: 27446},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 764, col: 26, offset: 24646},
																						run: (*parser).callonDocumentFragment421,
																						expr: &seqExpr{
																							pos: position{line: 764, col: 26, offset: 24646},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 764, col: 26, offset: 24646},
																									val:        "----",
																									ignoreCase: false,
																									want:       "\"----\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 764, col: 33, offset: 24653},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment425,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment428,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 872, col: 5, offset: 27534},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment438,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment444,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment448,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 861, col: 5, offset: 27208},
														expr: &choiceExpr{
															pos: position{line: 868, col: 29, offset: 27446},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 764, col: 26, offset: 24646},
																	run: (*parser).callonDocumentFragment457,
																	expr: &seqExpr{
																		pos: position{line: 764, col: 26, offset: 24646},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 764, col: 26, offset: 24646},
																				val:        "----",
																				ignoreCase: false,
																				want:       "\"----\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 764, col: 33, offset: 24653},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment461,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment464,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 880, col: 5, offset: 27689},
											run: (*parser).callonDocumentFragment473,
											expr: &seqExpr{
												pos: position{line: 880, col: 5, offset: 27689},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 768, col: 26, offset: 24760},
														run: (*parser).callonDocumentFragment475,
														expr: &seqExpr{
															pos: position{line: 768, col: 26, offset: 24760},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 768, col: 26, offset: 24760},
																	val:        "....",
																	ignoreCase: false,
																	want:       "\"....\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 768, col: 33, offset: 24767},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment479,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment482,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 881, col: 5, offset: 27720},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 892, col: 5, offset: 28044},
															expr: &actionExpr{
																pos: position{line: 892, col: 6, offset: 28045},
																run: (*parser).callonDocumentFragment491,
																expr: &seqExpr{
																	pos: position{line: 892, col: 6, offset: 28045},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 892, col: 6, offset: 28045},
																			expr: &choiceExpr{
																				pos: position{line: 889, col: 29, offset: 27987},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 768, col: 26, offset: 24760},
																						run: (*parser).callonDocumentFragment495,
																						expr: &seqExpr{
																							pos: position{line: 768, col: 26, offset: 24760},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 768, col: 26, offset: 24760},
																									val:        "....",
																									ignoreCase: false,
																									want:       "\"....\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 768, col: 33, offset: 24767},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment499,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment502,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 893, col: 5, offset: 28075},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment512,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment518,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment522,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 882, col: 5, offset: 27754},
														expr: &choiceExpr{
															pos: position{line: 889, col: 29, offset: 27987},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 768, col: 26, offset: 24760},
																	run: (*parser).callonDocumentFragment531,
																	expr: &seqExpr{
																		pos: position{line: 768, col: 26, offset: 24760},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 768, col: 26, offset: 24760},
																				val:        "....",
																				ignoreCase: false,
																				want:       "\"....\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 768, col: 33, offset: 24767},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment535,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment538,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 925, col: 5, offset: 29002},
											run: (*parser).callonDocumentFragment547,
											expr: &seqExpr{
												pos: position{line: 925, col: 5, offset: 29002},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 925, col: 5, offset: 29002},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 932, col: 5, offset: 29261},
															run: (*parser).callonDocumentFragment550,
															expr: &seqExpr{
																pos: position{line: 932, col: 5, offset: 29261},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 932, col: 5, offset: 29261},
																		expr: &actionExpr{
																			pos: position{line: 683, col: 14, offset: 22026},
																			run: (*parser).callonDocumentFragment553,
																			expr: &seqExpr{
																				pos: position{line: 683, col: 14, offset: 22026},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 683, col: 14, offset: 22026},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 683, col: 19, offset: 22031},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDocumentFragment559,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonDocumentFragment562,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 933, col: 5, offset: 29276},
																		val:        "> ",
																		ignoreCase: false,
																		want:       "\"> \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 934, col: 5, offset: 29286},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 934, col: 14, offset: 29295},
																			run: (*parser).callonDocumentFragment571,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 934, col: 15, offset: 29296},
																				expr: &charClassMatcher{
																					pos:        position{line: 934, col: 15, offset: 29296},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentFragment575,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 926, col: 5, offset: 29039},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 926, col: 16, offset: 29050},
															expr: &choiceExpr{
																pos: position{line: 926, col: 17, offset: 29051},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 932, col: 5, offset: 29261},
																		run: (*parser).callonDocumentFragment585,
																		expr: &seqExpr{
																			pos: position{line: 932, col: 5, offset: 29261},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 932, col: 5, offset: 29261},
																					expr: &actionExpr{
																						pos: position{line: 683, col: 14, offset: 22026},
																						run: (*parser).callonDocumentFragment588,
																						expr: &seqExpr{
																							pos: position{line: 683, col: 14, offset: 22026},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 683, col: 14, offset: 22026},
																									expr: &notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 683, col: 19, offset: 22031},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment594,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment597,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 933, col: 5, offset: 29276},
																					val:        "> ",
																					ignoreCase: false,
																					want:       "\"> \"",
																				},
																				&labeledExpr{
																					pos:   position{line: 934, col: 5, offset: 29286},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 934, col: 14, offset: 29295},
																						run: (*parser).callonDocumentFragment606,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 934, col: 15, offset: 29296},
																							expr: &charClassMatcher{
																								pos:        position{line: 934, col: 15, offset: 29296},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentFragment610,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1757, col: 5, offset: 57678},
																		run: (*parser).callonDocumentFragment617,
																		expr: &seqExpr{
																			pos: position{line: 1757, col: 5, offset: 57678},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1757, col: 5, offset: 57678},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1757, col: 14, offset: 57687},
																						run: (*parser).callonDocumentFragment620,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1757, col: 14, offset: 57687},
																							expr: &charClassMatcher{
																								pos:        position{line: 1757, col: 14, offset: 57687},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1760, col: 5, offset: 57794},
																					run: (*parser).callonDocumentFragment623,
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentFragment625,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 951, col: 5, offset: 29654},
											run: (*parser).callonDocumentFragment632,
											expr: &seqExpr{
												pos: position{line: 951, col: 5, offset: 29654},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 772, col: 30, offset: 24878},
														run: (*parser).callonDocumentFragment634,
														expr: &seqExpr{
															pos: position{line: 772, col: 30, offset: 24878},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 772, col: 30, offset: 24878},
																	val:        "++++",
																	ignoreCase: false,
																	want:       "\"++++\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 772, col: 37, offset: 24885},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment638,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment641,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 952, col: 5, offset: 29689},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 963, col: 5, offset: 30045},
															expr: &actionExpr{
																pos: position{line: 963, col: 6, offset: 30046},
																run: (*parser).callonDocumentFragment650,
																expr: &seqExpr{
																	pos: position{line: 963, col: 6, offset: 30046},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 963, col: 6, offset: 30046},
																			expr: &choiceExpr{
																				pos: position{line: 960, col: 33, offset: 29980},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 772, col: 30, offset: 24878},
																						run: (*parser).callonDocumentFragment654,
																						expr: &seqExpr{
																							pos: position{line: 772, col: 30, offset: 24878},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 772, col: 30, offset: 24878},
																									val:        "++++",
																									ignoreCase: false,
																									want:       "\"++++\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 772, col: 37, offset: 24885},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment658,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment661,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 964, col: 5, offset: 30080},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment671,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment677,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment681,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 953, col: 5, offset: 29727},
														expr: &choiceExpr{
															pos: position{line: 960, col: 33, offset: 29980},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 772, col: 30, offset: 24878},
																	run: (*parser).callonDocumentFragment690,
																	expr: &seqExpr{
																		pos: position{line: 772, col: 30, offset: 24878},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 772, col: 30, offset: 24878},
																				val:        "++++",
																				ignoreCase: false,
																				want:       "\"++++\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 772, col: 37, offset: 24885},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment694,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment697,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 972, col: 5, offset: 30231},
											run: (*parser).callonDocumentFragment706,
											expr: &seqExpr{
												pos: position{line: 972, col: 5, offset: 30231},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 776, col: 24, offset: 24994},
														run: (*parser).callonDocumentFragment708,
														expr: &seqExpr{
															pos: position{line: 776, col: 24, offset: 24994},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 776, col: 24, offset: 24994},
																	val:        "____",
																	ignoreCase: false,
																	want:       "\"____\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 776, col: 31, offset: 25001},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment712,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment715,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 973, col: 5, offset: 30260},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 984, col: 4, offset: 30567},
															expr: &actionExpr{
																pos: position{line: 984, col: 5, offset: 30568},
																run: (*parser).callonDocumentFragment724,
																expr: &seqExpr{
																	pos: position{line: 984, col: 5, offset: 30568},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 984, col: 5, offset: 30568},
																			expr: &choiceExpr{
																				pos: position{line: 981, col: 27, offset: 30515},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 776, col: 24, offset: 24994},
																						run: (*parser).callonDocumentFragment728,
																						expr: &seqExpr{
																							pos: position{line: 776, col: 24, offset: 24994},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 776, col: 24, offset: 24994},
																									val:        "____",
																									ignoreCase: false,
																									want:       "\"____\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 776, col: 31, offset: 25001},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment732,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment735,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 985, col: 5, offset: 30596},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment745,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment751,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment755,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 974, col: 5, offset: 30292},
														expr: &choiceExpr{
															pos: position{line: 981, col: 27, offset: 30515},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 776, col: 24, offset: 24994},
																	run: (*parser).callonDocumentFragment764,
																	expr: &seqExpr{
																		pos: position{line: 776, col: 24, offset: 24994},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 776, col: 24, offset: 24994},
																				val:        "____",
																				ignoreCase: false,
																				want:       "\"____\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 776, col: 31, offset: 25001},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment768,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment771,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 993, col: 5, offset: 30751},
											run: (*parser).callonDocumentFragment780,
											expr: &seqExpr{
												pos: position{line: 993, col: 5, offset: 30751},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 780, col: 26, offset: 25106},
														run: (*parser).callonDocumentFragment782,
														expr: &seqExpr{
															pos: position{line: 780, col: 26, offset: 25106},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 780, col: 26, offset: 25106},
																	val:        "****",
																	ignoreCase: false,
																	want:       "\"****\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 780, col: 33, offset: 25113},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonDocumentFragment786,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonDocumentFragment789,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 994, col: 5, offset: 30782},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1005, col: 4, offset: 31107},
															expr: &actionExpr{
																pos: position{line: 1005, col: 5, offset: 31108},
																run: (*parser).callonDocumentFragment798,
																expr: &seqExpr{
																	pos: position{line: 1005, col: 5, offset: 31108},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1005, col: 5, offset: 31108},
																			expr: &choiceExpr{
																				pos: position{line: 1002, col: 29, offset: 31050},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 780, col: 26, offset: 25106},
																						run: (*parser).callonDocumentFragment802,
																						expr: &seqExpr{
																							pos: position{line: 780, col: 26, offset: 25106},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 780, col: 26, offset: 25106},
																									val:        "****",
																									ignoreCase: false,
																									want:       "\"****\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 780, col: 33, offset: 25113},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment806,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment809,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1006, col: 5, offset: 31138},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				run: (*parser).callonDocumentFragment819,
																				expr: &seqExpr{
																					pos: position{line: 785, col: 5, offset: 25225},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 785, col: 5, offset: 25225},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 786, col: 5, offset: 25298},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								run: (*parser).callonDocumentFragment825,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 786, col: 14, offset: 25307},
																									expr: &charClassMatcher{
																										pos:        position{line: 786, col: 14, offset: 25307},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment829,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 995, col: 5, offset: 30816},
														expr: &choiceExpr{
															pos: position{line: 1002, col: 29, offset: 31050},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 780, col: 26, offset: 25106},
																	run: (*parser).callonDocumentFragment838,
																	expr: &seqExpr{
																		pos: position{line: 780, col: 26, offset: 25106},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 780, col: 26, offset: 25106},
																				val:        "****",
																				ignoreCase: false,
																				want:       "\"****\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 780, col: 33, offset: 25113},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonDocumentFragment842,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment845,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2948, col: 18, offset: 96121},
											run: (*parser).callonDocumentFragment854,
											expr: &seqExpr{
												pos: position{line: 2948, col: 18, offset: 96121},
												exprs: []interface{}{
													&choiceExpr{
														pos: position{line: 2949, col: 9, offset: 96131},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2949, col: 9, offset: 96131},
																val:        "'''",
																ignoreCase: false,
																want:       "\"'''\"",
															},
															&litMatcher{
																pos:        position{line: 2950, col: 11, offset: 96167},
																val:        "***",
																ignoreCase: false,
																want:       "\"***\"",
															},
															&litMatcher{
																pos:        position{line: 2950, col: 19, offset: 96175},
																val:        "* * *",
																ignoreCase: false,
																want:       "\"* * *\"",
															},
															&litMatcher{
																pos:        position{line: 2950, col: 29, offset: 96185},
																val:        "---",
																ignoreCase: false,
																want:       "\"---\"",
															},
															&litMatcher{
																pos:        position{line: 2950, col: 37, offset: 96193},
																val:        "- - -",
																ignoreCase: false,
																want:       "\"- - -\"",
															},
															&litMatcher{
																pos:        position{line: 2950, col: 47, offset: 96203},
																val:        "___",
																ignoreCase: false,
																want:       "\"___\"",
															},
															&litMatcher{
																pos:        position{line: 2950, col: 55, offset: 96211},
																val:        "_ _ _",
																ignoreCase: false,
																want:       "\"_ _ _\"",
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 2951, col: 11, offset: 96269},
														expr: &actionExpr{
															pos: position{line: 3079, col: 10, offset: 100334},
															run: (*parser).callonDocumentFragment865,
															expr: &charClassMatcher{
																pos:        position{line: 3079, col: 11, offset: 100335},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment868,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment876,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 242, col: 11, offset: 7410},
											name: "ListElements",
										},
										&actionExpr{
											pos: position{line: 2846, col: 5, offset: 93250},
											run: (*parser).callonDocumentFragment884,
											expr: &seqExpr{
												pos: position{line: 2846, col: 5, offset: 93250},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2854, col: 19, offset: 93427},
														val:        "|===",
														ignoreCase: false,
														want:       "\"|===\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2854, col: 26, offset: 93434},
														expr: &actionExpr{
															pos: position{line: 3079, col: 10, offset: 100334},
															run: (*parser).callonDocumentFragment888,
															expr: &charClassMatcher{
																pos:        position{line: 3079, col: 11, offset: 100335},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment891,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2847, col: 5, offset: 93274},
														label: "header",
														expr: &zeroOrOneExpr{
															pos: position{line: 2847, col: 12, offset: 93281},
															expr: &actionExpr{
																pos: position{line: 2862, col: 5, offset: 93594},
																run: (*parser).callonDocumentFragment900,
																expr: &seqExpr{
																	pos: position{line: 2862, col: 5, offset: 93594},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2862, col: 5, offset: 93594},
																			label: "cells",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2862, col: 11, offset: 93600},
																				expr: &actionExpr{
																					pos: position{line: 2868, col: 5, offset: 93717},
																					run: (*parser).callonDocumentFragment904,
																					expr: &seqExpr{
																						pos: position{line: 2868, col: 5, offset: 93717},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2868, col: 5, offset: 93717},
																								val:        "|",
																								ignoreCase: false,
																								want:       "\"|\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2868, col: 9, offset: 93721},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonDocumentFragment908,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2869, col: 5, offset: 93733},
																								label: "content",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 2869, col: 14, offset: 93742},
																									expr: &actionExpr{
																										pos: position{line: 2901, col: 5, offset: 94530},
																										run: (*parser).callonDocumentFragment912,
																										expr: &labeledExpr{
																											pos:   position{line: 2901, col: 5, offset: 94530},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2901, col: 14, offset: 94539},
																												run: (*parser).callonDocumentFragment914,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2901, col: 14, offset: 94539},
																													expr: &charClassMatcher{
																														pos:        position{line: 2901, col: 14, offset: 94539},
																														val:        "[^\\r\\n|]",
																														chars:      []rune{'\r', '\n', '|'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentFragment918,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2863, col: 5, offset: 93622},
																			expr: &actionExpr{
																				pos: position{line: 683, col: 14, offset: 22026},
																				run: (*parser).callonDocumentFragment926,
																				expr: &seqExpr{
																					pos: position{line: 683, col: 14, offset: 22026},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 683, col: 14, offset: 22026},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 683, col: 19, offset: 22031},
																							expr: &actionExpr{
																								pos: position{line: 3079, col: 10, offset: 100334},
																								run: (*parser).callonDocumentFragment932,
																								expr: &charClassMatcher{
																									pos:        position{line: 3079, col: 11, offset: 100335},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentFragment935,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2848, col: 5, offset: 93300},
														label: "rows",
														expr: &zeroOrMoreExpr{
															pos: position{line: 2848, col: 10, offset: 93305},
															expr: &choiceExpr{
																pos: position{line: 2873, col: 13, offset: 93839},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2883, col: 5, offset: 94058},
																		run: (*parser).callonDocumentFragment945,
																		expr: &seqExpr{
																			pos: position{line: 2883, col: 5, offset: 94058},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2883, col: 5, offset: 94058},
																					expr: &choiceExpr{
																						pos: position{line: 2858, col: 22, offset: 93507},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2854, col: 19, offset: 93427},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2854, col: 19, offset: 93427},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2854, col: 26, offset: 93434},
																										expr: &actionExpr{
																											pos: position{line: 3079, col: 10, offset: 100334},
																											run: (*parser).callonDocumentFragment952,
																											expr: &charClassMatcher{
																												pos:        position{line: 3079, col: 11, offset: 100335},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3095, col: 8, offset: 100658},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3088, col: 12, offset: 100518},
																												run: (*parser).callonDocumentFragment955,
																												expr: &choiceExpr{
																													pos: position{line: 3088, col: 13, offset: 100519},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3088, col: 13, offset: 100519},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 20, offset: 100526},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 29, offset: 100535},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2884, col: 5, offset: 94081},
																					label: "cells",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2884, col: 11, offset: 94087},
																						expr: &actionExpr{
																							pos: position{line: 2884, col: 12, offset: 94088},
																							run: (*parser).callonDocumentFragment966,
																							expr: &seqExpr{
																								pos: position{line: 2884, col: 12, offset: 94088},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 2884, col: 12, offset: 94088},
																										label: "cell",
																										expr: &actionExpr{
																											pos: position{line: 2893, col: 5, offset: 94329},
																											run: (*parser).callonDocumentFragment969,
																											expr: &seqExpr{
																												pos: position{line: 2893, col: 5, offset: 94329},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 2893, col: 5, offset: 94329},
																														expr: &choiceExpr{
																															pos: position{line: 2858, col: 22, offset: 93507},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2854, col: 19, offset: 93427},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2854, col: 19, offset: 93427},
																																			val:        "|===",
																																			ignoreCase: false,
																																			want:       "\"|===\"",
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2854, col: 26, offset: 93434},
																																			expr: &actionExpr{
																																				pos: position{line: 3079, col: 10, offset: 100334},
																																				run: (*parser).callonDocumentFragment976,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3079, col: 11, offset: 100335},
																																					val:        "[ \\t]",
																																					chars:      []rune{' ', '\t'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&choiceExpr{
																																			pos: position{line: 3095, col: 8, offset: 100658},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 3088, col: 12, offset: 100518},
																																					run: (*parser).callonDocumentFragment979,
																																					expr: &choiceExpr{
																																						pos: position{line: 3088, col: 13, offset: 100519},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 3088, col: 13, offset: 100519},
																																								val:        "\n",
																																								ignoreCase: false,
																																								want:       "\"\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 3088, col: 20, offset: 100526},
																																								val:        "\r\n",
																																								ignoreCase: false,
																																								want:       "\"\\r\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 3088, col: 29, offset: 100535},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 3092, col: 8, offset: 100608},
																																					expr: &anyMatcher{
																																						line: 3092, col: 9, offset: 100609,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3092, col: 8, offset: 100608},
																																	expr: &anyMatcher{
																																		line: 3092, col: 9, offset: 100609,
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2894, col: 5, offset: 94352},
																														expr: &actionExpr{
																															pos: position{line: 683, col: 14, offset: 22026},
																															run: (*parser).callonDocumentFragment989,
																															expr: &seqExpr{
																																pos: position{line: 683, col: 14, offset: 22026},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 683, col: 14, offset: 22026},
																																		expr: &notExpr{
																																			pos: position{line: 3092, col: 8, offset: 100608},
																																			expr: &anyMatcher{
																																				line: 3092, col: 9, offset: 100609,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 683, col: 19, offset: 22031},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonDocumentFragment995,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3095, col: 8, offset: 100658},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3088, col: 12, offset: 100518},
																																				run: (*parser).callonDocumentFragment998,
																																				expr: &choiceExpr{
																																					pos: position{line: 3088, col: 13, offset: 100519},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 13, offset: 100519},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 20, offset: 100526},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 29, offset: 100535},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3092, col: 8, offset: 100608},
																																				expr: &anyMatcher{
																																					line: 3092, col: 9, offset: 100609,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2895, col: 5, offset: 94367},
																														val:        "|",
																														ignoreCase: false,
																														want:       "\"|\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2895, col: 9, offset: 94371},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonDocumentFragment1007,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 2895, col: 16, offset: 94378},
																														label: "content",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 2895, col: 25, offset: 94387},
																															expr: &actionExpr{
																																pos: position{line: 2901, col: 5, offset: 94530},
																																run: (*parser).callonDocumentFragment1011,
																																expr: &labeledExpr{
																																	pos:   position{line: 2901, col: 5, offset: 94530},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 2901, col: 14, offset: 94539},
																																		run: (*parser).callonDocumentFragment1013,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2901, col: 14, offset: 94539},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2901, col: 14, offset: 94539},
																																				val:        "[^\\r\\n|]",
																																				chars:      []rune{'\r', '\n', '|'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3095, col: 8, offset: 100658},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3088, col: 12, offset: 100518},
																												run: (*parser).callonDocumentFragment1017,
																												expr: &choiceExpr{
																													pos: position{line: 3088, col: 13, offset: 100519},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3088, col: 13, offset: 100519},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 20, offset: 100526},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 29, offset: 100535},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2887, col: 6, offset: 94150},
																					alternatives: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 2887, col: 6, offset: 94150},
																							expr: &actionExpr{
																								pos: position{line: 683, col: 14, offset: 22026},
																								run: (*parser).callonDocumentFragment1026,
																								expr: &seqExpr{
																									pos: position{line: 683, col: 14, offset: 22026},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 683, col: 14, offset: 22026},
																											expr: &notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 683, col: 19, offset: 22031},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonDocumentFragment1032,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonDocumentFragment1035,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 2887, col: 19, offset: 94163},
																							expr: &choiceExpr{
																								pos: position{line: 2858, col: 22, offset: 93507},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2854, col: 19, offset: 93427},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2854, col: 19, offset: 93427},
																												val:        "|===",
																												ignoreCase: false,
																												want:       "\"|===\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2854, col: 26, offset: 93434},
																												expr: &actionExpr{
																													pos: position{line: 3079, col: 10, offset: 100334},
																													run: (*parser).callonDocumentFragment1047,
																													expr: &charClassMatcher{
																														pos:        position{line: 3079, col: 11, offset: 100335},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3095, col: 8, offset: 100658},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3088, col: 12, offset: 100518},
																														run: (*parser).callonDocumentFragment1050,
																														expr: &choiceExpr{
																															pos: position{line: 3088, col: 13, offset: 100519},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3088, col: 13, offset: 100519},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3088, col: 20, offset: 100526},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3088, col: 29, offset: 100535},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3092, col: 8, offset: 100608},
																														expr: &anyMatcher{
																															line: 3092, col: 9, offset: 100609,
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2876, col: 5, offset: 93906},
																		run: (*parser).callonDocumentFragment1059,
																		expr: &seqExpr{
																			pos: position{line: 2876, col: 5, offset: 93906},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2876, col: 5, offset: 93906},
																					expr: &choiceExpr{
																						pos: position{line: 2858, col: 22, offset: 93507},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2854, col: 19, offset: 93427},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2854, col: 19, offset: 93427},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2854, col: 26, offset: 93434},
																										expr: &actionExpr{
																											pos: position{line: 3079, col: 10, offset: 100334},
																											run: (*parser).callonDocumentFragment1066,
																											expr: &charClassMatcher{
																												pos:        position{line: 3079, col: 11, offset: 100335},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3095, col: 8, offset: 100658},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3088, col: 12, offset: 100518},
																												run: (*parser).callonDocumentFragment1069,
																												expr: &choiceExpr{
																													pos: position{line: 3088, col: 13, offset: 100519},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3088, col: 13, offset: 100519},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 20, offset: 100526},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 29, offset: 100535},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2877, col: 5, offset: 93929},
																					label: "cells",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2877, col: 11, offset: 93935},
																						expr: &actionExpr{
																							pos: position{line: 2893, col: 5, offset: 94329},
																							run: (*parser).callonDocumentFragment1080,
																							expr: &seqExpr{
																								pos: position{line: 2893, col: 5, offset: 94329},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 2893, col: 5, offset: 94329},
																										expr: &choiceExpr{
																											pos: position{line: 2858, col: 22, offset: 93507},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 2854, col: 19, offset: 93427},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2854, col: 19, offset: 93427},
																															val:        "|===",
																															ignoreCase: false,
																															want:       "\"|===\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2854, col: 26, offset: 93434},
																															expr: &actionExpr{
																																pos: position{line: 3079, col: 10, offset: 100334},
																																run: (*parser).callonDocumentFragment1087,
																																expr: &charClassMatcher{
																																	pos:        position{line: 3079, col: 11, offset: 100335},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 3095, col: 8, offset: 100658},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 3088, col: 12, offset: 100518},
																																	run: (*parser).callonDocumentFragment1090,
																																	expr: &choiceExpr{
																																		pos: position{line: 3088, col: 13, offset: 100519},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 13, offset: 100519},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 20, offset: 100526},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 29, offset: 100535},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3092, col: 8, offset: 100608},
																																	expr: &anyMatcher{
																																		line: 3092, col: 9, offset: 100609,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2894, col: 5, offset: 94352},
																										expr: &actionExpr{
																											pos: position{line: 683, col: 14, offset: 22026},
																											run: (*parser).callonDocumentFragment1100,
																											expr: &seqExpr{
																												pos: position{line: 683, col: 14, offset: 22026},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 683, col: 14, offset: 22026},
																														expr: &notExpr{
																															pos: position{line: 3092, col: 8, offset: 100608},
																															expr: &anyMatcher{
																																line: 3092, col: 9, offset: 100609,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 683, col: 19, offset: 22031},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonDocumentFragment1106,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3095, col: 8, offset: 100658},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3088, col: 12, offset: 100518},
																																run: (*parser).callonDocumentFragment1109,
																																expr: &choiceExpr{
																																	pos: position{line: 3088, col: 13, offset: 100519},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 13, offset: 100519},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 20, offset: 100526},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 29, offset: 100535},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3092, col: 8, offset: 100608},
																																expr: &anyMatcher{
																																	line: 3092, col: 9, offset: 100609,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2895, col: 5, offset: 94367},
																										val:        "|",
																										ignoreCase: false,
																										want:       "\"|\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2895, col: 9, offset: 94371},
																										expr: &actionExpr{
																											pos: position{line: 3079, col: 10, offset: 100334},
																											run: (*parser).callonDocumentFragment1118,
																											expr: &charClassMatcher{
																												pos:        position{line: 3079, col: 11, offset: 100335},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 2895, col: 16, offset: 94378},
																										label: "content",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 2895, col: 25, offset: 94387},
																											expr: &actionExpr{
																												pos: position{line: 2901, col: 5, offset: 94530},
																												run: (*parser).callonDocumentFragment1122,
																												expr: &labeledExpr{
																													pos:   position{line: 2901, col: 5, offset: 94530},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 2901, col: 14, offset: 94539},
																														run: (*parser).callonDocumentFragment1124,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2901, col: 14, offset: 94539},
																															expr: &charClassMatcher{
																																pos:        position{line: 2901, col: 14, offset: 94539},
																																val:        "[^\\r\\n|]",
																																chars:      []rune{'\r', '\n', '|'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentFragment1128,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2878, col: 5, offset: 93956},
																					expr: &actionExpr{
																						pos: position{line: 683, col: 14, offset: 22026},
																						run: (*parser).callonDocumentFragment1136,
																						expr: &seqExpr{
																							pos: position{line: 683, col: 14, offset: 22026},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 683, col: 14, offset: 22026},
																									expr: &notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 683, col: 19, offset: 22031},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonDocumentFragment1142,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment1145,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2858, col: 22, offset: 93507},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2854, col: 19, offset: 93427},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2854, col: 19, offset: 93427},
																		val:        "|===",
																		ignoreCase: false,
																		want:       "\"|===\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2854, col: 26, offset: 93434},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonDocumentFragment1156,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentFragment1159,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2781, col: 22, offset: 91184},
											run: (*parser).callonDocumentFragment1168,
											expr: &seqExpr{
												pos: position{line: 2781, col: 22, offset: 91184},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2786, col: 31, offset: 91405},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2786, col: 36, offset: 91410},
														expr: &litMatcher{
															pos:        position{line: 2786, col: 37, offset: 91411},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2781, col: 49, offset: 91211},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2788, col: 29, offset: 91446},
															run: (*parser).callonDocumentFragment1174,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2788, col: 29, offset: 91446},
																expr: &charClassMatcher{
																	pos:        position{line: 2788, col: 29, offset: 91446},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3095, col: 8, offset: 100658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonDocumentFragment1178,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1745, col: 5, offset: 57302},
											run: (*parser).callonDocumentFragment1185,
											expr: &seqExpr{
												pos: position{line: 1745, col: 5, offset: 57302},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1745, col: 5, offset: 57302},
														label: "kind",
														expr: &choiceExpr{
															pos: position{line: 293, col: 19, offset: 9062},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 293, col: 19, offset: 9062},
																	run: (*parser).callonDocumentFragment1189,
																	expr: &litMatcher{
																		pos:        position{line: 293, col: 19, offset: 9062},
																		val:        "TIP",
																		ignoreCase: false,
																		want:       "\"TIP\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 295, col: 5, offset: 9100},
																	run: (*parser).callonDocumentFragment1191,
																	expr: &litMatcher{
																		pos:        position{line: 295, col: 5, offset: 9100},
																		val:        "NOTE",
																		ignoreCase: false,
																		want:       "\"NOTE\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 297, col: 5, offset: 9140},
																	run: (*parser).callonDocumentFragment1193,
																	expr: &litMatcher{
																		pos:        position{line: 297, col: 5, offset: 9140},
																		val:        "IMPORTANT",
																		ignoreCase: false,
																		want:       "\"IMPORTANT\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 299, col: 5, offset: 9190},
																	run: (*parser).callonDocumentFragment1195,
																	expr: &litMatcher{
																		pos:        position{line: 299, col: 5, offset: 9190},
																		val:        "WARNING",
																		ignoreCase: false,
																		want:       "\"WARNING\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 301, col: 5, offset: 9236},
																	run: (*parser).callonDocumentFragment1197,
																	expr: &litMatcher{
																		pos:        position{line: 301, col: 5, offset: 9236},
																		val:        "CAUTION",
																		ignoreCase: false,
																		want:       "\"CAUTION\"",
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1745, col: 27, offset: 57324},
														val:        ": ",
														ignoreCase: false,
														want:       "\": \"",
													},
													&labeledExpr{
														pos:   position{line: 1746, col: 5, offset: 57334},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 1757, col: 5, offset: 57678},
															run: (*parser).callonDocumentFragment1201,
															expr: &seqExpr{
																pos: position{line: 1757, col: 5, offset: 57678},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1757, col: 5, offset: 57678},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1757, col: 14, offset: 57687},
																			run: (*parser).callonDocumentFragment1204,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1757, col: 14, offset: 57687},
																				expr: &charClassMatcher{
																					pos:        position{line: 1757, col: 14, offset: 57687},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1760, col: 5, offset: 57794},
																		run: (*parser).callonDocumentFragment1207,
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentFragment1209,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1747, col: 5, offset: 57368},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1747, col: 16, offset: 57379},
															expr: &actionExpr{
																pos: position{line: 1748, col: 9, offset: 57389},
																run: (*parser).callonDocumentFragment1218,
																expr: &seqExpr{
																	pos: position{line: 1748, col: 9, offset: 57389},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1748, col: 9, offset: 57389},
																			expr: &seqExpr{
																				pos: position{line: 1485, col: 34, offset: 48680},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1485, col: 34, offset: 48680},
																						val:        "+",
																						ignoreCase: false,
																						want:       "\"+\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1485, col: 38, offset: 48684},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDocumentFragment1224,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonDocumentFragment1226,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1749, col: 9, offset: 57428},
																			label: "line",
																			expr: &choiceExpr{
																				pos: position{line: 1749, col: 15, offset: 57434},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2781, col: 22, offset: 91184},
																						run: (*parser).callonDocumentFragment1233,
																						expr: &seqExpr{
																							pos: position{line: 2781, col: 22, offset: 91184},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2786, col: 31, offset: 91405},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																								&notExpr{
																									pos: position{line: 2786, col: 36, offset: 91410},
																									expr: &litMatcher{
																										pos:        position{line: 2786, col: 37, offset: 91411},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2781, col: 49, offset: 91211},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 2788, col: 29, offset: 91446},
																										run: (*parser).callonDocumentFragment1239,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 2788, col: 29, offset: 91446},
																											expr: &charClassMatcher{
																												pos:        position{line: 2788, col: 29, offset: 91446},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment1243,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1757, col: 5, offset: 57678},
																						run: (*parser).callonDocumentFragment1250,
																						expr: &seqExpr{
																							pos: position{line: 1757, col: 5, offset: 57678},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1757, col: 5, offset: 57678},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1757, col: 14, offset: 57687},
																										run: (*parser).callonDocumentFragment1253,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1757, col: 14, offset: 57687},
																											expr: &charClassMatcher{
																												pos:        position{line: 1757, col: 14, offset: 57687},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1760, col: 5, offset: 57794},
																									run: (*parser).callonDocumentFragment1256,
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonDocumentFragment1258,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1768, col: 5, offset: 57960},
											run: (*parser).callonDocumentFragment1265,
											expr: &seqExpr{
												pos: position{line: 1768, col: 5, offset: 57960},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1768, col: 5, offset: 57960},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 1775, col: 5, offset: 58245},
															run: (*parser).callonDocumentFragment1268,
															expr: &seqExpr{
																pos: position{line: 1775, col: 5, offset: 58245},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1775, col: 5, offset: 58245},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1775, col: 14, offset: 58254},
																			run: (*parser).callonDocumentFragment1271,
																			expr: &seqExpr{
																				pos: position{line: 1775, col: 14, offset: 58254},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						run: (*parser).callonDocumentFragment1273,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3083, col: 11, offset: 100401},
																							expr: &charClassMatcher{
																								pos:        position{line: 3083, col: 12, offset: 100402},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 1775, col: 21, offset: 58261},
																						expr: &charClassMatcher{
																							pos:        position{line: 1775, col: 21, offset: 58261},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1778, col: 5, offset: 58318},
																		run: (*parser).callonDocumentFragment1278,
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentFragment1280,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1769, col: 5, offset: 58001},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1769, col: 16, offset: 58012},
															expr: &choiceExpr{
																pos: position{line: 1769, col: 17, offset: 58013},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2781, col: 22, offset: 91184},
																		run: (*parser).callonDocumentFragment1290,
																		expr: &seqExpr{
																			pos: position{line: 2781, col: 22, offset: 91184},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2786, col: 31, offset: 91405},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																				&notExpr{
																					pos: position{line: 2786, col: 36, offset: 91410},
																					expr: &litMatcher{
																						pos:        position{line: 2786, col: 37, offset: 91411},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2781, col: 49, offset: 91211},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2788, col: 29, offset: 91446},
																						run: (*parser).callonDocumentFragment1296,
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 2788, col: 29, offset: 91446},
																							expr: &charClassMatcher{
																								pos:        position{line: 2788, col: 29, offset: 91446},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentFragment1300,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1757, col: 5, offset: 57678},
																		run: (*parser).callonDocumentFragment1307,
																		expr: &seqExpr{
																			pos: position{line: 1757, col: 5, offset: 57678},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1757, col: 5, offset: 57678},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1757, col: 14, offset: 57687},
																						run: (*parser).callonDocumentFragment1310,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1757, col: 14, offset: 57687},
																							expr: &charClassMatcher{
																								pos:        position{line: 1757, col: 14, offset: 57687},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1760, col: 5, offset: 57794},
																					run: (*parser).callonDocumentFragment1313,
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentFragment1315,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1160, col: 5, offset: 36406},
											run: (*parser).callonDocumentFragment1322,
											expr: &seqExpr{
												pos: position{line: 1160, col: 5, offset: 36406},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1160, col: 5, offset: 36406},
														run: (*parser).callonDocumentFragment1324,
													},
													&labeledExpr{
														pos:   position{line: 1163, col: 5, offset: 36464},
														label: "frontmatter",
														expr: &actionExpr{
															pos: position{line: 1168, col: 20, offset: 36559},
															run: (*parser).callonDocumentFragment1326,
															expr: &seqExpr{
																pos: position{line: 1168, col: 20, offset: 36559},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1172, col: 30, offset: 36731},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1172, col: 36, offset: 36737},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonDocumentFragment1330,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentFragment1333,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1168, col: 45, offset: 36584},
																		label: "content",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 1168, col: 53, offset: 36592},
																			expr: &actionExpr{
																				pos: position{line: 1174, col: 27, offset: 36775},
																				run: (*parser).callonDocumentFragment1342,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 1174, col: 27, offset: 36775},
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1174, col: 28, offset: 36776},
																						expr: &seqExpr{
																							pos: position{line: 1174, col: 29, offset: 36777},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 1174, col: 29, offset: 36777},
																									expr: &seqExpr{
																										pos: position{line: 1172, col: 30, offset: 36731},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1172, col: 30, offset: 36731},
																												val:        "---",
																												ignoreCase: false,
																												want:       "\"---\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1172, col: 36, offset: 36737},
																												expr: &actionExpr{
																													pos: position{line: 3079, col: 10, offset: 100334},
																													run: (*parser).callonDocumentFragment1350,
																													expr: &charClassMatcher{
																														pos:        position{line: 3079, col: 11, offset: 100335},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3095, col: 8, offset: 100658},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3088, col: 12, offset: 100518},
																														run: (*parser).callonDocumentFragment1353,
																														expr: &choiceExpr{
																															pos: position{line: 3088, col: 13, offset: 100519},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3088, col: 13, offset: 100519},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3088, col: 20, offset: 100526},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3088, col: 29, offset: 100535},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3092, col: 8, offset: 100608},
																														expr: &anyMatcher{
																															line: 3092, col: 9, offset: 100609,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 1174, col: 55, offset: 36803,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1172, col: 30, offset: 36731},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1172, col: 36, offset: 36737},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonDocumentFragment1363,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentFragment1366,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 11, offset: 7556},
											name: "Paragraph",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 271, col: 1, offset: 8251},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 8282},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 8282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 272, col: 5, offset: 8282},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 272, col: 14, offset: 8291},
								expr: &choiceExpr{
									pos: position{line: 273, col: 9, offset: 8301},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1141, col: 23, offset: 35577},
											run: (*parser).callonDelimitedBlockElements6,
											expr: &seqExpr{
												pos: position{line: 1141, col: 23, offset: 35577},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1139, col: 32, offset: 35545},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1141, col: 51, offset: 35605},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1141, col: 56, offset: 35610},
															run: (*parser).callonDelimitedBlockElements10,
															expr: &oneOrMoreExpr{
																pos: position{line: 1141, col: 56, offset: 35610},
																expr: &charClassMatcher{
																	pos:        position{line: 1141, col: 56, offset: 35610},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1139, col: 32, offset: 35545},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 274, col: 11, offset: 8363},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3092, col: 8, offset: 100608},
							expr: &anyMatcher{
								line: 3092, col: 9, offset: 100609,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 308, col: 1, offset: 9496},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 9525},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 9525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 9525},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 9, offset: 9529},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 324, col: 18, offset: 10072},
								run: (*parser).callonAttributeDeclaration5,
								expr: &seqExpr{
									pos: position{line: 324, col: 18, offset: 10072},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 324, col: 18, offset: 10072},
											val:        "[_0-9\\pL]",
											chars:      []rune{'_'},
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 324, col: 28, offset: 10082},
											expr: &charClassMatcher{
												pos:        position{line: 324, col: 29, offset: 10083},
												val:        "[-0-9\\pL]",
												chars:      []rune{'-'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 9550},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 310, col: 5, offset: 9559},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 11, offset: 9565},
								expr: &actionExpr{
									pos: position{line: 311, col: 9, offset: 9575},
									run: (*parser).callonAttributeDeclaration13,
									expr: &seqExpr{
										pos: position{line: 311, col: 9, offset: 9575},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3083, col: 11, offset: 100401},
												run: (*parser).callonAttributeDeclaration15,
												expr: &oneOrMoreExpr{
													pos: position{line: 3083, col: 11, offset: 100401},
													expr: &charClassMatcher{
														pos:        position{line: 3083, col: 12, offset: 100402},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 312, col: 9, offset: 9667},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 312, col: 16, offset: 9674},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3095, col: 8, offset: 100658},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonAttributeDeclaration21,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3092, col: 8, offset: 100608},
									expr: &anyMatcher{
										line: 3092, col: 9, offset: 100609,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 328, col: 1, offset: 10139},
			expr: &actionExpr{
				pos: position{line: 329, col: 5, offset: 10173},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 329, col: 5, offset: 10173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 329, col: 5, offset: 10173},
							label: "elements",
							expr: &actionExpr{
								pos: position{line: 345, col: 5, offset: 10691},
								run: (*parser).callonAttributeDeclarationValue4,
								expr: &labeledExpr{
									pos:   position{line: 345, col: 5, offset: 10691},
									label: "elements",
									expr: &zeroOrMoreExpr{
										pos: position{line: 345, col: 14, offset: 10700},
										expr: &actionExpr{
											pos: position{line: 350, col: 5, offset: 10831},
											run: (*parser).callonAttributeDeclarationValue7,
											expr: &seqExpr{
												pos: position{line: 350, col: 5, offset: 10831},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 350, col: 5, offset: 10831},
														expr: &seqExpr{
															pos: position{line: 350, col: 7, offset: 10833},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 350, col: 7, offset: 10833},
																	expr: &litMatcher{
																		pos:        position{line: 350, col: 7, offset: 10833},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 350, col: 13, offset: 10839},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonAttributeDeclarationValue14,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonAttributeDeclarationValue17,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 351, col: 5, offset: 10855},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 352, col: 9, offset: 10873},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 352, col: 10, offset: 10874},
																	run: (*parser).callonAttributeDeclarationValue26,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 352, col: 10, offset: 10874},
																		expr: &charClassMatcher{
																			pos:        position{line: 352, col: 10, offset: 10874},
																			val:        "[^\\r\\n{ ]",
																			chars:      []rune{'\r', '\n', '{', ' '},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonAttributeDeclarationValue29,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&actionExpr{
																	pos: position{line: 641, col: 5, offset: 20597},
																	run: (*parser).callonAttributeDeclarationValue31,
																	expr: &seqExpr{
																		pos: position{line: 641, col: 5, offset: 20597},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 641, col: 5, offset: 20597},
																				run: (*parser).callonAttributeDeclarationValue33,
																			},
																			&labeledExpr{
																				pos:   position{line: 644, col: 5, offset: 20666},
																				label: "element",
																				expr: &choiceExpr{
																					pos: position{line: 644, col: 14, offset: 20675},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 664, col: 25, offset: 21328},
																							run: (*parser).callonAttributeDeclarationValue36,
																							expr: &seqExpr{
																								pos: position{line: 664, col: 25, offset: 21328},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 664, col: 25, offset: 21328},
																										val:        "{counter:",
																										ignoreCase: false,
																										want:       "\"{counter:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 664, col: 37, offset: 21340},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue40,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 664, col: 56, offset: 21359},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 664, col: 62, offset: 21365},
																											expr: &actionExpr{
																												pos: position{line: 672, col: 17, offset: 21660},
																												run: (*parser).callonAttributeDeclarationValue47,
																												expr: &seqExpr{
																													pos: position{line: 672, col: 17, offset: 21660},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 672, col: 17, offset: 21660},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 672, col: 21, offset: 21664},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 672, col: 28, offset: 21671},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 672, col: 28, offset: 21671},
																																		run: (*parser).callonAttributeDeclarationValue52,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 672, col: 28, offset: 21671},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 674, col: 9, offset: 21725},
																																		run: (*parser).callonAttributeDeclarationValue54,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 674, col: 9, offset: 21725},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 674, col: 9, offset: 21725},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 664, col: 78, offset: 21381},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 668, col: 25, offset: 21499},
																							run: (*parser).callonAttributeDeclarationValue58,
																							expr: &seqExpr{
																								pos: position{line: 668, col: 25, offset: 21499},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 668, col: 25, offset: 21499},
																										val:        "{counter2:",
																										ignoreCase: false,
																										want:       "\"{counter2:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 668, col: 38, offset: 21512},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue62,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 668, col: 57, offset: 21531},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 668, col: 63, offset: 21537},
																											expr: &actionExpr{
																												pos: position{line: 672, col: 17, offset: 21660},
																												run: (*parser).callonAttributeDeclarationValue69,
																												expr: &seqExpr{
																													pos: position{line: 672, col: 17, offset: 21660},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 672, col: 17, offset: 21660},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 672, col: 21, offset: 21664},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 672, col: 28, offset: 21671},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 672, col: 28, offset: 21671},
																																		run: (*parser).callonAttributeDeclarationValue74,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 672, col: 28, offset: 21671},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 674, col: 9, offset: 21725},
																																		run: (*parser).callonAttributeDeclarationValue76,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 674, col: 9, offset: 21725},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 674, col: 9, offset: 21725},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 668, col: 79, offset: 21553},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							run: (*parser).callonAttributeDeclarationValue80,
																							expr: &seqExpr{
																								pos: position{line: 650, col: 5, offset: 20804},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 650, col: 5, offset: 20804},
																										val:        "\\{",
																										ignoreCase: false,
																										want:       "\"\\\\{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 650, col: 13, offset: 20812},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue84,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 650, col: 32, offset: 20831},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							run: (*parser).callonAttributeDeclarationValue90,
																							expr: &seqExpr{
																								pos: position{line: 657, col: 5, offset: 21072},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 657, col: 5, offset: 21072},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 657, col: 9, offset: 21076},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue94,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 657, col: 28, offset: 21095},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 357, col: 12, offset: 11016},
																	run: (*parser).callonAttributeDeclarationValue100,
																	expr: &litMatcher{
																		pos:        position{line: 357, col: 12, offset: 11016},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 5, offset: 10223},
							label: "otherElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 330, col: 19, offset: 10237},
								expr: &actionExpr{
									pos: position{line: 331, col: 9, offset: 10247},
									run: (*parser).callonAttributeDeclarationValue104,
									expr: &seqExpr{
										pos: position{line: 331, col: 9, offset: 10247},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 331, col: 9, offset: 10247},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonAttributeDeclarationValue107,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 332, col: 9, offset: 10269},
												expr: &actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonAttributeDeclarationValue113,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 333, col: 9, offset: 10284},
												label: "elements",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 19, offset: 10294},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 373, col: 1, offset: 11605},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 11628},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 374, col: 5, offset: 11628},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 374, col: 16, offset: 11639},
						expr: &choiceExpr{
							pos: position{line: 376, col: 9, offset: 11706},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 376, col: 10, offset: 11707},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 376, col: 10, offset: 11707},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 376, col: 10, offset: 11707},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 408, col: 5, offset: 12582},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 408, col: 5, offset: 12582},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 408, col: 5, offset: 12582},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 409, col: 5, offset: 12592},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 410, col: 9, offset: 12605},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 410, col: 9, offset: 12605},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 410, col: 18, offset: 12614},
																			expr: &choiceExpr{
																				pos: position{line: 411, col: 13, offset: 12628},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 411, col: 14, offset: 12629},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 411, col: 14, offset: 12629},
																							expr: &charClassMatcher{
																								pos:        position{line: 411, col: 14, offset: 12629},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1141, col: 23, offset: 35577},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 1141, col: 23, offset: 35577},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1139, col: 32, offset: 35545},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1141, col: 51, offset: 35605},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1141, col: 56, offset: 35610},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1141, col: 56, offset: 35610},
																											expr: &charClassMatcher{
																												pos:        position{line: 1141, col: 56, offset: 35610},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1139, col: 32, offset: 35545},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 641, col: 5, offset: 20597},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 5, offset: 20666},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 644, col: 14, offset: 20675},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 664, col: 25, offset: 21328},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 25, offset: 21328},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 25, offset: 21328},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 37, offset: 21340},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 56, offset: 21359},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 664, col: 62, offset: 21365},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonBlockAttributes43,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonBlockAttributes48,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonBlockAttributes50,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 78, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 25, offset: 21499},
																												run: (*parser).callonBlockAttributes54,
																												expr: &seqExpr{
																													pos: position{line: 668, col: 25, offset: 21499},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 668, col: 25, offset: 21499},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 38, offset: 21512},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes58,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 57, offset: 21531},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 668, col: 63, offset: 21537},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonBlockAttributes65,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonBlockAttributes72,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 668, col: 79, offset: 21553},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 650, col: 5, offset: 20804},
																												run: (*parser).callonBlockAttributes76,
																												expr: &seqExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 650, col: 5, offset: 20804},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 650, col: 13, offset: 20812},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes80,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 650, col: 32, offset: 20831},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21072},
																												run: (*parser).callonBlockAttributes86,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21072},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 9, offset: 21076},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes90,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 28, offset: 21095},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 16, offset: 12862},
																						run: (*parser).callonBlockAttributes96,
																						expr: &litMatcher{
																							pos:        position{line: 416, col: 16, offset: 12862},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 422, col: 5, offset: 13048},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 35, offset: 11732},
												expr: &actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonBlockAttributes100,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 3095, col: 8, offset: 100658},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3088, col: 12, offset: 100518},
														run: (*parser).callonBlockAttributes103,
														expr: &choiceExpr{
															pos: position{line: 3088, col: 13, offset: 100519},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3088, col: 13, offset: 100519},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 20, offset: 100526},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 29, offset: 100535},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3092, col: 8, offset: 100608},
														expr: &anyMatcher{
															line: 3092, col: 9, offset: 100609,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 46, offset: 11743},
												expr: &actionExpr{
													pos: position{line: 683, col: 14, offset: 22026},
													run: (*parser).callonBlockAttributes111,
													expr: &seqExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 683, col: 14, offset: 22026},
																expr: &notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 683, col: 19, offset: 22031},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonBlockAttributes117,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonBlockAttributes120,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 380, col: 12, offset: 11864},
									run: (*parser).callonBlockAttributes127,
									expr: &seqExpr{
										pos: position{line: 380, col: 12, offset: 11864},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 380, col: 12, offset: 11864},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 427, col: 19, offset: 13167},
													run: (*parser).callonBlockAttributes130,
													expr: &seqExpr{
														pos: position{line: 427, col: 19, offset: 13167},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 427, col: 19, offset: 13167},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&labeledExpr{
																pos:   position{line: 427, col: 23, offset: 13171},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 428, col: 5, offset: 13183},
																	run: (*parser).callonBlockAttributes134,
																	expr: &seqExpr{
																		pos: position{line: 428, col: 5, offset: 13183},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 428, col: 5, offset: 13183},
																				expr: &charClassMatcher{
																					pos:        position{line: 428, col: 6, offset: 13184},
																					val:        "[. ]",
																					chars:      []rune{'.', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 429, col: 5, offset: 13296},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 429, col: 14, offset: 13305},
																					expr: &choiceExpr{
																						pos: position{line: 430, col: 9, offset: 13315},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 430, col: 10, offset: 13316},
																								run: (*parser).callonBlockAttributes141,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 430, col: 10, offset: 13316},
																									expr: &charClassMatcher{
																										pos:        position{line: 430, col: 10, offset: 13316},
																										val:        "[^\\r\\n�{]",
																										chars:      []rune{'\r', '\n', '�', '{'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 650, col: 5, offset: 20804},
																								run: (*parser).callonBlockAttributes144,
																								expr: &seqExpr{
																									pos: position{line: 650, col: 5, offset: 20804},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 650, col: 5, offset: 20804},
																											val:        "\\{",
																											ignoreCase: false,
																											want:       "\"\\\\{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 650, col: 13, offset: 20812},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												run: (*parser).callonBlockAttributes148,
																												expr: &seqExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 324, col: 18, offset: 10072},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 324, col: 28, offset: 10082},
																															expr: &charClassMatcher{
																																pos:        position{line: 324, col: 29, offset: 10083},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 650, col: 32, offset: 20831},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 657, col: 5, offset: 21072},
																								run: (*parser).callonBlockAttributes154,
																								expr: &seqExpr{
																									pos: position{line: 657, col: 5, offset: 21072},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 657, col: 5, offset: 21072},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 657, col: 9, offset: 21076},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												run: (*parser).callonBlockAttributes158,
																												expr: &seqExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 324, col: 18, offset: 10072},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 324, col: 28, offset: 10082},
																															expr: &charClassMatcher{
																																pos:        position{line: 324, col: 29, offset: 10083},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 657, col: 28, offset: 21095},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 434, col: 12, offset: 13429},
																								run: (*parser).callonBlockAttributes164,
																								expr: &litMatcher{
																									pos:        position{line: 434, col: 12, offset: 13429},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 35, offset: 11887},
												expr: &actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonBlockAttributes167,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 3095, col: 8, offset: 100658},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3088, col: 12, offset: 100518},
														run: (*parser).callonBlockAttributes170,
														expr: &choiceExpr{
															pos: position{line: 3088, col: 13, offset: 100519},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3088, col: 13, offset: 100519},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 20, offset: 100526},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 29, offset: 100535},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3092, col: 8, offset: 100608},
														expr: &anyMatcher{
															line: 3092, col: 9, offset: 100609,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 46, offset: 11898},
												expr: &actionExpr{
													pos: position{line: 683, col: 14, offset: 22026},
													run: (*parser).callonBlockAttributes178,
													expr: &seqExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 683, col: 14, offset: 22026},
																expr: &notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 683, col: 19, offset: 22031},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonBlockAttributes184,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonBlockAttributes187,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 384, col: 12, offset: 11988},
									run: (*parser).callonBlockAttributes194,
									expr: &seqExpr{
										pos: position{line: 384, col: 12, offset: 11988},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 384, col: 12, offset: 11988},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 24, offset: 12000},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 384, col: 44, offset: 12020},
												expr: &actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonBlockAttributes199,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 3095, col: 8, offset: 100658},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3088, col: 12, offset: 100518},
														run: (*parser).callonBlockAttributes202,
														expr: &choiceExpr{
															pos: position{line: 3088, col: 13, offset: 100519},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3088, col: 13, offset: 100519},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 20, offset: 100526},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 29, offset: 100535},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3092, col: 8, offset: 100608},
														expr: &anyMatcher{
															line: 3092, col: 9, offset: 100609,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 384, col: 55, offset: 12031},
												expr: &actionExpr{
													pos: position{line: 683, col: 14, offset: 22026},
													run: (*parser).callonBlockAttributes210,
													expr: &seqExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 683, col: 14, offset: 22026},
																expr: &notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 683, col: 19, offset: 22031},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonBlockAttributes216,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonBlockAttributes219,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 392, col: 1, offset: 12215},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 12239},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 12239},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 5, offset: 12239},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 5, offset: 12247},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 394, col: 16, offset: 12258},
								expr: &actionExpr{
									pos: position{line: 395, col: 9, offset: 12268},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 396, col: 13, offset: 12282},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 396, col: 13, offset: 12282},
												expr: &litMatcher{
													pos:        position{line: 396, col: 14, offset: 12283},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 397, col: 13, offset: 12315},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 397, col: 24, offset: 12326},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 397, col: 24, offset: 12326},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 397, col: 46, offset: 12348},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 5, offset: 12431},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 445, col: 1, offset: 13810},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13836},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13836},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 446, col: 5, offset: 13836},
							expr: &litMatcher{
								pos:        position{line: 446, col: 6, offset: 13837},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 446, col: 10, offset: 13841},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 446, col: 14, offset: 13845},
							expr: &litMatcher{
								pos:        position{line: 446, col: 15, offset: 13846},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 447, col: 5, offset: 13959},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 447, col: 31, offset: 13985},
								expr: &ruleRefExpr{
									pos:  position{line: 447, col: 32, offset: 13986},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 5, offset: 14018},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 448, col: 21, offset: 14034},
								expr: &choiceExpr{
									pos: position{line: 448, col: 22, offset: 14035},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 448, col: 22, offset: 14035},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 44, offset: 14057},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 5, offset: 14078},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 462, col: 1, offset: 14606},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 14640},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 463, col: 5, offset: 14640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 463, col: 5, offset: 14640},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 463, col: 10, offset: 14645},
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 9, offset: 14655},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 466, col: 5, offset: 14685},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 466, col: 12, offset: 14692},
								expr: &actionExpr{
									pos: position{line: 467, col: 9, offset: 14703},
									run: (*parser).callonFirstPositionalAttributes8,
									expr: &seqExpr{
										pos: position{line: 467, col: 9, offset: 14703},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 467, col: 9, offset: 14703},
												expr: &litMatcher{
													pos:        position{line: 467, col: 10, offset: 14704},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
											},
											&notExpr{
												pos: position{line: 467, col: 14, offset: 14708},
												expr: &litMatcher{
													pos:        position{line: 467, col: 15, offset: 14709},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 468, col: 9, offset: 14721},
												label: "extra",
												expr: &choiceExpr{
													pos: position{line: 469, col: 13, offset: 14741},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 469, col: 13, offset: 14741},
															name: "ShortHandIDAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 470, col: 15, offset: 14777},
															name: "ShortHandOptionAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 471, col: 15, offset: 14816},
															name: "ShortHandDotRoleAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 474, col: 8, offset: 14892},
							expr: &seqExpr{
								pos: position{line: 474, col: 9, offset: 14893},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 474, col: 9, offset: 14893},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 474, col: 13, offset: 14897},
										expr: &actionExpr{
											pos: position{line: 3079, col: 10, offset: 100334},
											run: (*parser).callonFirstPositionalAttributes23,
											expr: &charClassMatcher{
												pos:        position{line: 3079, col: 11, offset: 100335},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 475, col: 5, offset: 14911},
							run: (*parser).callonFirstPositionalAttributes25,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 491, col: 1, offset: 15327},
			expr: &actionExpr{
				pos: position{line: 491, col: 25, offset: 15351},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 491, col: 25, offset: 15351},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 25, offset: 15351},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 29, offset: 15355},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 33, offset: 15359},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 495, col: 1, offset: 15433},
			expr: &actionExpr{
				pos: position{line: 495, col: 23, offset: 15455},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 495, col: 23, offset: 15455},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 495, col: 30, offset: 15462},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 500, col: 1, offset: 15588},
			expr: &actionExpr{
				pos: position{line: 500, col: 30, offset: 15617},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 500, col: 30, offset: 15617},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 500, col: 30, offset: 15617},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 34, offset: 15621},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 40, offset: 15627},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 505, col: 1, offset: 15749},
			expr: &actionExpr{
				pos: position{line: 505, col: 29, offset: 15777},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 505, col: 29, offset: 15777},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 505, col: 29, offset: 15777},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 33, offset: 15781},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 41, offset: 15789},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 510, col: 1, offset: 15902},
			expr: &choiceExpr{
				pos: position{line: 511, col: 5, offset: 15934},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 511, col: 5, offset: 15934},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 512, col: 7, offset: 15968},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 513, col: 7, offset: 16002},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 513, col: 7, offset: 16002},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 513, col: 7, offset: 16002},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 513, col: 16, offset: 16011},
										expr: &choiceExpr{
											pos: position{line: 516, col: 9, offset: 16193},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 516, col: 10, offset: 16194},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 516, col: 10, offset: 16194},
														expr: &charClassMatcher{
															pos:        position{line: 516, col: 10, offset: 16194},
															val:        "[^,=.%# \\r\\n�{]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&actionExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonShortHandAttributeValue12,
													expr: &seqExpr{
														pos: position{line: 641, col: 5, offset: 20597},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 641, col: 5, offset: 20597},
																run: (*parser).callonShortHandAttributeValue14,
															},
															&labeledExpr{
																pos:   position{line: 644, col: 5, offset: 20666},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 644, col: 14, offset: 20675},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 664, col: 25, offset: 21328},
																			run: (*parser).callonShortHandAttributeValue17,
																			expr: &seqExpr{
																				pos: position{line: 664, col: 25, offset: 21328},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 664, col: 25, offset: 21328},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 664, col: 37, offset: 21340},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue21,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 664, col: 56, offset: 21359},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 664, col: 62, offset: 21365},
																							expr: &actionExpr{
																								pos: position{line: 672, col: 17, offset: 21660},
																								run: (*parser).callonShortHandAttributeValue28,
																								expr: &seqExpr{
																									pos: position{line: 672, col: 17, offset: 21660},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 672, col: 17, offset: 21660},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 672, col: 21, offset: 21664},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 672, col: 28, offset: 21671},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 672, col: 28, offset: 21671},
																														run: (*parser).callonShortHandAttributeValue33,
																														expr: &charClassMatcher{
																															pos:        position{line: 672, col: 28, offset: 21671},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 674, col: 9, offset: 21725},
																														run: (*parser).callonShortHandAttributeValue35,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 674, col: 9, offset: 21725},
																															expr: &charClassMatcher{
																																pos:        position{line: 674, col: 9, offset: 21725},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 664, col: 78, offset: 21381},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 668, col: 25, offset: 21499},
																			run: (*parser).callonShortHandAttributeValue39,
																			expr: &seqExpr{
																				pos: position{line: 668, col: 25, offset: 21499},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 668, col: 25, offset: 21499},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 668, col: 38, offset: 21512},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue43,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 668, col: 57, offset: 21531},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 668, col: 63, offset: 21537},
																							expr: &actionExpr{
																								pos: position{line: 672, col: 17, offset: 21660},
																								run: (*parser).callonShortHandAttributeValue50,
																								expr: &seqExpr{
																									pos: position{line: 672, col: 17, offset: 21660},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 672, col: 17, offset: 21660},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 672, col: 21, offset: 21664},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 672, col: 28, offset: 21671},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 672, col: 28, offset: 21671},
																														run: (*parser).callonShortHandAttributeValue55,
																														expr: &charClassMatcher{
																															pos:        position{line: 672, col: 28, offset: 21671},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 674, col: 9, offset: 21725},
																														run: (*parser).callonShortHandAttributeValue57,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 674, col: 9, offset: 21725},
																															expr: &charClassMatcher{
																																pos:        position{line: 674, col: 9, offset: 21725},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 668, col: 79, offset: 21553},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 650, col: 5, offset: 20804},
																			run: (*parser).callonShortHandAttributeValue61,
																			expr: &seqExpr{
																				pos: position{line: 650, col: 5, offset: 20804},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 650, col: 5, offset: 20804},
																						val:        "\\{",
																						ignoreCase: false,
																						want:       "\"\\\\{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 650, col: 13, offset: 20812},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue65,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 650, col: 32, offset: 20831},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 657, col: 5, offset: 21072},
																			run: (*parser).callonShortHandAttributeValue71,
																			expr: &seqExpr{
																				pos: position{line: 657, col: 5, offset: 21072},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 657, col: 5, offset: 21072},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 657, col: 9, offset: 21076},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue75,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 657, col: 28, offset: 21095},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 521, col: 12, offset: 16362},
													run: (*parser).callonShortHandAttributeValue81,
													expr: &litMatcher{
														pos:        position{line: 521, col: 12, offset: 16362},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 525, col: 5, offset: 16450},
									expr: &notExpr{
										pos: position{line: 525, col: 7, offset: 16452},
										expr: &seqExpr{
											pos: position{line: 525, col: 9, offset: 16454},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 525, col: 9, offset: 16454},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonShortHandAttributeValue87,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 525, col: 16, offset: 16461},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 530, col: 1, offset: 16539},
			expr: &choiceExpr{
				pos: position{line: 530, col: 24, offset: 16562},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 531, col: 5, offset: 16568},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 531, col: 5, offset: 16568},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 531, col: 5, offset: 16568},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 531, col: 12, offset: 16575},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 531, col: 29, offset: 16592},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 531, col: 29, offset: 16592},
											expr: &seqExpr{
												pos: position{line: 531, col: 30, offset: 16593},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 531, col: 30, offset: 16593},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 531, col: 34, offset: 16597},
														expr: &actionExpr{
															pos: position{line: 3079, col: 10, offset: 100334},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 3079, col: 11, offset: 100335},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 531, col: 45, offset: 16608},
											expr: &litMatcher{
												pos:        position{line: 531, col: 46, offset: 16609},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 536, col: 6, offset: 16846},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 536, col: 6, offset: 16846},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 536, col: 6, offset: 16846},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 536, col: 13, offset: 16853},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 536, col: 13, offset: 16853},
												expr: &actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 536, col: 21, offset: 16861},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 536, col: 22, offset: 16862},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 536, col: 22, offset: 16862},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 536, col: 26, offset: 16866},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 536, col: 36, offset: 16876},
														expr: &litMatcher{
															pos:        position{line: 536, col: 37, offset: 16877},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 537, col: 5, offset: 16887},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 547, col: 1, offset: 17202},
			expr: &actionExpr{
				pos: position{line: 547, col: 19, offset: 17220},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 547, col: 19, offset: 17220},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 547, col: 19, offset: 17220},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 552, col: 22, offset: 17528},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 552, col: 22, offset: 17528},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 552, col: 22, offset: 17528},
											expr: &actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 552, col: 29, offset: 17535},
											expr: &charClassMatcher{
												pos:        position{line: 552, col: 29, offset: 17535},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 552, col: 42, offset: 17548},
											expr: &actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonNamedAttribute12,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 547, col: 43, offset: 17244},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 547, col: 47, offset: 17248},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonNamedAttribute16,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 54, offset: 17255},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 547, col: 61, offset: 17262},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 547, col: 77, offset: 17278},
							expr: &seqExpr{
								pos: position{line: 547, col: 78, offset: 17279},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 547, col: 78, offset: 17279},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 547, col: 82, offset: 17283},
										expr: &actionExpr{
											pos: position{line: 3079, col: 10, offset: 100334},
											run: (*parser).callonNamedAttribute24,
											expr: &charClassMatcher{
												pos:        position{line: 3079, col: 11, offset: 100335},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 556, col: 1, offset: 17618},
			expr: &actionExpr{
				pos: position{line: 557, col: 5, offset: 17641},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 557, col: 5, offset: 17641},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 557, col: 5, offset: 17641},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 558, col: 9, offset: 17657},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 558, col: 9, offset: 17657},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 559, col: 11, offset: 17695},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 560, col: 11, offset: 17733},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 562, col: 5, offset: 17767},
							expr: &notExpr{
								pos: position{line: 562, col: 7, offset: 17769},
								expr: &seqExpr{
									pos: position{line: 562, col: 9, offset: 17771},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 562, col: 9, offset: 17771},
											expr: &actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonAttributeValue12,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 562, col: 16, offset: 17778},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 566, col: 1, offset: 17819},
			expr: &actionExpr{
				pos: position{line: 567, col: 5, offset: 17854},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 567, col: 5, offset: 17854},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 5, offset: 17854},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&notExpr{
							pos: position{line: 567, col: 9, offset: 17858},
							expr: &litMatcher{
								pos:        position{line: 567, col: 10, offset: 17859},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 5, offset: 17938},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 14, offset: 17947},
								name: "SingleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 569, col: 5, offset: 17986},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValueContent",
			pos:  position{line: 573, col: 1, offset: 18027},
			expr: &actionExpr{
				pos: position{line: 574, col: 5, offset: 18069},
				run: (*parser).callonSingleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 574, col: 5, offset: 18069},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 574, col: 14, offset: 18078},
						expr: &choiceExpr{
							pos: position{line: 575, col: 9, offset: 18088},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2997, col: 14, offset: 97724},
									run: (*parser).callonSingleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2997, col: 14, offset: 97724},
										expr: &charClassMatcher{
											pos:        position{line: 2997, col: 14, offset: 97724},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 3079, col: 10, offset: 100334},
									run: (*parser).callonSingleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 3079, col: 11, offset: 100335},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 577, col: 11, offset: 18124},
									name: "Quote",
								},
								&actionExpr{
									pos: position{line: 641, col: 5, offset: 20597},
									run: (*parser).callonSingleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 641, col: 5, offset: 20597},
												run: (*parser).callonSingleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 644, col: 5, offset: 20666},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 644, col: 14, offset: 20675},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 664, col: 25, offset: 21328},
															run: (*parser).callonSingleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 664, col: 25, offset: 21328},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 664, col: 37, offset: 21340},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 664, col: 56, offset: 21359},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 664, col: 62, offset: 21365},
																			expr: &actionExpr{
																				pos: position{line: 672, col: 17, offset: 21660},
																				run: (*parser).callonSingleQuotedAttributeValueContent27,
																				expr: &seqExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 672, col: 17, offset: 21660},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 672, col: 21, offset: 21664},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 672, col: 28, offset: 21671},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 672, col: 28, offset: 21671},
																										run: (*parser).callonSingleQuotedAttributeValueContent32,
																										expr: &charClassMatcher{
																											pos:        position{line: 672, col: 28, offset: 21671},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 674, col: 9, offset: 21725},
																										run: (*parser).callonSingleQuotedAttributeValueContent34,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 9, offset: 21725},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 664, col: 78, offset: 21381},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 668, col: 25, offset: 21499},
															run: (*parser).callonSingleQuotedAttributeValueContent38,
															expr: &seqExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 668, col: 25, offset: 21499},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 668, col: 38, offset: 21512},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent42,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 668, col: 57, offset: 21531},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 668, col: 63, offset: 21537},
																			expr: &actionExpr{
																				pos: position{line: 672, col: 17, offset: 21660},
																				run: (*parser).callonSingleQuotedAttributeValueContent49,
																				expr: &seqExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 672, col: 17, offset: 21660},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 672, col: 21, offset: 21664},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 672, col: 28, offset: 21671},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 672, col: 28, offset: 21671},
																										run: (*parser).callonSingleQuotedAttributeValueContent54,
																										expr: &charClassMatcher{
																											pos:        position{line: 672, col: 28, offset: 21671},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 674, col: 9, offset: 21725},
																										run: (*parser).callonSingleQuotedAttributeValueContent56,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 9, offset: 21725},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 668, col: 79, offset: 21553},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 650, col: 5, offset: 20804},
															run: (*parser).callonSingleQuotedAttributeValueContent60,
															expr: &seqExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 650, col: 5, offset: 20804},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 650, col: 13, offset: 20812},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent64,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 650, col: 32, offset: 20831},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 657, col: 5, offset: 21072},
															run: (*parser).callonSingleQuotedAttributeValueContent70,
															expr: &seqExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 657, col: 5, offset: 21072},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 657, col: 9, offset: 21076},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent74,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 657, col: 28, offset: 21095},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 579, col: 12, offset: 18170},
									run: (*parser).callonSingleQuotedAttributeValueContent80,
									expr: &litMatcher{
										pos:        position{line: 579, col: 12, offset: 18170},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
								},
								&litMatcher{
									pos:        position{line: 582, col: 13, offset: 18272},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
								&litMatcher{
									pos:        position{line: 582, col: 20, offset: 18279},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
								&actionExpr{
									pos: position{line: 582, col: 27, offset: 18286},
									run: (*parser).callonSingleQuotedAttributeValueContent84,
									expr: &litMatcher{
										pos:        position{line: 582, col: 27, offset: 18286},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&actionExpr{
									pos: position{line: 585, col: 12, offset: 18446},
									run: (*parser).callonSingleQuotedAttributeValueContent86,
									expr: &oneOrMoreExpr{
										pos: position{line: 585, col: 12, offset: 18446},
										expr: &charClassMatcher{
											pos:        position{line: 585, col: 12, offset: 18446},
											val:        "[^\\r\\n\\\\\\ ]",
											chars:      []rune{'\r', '\n', '\\', '\'', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 592, col: 1, offset: 18643},
			expr: &actionExpr{
				pos: position{line: 593, col: 5, offset: 18678},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 593, col: 5, offset: 18678},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 593, col: 5, offset: 18678},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&notExpr{
							pos: position{line: 593, col: 10, offset: 18683},
							expr: &litMatcher{
								pos:        position{line: 593, col: 11, offset: 18684},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 594, col: 5, offset: 18763},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 14, offset: 18772},
								name: "DoubleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 595, col: 5, offset: 18811},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&andExpr{
							pos: position{line: 595, col: 10, offset: 18816},
							expr: &notExpr{
								pos: position{line: 595, col: 12, offset: 18818},
								expr: &seqExpr{
									pos: position{line: 595, col: 14, offset: 18820},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 595, col: 14, offset: 18820},
											expr: &actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonDoubleQuotedAttributeValue13,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 595, col: 21, offset: 18827},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValueContent",
			pos:  position{line: 598, col: 1, offset: 18869},
			expr: &actionExpr{
				pos: position{line: 599, col: 5, offset: 18911},
				run: (*parser).callonDoubleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 599, col: 5, offset: 18911},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 599, col: 14, offset: 18920},
						expr: &choiceExpr{
							pos: position{line: 600, col: 9, offset: 18930},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2997, col: 14, offset: 97724},
									run: (*parser).callonDoubleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2997, col: 14, offset: 97724},
										expr: &charClassMatcher{
											pos:        position{line: 2997, col: 14, offset: 97724},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 3079, col: 10, offset: 100334},
									run: (*parser).callonDoubleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 3079, col: 11, offset: 100335},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 602, col: 11, offset: 18966},
									name: "Quote",
								},
								&actionExpr{
									pos: position{line: 641, col: 5, offset: 20597},
									run: (*parser).callonDoubleQuotedAttributeValueContent11,
									expr: &seqExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 641, col: 5, offset: 20597},
												run: (*parser).callonDoubleQuotedAttributeValueContent13,
											},
											&labeledExpr{
												pos:   position{line: 644, col: 5, offset: 20666},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 644, col: 14, offset: 20675},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 664, col: 25, offset: 21328},
															run: (*parser).callonDoubleQuotedAttributeValueContent16,
															expr: &seqExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 664, col: 25, offset: 21328},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 664, col: 37, offset: 21340},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent20,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 664, col: 56, offset: 21359},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 664, col: 62, offset: 21365},
																			expr: &actionExpr{
																				pos: position{line: 672, col: 17, offset: 21660},
																				run: (*parser).callonDoubleQuotedAttributeValueContent27,
																				expr: &seqExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 672, col: 17, offset: 21660},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 672, col: 21, offset: 21664},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 672, col: 28, offset: 21671},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 672, col: 28, offset: 21671},
																										run: (*parser).callonDoubleQuotedAttributeValueContent32,
																										expr: &charClassMatcher{
																											pos:        position{line: 672, col: 28, offset: 21671},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 674, col: 9, offset: 21725},
																										run: (*parser).callonDoubleQuotedAttributeValueContent34,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 9, offset: 21725},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 664, col: 78, offset: 21381},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 668, col: 25, offset: 21499},
															run: (*parser).callonDoubleQuotedAttributeValueContent38,
															expr: &seqExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 668, col: 25, offset: 21499},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 668, col: 38, offset: 21512},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent42,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 668, col: 57, offset: 21531},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 668, col: 63, offset: 21537},
																			expr: &actionExpr{
																				pos: position{line: 672, col: 17, offset: 21660},
																				run: (*parser).callonDoubleQuotedAttributeValueContent49,
																				expr: &seqExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 672, col: 17, offset: 21660},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 672, col: 21, offset: 21664},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 672, col: 28, offset: 21671},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 672, col: 28, offset: 21671},
																										run: (*parser).callonDoubleQuotedAttributeValueContent54,
																										expr: &charClassMatcher{
																											pos:        position{line: 672, col: 28, offset: 21671},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 674, col: 9, offset: 21725},
																										run: (*parser).callonDoubleQuotedAttributeValueContent56,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											expr: &charClassMatcher{
																												pos:        position{line: 674, col: 9, offset: 21725},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 668, col: 79, offset: 21553},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 650, col: 5, offset: 20804},
															run: (*parser).callonDoubleQuotedAttributeValueContent60,
															expr: &seqExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 650, col: 5, offset: 20804},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 650, col: 13, offset: 20812},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent64,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 650, col: 32, offset: 20831},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 657, col: 5, offset: 21072},
															run: (*parser).callonDoubleQuotedAttributeValueContent70,
															expr: &seqExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 657, col: 5, offset: 21072},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 657, col: 9, offset: 21076},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent74,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 657, col: 28, offset: 21095},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 604, col: 12, offset: 19013},
									run: (*parser).callonDoubleQuotedAttributeValueContent80,
									expr: &litMatcher{
										pos:        position{line: 604, col: 12, offset: 19013},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
								},
								&litMatcher{
									pos:        position{line: 607, col: 13, offset: 19115},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
								&litMatcher{
									pos:        position{line: 607, col: 21, offset: 19123},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
								&litMatcher{
									pos:        position{line: 607, col: 29, offset: 19131},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&actionExpr{
									pos: position{line: 607, col: 35, offset: 19137},
									run: (*parser).callonDoubleQuotedAttributeValueContent85,
									expr: &litMatcher{
										pos:        position{line: 607, col: 35, offset: 19137},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
								&actionExpr{
									pos: position{line: 610, col: 12, offset: 19320},
									run: (*parser).callonDoubleQuotedAttributeValueContent87,
									expr: &oneOrMoreExpr{
										pos: position{line: 610, col: 12, offset: 19320},
										expr: &charClassMatcher{
											pos:        position{line: 610, col: 12, offset: 19320},
											val:        "[^\\r\\n\\\\\"` ]",
											chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 618, col: 1, offset: 19594},
			expr: &actionExpr{
				pos: position{line: 621, col: 5, offset: 19778},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 621, col: 5, offset: 19778},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 621, col: 5, offset: 19778},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonUnquotedAttributeValue4,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 622, col: 5, offset: 19847},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 622, col: 14, offset: 19856},
								expr: &choiceExpr{
									pos: position{line: 623, col: 9, offset: 19866},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 623, col: 9, offset: 19866},
											name: "Quote",
										},
										&seqExpr{
											pos: position{line: 624, col: 12, offset: 19923},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 624, col: 12, offset: 19923},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 624, col: 16, offset: 19927},
													name: "UnquotedAttributeValue",
												},
												&litMatcher{
													pos:        position{line: 624, col: 39, offset: 19950},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 626, col: 12, offset: 20049},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &oneOrMoreExpr{
												pos: position{line: 626, col: 12, offset: 20049},
												expr: &charClassMatcher{
													pos:        position{line: 626, col: 12, offset: 20049},
													val:        "[^=,�]{ ]",
													chars:      []rune{'=', ',', '�', ']', '{', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 3079, col: 10, offset: 100334},
											run: (*parser).callonUnquotedAttributeValue17,
											expr: &charClassMatcher{
												pos:        position{line: 3079, col: 11, offset: 100335},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											run: (*parser).callonUnquotedAttributeValue19,
											expr: &seqExpr{
												pos: position{line: 641, col: 5, offset: 20597},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 641, col: 5, offset: 20597},
														run: (*parser).callonUnquotedAttributeValue21,
													},
													&labeledExpr{
														pos:   position{line: 644, col: 5, offset: 20666},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 644, col: 14, offset: 20675},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	run: (*parser).callonUnquotedAttributeValue24,
																	expr: &seqExpr{
																		pos: position{line: 664, col: 25, offset: 21328},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 664, col: 25, offset: 21328},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 664, col: 37, offset: 21340},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue28,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 664, col: 56, offset: 21359},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 664, col: 62, offset: 21365},
																					expr: &actionExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						run: (*parser).callonUnquotedAttributeValue35,
																						expr: &seqExpr{
																							pos: position{line: 672, col: 17, offset: 21660},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 672, col: 17, offset: 21660},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 672, col: 21, offset: 21664},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 672, col: 28, offset: 21671},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 672, col: 28, offset: 21671},
																												run: (*parser).callonUnquotedAttributeValue40,
																												expr: &charClassMatcher{
																													pos:        position{line: 672, col: 28, offset: 21671},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												run: (*parser).callonUnquotedAttributeValue42,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 674, col: 9, offset: 21725},
																													expr: &charClassMatcher{
																														pos:        position{line: 674, col: 9, offset: 21725},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 664, col: 78, offset: 21381},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	run: (*parser).callonUnquotedAttributeValue46,
																	expr: &seqExpr{
																		pos: position{line: 668, col: 25, offset: 21499},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 668, col: 25, offset: 21499},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 668, col: 38, offset: 21512},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue50,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 668, col: 57, offset: 21531},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 668, col: 63, offset: 21537},
																					expr: &actionExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						run: (*parser).callonUnquotedAttributeValue57,
																						expr: &seqExpr{
																							pos: position{line: 672, col: 17, offset: 21660},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 672, col: 17, offset: 21660},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 672, col: 21, offset: 21664},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 672, col: 28, offset: 21671},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 672, col: 28, offset: 21671},
																												run: (*parser).callonUnquotedAttributeValue62,
																												expr: &charClassMatcher{
																													pos:        position{line: 672, col: 28, offset: 21671},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												run: (*parser).callonUnquotedAttributeValue64,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 674, col: 9, offset: 21725},
																													expr: &charClassMatcher{
																														pos:        position{line: 674, col: 9, offset: 21725},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 668, col: 79, offset: 21553},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	run: (*parser).callonUnquotedAttributeValue68,
																	expr: &seqExpr{
																		pos: position{line: 650, col: 5, offset: 20804},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 650, col: 5, offset: 20804},
																				val:        "\\{",
																				ignoreCase: false,
																				want:       "\"\\\\{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 650, col: 13, offset: 20812},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue72,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 650, col: 32, offset: 20831},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	run: (*parser).callonUnquotedAttributeValue78,
																	expr: &seqExpr{
																		pos: position{line: 657, col: 5, offset: 21072},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 657, col: 5, offset: 21072},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 657, col: 9, offset: 21076},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue82,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 657, col: 28, offset: 21095},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 631, col: 11, offset: 20223},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 690, col: 1, offset: 22285},
			expr: &choiceExpr{
				pos: position{line: 690, col: 19, offset: 22303},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 692, col: 27, offset: 22379},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 692, col: 27, offset: 22379},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 692, col: 27, offset: 22379},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 692, col: 32, offset: 22384},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 3064, col: 7, offset: 99986},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 3064, col: 7, offset: 99986},
											expr: &charClassMatcher{
												pos:        position{line: 3064, col: 7, offset: 99986},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 692, col: 40, offset: 22392},
									expr: &actionExpr{
										pos: position{line: 3079, col: 10, offset: 100334},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 3079, col: 11, offset: 100335},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 692, col: 47, offset: 22399},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 692, col: 51, offset: 22403},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 702, col: 24, offset: 22804},
										expr: &choiceExpr{
											pos: position{line: 703, col: 5, offset: 22810},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 703, col: 6, offset: 22811},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 703, col: 6, offset: 22811},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 703, col: 6, offset: 22811},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 703, col: 14, offset: 22819},
																expr: &charClassMatcher{
																	pos:        position{line: 703, col: 14, offset: 22819},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 650, col: 5, offset: 20804},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 650, col: 5, offset: 20804},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 650, col: 5, offset: 20804},
																val:        "\\{",
																ignoreCase: false,
																want:       "\"\\\\{\"",
															},
															&labeledExpr{
																pos:   position{line: 650, col: 13, offset: 20812},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	run: (*parser).callonCrossReference25,
																	expr: &seqExpr{
																		pos: position{line: 324, col: 18, offset: 10072},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 324, col: 18, offset: 10072},
																				val:        "[_0-9\\pL]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 324, col: 28, offset: 10082},
																				expr: &charClassMatcher{
																					pos:        position{line: 324, col: 29, offset: 10083},
																					val:        "[-0-9\\pL]",
																					chars:      []rune{'-'},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 650, col: 32, offset: 20831},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 657, col: 5, offset: 21072},
													run: (*parser).callonCrossReference31,
													expr: &seqExpr{
														pos: position{line: 657, col: 5, offset: 21072},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 657, col: 5, offset: 21072},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 657, col: 9, offset: 21076},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	run: (*parser).callonCrossReference35,
																	expr: &seqExpr{
																		pos: position{line: 324, col: 18, offset: 10072},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 324, col: 18, offset: 10072},
																				val:        "[_0-9\\pL]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 324, col: 28, offset: 10082},
																				expr: &charClassMatcher{
																					pos:        position{line: 324, col: 29, offset: 10083},
																					val:        "[-0-9\\pL]",
																					chars:      []rune{'-'},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 657, col: 28, offset: 21095},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 707, col: 8, offset: 23045},
													run: (*parser).callonCrossReference41,
													expr: &litMatcher{
														pos:        position{line: 707, col: 8, offset: 23045},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 692, col: 79, offset: 22431},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 694, col: 9, offset: 22504},
						run: (*parser).callonCrossReference44,
						expr: &seqExpr{
							pos: position{line: 694, col: 9, offset: 22504},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 694, col: 9, offset: 22504},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 694, col: 14, offset: 22509},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 3064, col: 7, offset: 99986},
										run: (*parser).callonCrossReference48,
										expr: &oneOrMoreExpr{
											pos: position{line: 3064, col: 7, offset: 99986},
											expr: &charClassMatcher{
												pos:        position{line: 3064, col: 7, offset: 99986},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 694, col: 22, offset: 22517},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 690, col: 44, offset: 22328},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 698, col: 1, offset: 22588},
			expr: &actionExpr{
				pos: position{line: 698, col: 27, offset: 22614},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 698, col: 27, offset: 22614},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 698, col: 27, offset: 22614},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 698, col: 35, offset: 22622},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 3035, col: 17, offset: 98952},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 3035, col: 17, offset: 98952},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 3035, col: 22, offset: 98957},
										expr: &choiceExpr{
											pos: position{line: 3035, col: 23, offset: 98958},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3050, col: 5, offset: 99414},
													run: (*parser).callonExternalCrossReference9,
													expr: &seqExpr{
														pos: position{line: 3050, col: 5, offset: 99414},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 3050, col: 5, offset: 99414},
																expr: &litMatcher{
																	pos:        position{line: 3050, col: 6, offset: 99415},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 3051, col: 5, offset: 99439},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 3051, col: 14, offset: 99448},
																	expr: &choiceExpr{
																		pos: position{line: 3052, col: 9, offset: 99458},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3052, col: 9, offset: 99458},
																				run: (*parser).callonExternalCrossReference16,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3052, col: 9, offset: 99458},
																					expr: &charClassMatcher{
																						pos:        position{line: 3052, col: 10, offset: 99459},
																						val:        "[^\\r\\n[]�{.,;?!<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 3055, col: 11, offset: 99724},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 3025, col: 25, offset: 98695},
																						run: (*parser).callonExternalCrossReference20,
																						expr: &charClassMatcher{
																							pos:        position{line: 3025, col: 25, offset: 98695},
																							val:        "[.,;?!]",
																							chars:      []rune{'.', ',', ';', '?', '!'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&andExpr{
																						pos: position{line: 3055, col: 32, offset: 99745},
																						expr: &notExpr{
																							pos: position{line: 3055, col: 34, offset: 99747},
																							expr: &choiceExpr{
																								pos: position{line: 3055, col: 36, offset: 99749},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonExternalCrossReference27,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 641, col: 5, offset: 20597},
																				run: (*parser).callonExternalCrossReference29,
																				expr: &seqExpr{
																					pos: position{line: 641, col: 5, offset: 20597},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							run: (*parser).callonExternalCrossReference31,
																						},
																						&labeledExpr{
																							pos:   position{line: 644, col: 5, offset: 20666},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 644, col: 14, offset: 20675},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 664, col: 25, offset: 21328},
																										run: (*parser).callonExternalCrossReference34,
																										expr: &seqExpr{
																											pos: position{line: 664, col: 25, offset: 21328},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 664, col: 25, offset: 21328},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 37, offset: 21340},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference38,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 56, offset: 21359},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 664, col: 62, offset: 21365},
																														expr: &actionExpr{
																															pos: position{line: 672, col: 17, offset: 21660},
																															run: (*parser).callonExternalCrossReference45,
																															expr: &seqExpr{
																																pos: position{line: 672, col: 17, offset: 21660},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 672, col: 17, offset: 21660},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 672, col: 21, offset: 21664},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 672, col: 28, offset: 21671},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					run: (*parser).callonExternalCrossReference50,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 672, col: 28, offset: 21671},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 674, col: 9, offset: 21725},
																																					run: (*parser).callonExternalCrossReference52,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 674, col: 9, offset: 21725},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 674, col: 9, offset: 21725},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 664, col: 78, offset: 21381},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 668, col: 25, offset: 21499},
																										run: (*parser).callonExternalCrossReference56,
																										expr: &seqExpr{
																											pos: position{line: 668, col: 25, offset: 21499},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 668, col: 25, offset: 21499},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 668, col: 38, offset: 21512},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference60,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 668, col: 57, offset: 21531},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 668, col: 63, offset: 21537},
																														expr: &actionExpr{
																															pos: position{line: 672, col: 17, offset: 21660},
																															run: (*parser).callonExternalCrossReference67,
																															expr: &seqExpr{
																																pos: position{line: 672, col: 17, offset: 21660},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 672, col: 17, offset: 21660},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 672, col: 21, offset: 21664},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 672, col: 28, offset: 21671},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					run: (*parser).callonExternalCrossReference72,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 672, col: 28, offset: 21671},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 674, col: 9, offset: 21725},
																																					run: (*parser).callonExternalCrossReference74,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 674, col: 9, offset: 21725},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 674, col: 9, offset: 21725},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 668, col: 79, offset: 21553},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonExternalCrossReference78,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference82,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonExternalCrossReference88,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference92,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2764, col: 5, offset: 90546},
																				run: (*parser).callonExternalCrossReference98,
																				expr: &seqExpr{
																					pos: position{line: 2764, col: 5, offset: 90546},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2764, col: 5, offset: 90546},
																							run: (*parser).callonExternalCrossReference100,
																						},
																						&labeledExpr{
																							pos:   position{line: 2767, col: 5, offset: 90622},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2769, col: 9, offset: 90720},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2769, col: 9, offset: 90720},
																										run: (*parser).callonExternalCrossReference103,
																										expr: &choiceExpr{
																											pos: position{line: 692, col: 27, offset: 22379},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 692, col: 27, offset: 22379},
																													run: (*parser).callonExternalCrossReference105,
																													expr: &seqExpr{
																														pos: position{line: 692, col: 27, offset: 22379},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 692, col: 27, offset: 22379},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 692, col: 32, offset: 22384},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 3064, col: 7, offset: 99986},
																																	run: (*parser).callonExternalCrossReference109,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 3064, col: 7, offset: 99986},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3064, col: 7, offset: 99986},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 692, col: 40, offset: 22392},
																																expr: &actionExpr{
																																	pos: position{line: 3079, col: 10, offset: 100334},
																																	run: (*parser).callonExternalCrossReference113,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 3079, col: 11, offset: 100335},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 692, col: 47, offset: 22399},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 692, col: 51, offset: 22403},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 702, col: 24, offset: 22804},
																																	expr: &choiceExpr{
																																		pos: position{line: 703, col: 5, offset: 22810},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 703, col: 6, offset: 22811},
																																				run: (*parser).callonExternalCrossReference119,
																																				expr: &seqExpr{
																																					pos: position{line: 703, col: 6, offset: 22811},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 703, col: 6, offset: 22811},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 703, col: 14, offset: 22819},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 703, col: 14, offset: 22819},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 650, col: 5, offset: 20804},
																																				run: (*parser).callonExternalCrossReference124,
																																				expr: &seqExpr{
																																					pos: position{line: 650, col: 5, offset: 20804},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 650, col: 5, offset: 20804},
																																							val:        "\\{",
																																							ignoreCase: false,
																																							want:       "\"\\\\{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 650, col: 13, offset: 20812},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 324, col: 18, offset: 10072},
																																								run: (*parser).callonExternalCrossReference128,
																																								expr: &seqExpr{
																																									pos: position{line: 324, col: 18, offset: 10072},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 324, col: 18, offset: 10072},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 324, col: 28, offset: 10082},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 324, col: 29, offset: 10083},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 650, col: 32, offset: 20831},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 657, col: 5, offset: 21072},
																																				run: (*parser).callonExternalCrossReference134,
																																				expr: &seqExpr{
																																					pos: position{line: 657, col: 5, offset: 21072},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 657, col: 5, offset: 21072},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 657, col: 9, offset: 21076},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 324, col: 18, offset: 10072},
																																								run: (*parser).callonExternalCrossReference138,
																																								expr: &seqExpr{
																																									pos: position{line: 324, col: 18, offset: 10072},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 324, col: 18, offset: 10072},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 324, col: 28, offset: 10082},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 324, col: 29, offset: 10083},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 657, col: 28, offset: 21095},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 707, col: 8, offset: 23045},
																																				run: (*parser).callonExternalCrossReference144,
																																				expr: &litMatcher{
																																					pos:        position{line: 707, col: 8, offset: 23045},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 692, col: 79, offset: 22431},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 694, col: 9, offset: 22504},
																													run: (*parser).callonExternalCrossReference147,
																													expr: &seqExpr{
																														pos: position{line: 694, col: 9, offset: 22504},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 694, col: 9, offset: 22504},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 694, col: 14, offset: 22509},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 3064, col: 7, offset: 99986},
																																	run: (*parser).callonExternalCrossReference151,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 3064, col: 7, offset: 99986},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3064, col: 7, offset: 99986},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 694, col: 22, offset: 22517},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2772, col: 11, offset: 90824},
																										run: (*parser).callonExternalCrossReference155,
																										expr: &charClassMatcher{
																											pos:        position{line: 2772, col: 12, offset: 90825},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 3058, col: 11, offset: 99830},
																				run: (*parser).callonExternalCrossReference157,
																				expr: &litMatcher{
																					pos:        position{line: 3058, col: 11, offset: 99830},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1141, col: 23, offset: 35577},
													run: (*parser).callonExternalCrossReference159,
													expr: &seqExpr{
														pos: position{line: 1141, col: 23, offset: 35577},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1139, col: 32, offset: 35545},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 1141, col: 51, offset: 35605},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 1141, col: 56, offset: 35610},
																	run: (*parser).callonExternalCrossReference163,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1141, col: 56, offset: 35610},
																		expr: &charClassMatcher{
																			pos:        position{line: 1141, col: 56, offset: 35610},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1139, col: 32, offset: 35545},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 698, col: 54, offset: 22641},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 698, col: 66, offset: 22653},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 940, col: 1, offset: 29414},
			expr: &actionExpr{
				pos: position{line: 941, col: 5, offset: 29447},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 941, col: 5, offset: 29447},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 941, col: 5, offset: 29447},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 941, col: 11, offset: 29453},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 941, col: 19, offset: 29461},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 941, col: 20, offset: 29462},
									expr: &charClassMatcher{
										pos:        position{line: 941, col: 20, offset: 29462},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3095, col: 8, offset: 100658},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3092, col: 8, offset: 100608},
									expr: &anyMatcher{
										line: 3092, col: 9, offset: 100609,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 1013, col: 1, offset: 31413},
			expr: &actionExpr{
				pos: position{line: 1014, col: 5, offset: 31436},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 1014, col: 5, offset: 31436},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1014, col: 5, offset: 31436},
							run: (*parser).callonDocumentHeader3,
						},
						&labeledExpr{
							pos:   position{line: 1017, col: 5, offset: 31497},
							label: "extraAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1017, col: 17, offset: 31509},
								name: "DocumentHeaderAttributes",
							},
						},
						&labeledExpr{
							pos:   position{line: 1018, col: 5, offset: 31539},
							label: "info",
							expr: &zeroOrOneExpr{
								pos: position{line: 1018, col: 10, offset: 31544},
								expr: &actionExpr{
									pos: position{line: 1041, col: 5, offset: 32397},
									run: (*parser).callonDocumentHeader8,
									expr: &seqExpr{
										pos: position{line: 1041, col: 5, offset: 32397},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1041, col: 5, offset: 32397},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 1049, col: 5, offset: 32678},
													run: (*parser).callonDocumentHeader11,
													expr: &seqExpr{
														pos: position{line: 1049, col: 5, offset: 32678},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1049, col: 5, offset: 32678},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
															&actionExpr{
																pos: position{line: 3083, col: 11, offset: 100401},
																run: (*parser).callonDocumentHeader14,
																expr: &oneOrMoreExpr{
																	pos: position{line: 3083, col: 11, offset: 100401},
																	expr: &charClassMatcher{
																		pos:        position{line: 3083, col: 12, offset: 100402},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1049, col: 16, offset: 32689},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 2648, col: 17, offset: 87197},
																	run: (*parser).callonDocumentHeader18,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2648, col: 17, offset: 87197},
																		expr: &charClassMatcher{
																			pos:        position{line: 2648, col: 17, offset: 87197},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonDocumentHeader22,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1042, col: 5, offset: 32423},
												expr: &choiceExpr{
													pos: position{line: 1042, col: 6, offset: 32424},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2781, col: 22, offset: 91184},
															run: (*parser).callonDocumentHeader31,
															expr: &seqExpr{
																pos: position{line: 2781, col: 22, offset: 91184},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2786, col: 31, offset: 91405},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2786, col: 36, offset: 91410},
																		expr: &litMatcher{
																			pos:        position{line: 2786, col: 37, offset: 91411},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2781, col: 49, offset: 91211},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2788, col: 29, offset: 91446},
																			run: (*parser).callonDocumentHeader37,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2788, col: 29, offset: 91446},
																				expr: &charClassMatcher{
																					pos:        position{line: 2788, col: 29, offset: 91446},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonDocumentHeader41,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 796, col: 5, offset: 25530},
															run: (*parser).callonDocumentHeader48,
															expr: &seqExpr{
																pos: position{line: 796, col: 5, offset: 25530},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 744, col: 26, offset: 24098},
																		run: (*parser).callonDocumentHeader50,
																		expr: &seqExpr{
																			pos: position{line: 744, col: 26, offset: 24098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 744, col: 26, offset: 24098},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 744, col: 33, offset: 24105},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonDocumentHeader54,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentHeader57,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 797, col: 5, offset: 25561},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 808, col: 5, offset: 25885},
																			expr: &actionExpr{
																				pos: position{line: 808, col: 6, offset: 25886},
																				run: (*parser).callonDocumentHeader66,
																				expr: &seqExpr{
																					pos: position{line: 808, col: 6, offset: 25886},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 808, col: 6, offset: 25886},
																							expr: &choiceExpr{
																								pos: position{line: 805, col: 29, offset: 25828},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 744, col: 26, offset: 24098},
																										run: (*parser).callonDocumentHeader70,
																										expr: &seqExpr{
																											pos: position{line: 744, col: 26, offset: 24098},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 744, col: 26, offset: 24098},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 744, col: 33, offset: 24105},
																													expr: &actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonDocumentHeader74,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 3095, col: 8, offset: 100658},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 3088, col: 12, offset: 100518},
																															run: (*parser).callonDocumentHeader77,
																															expr: &choiceExpr{
																																pos: position{line: 3088, col: 13, offset: 100519},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 13, offset: 100519},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 20, offset: 100526},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 29, offset: 100535},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3092, col: 8, offset: 100608},
																															expr: &anyMatcher{
																																line: 3092, col: 9, offset: 100609,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 809, col: 5, offset: 25916},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 785, col: 5, offset: 25225},
																								run: (*parser).callonDocumentHeader87,
																								expr: &seqExpr{
																									pos: position{line: 785, col: 5, offset: 25225},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 785, col: 5, offset: 25225},
																											expr: &notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 786, col: 5, offset: 25298},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 786, col: 14, offset: 25307},
																												run: (*parser).callonDocumentHeader93,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 786, col: 14, offset: 25307},
																													expr: &charClassMatcher{
																														pos:        position{line: 786, col: 14, offset: 25307},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonDocumentHeader97,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 798, col: 5, offset: 25595},
																		expr: &choiceExpr{
																			pos: position{line: 805, col: 29, offset: 25828},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 744, col: 26, offset: 24098},
																					run: (*parser).callonDocumentHeader106,
																					expr: &seqExpr{
																						pos: position{line: 744, col: 26, offset: 24098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 744, col: 26, offset: 24098},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 744, col: 33, offset: 24105},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonDocumentHeader110,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonDocumentHeader113,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1043, col: 5, offset: 32498},
												label: "authorsAndRevision",
												expr: &zeroOrOneExpr{
													pos: position{line: 1043, col: 24, offset: 32517},
													expr: &actionExpr{
														pos: position{line: 1054, col: 5, offset: 32784},
														run: (*parser).callonDocumentHeader124,
														expr: &seqExpr{
															pos: position{line: 1054, col: 5, offset: 32784},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1054, col: 5, offset: 32784},
																	label: "authors",
																	expr: &actionExpr{
																		pos: position{line: 1060, col: 20, offset: 33040},
																		run: (*parser).callonDocumentHeader127,
																		expr: &seqExpr{
																			pos: position{line: 1060, col: 20, offset: 33040},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1060, col: 20, offset: 33040},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonDocumentHeader130,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1060, col: 27, offset: 33047},
																					label: "authors",
																					expr: &choiceExpr{
																						pos: position{line: 1060, col: 36, offset: 33056},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1064, col: 30, offset: 33176},
																								run: (*parser).callonDocumentHeader134,
																								expr: &seqExpr{
																									pos: position{line: 1064, col: 30, offset: 33176},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 1064, col: 30, offset: 33176},
																											expr: &litMatcher{
																												pos:        position{line: 1064, col: 31, offset: 33177},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 1064, col: 35, offset: 33181},
																											label: "authors",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1064, col: 44, offset: 33190},
																												expr: &actionExpr{
																													pos: position{line: 1073, col: 5, offset: 33422},
																													run: (*parser).callonDocumentHeader140,
																													expr: &seqExpr{
																														pos: position{line: 1073, col: 5, offset: 33422},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1073, col: 5, offset: 33422},
																																label: "fullName",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 1073, col: 14, offset: 33431},
																																	expr: &actionExpr{
																																		pos: position{line: 1084, col: 5, offset: 33811},
																																		run: (*parser).callonDocumentHeader144,
																																		expr: &seqExpr{
																																			pos: position{line: 1084, col: 5, offset: 33811},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1084, col: 5, offset: 33811},
																																					label: "part1",
																																					expr: &actionExpr{
																																						pos: position{line: 1084, col: 12, offset: 33818},
																																						run: (*parser).callonDocumentHeader147,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1084, col: 12, offset: 33818},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1084, col: 12, offset: 33818},
																																								val:        "[^<;\\r\\n ]",
																																								chars:      []rune{'<', ';', '\r', '\n', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 1087, col: 5, offset: 33898},
																																					expr: &actionExpr{
																																						pos: position{line: 3079, col: 10, offset: 100334},
																																						run: (*parser).callonDocumentHeader151,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3079, col: 11, offset: 100335},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1088, col: 5, offset: 33909},
																																					label: "part2",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 1088, col: 11, offset: 33915},
																																						expr: &actionExpr{
																																							pos: position{line: 1088, col: 12, offset: 33916},
																																							run: (*parser).callonDocumentHeader155,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1088, col: 12, offset: 33916},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1088, col: 12, offset: 33916},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 1091, col: 5, offset: 33997},
																																					expr: &actionExpr{
																																						pos: position{line: 3079, col: 10, offset: 100334},
																																						run: (*parser).callonDocumentHeader159,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3079, col: 11, offset: 100335},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1092, col: 5, offset: 34008},
																																					label: "part3",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 1092, col: 11, offset: 34014},
																																						expr: &actionExpr{
																																							pos: position{line: 1092, col: 12, offset: 34015},
																																							run: (*parser).callonDocumentHeader163,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1092, col: 12, offset: 34015},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1092, col: 12, offset: 34015},
																																									val:        "[^<;\\r\\n]",
																																									chars:      []rune{'<', ';', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 1095, col: 5, offset: 34094},
																																					expr: &actionExpr{
																																						pos: position{line: 3079, col: 10, offset: 100334},
																																						run: (*parser).callonDocumentHeader167,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3079, col: 11, offset: 100335},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1073, col: 40, offset: 33457},
																																label: "email",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 1073, col: 46, offset: 33463},
																																	expr: &actionExpr{
																																		pos: position{line: 1101, col: 5, offset: 34216},
																																		run: (*parser).callonDocumentHeader171,
																																		expr: &seqExpr{
																																			pos: position{line: 1101, col: 5, offset: 34216},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1101, col: 5, offset: 34216},
																																					expr: &notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 1102, col: 5, offset: 34226},
																																					val:        "<",
																																					ignoreCase: false,
																																					want:       "\"<\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1103, col: 5, offset: 34235},
																																					label: "email",
																																					expr: &actionExpr{
																																						pos: position{line: 1103, col: 12, offset: 34242},
																																						run: (*parser).callonDocumentHeader178,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1103, col: 13, offset: 34243},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1103, col: 13, offset: 34243},
																																								val:        "[^>\\r\\n]",
																																								chars:      []rune{'>', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 1106, col: 5, offset: 34303},
																																					val:        ">",
																																					ignoreCase: false,
																																					want:       "\">\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 1073, col: 69, offset: 33486},
																																expr: &actionExpr{
																																	pos: position{line: 3079, col: 10, offset: 100334},
																																	run: (*parser).callonDocumentHeader183,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 3079, col: 11, offset: 100335},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&zeroOrOneExpr{
																																pos: position{line: 1073, col: 76, offset: 33493},
																																expr: &litMatcher{
																																	pos:        position{line: 1073, col: 76, offset: 33493},
																																	val:        ";",
																																	ignoreCase: false,
																																	want:       "\";\"",
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 1073, col: 81, offset: 33498},
																																expr: &actionExpr{
																																	pos: position{line: 3079, col: 10, offset: 100334},
																																	run: (*parser).callonDocumentHeader188,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 3079, col: 11, offset: 100335},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1074, col: 5, offset: 33510},
																																run: (*parser).callonDocumentHeader190,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1068, col: 33, offset: 33308},
																								run: (*parser).callonDocumentHeader191,
																								expr: &seqExpr{
																									pos: position{line: 1068, col: 33, offset: 33308},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1068, col: 33, offset: 33308},
																											val:        ":author:",
																											ignoreCase: false,
																											want:       "\":author:\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1068, col: 44, offset: 33319},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonDocumentHeader195,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 1068, col: 51, offset: 33326},
																											label: "author",
																											expr: &actionExpr{
																												pos: position{line: 1073, col: 5, offset: 33422},
																												run: (*parser).callonDocumentHeader198,
																												expr: &seqExpr{
																													pos: position{line: 1073, col: 5, offset: 33422},
																													exprs: []interface{}{
																														&labeledExpr{
																															pos:   position{line: 1073, col: 5, offset: 33422},
																															label: "fullName",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 1073, col: 14, offset: 33431},
																																expr: &actionExpr{
																																	pos: position{line: 1084, col: 5, offset: 33811},
																																	run: (*parser).callonDocumentHeader202,
																																	expr: &seqExpr{
																																		pos: position{line: 1084, col: 5, offset: 33811},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1084, col: 5, offset: 33811},
																																				label: "part1",
																																				expr: &actionExpr{
																																					pos: position{line: 1084, col: 12, offset: 33818},
																																					run: (*parser).callonDocumentHeader205,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1084, col: 12, offset: 33818},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1084, col: 12, offset: 33818},
																																							val:        "[^<;\\r\\n ]",
																																							chars:      []rune{'<', ';', '\r', '\n', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1087, col: 5, offset: 33898},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonDocumentHeader209,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1088, col: 5, offset: 33909},
																																				label: "part2",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 1088, col: 11, offset: 33915},
																																					expr: &actionExpr{
																																						pos: position{line: 1088, col: 12, offset: 33916},
																																						run: (*parser).callonDocumentHeader213,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1088, col: 12, offset: 33916},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1088, col: 12, offset: 33916},
																																								val:        "[^<;\\r\\n ]",
																																								chars:      []rune{'<', ';', '\r', '\n', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1091, col: 5, offset: 33997},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonDocumentHeader217,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1092, col: 5, offset: 34008},
																																				label: "part3",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 1092, col: 11, offset: 34014},
																																					expr: &actionExpr{
																																						pos: position{line: 1092, col: 12, offset: 34015},
																																						run: (*parser).callonDocumentHeader221,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1092, col: 12, offset: 34015},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1092, col: 12, offset: 34015},
																																								val:        "[^<;\\r\\n]",
																																								chars:      []rune{'<', ';', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1095, col: 5, offset: 34094},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonDocumentHeader225,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1073, col: 40, offset: 33457},
																															label: "email",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 1073, col: 46, offset: 33463},
																																expr: &actionExpr{
																																	pos: position{line: 1101, col: 5, offset: 34216},
																																	run: (*parser).callonDocumentHeader229,
																																	expr: &seqExpr{
																																		pos: position{line: 1101, col: 5, offset: 34216},
																																		exprs: []interface{}{
																																			&notExpr{
																																				pos: position{line: 1101, col: 5, offset: 34216},
																																				expr: &notExpr{
																																					pos: position{line: 3092, col: 8, offset: 100608},
																																					expr: &anyMatcher{
																																						line: 3092, col: 9, offset: 100609,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1102, col: 5, offset: 34226},
																																				val:        "<",
																																				ignoreCase: false,
																																				want:       "\"<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1103, col: 5, offset: 34235},
																																				label: "email",
																																				expr: &actionExpr{
																																					pos: position{line: 1103, col: 12, offset: 34242},
																																					run: (*parser).callonDocumentHeader236,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1103, col: 13, offset: 34243},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1103, col: 13, offset: 34243},
																																							val:        "[^>\\r\\n]",
																																							chars:      []rune{'>', '\r', '\n'},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1106, col: 5, offset: 34303},
																																				val:        ">",
																																				ignoreCase: false,
																																				want:       "\">\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1073, col: 69, offset: 33486},
																															expr: &actionExpr{
																																pos: position{line: 3079, col: 10, offset: 100334},
																																run: (*parser).callonDocumentHeader241,
																																expr: &charClassMatcher{
																																	pos:        position{line: 3079, col: 11, offset: 100335},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 1073, col: 76, offset: 33493},
																															expr: &litMatcher{
																																pos:        position{line: 1073, col: 76, offset: 33493},
																																val:        ";",
																																ignoreCase: false,
																																want:       "\";\"",
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1073, col: 81, offset: 33498},
																															expr: &actionExpr{
																																pos: position{line: 3079, col: 10, offset: 100334},
																																run: (*parser).callonDocumentHeader246,
																																expr: &charClassMatcher{
																																	pos:        position{line: 3079, col: 11, offset: 100335},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&andCodeExpr{
																															pos: position{line: 1074, col: 5, offset: 33510},
																															run: (*parser).callonDocumentHeader248,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentHeader250,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1055, col: 5, offset: 32814},
																	expr: &choiceExpr{
																		pos: position{line: 1055, col: 6, offset: 32815},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2781, col: 22, offset: 91184},
																				run: (*parser).callonDocumentHeader259,
																				expr: &seqExpr{
																					pos: position{line: 2781, col: 22, offset: 91184},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2786, col: 31, offset: 91405},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&notExpr{
																							pos: position{line: 2786, col: 36, offset: 91410},
																							expr: &litMatcher{
																								pos:        position{line: 2786, col: 37, offset: 91411},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2781, col: 49, offset: 91211},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2788, col: 29, offset: 91446},
																								run: (*parser).callonDocumentHeader265,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2788, col: 29, offset: 91446},
																									expr: &charClassMatcher{
																										pos:        position{line: 2788, col: 29, offset: 91446},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonDocumentHeader269,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 796, col: 5, offset: 25530},
																				run: (*parser).callonDocumentHeader276,
																				expr: &seqExpr{
																					pos: position{line: 796, col: 5, offset: 25530},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 744, col: 26, offset: 24098},
																							run: (*parser).callonDocumentHeader278,
																							expr: &seqExpr{
																								pos: position{line: 744, col: 26, offset: 24098},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 744, col: 26, offset: 24098},
																										val:        "////",
																										ignoreCase: false,
																										want:       "\"////\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 744, col: 33, offset: 24105},
																										expr: &actionExpr{
																											pos: position{line: 3079, col: 10, offset: 100334},
																											run: (*parser).callonDocumentHeader282,
																											expr: &charClassMatcher{
																												pos:        position{line: 3079, col: 11, offset: 100335},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3095, col: 8, offset: 100658},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3088, col: 12, offset: 100518},
																												run: (*parser).callonDocumentHeader285,
																												expr: &choiceExpr{
																													pos: position{line: 3088, col: 13, offset: 100519},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3088, col: 13, offset: 100519},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 20, offset: 100526},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 29, offset: 100535},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 797, col: 5, offset: 25561},
																							label: "content",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 808, col: 5, offset: 25885},
																								expr: &actionExpr{
																									pos: position{line: 808, col: 6, offset: 25886},
																									run: (*parser).callonDocumentHeader294,
																									expr: &seqExpr{
																										pos: position{line: 808, col: 6, offset: 25886},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 808, col: 6, offset: 25886},
																												expr: &choiceExpr{
																													pos: position{line: 805, col: 29, offset: 25828},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 744, col: 26, offset: 24098},
																															run: (*parser).callonDocumentHeader298,
																															expr: &seqExpr{
																																pos: position{line: 744, col: 26, offset: 24098},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 744, col: 26, offset: 24098},
																																		val:        "////",
																																		ignoreCase: false,
																																		want:       "\"////\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 744, col: 33, offset: 24105},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonDocumentHeader302,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3095, col: 8, offset: 100658},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3088, col: 12, offset: 100518},
																																				run: (*parser).callonDocumentHeader305,
																																				expr: &choiceExpr{
																																					pos: position{line: 3088, col: 13, offset: 100519},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 13, offset: 100519},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 20, offset: 100526},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 29, offset: 100535},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3092, col: 8, offset: 100608},
																																				expr: &anyMatcher{
																																					line: 3092, col: 9, offset: 100609,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3092, col: 8, offset: 100608},
																															expr: &anyMatcher{
																																line: 3092, col: 9, offset: 100609,
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 809, col: 5, offset: 25916},
																												label: "line",
																												expr: &actionExpr{
																													pos: position{line: 785, col: 5, offset: 25225},
																													run: (*parser).callonDocumentHeader315,
																													expr: &seqExpr{
																														pos: position{line: 785, col: 5, offset: 25225},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 785, col: 5, offset: 25225},
																																expr: &notExpr{
																																	pos: position{line: 3092, col: 8, offset: 100608},
																																	expr: &anyMatcher{
																																		line: 3092, col: 9, offset: 100609,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 786, col: 5, offset: 25298},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 786, col: 14, offset: 25307},
																																	run: (*parser).callonDocumentHeader321,
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 786, col: 14, offset: 25307},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 786, col: 14, offset: 25307},
																																			val:        "[^\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3095, col: 8, offset: 100658},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 3088, col: 12, offset: 100518},
																																		run: (*parser).callonDocumentHeader325,
																																		expr: &choiceExpr{
																																			pos: position{line: 3088, col: 13, offset: 100519},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 3088, col: 13, offset: 100519},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 3088, col: 20, offset: 100526},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 3088, col: 29, offset: 100535},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3092, col: 8, offset: 100608},
																																		expr: &anyMatcher{
																																			line: 3092, col: 9, offset: 100609,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 798, col: 5, offset: 25595},
																							expr: &choiceExpr{
																								pos: position{line: 805, col: 29, offset: 25828},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 744, col: 26, offset: 24098},
																										run: (*parser).callonDocumentHeader334,
																										expr: &seqExpr{
																											pos: position{line: 744, col: 26, offset: 24098},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 744, col: 26, offset: 24098},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 744, col: 33, offset: 24105},
																													expr: &actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonDocumentHeader338,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 3095, col: 8, offset: 100658},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 3088, col: 12, offset: 100518},
																															run: (*parser).callonDocumentHeader341,
																															expr: &choiceExpr{
																																pos: position{line: 3088, col: 13, offset: 100519},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 13, offset: 100519},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 20, offset: 100526},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 29, offset: 100535},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3092, col: 8, offset: 100608},
																															expr: &anyMatcher{
																																line: 3092, col: 9, offset: 100609,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1056, col: 5, offset: 32889},
																	label: "revision",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1056, col: 14, offset: 32898},
																		expr: &actionExpr{
																			pos: position{line: 1112, col: 21, offset: 34492},
																			run: (*parser).callonDocumentHeader352,
																			expr: &seqExpr{
																				pos: position{line: 1112, col: 21, offset: 34492},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 1112, col: 21, offset: 34492},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDocumentHeader355,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1112, col: 28, offset: 34499},
																						expr: &litMatcher{
																							pos:        position{line: 1112, col: 29, offset: 34500},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1112, col: 33, offset: 34504},
																						label: "revision",
																						expr: &choiceExpr{
																							pos: position{line: 1113, col: 9, offset: 34523},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1113, col: 10, offset: 34524},
																									run: (*parser).callonDocumentHeader361,
																									expr: &seqExpr{
																										pos: position{line: 1113, col: 10, offset: 34524},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1113, col: 10, offset: 34524},
																												label: "revnumber",
																												expr: &choiceExpr{
																													pos: position{line: 1122, col: 27, offset: 35041},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1122, col: 27, offset: 35041},
																															run: (*parser).callonDocumentHeader365,
																															expr: &seqExpr{
																																pos: position{line: 1122, col: 27, offset: 35041},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1122, col: 27, offset: 35041},
																																		val:        "v",
																																		ignoreCase: true,
																																		want:       "\"v\"i",
																																	},
																																	&charClassMatcher{
																																		pos:        position{line: 1122, col: 32, offset: 35046},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 1122, col: 38, offset: 35052},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1122, col: 38, offset: 35052},
																																			val:        "[^:,\\r\\n]",
																																			chars:      []rune{':', ',', '\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1124, col: 5, offset: 35100},
																															run: (*parser).callonDocumentHeader371,
																															expr: &seqExpr{
																																pos: position{line: 1124, col: 5, offset: 35100},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 1124, col: 5, offset: 35100},
																																		expr: &litMatcher{
																																			pos:        position{line: 1124, col: 5, offset: 35100},
																																			val:        "v",
																																			ignoreCase: true,
																																			want:       "\"v\"i",
																																		},
																																	},
																																	&charClassMatcher{
																																		pos:        position{line: 1124, col: 11, offset: 35106},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 1124, col: 17, offset: 35112},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1124, col: 17, offset: 35112},
																																			val:        "[^:,\\r\\n]",
																																			chars:      []rune{':', ',', '\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1124, col: 28, offset: 35123},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonDocumentHeader379,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&andExpr{
																																		pos: position{line: 1124, col: 35, offset: 35130},
																																		expr: &litMatcher{
																																			pos:        position{line: 1124, col: 36, offset: 35131},
																																			val:        ",",
																																			ignoreCase: false,
																																			want:       "\",\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 1113, col: 45, offset: 34559},
																												expr: &litMatcher{
																													pos:        position{line: 1113, col: 45, offset: 34559},
																													val:        ",",
																													ignoreCase: false,
																													want:       "\",\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1113, col: 50, offset: 34564},
																												label: "revdate",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 1113, col: 58, offset: 34572},
																													expr: &actionExpr{
																														pos: position{line: 1128, col: 25, offset: 35195},
																														run: (*parser).callonDocumentHeader387,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1128, col: 25, offset: 35195},
																															expr: &charClassMatcher{
																																pos:        position{line: 1128, col: 25, offset: 35195},
																																val:        "[^:\\r\\n]",
																																chars:      []rune{':', '\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 1113, col: 82, offset: 34596},
																												expr: &litMatcher{
																													pos:        position{line: 1113, col: 82, offset: 34596},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1113, col: 87, offset: 34601},
																												label: "revremark",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 1113, col: 97, offset: 34611},
																													expr: &actionExpr{
																														pos: position{line: 1132, col: 27, offset: 35267},
																														run: (*parser).callonDocumentHeader394,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1132, col: 27, offset: 35267},
																															expr: &charClassMatcher{
																																pos:        position{line: 1132, col: 27, offset: 35267},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1115, col: 15, offset: 34729},
																									run: (*parser).callonDocumentHeader397,
																									expr: &seqExpr{
																										pos: position{line: 1115, col: 15, offset: 34729},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1115, col: 15, offset: 34729},
																												label: "revdate",
																												expr: &actionExpr{
																													pos: position{line: 1128, col: 25, offset: 35195},
																													run: (*parser).callonDocumentHeader400,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1128, col: 25, offset: 35195},
																														expr: &charClassMatcher{
																															pos:        position{line: 1128, col: 25, offset: 35195},
																															val:        "[^:\\r\\n]",
																															chars:      []rune{':', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 1115, col: 46, offset: 34760},
																												expr: &litMatcher{
																													pos:        position{line: 1115, col: 46, offset: 34760},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1115, col: 51, offset: 34765},
																												label: "revremark",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 1115, col: 61, offset: 34775},
																													expr: &actionExpr{
																														pos: position{line: 1132, col: 27, offset: 35267},
																														run: (*parser).callonDocumentHeader407,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1132, col: 27, offset: 35267},
																															expr: &charClassMatcher{
																																pos:        position{line: 1132, col: 27, offset: 35267},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonDocumentHeader411,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1019, col: 5, offset: 31571},
							label: "moreExtraAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1019, col: 21, offset: 31587},
								name: "DocumentHeaderAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1020, col: 5, offset: 31617},
							run: (*parser).callonDocumentHeader420,
						},
					},
				},
			},
		},
		{
			name: "DocumentHeaderAttributes",
			pos:  position{line: 1038, col: 1, offset: 32252},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1038, col: 29, offset: 32280},
				expr: &choiceExpr{
					pos: position{line: 1038, col: 30, offset: 32281},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1038, col: 30, offset: 32281},
							name: "AttributeDeclaration",
						},
						&actionExpr{
							pos: position{line: 364, col: 19, offset: 11171},
							run: (*parser).callonDocumentHeaderAttributes4,
							expr: &seqExpr{
								pos: position{line: 364, col: 19, offset: 11171},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 364, col: 19, offset: 11171},
										val:        ":!",
										ignoreCase: false,
										want:       "\":!\"",
									},
									&labeledExpr{
										pos:   position{line: 364, col: 24, offset: 11176},
										label: "name",
										expr: &actionExpr{
											pos: position{line: 324, col: 18, offset: 10072},
											run: (*parser).callonDocumentHeaderAttributes8,
											expr: &seqExpr{
												pos: position{line: 324, col: 18, offset: 10072},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 324, col: 18, offset: 10072},
														val:        "[_0-9\\pL]",
														chars:      []rune{'_'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 324, col: 28, offset: 10082},
														expr: &charClassMatcher{
															pos:        position{line: 324, col: 29, offset: 10083},
															val:        "[-0-9\\pL]",
															chars:      []rune{'-'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 364, col: 45, offset: 11197},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 364, col: 49, offset: 11201},
										expr: &actionExpr{
											pos: position{line: 3079, col: 10, offset: 100334},
											run: (*parser).callonDocumentHeaderAttributes15,
											expr: &charClassMatcher{
												pos:        position{line: 3079, col: 11, offset: 100335},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3095, col: 8, offset: 100658},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDocumentHeaderAttributes18,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3092, col: 8, offset: 100608},
												expr: &anyMatcher{
													line: 3092, col: 9, offset: 100609,
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 366, col: 5, offset: 11284},
							run: (*parser).callonDocumentHeaderAttributes25,
							expr: &seqExpr{
								pos: position{line: 366, col: 5, offset: 11284},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 366, col: 5, offset: 11284},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
									&labeledExpr{
										pos:   position{line: 366, col: 9, offset: 11288},
										label: "name",
										expr: &actionExpr{
											pos: position{line: 324, col: 18, offset: 10072},
											run: (*parser).callonDocumentHeaderAttributes29,
											expr: &seqExpr{
												pos: position{line: 324, col: 18, offset: 10072},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 324, col: 18, offset: 10072},
														val:        "[_0-9\\pL]",
														chars:      []rune{'_'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 324, col: 28, offset: 10082},
														expr: &charClassMatcher{
															pos:        position{line: 324, col: 29, offset: 10083},
															val:        "[-0-9\\pL]",
															chars:      []rune{'-'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 366, col: 30, offset: 11309},
										val:        "!:",
										ignoreCase: false,
										want:       "\"!:\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 366, col: 35, offset: 11314},
										expr: &actionExpr{
											pos: position{line: 3079, col: 10, offset: 100334},
											run: (*parser).callonDocumentHeaderAttributes36,
											expr: &charClassMatcher{
												pos:        position{line: 3079, col: 11, offset: 100335},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3095, col: 8, offset: 100658},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDocumentHeaderAttributes39,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3092, col: 8, offset: 100608},
												expr: &anyMatcher{
													line: 3092, col: 9, offset: 100609,
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 2781, col: 22, offset: 91184},
							run: (*parser).callonDocumentHeaderAttributes46,
							expr: &seqExpr{
								pos: position{line: 2781, col: 22, offset: 91184},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2786, col: 31, offset: 91405},
										val:        "//",
										ignoreCase: false,
										want:       "\"//\"",
									},
									&notExpr{
										pos: position{line: 2786, col: 36, offset: 91410},
										expr: &litMatcher{
											pos:        position{line: 2786, col: 37, offset: 91411},
											val:        "//",
											ignoreCase: false,
											want:       "\"//\"",
										},
									},
									&labeledExpr{
										pos:   position{line: 2781, col: 49, offset: 91211},
										label: "content",
										expr: &actionExpr{
											pos: position{line: 2788, col: 29, offset: 91446},
											run: (*parser).callonDocumentHeaderAttributes52,
											expr: &zeroOrMoreExpr{
												pos: position{line: 2788, col: 29, offset: 91446},
												expr: &charClassMatcher{
													pos:        position{line: 2788, col: 29, offset: 91446},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3095, col: 8, offset: 100658},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDocumentHeaderAttributes56,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3092, col: 8, offset: 100608},
												expr: &anyMatcher{
													line: 3092, col: 9, offset: 100609,
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 796, col: 5, offset: 25530},
							run: (*parser).callonDocumentHeaderAttributes63,
							expr: &seqExpr{
								pos: position{line: 796, col: 5, offset: 25530},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 744, col: 26, offset: 24098},
										run: (*parser).callonDocumentHeaderAttributes65,
										expr: &seqExpr{
											pos: position{line: 744, col: 26, offset: 24098},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 744, col: 26, offset: 24098},
													val:        "////",
													ignoreCase: false,
													want:       "\"////\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 744, col: 33, offset: 24105},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonDocumentHeaderAttributes69,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonDocumentHeaderAttributes72,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 797, col: 5, offset: 25561},
										label: "content",
										expr: &zeroOrMoreExpr{
											pos: position{line: 808, col: 5, offset: 25885},
											expr: &actionExpr{
												pos: position{line: 808, col: 6, offset: 25886},
												run: (*parser).callonDocumentHeaderAttributes81,
												expr: &seqExpr{
													pos: position{line: 808, col: 6, offset: 25886},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 808, col: 6, offset: 25886},
															expr: &choiceExpr{
																pos: position{line: 805, col: 29, offset: 25828},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 744, col: 26, offset: 24098},
																		run: (*parser).callonDocumentHeaderAttributes85,
																		expr: &seqExpr{
																			pos: position{line: 744, col: 26, offset: 24098},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 744, col: 26, offset: 24098},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 744, col: 33, offset: 24105},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonDocumentHeaderAttributes89,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonDocumentHeaderAttributes92,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 809, col: 5, offset: 25916},
															label: "line",
															expr: &actionExpr{
																pos: position{line: 785, col: 5, offset: 25225},
																run: (*parser).callonDocumentHeaderAttributes102,
																expr: &seqExpr{
																	pos: position{line: 785, col: 5, offset: 25225},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			expr: &notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 786, col: 5, offset: 25298},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 786, col: 14, offset: 25307},
																				run: (*parser).callonDocumentHeaderAttributes108,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 786, col: 14, offset: 25307},
																					expr: &charClassMatcher{
																						pos:        position{line: 786, col: 14, offset: 25307},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonDocumentHeaderAttributes112,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 798, col: 5, offset: 25595},
										expr: &choiceExpr{
											pos: position{line: 805, col: 29, offset: 25828},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 744, col: 26, offset: 24098},
													run: (*parser).callonDocumentHeaderAttributes121,
													expr: &seqExpr{
														pos: position{line: 744, col: 26, offset: 24098},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 744, col: 26, offset: 24098},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 744, col: 33, offset: 24105},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonDocumentHeaderAttributes125,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonDocumentHeaderAttributes128,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 683, col: 14, offset: 22026},
							run: (*parser).callonDocumentHeaderAttributes137,
							expr: &seqExpr{
								pos: position{line: 683, col: 14, offset: 22026},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 683, col: 14, offset: 22026},
										expr: &notExpr{
											pos: position{line: 3092, col: 8, offset: 100608},
											expr: &anyMatcher{
												line: 3092, col: 9, offset: 100609,
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 683, col: 19, offset: 22031},
										expr: &actionExpr{
											pos: position{line: 3079, col: 10, offset: 100334},
											run: (*parser).callonDocumentHeaderAttributes143,
											expr: &charClassMatcher{
												pos:        position{line: 3079, col: 11, offset: 100335},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3095, col: 8, offset: 100658},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDocumentHeaderAttributes146,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3092, col: 8, offset: 100608},
												expr: &anyMatcher{
													line: 3092, col: 9, offset: 100609,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1199, col: 1, offset: 37437},
			expr: &actionExpr{
				pos: position{line: 1200, col: 5, offset: 37460},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1200, col: 5, offset: 37460},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1201, col: 9, offset: 37478},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 3012, col: 5, offset: 98323},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 3012, col: 5, offset: 98323},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 3012, col: 5, offset: 98323},
											expr: &charClassMatcher{
												pos:        position{line: 3012, col: 5, offset: 98323},
												val:        "[,;!?0-9\\pL]",
												chars:      []rune{',', ';', '!', '?'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 3013, col: 6, offset: 98373},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonInlineElement9,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 3013, col: 14, offset: 98381},
													expr: &choiceExpr{
														pos: position{line: 3013, col: 16, offset: 98383},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3013, col: 16, offset: 98383},
																val:        "[.�]",
																chars:      []rune{'.', '�'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 3088, col: 12, offset: 100518},
																run: (*parser).callonInlineElement14,
																expr: &choiceExpr{
																	pos: position{line: 3088, col: 13, offset: 100519},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3088, col: 13, offset: 100519},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 20, offset: 100526},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3088, col: 29, offset: 100535},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 3083, col: 11, offset: 100401},
								run: (*parser).callonInlineElement21,
								expr: &oneOrMoreExpr{
									pos: position{line: 3083, col: 11, offset: 100401},
									expr: &charClassMatcher{
										pos:        position{line: 3083, col: 12, offset: 100402},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&actionExpr{
								pos: position{line: 1149, col: 5, offset: 36023},
								run: (*parser).callonInlineElement24,
								expr: &seqExpr{
									pos: position{line: 1149, col: 5, offset: 36023},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 1149, col: 5, offset: 36023},
											run: (*parser).callonInlineElement26,
										},
										&litMatcher{
											pos:        position{line: 1152, col: 5, offset: 36125},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1152, col: 9, offset: 36129},
											expr: &actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonInlineElement29,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andExpr{
											pos: position{line: 1152, col: 16, offset: 36136},
											expr: &choiceExpr{
												pos: position{line: 3095, col: 8, offset: 100658},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3088, col: 12, offset: 100518},
														run: (*parser).callonInlineElement33,
														expr: &choiceExpr{
															pos: position{line: 3088, col: 13, offset: 100519},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3088, col: 13, offset: 100519},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 20, offset: 100526},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3088, col: 29, offset: 100535},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3092, col: 8, offset: 100608},
														expr: &anyMatcher{
															line: 3092, col: 9, offset: 100609,
														},
													},
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1204, col: 11, offset: 37577},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1204, col: 11, offset: 37577},
										expr: &choiceExpr{
											pos: position{line: 3095, col: 8, offset: 100658},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonInlineElement43,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 1205, col: 13, offset: 37620},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1205, col: 13, offset: 37620},
												name: "Quote",
											},
											&actionExpr{
												pos: position{line: 641, col: 5, offset: 20597},
												run: (*parser).callonInlineElement52,
												expr: &seqExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 641, col: 5, offset: 20597},
															run: (*parser).callonInlineElement54,
														},
														&labeledExpr{
															pos:   position{line: 644, col: 5, offset: 20666},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 644, col: 14, offset: 20675},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 664, col: 25, offset: 21328},
																		run: (*parser).callonInlineElement57,
																		expr: &seqExpr{
																			pos: position{line: 664, col: 25, offset: 21328},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 664, col: 25, offset: 21328},
																					val:        "{counter:",
																					ignoreCase: false,
																					want:       "\"{counter:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 664, col: 37, offset: 21340},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement61,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 664, col: 56, offset: 21359},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 664, col: 62, offset: 21365},
																						expr: &actionExpr{
																							pos: position{line: 672, col: 17, offset: 21660},
																							run: (*parser).callonInlineElement68,
																							expr: &seqExpr{
																								pos: position{line: 672, col: 17, offset: 21660},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 672, col: 17, offset: 21660},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 672, col: 21, offset: 21664},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 672, col: 28, offset: 21671},
																													run: (*parser).callonInlineElement73,
																													expr: &charClassMatcher{
																														pos:        position{line: 672, col: 28, offset: 21671},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 674, col: 9, offset: 21725},
																													run: (*parser).callonInlineElement75,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 674, col: 9, offset: 21725},
																														expr: &charClassMatcher{
																															pos:        position{line: 674, col: 9, offset: 21725},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 664, col: 78, offset: 21381},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 668, col: 25, offset: 21499},
																		run: (*parser).callonInlineElement79,
																		expr: &seqExpr{
																			pos: position{line: 668, col: 25, offset: 21499},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 668, col: 25, offset: 21499},
																					val:        "{counter2:",
																					ignoreCase: false,
																					want:       "\"{counter2:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 668, col: 38, offset: 21512},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement83,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 668, col: 57, offset: 21531},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 668, col: 63, offset: 21537},
																						expr: &actionExpr{
																							pos: position{line: 672, col: 17, offset: 21660},
																							run: (*parser).callonInlineElement90,
																							expr: &seqExpr{
																								pos: position{line: 672, col: 17, offset: 21660},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 672, col: 17, offset: 21660},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 672, col: 21, offset: 21664},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 672, col: 28, offset: 21671},
																													run: (*parser).callonInlineElement95,
																													expr: &charClassMatcher{
																														pos:        position{line: 672, col: 28, offset: 21671},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 674, col: 9, offset: 21725},
																													run: (*parser).callonInlineElement97,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 674, col: 9, offset: 21725},
																														expr: &charClassMatcher{
																															pos:        position{line: 674, col: 9, offset: 21725},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 668, col: 79, offset: 21553},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 650, col: 5, offset: 20804},
																		run: (*parser).callonInlineElement101,
																		expr: &seqExpr{
																			pos: position{line: 650, col: 5, offset: 20804},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 650, col: 5, offset: 20804},
																					val:        "\\{",
																					ignoreCase: false,
																					want:       "\"\\\\{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 650, col: 13, offset: 20812},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement105,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 650, col: 32, offset: 20831},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 657, col: 5, offset: 21072},
																		run: (*parser).callonInlineElement111,
																		expr: &seqExpr{
																			pos: position{line: 657, col: 5, offset: 21072},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 657, col: 5, offset: 21072},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 657, col: 9, offset: 21076},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement115,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 657, col: 28, offset: 21095},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1207, col: 15, offset: 37674},
												name: "InlineMacro",
											},
											&actionExpr{
												pos: position{line: 2764, col: 5, offset: 90546},
												run: (*parser).callonInlineElement122,
												expr: &seqExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2764, col: 5, offset: 90546},
															run: (*parser).callonInlineElement124,
														},
														&labeledExpr{
															pos:   position{line: 2767, col: 5, offset: 90622},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2769, col: 9, offset: 90720},
																		run: (*parser).callonInlineElement127,
																		expr: &choiceExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 692, col: 27, offset: 22379},
																					run: (*parser).callonInlineElement129,
																					expr: &seqExpr{
																						pos: position{line: 692, col: 27, offset: 22379},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 692, col: 27, offset: 22379},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 692, col: 32, offset: 22384},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 3064, col: 7, offset: 99986},
																									run: (*parser).callonInlineElement133,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3064, col: 7, offset: 99986},
																										expr: &charClassMatcher{
																											pos:        position{line: 3064, col: 7, offset: 99986},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 692, col: 40, offset: 22392},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonInlineElement137,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 692, col: 47, offset: 22399},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 692, col: 51, offset: 22403},
																								label: "label",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 702, col: 24, offset: 22804},
																									expr: &choiceExpr{
																										pos: position{line: 703, col: 5, offset: 22810},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 703, col: 6, offset: 22811},
																												run: (*parser).callonInlineElement143,
																												expr: &seqExpr{
																													pos: position{line: 703, col: 6, offset: 22811},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 703, col: 6, offset: 22811},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 703, col: 14, offset: 22819},
																															expr: &charClassMatcher{
																																pos:        position{line: 703, col: 14, offset: 22819},
																																val:        "[^\\r\\n{<>]",
																																chars:      []rune{'\r', '\n', '{', '<', '>'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 650, col: 5, offset: 20804},
																												run: (*parser).callonInlineElement148,
																												expr: &seqExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 650, col: 5, offset: 20804},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 650, col: 13, offset: 20812},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineElement152,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 650, col: 32, offset: 20831},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21072},
																												run: (*parser).callonInlineElement158,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21072},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 9, offset: 21076},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineElement162,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 28, offset: 21095},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 707, col: 8, offset: 23045},
																												run: (*parser).callonInlineElement168,
																												expr: &litMatcher{
																													pos:        position{line: 707, col: 8, offset: 23045},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 692, col: 79, offset: 22431},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 694, col: 9, offset: 22504},
																					run: (*parser).callonInlineElement171,
																					expr: &seqExpr{
																						pos: position{line: 694, col: 9, offset: 22504},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 694, col: 9, offset: 22504},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 694, col: 14, offset: 22509},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 3064, col: 7, offset: 99986},
																									run: (*parser).callonInlineElement175,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3064, col: 7, offset: 99986},
																										expr: &charClassMatcher{
																											pos:        position{line: 3064, col: 7, offset: 99986},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 694, col: 22, offset: 22517},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2772, col: 11, offset: 90824},
																		run: (*parser).callonInlineElement179,
																		expr: &charClassMatcher{
																			pos:        position{line: 2772, col: 12, offset: 90825},
																			val:        "[<>&]",
																			chars:      []rune{'<', '>', '&'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2797, col: 5, offset: 91718},
												run: (*parser).callonInlineElement181,
												expr: &seqExpr{
													pos: position{line: 2797, col: 5, offset: 91718},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2797, col: 5, offset: 91718},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
														&choiceExpr{
															pos: position{line: 2797, col: 10, offset: 91723},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2805, col: 15, offset: 91999},
																	run: (*parser).callonInlineElement185,
																	expr: &litMatcher{
																		pos:        position{line: 2805, col: 15, offset: 91999},
																		val:        "`'",
																		ignoreCase: false,
																		want:       "\"`'\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2811, col: 14, offset: 92114},
																	run: (*parser).callonInlineElement187,
																	expr: &litMatcher{
																		pos:        position{line: 2811, col: 14, offset: 92114},
																		val:        "(C)",
																		ignoreCase: false,
																		want:       "\"(C)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2815, col: 14, offset: 92190},
																	run: (*parser).callonInlineElement189,
																	expr: &litMatcher{
																		pos:        position{line: 2815, col: 14, offset: 92190},
																		val:        "(TM)",
																		ignoreCase: false,
																		want:       "\"(TM)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2819, col: 15, offset: 92268},
																	run: (*parser).callonInlineElement191,
																	expr: &litMatcher{
																		pos:        position{line: 2819, col: 15, offset: 92268},
																		val:        "(R)",
																		ignoreCase: false,
																		want:       "\"(R)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2823, col: 13, offset: 92343},
																	run: (*parser).callonInlineElement193,
																	expr: &litMatcher{
																		pos:        position{line: 2823, col: 13, offset: 92343},
																		val:        "...",
																		ignoreCase: false,
																		want:       "\"...\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2805, col: 15, offset: 91999},
												run: (*parser).callonInlineElement195,
												expr: &litMatcher{
													pos:        position{line: 2805, col: 15, offset: 91999},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
											&actionExpr{
												pos: position{line: 2811, col: 14, offset: 92114},
												run: (*parser).callonInlineElement197,
												expr: &litMatcher{
													pos:        position{line: 2811, col: 14, offset: 92114},
													val:        "(C)",
													ignoreCase: false,
													want:       "\"(C)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2815, col: 14, offset: 92190},
												run: (*parser).callonInlineElement199,
												expr: &litMatcher{
													pos:        position{line: 2815, col: 14, offset: 92190},
													val:        "(TM)",
													ignoreCase: false,
													want:       "\"(TM)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2819, col: 15, offset: 92268},
												run: (*parser).callonInlineElement201,
												expr: &litMatcher{
													pos:        position{line: 2819, col: 15, offset: 92268},
													val:        "(R)",
													ignoreCase: false,
													want:       "\"(R)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2823, col: 13, offset: 92343},
												run: (*parser).callonInlineElement203,
												expr: &litMatcher{
													pos:        position{line: 2823, col: 13, offset: 92343},
													val:        "...",
													ignoreCase: false,
													want:       "\"...\"",
												},
											},
											&actionExpr{
												pos: position{line: 2832, col: 5, offset: 92667},
												run: (*parser).callonInlineElement205,
												expr: &seqExpr{
													pos: position{line: 2832, col: 5, offset: 92667},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2993, col: 13, offset: 97650},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2832, col: 14, offset: 92676},
															val:        "\\'",
															ignoreCase: false,
															want:       "\"\\\\'\"",
														},
														&andExpr{
															pos: position{line: 2832, col: 19, offset: 92681},
															expr: &charClassMatcher{
																pos:        position{line: 2832, col: 20, offset: 92682},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2838, col: 5, offset: 92913},
												run: (*parser).callonInlineElement211,
												expr: &seqExpr{
													pos: position{line: 2838, col: 5, offset: 92913},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2993, col: 13, offset: 97650},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2838, col: 14, offset: 92922},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&andExpr{
															pos: position{line: 2838, col: 18, offset: 92926},
															expr: &charClassMatcher{
																pos:        position{line: 2838, col: 19, offset: 92927},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1141, col: 23, offset: 35577},
												run: (*parser).callonInlineElement217,
												expr: &seqExpr{
													pos: position{line: 1141, col: 23, offset: 35577},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1139, col: 32, offset: 35545},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 1141, col: 51, offset: 35605},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 1141, col: 56, offset: 35610},
																run: (*parser).callonInlineElement221,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1141, col: 56, offset: 35610},
																	expr: &charClassMatcher{
																		pos:        position{line: 1141, col: 56, offset: 35610},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1139, col: 32, offset: 35545},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3031, col: 12, offset: 98869},
												run: (*parser).callonInlineElement225,
												expr: &anyMatcher{
													line: 3031, col: 12, offset: 98869,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1235, col: 1, offset: 38753},
			expr: &actionExpr{
				pos: position{line: 1235, col: 14, offset: 38766},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 14, offset: 38766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1235, col: 14, offset: 38766},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 19, offset: 38771},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 25, offset: 38777},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1235, col: 43, offset: 38795},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1239, col: 1, offset: 38864},
			expr: &actionExpr{
				pos: position{line: 1239, col: 21, offset: 38884},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1239, col: 21, offset: 38884},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1239, col: 30, offset: 38893},
						expr: &choiceExpr{
							pos: position{line: 1239, col: 31, offset: 38894},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3005, col: 5, offset: 98105},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 3005, col: 5, offset: 98105},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 3005, col: 5, offset: 98105},
												expr: &charClassMatcher{
													pos:        position{line: 3005, col: 5, offset: 98105},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 3005, col: 15, offset: 98115},
												expr: &choiceExpr{
													pos: position{line: 3005, col: 17, offset: 98117},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3005, col: 17, offset: 98117},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3007, col: 9, offset: 98199},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 3007, col: 9, offset: 98199},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 3007, col: 9, offset: 98199},
												expr: &charClassMatcher{
													pos:        position{line: 3007, col: 9, offset: 98199},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 3007, col: 19, offset: 98209},
												expr: &seqExpr{
													pos: position{line: 3007, col: 20, offset: 98210},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3007, col: 20, offset: 98210},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 3007, col: 27, offset: 98217},
															expr: &charClassMatcher{
																pos:        position{line: 3007, col: 27, offset: 98217},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1239, col: 38, offset: 38901},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1239, col: 53, offset: 38916},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 3079, col: 10, offset: 100334},
									run: (*parser).callonIndexTermContent25,
									expr: &charClassMatcher{
										pos:        position{line: 3079, col: 11, offset: 100335},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2764, col: 5, offset: 90546},
									run: (*parser).callonIndexTermContent27,
									expr: &seqExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2764, col: 5, offset: 90546},
												run: (*parser).callonIndexTermContent29,
											},
											&labeledExpr{
												pos:   position{line: 2767, col: 5, offset: 90622},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2769, col: 9, offset: 90720},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2769, col: 9, offset: 90720},
															run: (*parser).callonIndexTermContent32,
															expr: &choiceExpr{
																pos: position{line: 692, col: 27, offset: 22379},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 692, col: 27, offset: 22379},
																		run: (*parser).callonIndexTermContent34,
																		expr: &seqExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 692, col: 27, offset: 22379},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 692, col: 32, offset: 22384},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 3064, col: 7, offset: 99986},
																						run: (*parser).callonIndexTermContent38,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							expr: &charClassMatcher{
																								pos:        position{line: 3064, col: 7, offset: 99986},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 692, col: 40, offset: 22392},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonIndexTermContent42,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 692, col: 47, offset: 22399},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 692, col: 51, offset: 22403},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 702, col: 24, offset: 22804},
																						expr: &choiceExpr{
																							pos: position{line: 703, col: 5, offset: 22810},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 703, col: 6, offset: 22811},
																									run: (*parser).callonIndexTermContent48,
																									expr: &seqExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 703, col: 6, offset: 22811},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 703, col: 14, offset: 22819},
																												expr: &charClassMatcher{
																													pos:        position{line: 703, col: 14, offset: 22819},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 650, col: 5, offset: 20804},
																									run: (*parser).callonIndexTermContent53,
																									expr: &seqExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 650, col: 5, offset: 20804},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 650, col: 13, offset: 20812},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													run: (*parser).callonIndexTermContent57,
																													expr: &seqExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 324, col: 18, offset: 10072},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 324, col: 28, offset: 10082},
																																expr: &charClassMatcher{
																																	pos:        position{line: 324, col: 29, offset: 10083},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 650, col: 32, offset: 20831},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 657, col: 5, offset: 21072},
																									run: (*parser).callonIndexTermContent63,
																									expr: &seqExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 657, col: 5, offset: 21072},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 657, col: 9, offset: 21076},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													run: (*parser).callonIndexTermContent67,
																													expr: &seqExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 324, col: 18, offset: 10072},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 324, col: 28, offset: 10082},
																																expr: &charClassMatcher{
																																	pos:        position{line: 324, col: 29, offset: 10083},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 657, col: 28, offset: 21095},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 707, col: 8, offset: 23045},
																									run: (*parser).callonIndexTermContent73,
																									expr: &litMatcher{
																										pos:        position{line: 707, col: 8, offset: 23045},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 692, col: 79, offset: 22431},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 694, col: 9, offset: 22504},
																		run: (*parser).callonIndexTermContent76,
																		expr: &seqExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 694, col: 9, offset: 22504},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 694, col: 14, offset: 22509},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 3064, col: 7, offset: 99986},
																						run: (*parser).callonIndexTermContent80,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							expr: &charClassMatcher{
																								pos:        position{line: 3064, col: 7, offset: 99986},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 694, col: 22, offset: 22517},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2772, col: 11, offset: 90824},
															run: (*parser).callonIndexTermContent84,
															expr: &charClassMatcher{
																pos:        position{line: 2772, col: 12, offset: 90825},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1141, col: 23, offset: 35577},
									run: (*parser).callonIndexTermContent86,
									expr: &seqExpr{
										pos: position{line: 1141, col: 23, offset: 35577},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1139, col: 32, offset: 35545},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1141, col: 51, offset: 35605},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1141, col: 56, offset: 35610},
													run: (*parser).callonIndexTermContent90,
													expr: &oneOrMoreExpr{
														pos: position{line: 1141, col: 56, offset: 35610},
														expr: &charClassMatcher{
															pos:        position{line: 1141, col: 56, offset: 35610},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1139, col: 32, offset: 35545},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1239, col: 114, offset: 38977},
									run: (*parser).callonIndexTermContent94,
									expr: &seqExpr{
										pos: position{line: 1239, col: 115, offset: 38978},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1239, col: 115, offset: 38978},
												expr: &litMatcher{
													pos:        position{line: 1239, col: 116, offset: 38979},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1239, col: 121, offset: 38984,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1259, col: 1, offset: 39693},
			expr: &actionExpr{
				pos: position{line: 1260, col: 5, offset: 39712},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 5, offset: 39712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1260, col: 5, offset: 39712},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 15, offset: 39722},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 3039, col: 13, offset: 99070},
								run: (*parser).callonImageBlock5,
								expr: &seqExpr{
									pos: position{line: 3039, col: 13, offset: 99070},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 3039, col: 13, offset: 99070},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 3039, col: 20, offset: 99077},
												expr: &choiceExpr{
													pos: position{line: 3047, col: 11, offset: 99339},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3047, col: 11, offset: 99339},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 23, offset: 99351},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 36, offset: 99364},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 47, offset: 99375},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 58, offset: 99386},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 3039, col: 30, offset: 99087},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 3039, col: 35, offset: 99092},
												expr: &choiceExpr{
													pos: position{line: 3039, col: 36, offset: 99093},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3050, col: 5, offset: 99414},
															run: (*parser).callonImageBlock18,
															expr: &seqExpr{
																pos: position{line: 3050, col: 5, offset: 99414},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		expr: &litMatcher{
																			pos:        position{line: 3050, col: 6, offset: 99415},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3051, col: 5, offset: 99439},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3051, col: 14, offset: 99448},
																			expr: &choiceExpr{
																				pos: position{line: 3052, col: 9, offset: 99458},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						run: (*parser).callonImageBlock25,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3052, col: 9, offset: 99458},
																							expr: &charClassMatcher{
																								pos:        position{line: 3052, col: 10, offset: 99459},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3055, col: 11, offset: 99724},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3025, col: 25, offset: 98695},
																								run: (*parser).callonImageBlock29,
																								expr: &charClassMatcher{
																									pos:        position{line: 3025, col: 25, offset: 98695},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3055, col: 32, offset: 99745},
																								expr: &notExpr{
																									pos: position{line: 3055, col: 34, offset: 99747},
																									expr: &choiceExpr{
																										pos: position{line: 3055, col: 36, offset: 99749},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonImageBlock36,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 641, col: 5, offset: 20597},
																						run: (*parser).callonImageBlock38,
																						expr: &seqExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									run: (*parser).callonImageBlock40,
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 5, offset: 20666},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 644, col: 14, offset: 20675},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 664, col: 25, offset: 21328},
																												run: (*parser).callonImageBlock43,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 25, offset: 21328},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 25, offset: 21328},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 37, offset: 21340},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock47,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 56, offset: 21359},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 664, col: 62, offset: 21365},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonImageBlock54,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonImageBlock59,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonImageBlock61,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 78, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 25, offset: 21499},
																												run: (*parser).callonImageBlock65,
																												expr: &seqExpr{
																													pos: position{line: 668, col: 25, offset: 21499},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 668, col: 25, offset: 21499},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 38, offset: 21512},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock69,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 57, offset: 21531},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 668, col: 63, offset: 21537},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonImageBlock76,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonImageBlock81,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonImageBlock83,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 668, col: 79, offset: 21553},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 650, col: 5, offset: 20804},
																												run: (*parser).callonImageBlock87,
																												expr: &seqExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 650, col: 5, offset: 20804},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 650, col: 13, offset: 20812},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock91,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 650, col: 32, offset: 20831},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21072},
																												run: (*parser).callonImageBlock97,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21072},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 9, offset: 21076},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock101,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 28, offset: 21095},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2764, col: 5, offset: 90546},
																						run: (*parser).callonImageBlock107,
																						expr: &seqExpr{
																							pos: position{line: 2764, col: 5, offset: 90546},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									run: (*parser).callonImageBlock109,
																								},
																								&labeledExpr{
																									pos:   position{line: 2767, col: 5, offset: 90622},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2769, col: 9, offset: 90720},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												run: (*parser).callonImageBlock112,
																												expr: &choiceExpr{
																													pos: position{line: 692, col: 27, offset: 22379},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															run: (*parser).callonImageBlock114,
																															expr: &seqExpr{
																																pos: position{line: 692, col: 27, offset: 22379},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 692, col: 27, offset: 22379},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 32, offset: 22384},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonImageBlock118,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 692, col: 40, offset: 22392},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonImageBlock122,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 47, offset: 22399},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 51, offset: 22403},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 702, col: 24, offset: 22804},
																																			expr: &choiceExpr{
																																				pos: position{line: 703, col: 5, offset: 22810},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 703, col: 6, offset: 22811},
																																						run: (*parser).callonImageBlock128,
																																						expr: &seqExpr{
																																							pos: position{line: 703, col: 6, offset: 22811},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 703, col: 6, offset: 22811},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 703, col: 14, offset: 22819},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 703, col: 14, offset: 22819},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 650, col: 5, offset: 20804},
																																						run: (*parser).callonImageBlock133,
																																						expr: &seqExpr{
																																							pos: position{line: 650, col: 5, offset: 20804},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 650, col: 5, offset: 20804},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 650, col: 13, offset: 20812},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonImageBlock137,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 650, col: 32, offset: 20831},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21072},
																																						run: (*parser).callonImageBlock143,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21072},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21072},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 9, offset: 21076},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonImageBlock147,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 28, offset: 21095},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 707, col: 8, offset: 23045},
																																						run: (*parser).callonImageBlock153,
																																						expr: &litMatcher{
																																							pos:        position{line: 707, col: 8, offset: 23045},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 79, offset: 22431},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 694, col: 9, offset: 22504},
																															run: (*parser).callonImageBlock156,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 9, offset: 22504},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 9, offset: 22504},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 14, offset: 22509},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonImageBlock160,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 22, offset: 22517},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2772, col: 11, offset: 90824},
																												run: (*parser).callonImageBlock164,
																												expr: &charClassMatcher{
																													pos:        position{line: 2772, col: 12, offset: 90825},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3058, col: 11, offset: 99830},
																						run: (*parser).callonImageBlock166,
																						expr: &litMatcher{
																							pos:        position{line: 3058, col: 11, offset: 99830},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1141, col: 23, offset: 35577},
															run: (*parser).callonImageBlock168,
															expr: &seqExpr{
																pos: position{line: 1141, col: 23, offset: 35577},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1139, col: 32, offset: 35545},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1141, col: 51, offset: 35605},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1141, col: 56, offset: 35610},
																			run: (*parser).callonImageBlock172,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1141, col: 56, offset: 35610},
																				expr: &charClassMatcher{
																					pos:        position{line: 1141, col: 56, offset: 35610},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1139, col: 32, offset: 35545},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 31, offset: 39738},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1260, col: 43, offset: 39750},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1260, col: 61, offset: 39768},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonImageBlock179,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3095, col: 8, offset: 100658},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonImageBlock182,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3092, col: 8, offset: 100608},
									expr: &anyMatcher{
										line: 3092, col: 9, offset: 100609,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1265, col: 1, offset: 39985},
			expr: &actionExpr{
				pos: position{line: 1265, col: 16, offset: 40000},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 16, offset: 40000},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1265, col: 16, offset: 40000},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1265, col: 25, offset: 40009},
							expr: &litMatcher{
								pos:        position{line: 1265, col: 26, offset: 40010},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 30, offset: 40014},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 3039, col: 13, offset: 99070},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 3039, col: 13, offset: 99070},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 3039, col: 13, offset: 99070},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 3039, col: 20, offset: 99077},
												expr: &choiceExpr{
													pos: position{line: 3047, col: 11, offset: 99339},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3047, col: 11, offset: 99339},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 23, offset: 99351},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 36, offset: 99364},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 47, offset: 99375},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 3047, col: 58, offset: 99386},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 3039, col: 30, offset: 99087},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 3039, col: 35, offset: 99092},
												expr: &choiceExpr{
													pos: position{line: 3039, col: 36, offset: 99093},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3050, col: 5, offset: 99414},
															run: (*parser).callonInlineImage20,
															expr: &seqExpr{
																pos: position{line: 3050, col: 5, offset: 99414},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		expr: &litMatcher{
																			pos:        position{line: 3050, col: 6, offset: 99415},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3051, col: 5, offset: 99439},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3051, col: 14, offset: 99448},
																			expr: &choiceExpr{
																				pos: position{line: 3052, col: 9, offset: 99458},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						run: (*parser).callonInlineImage27,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3052, col: 9, offset: 99458},
																							expr: &charClassMatcher{
																								pos:        position{line: 3052, col: 10, offset: 99459},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3055, col: 11, offset: 99724},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3025, col: 25, offset: 98695},
																								run: (*parser).callonInlineImage31,
																								expr: &charClassMatcher{
																									pos:        position{line: 3025, col: 25, offset: 98695},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3055, col: 32, offset: 99745},
																								expr: &notExpr{
																									pos: position{line: 3055, col: 34, offset: 99747},
																									expr: &choiceExpr{
																										pos: position{line: 3055, col: 36, offset: 99749},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonInlineImage38,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 641, col: 5, offset: 20597},
																						run: (*parser).callonInlineImage40,
																						expr: &seqExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									run: (*parser).callonInlineImage42,
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 5, offset: 20666},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 644, col: 14, offset: 20675},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 664, col: 25, offset: 21328},
																												run: (*parser).callonInlineImage45,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 25, offset: 21328},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 25, offset: 21328},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 37, offset: 21340},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage49,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 56, offset: 21359},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 664, col: 62, offset: 21365},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonInlineImage56,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonInlineImage61,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonInlineImage63,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 78, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 25, offset: 21499},
																												run: (*parser).callonInlineImage67,
																												expr: &seqExpr{
																													pos: position{line: 668, col: 25, offset: 21499},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 668, col: 25, offset: 21499},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 38, offset: 21512},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage71,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 57, offset: 21531},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 668, col: 63, offset: 21537},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonInlineImage78,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonInlineImage83,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonInlineImage85,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 668, col: 79, offset: 21553},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 650, col: 5, offset: 20804},
																												run: (*parser).callonInlineImage89,
																												expr: &seqExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 650, col: 5, offset: 20804},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 650, col: 13, offset: 20812},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage93,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 650, col: 32, offset: 20831},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21072},
																												run: (*parser).callonInlineImage99,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21072},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 9, offset: 21076},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage103,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 28, offset: 21095},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2764, col: 5, offset: 90546},
																						run: (*parser).callonInlineImage109,
																						expr: &seqExpr{
																							pos: position{line: 2764, col: 5, offset: 90546},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									run: (*parser).callonInlineImage111,
																								},
																								&labeledExpr{
																									pos:   position{line: 2767, col: 5, offset: 90622},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2769, col: 9, offset: 90720},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												run: (*parser).callonInlineImage114,
																												expr: &choiceExpr{
																													pos: position{line: 692, col: 27, offset: 22379},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															run: (*parser).callonInlineImage116,
																															expr: &seqExpr{
																																pos: position{line: 692, col: 27, offset: 22379},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 692, col: 27, offset: 22379},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 32, offset: 22384},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonInlineImage120,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 692, col: 40, offset: 22392},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonInlineImage124,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 47, offset: 22399},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 51, offset: 22403},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 702, col: 24, offset: 22804},
																																			expr: &choiceExpr{
																																				pos: position{line: 703, col: 5, offset: 22810},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 703, col: 6, offset: 22811},
																																						run: (*parser).callonInlineImage130,
																																						expr: &seqExpr{
																																							pos: position{line: 703, col: 6, offset: 22811},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 703, col: 6, offset: 22811},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 703, col: 14, offset: 22819},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 703, col: 14, offset: 22819},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 650, col: 5, offset: 20804},
																																						run: (*parser).callonInlineImage135,
																																						expr: &seqExpr{
																																							pos: position{line: 650, col: 5, offset: 20804},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 650, col: 5, offset: 20804},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 650, col: 13, offset: 20812},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonInlineImage139,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 650, col: 32, offset: 20831},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21072},
																																						run: (*parser).callonInlineImage145,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21072},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21072},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 9, offset: 21076},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonInlineImage149,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 28, offset: 21095},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 707, col: 8, offset: 23045},
																																						run: (*parser).callonInlineImage155,
																																						expr: &litMatcher{
																																							pos:        position{line: 707, col: 8, offset: 23045},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 79, offset: 22431},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 694, col: 9, offset: 22504},
																															run: (*parser).callonInlineImage158,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 9, offset: 22504},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 9, offset: 22504},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 14, offset: 22509},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonInlineImage162,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 22, offset: 22517},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2772, col: 11, offset: 90824},
																												run: (*parser).callonInlineImage166,
																												expr: &charClassMatcher{
																													pos:        position{line: 2772, col: 12, offset: 90825},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3058, col: 11, offset: 99830},
																						run: (*parser).callonInlineImage168,
																						expr: &litMatcher{
																							pos:        position{line: 3058, col: 11, offset: 99830},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1141, col: 23, offset: 35577},
															run: (*parser).callonInlineImage170,
															expr: &seqExpr{
																pos: position{line: 1141, col: 23, offset: 35577},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1139, col: 32, offset: 35545},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1141, col: 51, offset: 35605},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1141, col: 56, offset: 35610},
																			run: (*parser).callonInlineImage174,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1141, col: 56, offset: 35610},
																				expr: &charClassMatcher{
																					pos:        position{line: 1141, col: 56, offset: 35610},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1139, col: 32, offset: 35545},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 46, offset: 40030},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 58, offset: 40042},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1272, col: 1, offset: 40438},
			expr: &actionExpr{
				pos: position{line: 1272, col: 15, offset: 40452},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1272, col: 15, offset: 40452},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1272, col: 15, offset: 40452},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 23, offset: 40460},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1272, col: 29, offset: 40466},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1272, col: 29, offset: 40466},
									expr: &charClassMatcher{
										pos:        position{line: 1272, col: 29, offset: 40466},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1272, col: 73, offset: 40510},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1272, col: 85, offset: 40522},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1279, col: 1, offset: 40888},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 19, offset: 40906},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1279, col: 19, offset: 40906},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1279, col: 19, offset: 40906},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1279, col: 19, offset: 40906},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 32, offset: 40919},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 41, offset: 40928},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 58, offset: 40945},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1281, col: 9, offset: 41005},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1281, col: 9, offset: 41005},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1281, col: 9, offset: 41005},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 21, offset: 41017},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2997, col: 14, offset: 97724},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2997, col: 14, offset: 97724},
											expr: &charClassMatcher{
												pos:        position{line: 2997, col: 14, offset: 97724},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 39, offset: 41035},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 43, offset: 41039},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1281, col: 51, offset: 41047},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 52, offset: 41048},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 70, offset: 41066},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1287, col: 1, offset: 41215},
			expr: &actionExpr{
				pos: position{line: 1287, col: 20, offset: 41234},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1287, col: 20, offset: 41234},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1287, col: 29, offset: 41243},
						expr: &seqExpr{
							pos: position{line: 1287, col: 30, offset: 41244},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1287, col: 30, offset: 41244},
									expr: &litMatcher{
										pos:        position{line: 1287, col: 31, offset: 41245},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1287, col: 35, offset: 41249},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1319, col: 1, offset: 42938},
			expr: &choiceExpr{
				pos: position{line: 1319, col: 21, offset: 42958},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1319, col: 21, offset: 42958},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1319, col: 21, offset: 42958},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1319, col: 21, offset: 42958},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1319, col: 30, offset: 42967},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1319, col: 38, offset: 42975},
										expr: &actionExpr{
											pos: position{line: 1325, col: 30, offset: 43301},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1325, col: 30, offset: 43301},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1319, col: 67, offset: 43004},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1321, col: 9, offset: 43108},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1321, col: 9, offset: 43108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1321, col: 9, offset: 43108},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1321, col: 19, offset: 43118},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1321, col: 27, offset: 43126},
										expr: &choiceExpr{
											pos: position{line: 1321, col: 28, offset: 43127},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1321, col: 28, offset: 43127},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1325, col: 30, offset: 43301},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1325, col: 30, offset: 43301},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1321, col: 69, offset: 43168},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1332, col: 1, offset: 43557},
			expr: &choiceExpr{
				pos: position{line: 1332, col: 9, offset: 43565},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1335, col: 5, offset: 43619},
						run: (*parser).callonLink2,
						expr: &seqExpr{
							pos: position{line: 1335, col: 5, offset: 43619},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1335, col: 5, offset: 43619},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&labeledExpr{
									pos:   position{line: 1336, col: 5, offset: 43628},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3043, col: 23, offset: 99219},
										run: (*parser).callonLink6,
										expr: &seqExpr{
											pos: position{line: 3043, col: 23, offset: 99219},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 3043, col: 23, offset: 99219},
													expr: &litMatcher{
														pos:        position{line: 3043, col: 24, offset: 99220},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 3043, col: 28, offset: 99224},
													label: "scheme",
													expr: &choiceExpr{
														pos: position{line: 3047, col: 11, offset: 99339},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3047, col: 11, offset: 99339},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 23, offset: 99351},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 36, offset: 99364},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 47, offset: 99375},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 58, offset: 99386},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3043, col: 44, offset: 99240},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3043, col: 49, offset: 99245},
														expr: &actionExpr{
															pos: position{line: 3050, col: 5, offset: 99414},
															run: (*parser).callonLink19,
															expr: &seqExpr{
																pos: position{line: 3050, col: 5, offset: 99414},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		expr: &litMatcher{
																			pos:        position{line: 3050, col: 6, offset: 99415},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3051, col: 5, offset: 99439},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3051, col: 14, offset: 99448},
																			expr: &choiceExpr{
																				pos: position{line: 3052, col: 9, offset: 99458},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						run: (*parser).callonLink26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3052, col: 9, offset: 99458},
																							expr: &charClassMatcher{
																								pos:        position{line: 3052, col: 10, offset: 99459},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3055, col: 11, offset: 99724},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3025, col: 25, offset: 98695},
																								run: (*parser).callonLink30,
																								expr: &charClassMatcher{
																									pos:        position{line: 3025, col: 25, offset: 98695},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3055, col: 32, offset: 99745},
																								expr: &notExpr{
																									pos: position{line: 3055, col: 34, offset: 99747},
																									expr: &choiceExpr{
																										pos: position{line: 3055, col: 36, offset: 99749},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonLink37,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 641, col: 5, offset: 20597},
																						run: (*parser).callonLink39,
																						expr: &seqExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									run: (*parser).callonLink41,
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 5, offset: 20666},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 644, col: 14, offset: 20675},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 664, col: 25, offset: 21328},
																												run: (*parser).callonLink44,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 25, offset: 21328},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 25, offset: 21328},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 37, offset: 21340},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink48,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 56, offset: 21359},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 664, col: 62, offset: 21365},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonLink55,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonLink60,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonLink62,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 78, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 25, offset: 21499},
																												run: (*parser).callonLink66,
																												expr: &seqExpr{
																													pos: position{line: 668, col: 25, offset: 21499},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 668, col: 25, offset: 21499},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 38, offset: 21512},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink70,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 57, offset: 21531},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 668, col: 63, offset: 21537},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonLink77,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonLink82,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonLink84,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 668, col: 79, offset: 21553},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 650, col: 5, offset: 20804},
																												run: (*parser).callonLink88,
																												expr: &seqExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 650, col: 5, offset: 20804},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 650, col: 13, offset: 20812},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink92,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 650, col: 32, offset: 20831},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21072},
																												run: (*parser).callonLink98,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21072},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 9, offset: 21076},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink102,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 28, offset: 21095},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2764, col: 5, offset: 90546},
																						run: (*parser).callonLink108,
																						expr: &seqExpr{
																							pos: position{line: 2764, col: 5, offset: 90546},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									run: (*parser).callonLink110,
																								},
																								&labeledExpr{
																									pos:   position{line: 2767, col: 5, offset: 90622},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2769, col: 9, offset: 90720},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												run: (*parser).callonLink113,
																												expr: &choiceExpr{
																													pos: position{line: 692, col: 27, offset: 22379},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															run: (*parser).callonLink115,
																															expr: &seqExpr{
																																pos: position{line: 692, col: 27, offset: 22379},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 692, col: 27, offset: 22379},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 32, offset: 22384},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonLink119,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 692, col: 40, offset: 22392},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonLink123,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 47, offset: 22399},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 51, offset: 22403},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 702, col: 24, offset: 22804},
																																			expr: &choiceExpr{
																																				pos: position{line: 703, col: 5, offset: 22810},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 703, col: 6, offset: 22811},
																																						run: (*parser).callonLink129,
																																						expr: &seqExpr{
																																							pos: position{line: 703, col: 6, offset: 22811},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 703, col: 6, offset: 22811},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 703, col: 14, offset: 22819},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 703, col: 14, offset: 22819},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 650, col: 5, offset: 20804},
																																						run: (*parser).callonLink134,
																																						expr: &seqExpr{
																																							pos: position{line: 650, col: 5, offset: 20804},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 650, col: 5, offset: 20804},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 650, col: 13, offset: 20812},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonLink138,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 650, col: 32, offset: 20831},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21072},
																																						run: (*parser).callonLink144,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21072},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21072},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 9, offset: 21076},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonLink148,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 28, offset: 21095},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 707, col: 8, offset: 23045},
																																						run: (*parser).callonLink154,
																																						expr: &litMatcher{
																																							pos:        position{line: 707, col: 8, offset: 23045},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 79, offset: 22431},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 694, col: 9, offset: 22504},
																															run: (*parser).callonLink157,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 9, offset: 22504},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 9, offset: 22504},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 14, offset: 22509},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonLink161,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 22, offset: 22517},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2772, col: 11, offset: 90824},
																												run: (*parser).callonLink165,
																												expr: &charClassMatcher{
																													pos:        position{line: 2772, col: 12, offset: 90825},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3058, col: 11, offset: 99830},
																						run: (*parser).callonLink167,
																						expr: &litMatcher{
																							pos:        position{line: 3058, col: 11, offset: 99830},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1337, col: 5, offset: 43695},
									label: "closingBracket",
									expr: &zeroOrOneExpr{
										pos: position{line: 1337, col: 20, offset: 43710},
										expr: &litMatcher{
											pos:        position{line: 1337, col: 21, offset: 43711},
											val:        ">",
											ignoreCase: false,
											want:       "\">\"",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1338, col: 5, offset: 43742},
									run: (*parser).callonLink172,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 19, offset: 43575},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 34, offset: 43590},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1346, col: 1, offset: 43957},
			expr: &choiceExpr{
				pos: position{line: 1348, col: 5, offset: 43993},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1348, col: 5, offset: 43993},
						run: (*parser).callonRelativeLink2,
						expr: &seqExpr{
							pos: position{line: 1348, col: 5, offset: 43993},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1348, col: 5, offset: 43993},
									val:        "\\link:",
									ignoreCase: false,
									want:       "\"\\\\link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1348, col: 17, offset: 44005},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3039, col: 13, offset: 99070},
										run: (*parser).callonRelativeLink6,
										expr: &seqExpr{
											pos: position{line: 3039, col: 13, offset: 99070},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3039, col: 13, offset: 99070},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 3039, col: 20, offset: 99077},
														expr: &choiceExpr{
															pos: position{line: 3047, col: 11, offset: 99339},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3047, col: 11, offset: 99339},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 23, offset: 99351},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 36, offset: 99364},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 47, offset: 99375},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 58, offset: 99386},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3039, col: 30, offset: 99087},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3039, col: 35, offset: 99092},
														expr: &choiceExpr{
															pos: position{line: 3039, col: 36, offset: 99093},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 3050, col: 5, offset: 99414},
																	run: (*parser).callonRelativeLink19,
																	expr: &seqExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 3050, col: 5, offset: 99414},
																				expr: &litMatcher{
																					pos:        position{line: 3050, col: 6, offset: 99415},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 3051, col: 5, offset: 99439},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3051, col: 14, offset: 99448},
																					expr: &choiceExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3052, col: 9, offset: 99458},
																								run: (*parser).callonRelativeLink26,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 3052, col: 9, offset: 99458},
																									expr: &charClassMatcher{
																										pos:        position{line: 3052, col: 10, offset: 99459},
																										val:        "[^\\r\\n[]�{.,;?!<> ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 3055, col: 11, offset: 99724},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 3025, col: 25, offset: 98695},
																										run: (*parser).callonRelativeLink30,
																										expr: &charClassMatcher{
																											pos:        position{line: 3025, col: 25, offset: 98695},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 3055, col: 32, offset: 99745},
																										expr: &notExpr{
																											pos: position{line: 3055, col: 34, offset: 99747},
																											expr: &choiceExpr{
																												pos: position{line: 3055, col: 36, offset: 99749},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 3092, col: 8, offset: 100608},
																														expr: &anyMatcher{
																															line: 3092, col: 9, offset: 100609,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonRelativeLink37,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 641, col: 5, offset: 20597},
																								run: (*parser).callonRelativeLink39,
																								expr: &seqExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 641, col: 5, offset: 20597},
																											run: (*parser).callonRelativeLink41,
																										},
																										&labeledExpr{
																											pos:   position{line: 644, col: 5, offset: 20666},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 644, col: 14, offset: 20675},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 664, col: 25, offset: 21328},
																														run: (*parser).callonRelativeLink44,
																														expr: &seqExpr{
																															pos: position{line: 664, col: 25, offset: 21328},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 664, col: 25, offset: 21328},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 37, offset: 21340},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink48,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 56, offset: 21359},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 664, col: 62, offset: 21365},
																																		expr: &actionExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			run: (*parser).callonRelativeLink55,
																																			expr: &seqExpr{
																																				pos: position{line: 672, col: 17, offset: 21660},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 672, col: 17, offset: 21660},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 672, col: 21, offset: 21664},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 672, col: 28, offset: 21671},
																																									run: (*parser).callonRelativeLink60,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 672, col: 28, offset: 21671},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									run: (*parser).callonRelativeLink62,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 674, col: 9, offset: 21725},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 674, col: 9, offset: 21725},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 664, col: 78, offset: 21381},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 668, col: 25, offset: 21499},
																														run: (*parser).callonRelativeLink66,
																														expr: &seqExpr{
																															pos: position{line: 668, col: 25, offset: 21499},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 668, col: 25, offset: 21499},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 668, col: 38, offset: 21512},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink70,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 668, col: 57, offset: 21531},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 668, col: 63, offset: 21537},
																																		expr: &actionExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			run: (*parser).callonRelativeLink77,
																																			expr: &seqExpr{
																																				pos: position{line: 672, col: 17, offset: 21660},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 672, col: 17, offset: 21660},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 672, col: 21, offset: 21664},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 672, col: 28, offset: 21671},
																																									run: (*parser).callonRelativeLink82,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 672, col: 28, offset: 21671},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									run: (*parser).callonRelativeLink84,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 674, col: 9, offset: 21725},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 674, col: 9, offset: 21725},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 668, col: 79, offset: 21553},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 650, col: 5, offset: 20804},
																														run: (*parser).callonRelativeLink88,
																														expr: &seqExpr{
																															pos: position{line: 650, col: 5, offset: 20804},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 650, col: 5, offset: 20804},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 650, col: 13, offset: 20812},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink92,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 650, col: 32, offset: 20831},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 657, col: 5, offset: 21072},
																														run: (*parser).callonRelativeLink98,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 5, offset: 21072},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 5, offset: 21072},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 9, offset: 21076},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink102,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 28, offset: 21095},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2764, col: 5, offset: 90546},
																								run: (*parser).callonRelativeLink108,
																								expr: &seqExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2764, col: 5, offset: 90546},
																											run: (*parser).callonRelativeLink110,
																										},
																										&labeledExpr{
																											pos:   position{line: 2767, col: 5, offset: 90622},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2769, col: 9, offset: 90720},
																														run: (*parser).callonRelativeLink113,
																														expr: &choiceExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 692, col: 27, offset: 22379},
																																	run: (*parser).callonRelativeLink115,
																																	expr: &seqExpr{
																																		pos: position{line: 692, col: 27, offset: 22379},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 692, col: 27, offset: 22379},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 692, col: 32, offset: 22384},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3064, col: 7, offset: 99986},
																																					run: (*parser).callonRelativeLink119,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3064, col: 7, offset: 99986},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3064, col: 7, offset: 99986},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 692, col: 40, offset: 22392},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonRelativeLink123,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 692, col: 47, offset: 22399},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 692, col: 51, offset: 22403},
																																				label: "label",
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 702, col: 24, offset: 22804},
																																					expr: &choiceExpr{
																																						pos: position{line: 703, col: 5, offset: 22810},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 703, col: 6, offset: 22811},
																																								run: (*parser).callonRelativeLink129,
																																								expr: &seqExpr{
																																									pos: position{line: 703, col: 6, offset: 22811},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 703, col: 6, offset: 22811},
																																											val:        "[0-9\\pL]",
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 703, col: 14, offset: 22819},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 703, col: 14, offset: 22819},
																																												val:        "[^\\r\\n{<>]",
																																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 650, col: 5, offset: 20804},
																																								run: (*parser).callonRelativeLink134,
																																								expr: &seqExpr{
																																									pos: position{line: 650, col: 5, offset: 20804},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 650, col: 5, offset: 20804},
																																											val:        "\\{",
																																											ignoreCase: false,
																																											want:       "\"\\\\{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 650, col: 13, offset: 20812},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink138,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 650, col: 32, offset: 20831},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 657, col: 5, offset: 21072},
																																								run: (*parser).callonRelativeLink144,
																																								expr: &seqExpr{
																																									pos: position{line: 657, col: 5, offset: 21072},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 657, col: 5, offset: 21072},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 657, col: 9, offset: 21076},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink148,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 657, col: 28, offset: 21095},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 707, col: 8, offset: 23045},
																																								run: (*parser).callonRelativeLink154,
																																								expr: &litMatcher{
																																									pos:        position{line: 707, col: 8, offset: 23045},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 692, col: 79, offset: 22431},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 694, col: 9, offset: 22504},
																																	run: (*parser).callonRelativeLink157,
																																	expr: &seqExpr{
																																		pos: position{line: 694, col: 9, offset: 22504},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 694, col: 9, offset: 22504},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 694, col: 14, offset: 22509},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3064, col: 7, offset: 99986},
																																					run: (*parser).callonRelativeLink161,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3064, col: 7, offset: 99986},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3064, col: 7, offset: 99986},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 694, col: 22, offset: 22517},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2772, col: 11, offset: 90824},
																														run: (*parser).callonRelativeLink165,
																														expr: &charClassMatcher{
																															pos:        position{line: 2772, col: 12, offset: 90825},
																															val:        "[<>&]",
																															chars:      []rune{'<', '>', '&'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 3058, col: 11, offset: 99830},
																								run: (*parser).callonRelativeLink167,
																								expr: &litMatcher{
																									pos:        position{line: 3058, col: 11, offset: 99830},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1141, col: 23, offset: 35577},
																	run: (*parser).callonRelativeLink169,
																	expr: &seqExpr{
																		pos: position{line: 1141, col: 23, offset: 35577},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1139, col: 32, offset: 35545},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1141, col: 51, offset: 35605},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1141, col: 56, offset: 35610},
																					run: (*parser).callonRelativeLink173,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1141, col: 56, offset: 35610},
																						expr: &charClassMatcher{
																							pos:        position{line: 1141, col: 56, offset: 35610},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1139, col: 32, offset: 35545},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1348, col: 32, offset: 44020},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1348, col: 44, offset: 44032},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 5, offset: 44164},
						run: (*parser).callonRelativeLink179,
						expr: &seqExpr{
							pos: position{line: 1353, col: 5, offset: 44164},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1353, col: 5, offset: 44164},
									val:        "link:",
									ignoreCase: false,
									want:       "\"link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 13, offset: 44172},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3039, col: 13, offset: 99070},
										run: (*parser).callonRelativeLink183,
										expr: &seqExpr{
											pos: position{line: 3039, col: 13, offset: 99070},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3039, col: 13, offset: 99070},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 3039, col: 20, offset: 99077},
														expr: &choiceExpr{
															pos: position{line: 3047, col: 11, offset: 99339},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3047, col: 11, offset: 99339},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 23, offset: 99351},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 36, offset: 99364},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 47, offset: 99375},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 3047, col: 58, offset: 99386},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3039, col: 30, offset: 99087},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3039, col: 35, offset: 99092},
														expr: &choiceExpr{
															pos: position{line: 3039, col: 36, offset: 99093},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 3050, col: 5, offset: 99414},
																	run: (*parser).callonRelativeLink196,
																	expr: &seqExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 3050, col: 5, offset: 99414},
																				expr: &litMatcher{
																					pos:        position{line: 3050, col: 6, offset: 99415},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 3051, col: 5, offset: 99439},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3051, col: 14, offset: 99448},
																					expr: &choiceExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3052, col: 9, offset: 99458},
																								run: (*parser).callonRelativeLink203,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 3052, col: 9, offset: 99458},
																									expr: &charClassMatcher{
																										pos:        position{line: 3052, col: 10, offset: 99459},
																										val:        "[^\\r\\n[]�{.,;?!<> ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 3055, col: 11, offset: 99724},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 3025, col: 25, offset: 98695},
																										run: (*parser).callonRelativeLink207,
																										expr: &charClassMatcher{
																											pos:        position{line: 3025, col: 25, offset: 98695},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 3055, col: 32, offset: 99745},
																										expr: &notExpr{
																											pos: position{line: 3055, col: 34, offset: 99747},
																											expr: &choiceExpr{
																												pos: position{line: 3055, col: 36, offset: 99749},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 3092, col: 8, offset: 100608},
																														expr: &anyMatcher{
																															line: 3092, col: 9, offset: 100609,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonRelativeLink214,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 641, col: 5, offset: 20597},
																								run: (*parser).callonRelativeLink216,
																								expr: &seqExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 641, col: 5, offset: 20597},
																											run: (*parser).callonRelativeLink218,
																										},
																										&labeledExpr{
																											pos:   position{line: 644, col: 5, offset: 20666},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 644, col: 14, offset: 20675},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 664, col: 25, offset: 21328},
																														run: (*parser).callonRelativeLink221,
																														expr: &seqExpr{
																															pos: position{line: 664, col: 25, offset: 21328},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 664, col: 25, offset: 21328},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 37, offset: 21340},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink225,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 56, offset: 21359},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 664, col: 62, offset: 21365},
																																		expr: &actionExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			run: (*parser).callonRelativeLink232,
																																			expr: &seqExpr{
																																				pos: position{line: 672, col: 17, offset: 21660},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 672, col: 17, offset: 21660},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 672, col: 21, offset: 21664},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 672, col: 28, offset: 21671},
																																									run: (*parser).callonRelativeLink237,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 672, col: 28, offset: 21671},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									run: (*parser).callonRelativeLink239,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 674, col: 9, offset: 21725},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 674, col: 9, offset: 21725},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 664, col: 78, offset: 21381},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 668, col: 25, offset: 21499},
																														run: (*parser).callonRelativeLink243,
																														expr: &seqExpr{
																															pos: position{line: 668, col: 25, offset: 21499},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 668, col: 25, offset: 21499},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 668, col: 38, offset: 21512},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink247,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 668, col: 57, offset: 21531},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 668, col: 63, offset: 21537},
																																		expr: &actionExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			run: (*parser).callonRelativeLink254,
																																			expr: &seqExpr{
																																				pos: position{line: 672, col: 17, offset: 21660},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 672, col: 17, offset: 21660},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 672, col: 21, offset: 21664},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 672, col: 28, offset: 21671},
																																									run: (*parser).callonRelativeLink259,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 672, col: 28, offset: 21671},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									run: (*parser).callonRelativeLink261,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 674, col: 9, offset: 21725},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 674, col: 9, offset: 21725},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 668, col: 79, offset: 21553},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 650, col: 5, offset: 20804},
																														run: (*parser).callonRelativeLink265,
																														expr: &seqExpr{
																															pos: position{line: 650, col: 5, offset: 20804},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 650, col: 5, offset: 20804},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 650, col: 13, offset: 20812},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink269,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 650, col: 32, offset: 20831},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 657, col: 5, offset: 21072},
																														run: (*parser).callonRelativeLink275,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 5, offset: 21072},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 5, offset: 21072},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 9, offset: 21076},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink279,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 28, offset: 21095},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2764, col: 5, offset: 90546},
																								run: (*parser).callonRelativeLink285,
																								expr: &seqExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2764, col: 5, offset: 90546},
																											run: (*parser).callonRelativeLink287,
																										},
																										&labeledExpr{
																											pos:   position{line: 2767, col: 5, offset: 90622},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2769, col: 9, offset: 90720},
																														run: (*parser).callonRelativeLink290,
																														expr: &choiceExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 692, col: 27, offset: 22379},
																																	run: (*parser).callonRelativeLink292,
																																	expr: &seqExpr{
																																		pos: position{line: 692, col: 27, offset: 22379},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 692, col: 27, offset: 22379},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 692, col: 32, offset: 22384},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3064, col: 7, offset: 99986},
																																					run: (*parser).callonRelativeLink296,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3064, col: 7, offset: 99986},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3064, col: 7, offset: 99986},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 692, col: 40, offset: 22392},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonRelativeLink300,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 692, col: 47, offset: 22399},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 692, col: 51, offset: 22403},
																																				label: "label",
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 702, col: 24, offset: 22804},
																																					expr: &choiceExpr{
																																						pos: position{line: 703, col: 5, offset: 22810},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 703, col: 6, offset: 22811},
																																								run: (*parser).callonRelativeLink306,
																																								expr: &seqExpr{
																																									pos: position{line: 703, col: 6, offset: 22811},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 703, col: 6, offset: 22811},
																																											val:        "[0-9\\pL]",
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 703, col: 14, offset: 22819},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 703, col: 14, offset: 22819},
																																												val:        "[^\\r\\n{<>]",
																																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 650, col: 5, offset: 20804},
																																								run: (*parser).callonRelativeLink311,
																																								expr: &seqExpr{
																																									pos: position{line: 650, col: 5, offset: 20804},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 650, col: 5, offset: 20804},
																																											val:        "\\{",
																																											ignoreCase: false,
																																											want:       "\"\\\\{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 650, col: 13, offset: 20812},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink315,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 650, col: 32, offset: 20831},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 657, col: 5, offset: 21072},
																																								run: (*parser).callonRelativeLink321,
																																								expr: &seqExpr{
																																									pos: position{line: 657, col: 5, offset: 21072},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 657, col: 5, offset: 21072},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 657, col: 9, offset: 21076},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink325,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 657, col: 28, offset: 21095},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 707, col: 8, offset: 23045},
																																								run: (*parser).callonRelativeLink331,
																																								expr: &litMatcher{
																																									pos:        position{line: 707, col: 8, offset: 23045},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 692, col: 79, offset: 22431},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 694, col: 9, offset: 22504},
																																	run: (*parser).callonRelativeLink334,
																																	expr: &seqExpr{
																																		pos: position{line: 694, col: 9, offset: 22504},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 694, col: 9, offset: 22504},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 694, col: 14, offset: 22509},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3064, col: 7, offset: 99986},
																																					run: (*parser).callonRelativeLink338,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3064, col: 7, offset: 99986},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3064, col: 7, offset: 99986},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 694, col: 22, offset: 22517},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2772, col: 11, offset: 90824},
																														run: (*parser).callonRelativeLink342,
																														expr: &charClassMatcher{
																															pos:        position{line: 2772, col: 12, offset: 90825},
																															val:        "[<>&]",
																															chars:      []rune{'<', '>', '&'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 3058, col: 11, offset: 99830},
																								run: (*parser).callonRelativeLink344,
																								expr: &litMatcher{
																									pos:        position{line: 3058, col: 11, offset: 99830},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1141, col: 23, offset: 35577},
																	run: (*parser).callonRelativeLink346,
																	expr: &seqExpr{
																		pos: position{line: 1141, col: 23, offset: 35577},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1139, col: 32, offset: 35545},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1141, col: 51, offset: 35605},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1141, col: 56, offset: 35610},
																					run: (*parser).callonRelativeLink350,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1141, col: 56, offset: 35610},
																						expr: &charClassMatcher{
																							pos:        position{line: 1141, col: 56, offset: 35610},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1139, col: 32, offset: 35545},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 28, offset: 44187},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 40, offset: 44199},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1357, col: 1, offset: 44315},
			expr: &choiceExpr{
				pos: position{line: 1359, col: 5, offset: 44351},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1359, col: 5, offset: 44351},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 1359, col: 5, offset: 44351},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1359, col: 5, offset: 44351},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1359, col: 9, offset: 44355},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3043, col: 23, offset: 99219},
										run: (*parser).callonExternalLink6,
										expr: &seqExpr{
											pos: position{line: 3043, col: 23, offset: 99219},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 3043, col: 23, offset: 99219},
													expr: &litMatcher{
														pos:        position{line: 3043, col: 24, offset: 99220},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 3043, col: 28, offset: 99224},
													label: "scheme",
													expr: &choiceExpr{
														pos: position{line: 3047, col: 11, offset: 99339},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3047, col: 11, offset: 99339},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 23, offset: 99351},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 36, offset: 99364},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 47, offset: 99375},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 58, offset: 99386},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3043, col: 44, offset: 99240},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3043, col: 49, offset: 99245},
														expr: &actionExpr{
															pos: position{line: 3050, col: 5, offset: 99414},
															run: (*parser).callonExternalLink19,
															expr: &seqExpr{
																pos: position{line: 3050, col: 5, offset: 99414},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		expr: &litMatcher{
																			pos:        position{line: 3050, col: 6, offset: 99415},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3051, col: 5, offset: 99439},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3051, col: 14, offset: 99448},
																			expr: &choiceExpr{
																				pos: position{line: 3052, col: 9, offset: 99458},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						run: (*parser).callonExternalLink26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3052, col: 9, offset: 99458},
																							expr: &charClassMatcher{
																								pos:        position{line: 3052, col: 10, offset: 99459},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3055, col: 11, offset: 99724},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3025, col: 25, offset: 98695},
																								run: (*parser).callonExternalLink30,
																								expr: &charClassMatcher{
																									pos:        position{line: 3025, col: 25, offset: 98695},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3055, col: 32, offset: 99745},
																								expr: &notExpr{
																									pos: position{line: 3055, col: 34, offset: 99747},
																									expr: &choiceExpr{
																										pos: position{line: 3055, col: 36, offset: 99749},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExternalLink37,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 641, col: 5, offset: 20597},
																						run: (*parser).callonExternalLink39,
																						expr: &seqExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									run: (*parser).callonExternalLink41,
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 5, offset: 20666},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 644, col: 14, offset: 20675},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 664, col: 25, offset: 21328},
																												run: (*parser).callonExternalLink44,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 25, offset: 21328},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 25, offset: 21328},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 37, offset: 21340},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink48,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 56, offset: 21359},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 664, col: 62, offset: 21365},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonExternalLink55,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonExternalLink60,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonExternalLink62,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 78, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 25, offset: 21499},
																												run: (*parser).callonExternalLink66,
																												expr: &seqExpr{
																													pos: position{line: 668, col: 25, offset: 21499},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 668, col: 25, offset: 21499},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 38, offset: 21512},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink70,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 57, offset: 21531},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 668, col: 63, offset: 21537},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonExternalLink77,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonExternalLink82,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonExternalLink84,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 668, col: 79, offset: 21553},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 650, col: 5, offset: 20804},
																												run: (*parser).callonExternalLink88,
																												expr: &seqExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 650, col: 5, offset: 20804},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 650, col: 13, offset: 20812},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink92,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 650, col: 32, offset: 20831},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21072},
																												run: (*parser).callonExternalLink98,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21072},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 9, offset: 21076},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink102,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 28, offset: 21095},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2764, col: 5, offset: 90546},
																						run: (*parser).callonExternalLink108,
																						expr: &seqExpr{
																							pos: position{line: 2764, col: 5, offset: 90546},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									run: (*parser).callonExternalLink110,
																								},
																								&labeledExpr{
																									pos:   position{line: 2767, col: 5, offset: 90622},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2769, col: 9, offset: 90720},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												run: (*parser).callonExternalLink113,
																												expr: &choiceExpr{
																													pos: position{line: 692, col: 27, offset: 22379},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															run: (*parser).callonExternalLink115,
																															expr: &seqExpr{
																																pos: position{line: 692, col: 27, offset: 22379},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 692, col: 27, offset: 22379},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 32, offset: 22384},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonExternalLink119,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 692, col: 40, offset: 22392},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExternalLink123,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 47, offset: 22399},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 51, offset: 22403},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 702, col: 24, offset: 22804},
																																			expr: &choiceExpr{
																																				pos: position{line: 703, col: 5, offset: 22810},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 703, col: 6, offset: 22811},
																																						run: (*parser).callonExternalLink129,
																																						expr: &seqExpr{
																																							pos: position{line: 703, col: 6, offset: 22811},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 703, col: 6, offset: 22811},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 703, col: 14, offset: 22819},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 703, col: 14, offset: 22819},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 650, col: 5, offset: 20804},
																																						run: (*parser).callonExternalLink134,
																																						expr: &seqExpr{
																																							pos: position{line: 650, col: 5, offset: 20804},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 650, col: 5, offset: 20804},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 650, col: 13, offset: 20812},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink138,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 650, col: 32, offset: 20831},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21072},
																																						run: (*parser).callonExternalLink144,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21072},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21072},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 9, offset: 21076},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink148,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 28, offset: 21095},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 707, col: 8, offset: 23045},
																																						run: (*parser).callonExternalLink154,
																																						expr: &litMatcher{
																																							pos:        position{line: 707, col: 8, offset: 23045},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 79, offset: 22431},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 694, col: 9, offset: 22504},
																															run: (*parser).callonExternalLink157,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 9, offset: 22504},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 9, offset: 22504},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 14, offset: 22509},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonExternalLink161,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 22, offset: 22517},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2772, col: 11, offset: 90824},
																												run: (*parser).callonExternalLink165,
																												expr: &charClassMatcher{
																													pos:        position{line: 2772, col: 12, offset: 90825},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3058, col: 11, offset: 99830},
																						run: (*parser).callonExternalLink167,
																						expr: &litMatcher{
																							pos:        position{line: 3058, col: 11, offset: 99830},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1359, col: 34, offset: 44380},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1359, col: 45, offset: 44391},
										expr: &ruleRefExpr{
											pos:  position{line: 1359, col: 46, offset: 44392},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1364, col: 5, offset: 44525},
						run: (*parser).callonExternalLink172,
						expr: &seqExpr{
							pos: position{line: 1364, col: 5, offset: 44525},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1364, col: 5, offset: 44525},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3043, col: 23, offset: 99219},
										run: (*parser).callonExternalLink175,
										expr: &seqExpr{
											pos: position{line: 3043, col: 23, offset: 99219},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 3043, col: 23, offset: 99219},
													expr: &litMatcher{
														pos:        position{line: 3043, col: 24, offset: 99220},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 3043, col: 28, offset: 99224},
													label: "scheme",
													expr: &choiceExpr{
														pos: position{line: 3047, col: 11, offset: 99339},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3047, col: 11, offset: 99339},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 23, offset: 99351},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 36, offset: 99364},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 47, offset: 99375},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 3047, col: 58, offset: 99386},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3043, col: 44, offset: 99240},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3043, col: 49, offset: 99245},
														expr: &actionExpr{
															pos: position{line: 3050, col: 5, offset: 99414},
															run: (*parser).callonExternalLink188,
															expr: &seqExpr{
																pos: position{line: 3050, col: 5, offset: 99414},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3050, col: 5, offset: 99414},
																		expr: &litMatcher{
																			pos:        position{line: 3050, col: 6, offset: 99415},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3051, col: 5, offset: 99439},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3051, col: 14, offset: 99448},
																			expr: &choiceExpr{
																				pos: position{line: 3052, col: 9, offset: 99458},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3052, col: 9, offset: 99458},
																						run: (*parser).callonExternalLink195,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3052, col: 9, offset: 99458},
																							expr: &charClassMatcher{
																								pos:        position{line: 3052, col: 10, offset: 99459},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3055, col: 11, offset: 99724},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3025, col: 25, offset: 98695},
																								run: (*parser).callonExternalLink199,
																								expr: &charClassMatcher{
																									pos:        position{line: 3025, col: 25, offset: 98695},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3055, col: 32, offset: 99745},
																								expr: &notExpr{
																									pos: position{line: 3055, col: 34, offset: 99747},
																									expr: &choiceExpr{
																										pos: position{line: 3055, col: 36, offset: 99749},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExternalLink206,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 641, col: 5, offset: 20597},
																						run: (*parser).callonExternalLink208,
																						expr: &seqExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 641, col: 5, offset: 20597},
																									run: (*parser).callonExternalLink210,
																								},
																								&labeledExpr{
																									pos:   position{line: 644, col: 5, offset: 20666},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 644, col: 14, offset: 20675},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 664, col: 25, offset: 21328},
																												run: (*parser).callonExternalLink213,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 25, offset: 21328},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 25, offset: 21328},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 37, offset: 21340},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink217,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 56, offset: 21359},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 664, col: 62, offset: 21365},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonExternalLink224,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonExternalLink229,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonExternalLink231,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 78, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 668, col: 25, offset: 21499},
																												run: (*parser).callonExternalLink235,
																												expr: &seqExpr{
																													pos: position{line: 668, col: 25, offset: 21499},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 668, col: 25, offset: 21499},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 38, offset: 21512},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink239,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 668, col: 57, offset: 21531},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 668, col: 63, offset: 21537},
																																expr: &actionExpr{
																																	pos: position{line: 672, col: 17, offset: 21660},
																																	run: (*parser).callonExternalLink246,
																																	expr: &seqExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 672, col: 17, offset: 21660},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 672, col: 21, offset: 21664},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 672, col: 28, offset: 21671},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 672, col: 28, offset: 21671},
																																							run: (*parser).callonExternalLink251,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 672, col: 28, offset: 21671},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 674, col: 9, offset: 21725},
																																							run: (*parser).callonExternalLink253,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 674, col: 9, offset: 21725},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 668, col: 79, offset: 21553},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 650, col: 5, offset: 20804},
																												run: (*parser).callonExternalLink257,
																												expr: &seqExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 650, col: 5, offset: 20804},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 650, col: 13, offset: 20812},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink261,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 650, col: 32, offset: 20831},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21072},
																												run: (*parser).callonExternalLink267,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21072},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 9, offset: 21076},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink271,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 28, offset: 21095},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2764, col: 5, offset: 90546},
																						run: (*parser).callonExternalLink277,
																						expr: &seqExpr{
																							pos: position{line: 2764, col: 5, offset: 90546},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2764, col: 5, offset: 90546},
																									run: (*parser).callonExternalLink279,
																								},
																								&labeledExpr{
																									pos:   position{line: 2767, col: 5, offset: 90622},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2769, col: 9, offset: 90720},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2769, col: 9, offset: 90720},
																												run: (*parser).callonExternalLink282,
																												expr: &choiceExpr{
																													pos: position{line: 692, col: 27, offset: 22379},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 692, col: 27, offset: 22379},
																															run: (*parser).callonExternalLink284,
																															expr: &seqExpr{
																																pos: position{line: 692, col: 27, offset: 22379},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 692, col: 27, offset: 22379},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 32, offset: 22384},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonExternalLink288,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 692, col: 40, offset: 22392},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExternalLink292,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 47, offset: 22399},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 692, col: 51, offset: 22403},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 702, col: 24, offset: 22804},
																																			expr: &choiceExpr{
																																				pos: position{line: 703, col: 5, offset: 22810},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 703, col: 6, offset: 22811},
																																						run: (*parser).callonExternalLink298,
																																						expr: &seqExpr{
																																							pos: position{line: 703, col: 6, offset: 22811},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 703, col: 6, offset: 22811},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 703, col: 14, offset: 22819},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 703, col: 14, offset: 22819},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 650, col: 5, offset: 20804},
																																						run: (*parser).callonExternalLink303,
																																						expr: &seqExpr{
																																							pos: position{line: 650, col: 5, offset: 20804},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 650, col: 5, offset: 20804},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 650, col: 13, offset: 20812},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink307,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 650, col: 32, offset: 20831},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21072},
																																						run: (*parser).callonExternalLink313,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21072},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21072},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 9, offset: 21076},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink317,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 28, offset: 21095},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 707, col: 8, offset: 23045},
																																						run: (*parser).callonExternalLink323,
																																						expr: &litMatcher{
																																							pos:        position{line: 707, col: 8, offset: 23045},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 692, col: 79, offset: 22431},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 694, col: 9, offset: 22504},
																															run: (*parser).callonExternalLink326,
																															expr: &seqExpr{
																																pos: position{line: 694, col: 9, offset: 22504},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 694, col: 9, offset: 22504},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 694, col: 14, offset: 22509},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3064, col: 7, offset: 99986},
																																			run: (*parser).callonExternalLink330,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3064, col: 7, offset: 99986},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3064, col: 7, offset: 99986},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 694, col: 22, offset: 22517},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2772, col: 11, offset: 90824},
																												run: (*parser).callonExternalLink334,
																												expr: &charClassMatcher{
																													pos:        position{line: 2772, col: 12, offset: 90825},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3058, col: 11, offset: 99830},
																						run: (*parser).callonExternalLink336,
																						expr: &litMatcher{
																							pos:        position{line: 3058, col: 11, offset: 99830},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1364, col: 30, offset: 44550},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1364, col: 41, offset: 44561},
										expr: &ruleRefExpr{
											pos:  position{line: 1364, col: 42, offset: 44562},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1372, col: 1, offset: 44916},
			expr: &actionExpr{
				pos: position{line: 1373, col: 5, offset: 44937},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1373, col: 5, offset: 44937},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1373, col: 5, offset: 44937},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1379, col: 5, offset: 45139},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1526, col: 5, offset: 49946},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1526, col: 5, offset: 49946},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1526, col: 5, offset: 49946},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1533, col: 5, offset: 50154},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1533, col: 5, offset: 50154},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1533, col: 5, offset: 50154},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1533, col: 12, offset: 50161},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1535, col: 9, offset: 50224},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1535, col: 9, offset: 50224},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1535, col: 9, offset: 50224},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1535, col: 9, offset: 50224},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1535, col: 16, offset: 50231},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1535, col: 16, offset: 50231},
																									expr: &litMatcher{
																										pos:        position{line: 1535, col: 17, offset: 50232},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1539, col: 9, offset: 50332},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1558, col: 11, offset: 51049},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1558, col: 11, offset: 51049},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1558, col: 11, offset: 51049},
																							expr: &charClassMatcher{
																								pos:        position{line: 1558, col: 12, offset: 51050},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1558, col: 20, offset: 51058},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1560, col: 13, offset: 51175},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1560, col: 13, offset: 51175},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1560, col: 14, offset: 51176},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1560, col: 21, offset: 51183},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1562, col: 13, offset: 51303},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1562, col: 13, offset: 51303},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1562, col: 14, offset: 51304},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1562, col: 21, offset: 51311},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1564, col: 13, offset: 51431},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1564, col: 13, offset: 51431},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1564, col: 13, offset: 51431},
																							expr: &charClassMatcher{
																								pos:        position{line: 1564, col: 14, offset: 51432},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1564, col: 26, offset: 51444},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1566, col: 13, offset: 51564},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1566, col: 13, offset: 51564},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1566, col: 13, offset: 51564},
																							expr: &charClassMatcher{
																								pos:        position{line: 1566, col: 14, offset: 51565},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1566, col: 26, offset: 51577},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3083, col: 11, offset: 100401},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		expr: &charClassMatcher{
																			pos:        position{line: 3083, col: 12, offset: 100402},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1527, col: 5, offset: 49985},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1467, col: 5, offset: 48181},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1467, col: 5, offset: 48181},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1467, col: 5, offset: 48181},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 14, offset: 48190},
																		run: (*parser).callonListElements52,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1467, col: 14, offset: 48190},
																			expr: &charClassMatcher{
																				pos:        position{line: 1467, col: 14, offset: 48190},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElements56,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1576, col: 5, offset: 51843},
										run: (*parser).callonListElements63,
										expr: &seqExpr{
											pos: position{line: 1576, col: 5, offset: 51843},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1576, col: 5, offset: 51843},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1583, col: 5, offset: 52116},
														run: (*parser).callonListElements66,
														expr: &seqExpr{
															pos: position{line: 1583, col: 5, offset: 52116},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1583, col: 5, offset: 52116},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonListElements69,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1583, col: 12, offset: 52123},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1583, col: 20, offset: 52131},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1585, col: 9, offset: 52188},
																				run: (*parser).callonListElements73,
																				expr: &seqExpr{
																					pos: position{line: 1585, col: 9, offset: 52188},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1585, col: 9, offset: 52188},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1585, col: 16, offset: 52195},
																								run: (*parser).callonListElements76,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1585, col: 16, offset: 52195},
																									expr: &litMatcher{
																										pos:        position{line: 1585, col: 17, offset: 52196},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1589, col: 9, offset: 52296},
																							run: (*parser).callonListElements79,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1606, col: 14, offset: 53003},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1606, col: 21, offset: 53010},
																					run: (*parser).callonListElements81,
																					expr: &litMatcher{
																						pos:        position{line: 1606, col: 22, offset: 53011},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3083, col: 11, offset: 100401},
																	run: (*parser).callonListElements83,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		expr: &charClassMatcher{
																			pos:        position{line: 3083, col: 12, offset: 100402},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1577, col: 5, offset: 51884},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1577, col: 16, offset: 51895},
														expr: &actionExpr{
															pos: position{line: 1613, col: 5, offset: 53172},
															run: (*parser).callonListElements88,
															expr: &seqExpr{
																pos: position{line: 1613, col: 5, offset: 53172},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1613, col: 5, offset: 53172},
																		expr: &litMatcher{
																			pos:        position{line: 1613, col: 6, offset: 53173},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1613, col: 10, offset: 53177},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1614, col: 7, offset: 53191},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1614, col: 7, offset: 53191},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1614, col: 7, offset: 53191},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1615, col: 7, offset: 53236},
																					run: (*parser).callonListElements96,
																					expr: &litMatcher{
																						pos:        position{line: 1615, col: 7, offset: 53236},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1616, col: 7, offset: 53279},
																					run: (*parser).callonListElements98,
																					expr: &litMatcher{
																						pos:        position{line: 1616, col: 7, offset: 53279},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		run: (*parser).callonListElements100,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3083, col: 11, offset: 100401},
																			expr: &charClassMatcher{
																				pos:        position{line: 3083, col: 12, offset: 100402},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1578, col: 5, offset: 51934},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1467, col: 5, offset: 48181},
														run: (*parser).callonListElements104,
														expr: &seqExpr{
															pos: position{line: 1467, col: 5, offset: 48181},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1467, col: 5, offset: 48181},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 14, offset: 48190},
																		run: (*parser).callonListElements107,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1467, col: 14, offset: 48190},
																			expr: &charClassMatcher{
																				pos:        position{line: 1467, col: 14, offset: 48190},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElements111,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1683, col: 5, offset: 55152},
										run: (*parser).callonListElements118,
										expr: &seqExpr{
											pos: position{line: 1683, col: 5, offset: 55152},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1683, col: 5, offset: 55152},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1689, col: 5, offset: 55353},
														run: (*parser).callonListElements121,
														expr: &seqExpr{
															pos: position{line: 1689, col: 5, offset: 55353},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1689, col: 5, offset: 55353},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1689, col: 9, offset: 55357},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1689, col: 14, offset: 55362},
																		run: (*parser).callonListElements125,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1689, col: 14, offset: 55362},
																			expr: &charClassMatcher{
																				pos:        position{line: 1689, col: 14, offset: 55362},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1689, col: 62, offset: 55410},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 3083, col: 11, offset: 100401},
																	run: (*parser).callonListElements129,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		expr: &charClassMatcher{
																			pos:        position{line: 3083, col: 12, offset: 100402},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1684, col: 5, offset: 55188},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1694, col: 5, offset: 55536},
														run: (*parser).callonListElements133,
														expr: &seqExpr{
															pos: position{line: 1694, col: 5, offset: 55536},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1694, col: 5, offset: 55536},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1694, col: 14, offset: 55545},
																		run: (*parser).callonListElements136,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1694, col: 14, offset: 55545},
																			expr: &charClassMatcher{
																				pos:        position{line: 1694, col: 14, offset: 55545},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElements140,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1625, col: 5, offset: 53472},
										run: (*parser).callonListElements147,
										expr: &seqExpr{
											pos: position{line: 1625, col: 5, offset: 53472},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1625, col: 5, offset: 53472},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1633, col: 5, offset: 53731},
														run: (*parser).callonListElements150,
														expr: &oneOrMoreExpr{
															pos: position{line: 1633, col: 5, offset: 53731},
															expr: &seqExpr{
																pos: position{line: 1633, col: 6, offset: 53732},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1633, col: 6, offset: 53732},
																		expr: &actionExpr{
																			pos: position{line: 1638, col: 5, offset: 53882},
																			run: (*parser).callonListElements154,
																			expr: &seqExpr{
																				pos: position{line: 1638, col: 5, offset: 53882},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1638, col: 5, offset: 53882},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1638, col: 16, offset: 53893},
																							run: (*parser).callonListElements157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1638, col: 16, offset: 53893},
																								expr: &litMatcher{
																									pos:        position{line: 1638, col: 17, offset: 53894},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1641, col: 5, offset: 53951},
																						run: (*parser).callonListElements160,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1633, col: 35, offset: 53761},
																		expr: &choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElements163,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1633, col: 40, offset: 53766,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1626, col: 5, offset: 53507},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1638, col: 5, offset: 53882},
														run: (*parser).callonListElements172,
														expr: &seqExpr{
															pos: position{line: 1638, col: 5, offset: 53882},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1638, col: 5, offset: 53882},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1638, col: 16, offset: 53893},
																		run: (*parser).callonListElements175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1638, col: 16, offset: 53893},
																			expr: &litMatcher{
																				pos:        position{line: 1638, col: 17, offset: 53894},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1641, col: 5, offset: 53951},
																	run: (*parser).callonListElements178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1627, col: 5, offset: 53552},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1649, col: 5, offset: 54201},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1651, col: 9, offset: 54266},
																run: (*parser).callonListElements181,
																expr: &seqExpr{
																	pos: position{line: 1651, col: 9, offset: 54266},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1651, col: 9, offset: 54266},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElements184,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElements187,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1652, col: 9, offset: 54286},
																			expr: &actionExpr{
																				pos: position{line: 683, col: 14, offset: 22026},
																				run: (*parser).callonListElements195,
																				expr: &seqExpr{
																					pos: position{line: 683, col: 14, offset: 22026},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 683, col: 14, offset: 22026},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 683, col: 19, offset: 22031},
																							expr: &actionExpr{
																								pos: position{line: 3079, col: 10, offset: 100334},
																								run: (*parser).callonListElements201,
																								expr: &charClassMatcher{
																									pos:        position{line: 3079, col: 11, offset: 100335},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonListElements204,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1653, col: 9, offset: 54306},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1653, col: 17, offset: 54314},
																				expr: &choiceExpr{
																					pos: position{line: 1447, col: 5, offset: 47548},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 1447, col: 5, offset: 47548},
																							run: (*parser).callonListElements214,
																							expr: &actionExpr{
																								pos: position{line: 2781, col: 22, offset: 91184},
																								run: (*parser).callonListElements215,
																								expr: &seqExpr{
																									pos: position{line: 2781, col: 22, offset: 91184},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2786, col: 31, offset: 91405},
																											val:        "//",
																											ignoreCase: false,
																											want:       "\"//\"",
																										},
																										&notExpr{
																											pos: position{line: 2786, col: 36, offset: 91410},
																											expr: &litMatcher{
																												pos:        position{line: 2786, col: 37, offset: 91411},
																												val:        "//",
																												ignoreCase: false,
																												want:       "\"//\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 2781, col: 49, offset: 91211},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2788, col: 29, offset: 91446},
																												run: (*parser).callonListElements221,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2788, col: 29, offset: 91446},
																													expr: &charClassMatcher{
																														pos:        position{line: 2788, col: 29, offset: 91446},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonListElements225,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1451, col: 9, offset: 47701},
																							run: (*parser).callonListElements232,
																							expr: &seqExpr{
																								pos: position{line: 1451, col: 9, offset: 47701},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1451, col: 9, offset: 47701},
																										expr: &actionExpr{
																											pos: position{line: 683, col: 14, offset: 22026},
																											run: (*parser).callonListElements235,
																											expr: &seqExpr{
																												pos: position{line: 683, col: 14, offset: 22026},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 683, col: 14, offset: 22026},
																														expr: &notExpr{
																															pos: position{line: 3092, col: 8, offset: 100608},
																															expr: &anyMatcher{
																																line: 3092, col: 9, offset: 100609,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 683, col: 19, offset: 22031},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonListElements241,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3095, col: 8, offset: 100658},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3088, col: 12, offset: 100518},
																																run: (*parser).callonListElements244,
																																expr: &choiceExpr{
																																	pos: position{line: 3088, col: 13, offset: 100519},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 13, offset: 100519},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 20, offset: 100526},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 29, offset: 100535},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3092, col: 8, offset: 100608},
																																expr: &anyMatcher{
																																	line: 3092, col: 9, offset: 100609,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1452, col: 9, offset: 47720},
																										expr: &seqExpr{
																											pos: position{line: 1485, col: 34, offset: 48680},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1485, col: 34, offset: 48680},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1485, col: 38, offset: 48684},
																													expr: &actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonListElements255,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonListElements257,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1453, col: 9, offset: 47759},
																										expr: &actionExpr{
																											pos: position{line: 1533, col: 5, offset: 50154},
																											run: (*parser).callonListElements263,
																											expr: &seqExpr{
																												pos: position{line: 1533, col: 5, offset: 50154},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1533, col: 5, offset: 50154},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonListElements266,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1533, col: 12, offset: 50161},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1535, col: 9, offset: 50224},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1535, col: 9, offset: 50224},
																																	run: (*parser).callonListElements270,
																																	expr: &seqExpr{
																																		pos: position{line: 1535, col: 9, offset: 50224},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1535, col: 9, offset: 50224},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1535, col: 16, offset: 50231},
																																					run: (*parser).callonListElements273,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1535, col: 16, offset: 50231},
																																						expr: &litMatcher{
																																							pos:        position{line: 1535, col: 17, offset: 50232},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1539, col: 9, offset: 50332},
																																				run: (*parser).callonListElements276,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1558, col: 11, offset: 51049},
																																	run: (*parser).callonListElements277,
																																	expr: &seqExpr{
																																		pos: position{line: 1558, col: 11, offset: 51049},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1558, col: 11, offset: 51049},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1558, col: 12, offset: 51050},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1558, col: 20, offset: 51058},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1560, col: 13, offset: 51175},
																																	run: (*parser).callonListElements282,
																																	expr: &seqExpr{
																																		pos: position{line: 1560, col: 13, offset: 51175},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1560, col: 14, offset: 51176},
																																				val:        "[a-z]",
																																				ranges:     []rune{'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1560, col: 21, offset: 51183},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1562, col: 13, offset: 51303},
																																	run: (*parser).callonListElements286,
																																	expr: &seqExpr{
																																		pos: position{line: 1562, col: 13, offset: 51303},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1562, col: 14, offset: 51304},
																																				val:        "[A-Z]",
																																				ranges:     []rune{'A', 'Z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1562, col: 21, offset: 51311},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1564, col: 13, offset: 51431},
																																	run: (*parser).callonListElements290,
																																	expr: &seqExpr{
																																		pos: position{line: 1564, col: 13, offset: 51431},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1564, col: 13, offset: 51431},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1564, col: 14, offset: 51432},
																																					val:        "[ivxdlcm]",
																																					chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1564, col: 26, offset: 51444},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1566, col: 13, offset: 51564},
																																	run: (*parser).callonListElements295,
																																	expr: &seqExpr{
																																		pos: position{line: 1566, col: 13, offset: 51564},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1566, col: 13, offset: 51564},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1566, col: 14, offset: 51565},
																																					val:        "[IVXDLCM]",
																																					chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1566, col: 26, offset: 51577},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3083, col: 11, offset: 100401},
																														run: (*parser).callonListElements300,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3083, col: 11, offset: 100401},
																															expr: &charClassMatcher{
																																pos:        position{line: 3083, col: 12, offset: 100402},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1454, col: 9, offset: 47793},
																										expr: &actionExpr{
																											pos: position{line: 1583, col: 5, offset: 52116},
																											run: (*parser).callonListElements304,
																											expr: &seqExpr{
																												pos: position{line: 1583, col: 5, offset: 52116},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1583, col: 5, offset: 52116},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonListElements307,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1583, col: 12, offset: 52123},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1583, col: 20, offset: 52131},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1585, col: 9, offset: 52188},
																																	run: (*parser).callonListElements311,
																																	expr: &seqExpr{
																																		pos: position{line: 1585, col: 9, offset: 52188},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1585, col: 9, offset: 52188},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1585, col: 16, offset: 52195},
																																					run: (*parser).callonListElements314,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1585, col: 16, offset: 52195},
																																						expr: &litMatcher{
																																							pos:        position{line: 1585, col: 17, offset: 52196},
																																							val:        "*",
																																							ignoreCase: false,
																																							want:       "\"*\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1589, col: 9, offset: 52296},
																																				run: (*parser).callonListElements317,
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 1606, col: 14, offset: 53003},
																																	label: "depth",
																																	expr: &actionExpr{
																																		pos: position{line: 1606, col: 21, offset: 53010},
																																		run: (*parser).callonListElements319,
																																		expr: &litMatcher{
																																			pos:        position{line: 1606, col: 22, offset: 53011},
																																			val:        "-",
																																			ignoreCase: false,
																																			want:       "\"-\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3083, col: 11, offset: 100401},
																														run: (*parser).callonListElements321,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3083, col: 11, offset: 100401},
																															expr: &charClassMatcher{
																																pos:        position{line: 3083, col: 12, offset: 100402},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1455, col: 9, offset: 47829},
																										expr: &actionExpr{
																											pos: position{line: 1689, col: 5, offset: 55353},
																											run: (*parser).callonListElements325,
																											expr: &seqExpr{
																												pos: position{line: 1689, col: 5, offset: 55353},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 1689, col: 5, offset: 55353},
																														val:        "<",
																														ignoreCase: false,
																														want:       "\"<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 1689, col: 9, offset: 55357},
																														label: "ref",
																														expr: &actionExpr{
																															pos: position{line: 1689, col: 14, offset: 55362},
																															run: (*parser).callonListElements329,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1689, col: 14, offset: 55362},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1689, col: 14, offset: 55362},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 1689, col: 62, offset: 55410},
																														val:        ">",
																														ignoreCase: false,
																														want:       "\">\"",
																													},
																													&actionExpr{
																														pos: position{line: 3083, col: 11, offset: 100401},
																														run: (*parser).callonListElements333,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3083, col: 11, offset: 100401},
																															expr: &charClassMatcher{
																																pos:        position{line: 3083, col: 12, offset: 100402},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1456, col: 9, offset: 47863},
																										expr: &seqExpr{
																											pos: position{line: 1456, col: 11, offset: 47865},
																											exprs: []interface{}{
																												&actionExpr{
																													pos: position{line: 1633, col: 5, offset: 53731},
																													run: (*parser).callonListElements338,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1633, col: 5, offset: 53731},
																														expr: &seqExpr{
																															pos: position{line: 1633, col: 6, offset: 53732},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 1633, col: 6, offset: 53732},
																																	expr: &actionExpr{
																																		pos: position{line: 1638, col: 5, offset: 53882},
																																		run: (*parser).callonListElements342,
																																		expr: &seqExpr{
																																			pos: position{line: 1638, col: 5, offset: 53882},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1638, col: 5, offset: 53882},
																																					label: "separator",
																																					expr: &actionExpr{
																																						pos: position{line: 1638, col: 16, offset: 53893},
																																						run: (*parser).callonListElements345,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1638, col: 16, offset: 53893},
																																							expr: &litMatcher{
																																								pos:        position{line: 1638, col: 17, offset: 53894},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 1641, col: 5, offset: 53951},
																																					run: (*parser).callonListElements348,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 1633, col: 35, offset: 53761},
																																	expr: &choiceExpr{
																																		pos: position{line: 3095, col: 8, offset: 100658},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3088, col: 12, offset: 100518},
																																				run: (*parser).callonListElements351,
																																				expr: &choiceExpr{
																																					pos: position{line: 3088, col: 13, offset: 100519},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 13, offset: 100519},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 20, offset: 100526},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 29, offset: 100535},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3092, col: 8, offset: 100608},
																																				expr: &anyMatcher{
																																					line: 3092, col: 9, offset: 100609,
																																				},
																																			},
																																		},
																																	},
																																},
																																&anyMatcher{
																																	line: 1633, col: 40, offset: 53766,
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 1638, col: 5, offset: 53882},
																													run: (*parser).callonListElements359,
																													expr: &seqExpr{
																														pos: position{line: 1638, col: 5, offset: 53882},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1638, col: 5, offset: 53882},
																																label: "separator",
																																expr: &actionExpr{
																																	pos: position{line: 1638, col: 16, offset: 53893},
																																	run: (*parser).callonListElements362,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1638, col: 16, offset: 53893},
																																		expr: &litMatcher{
																																			pos:        position{line: 1638, col: 17, offset: 53894},
																																			val:        ":",
																																			ignoreCase: false,
																																			want:       "\":\"",
																																		},
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1641, col: 5, offset: 53951},
																																run: (*parser).callonListElements365,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1457, col: 9, offset: 47925},
																										expr: &actionExpr{
																											pos: position{line: 729, col: 5, offset: 23561},
																											run: (*parser).callonListElements367,
																											expr: &seqExpr{
																												pos: position{line: 729, col: 5, offset: 23561},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 729, col: 5, offset: 23561},
																														expr: &charClassMatcher{
																															pos:        position{line: 2993, col: 13, offset: 97650},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 730, col: 5, offset: 23591},
																														label: "delimiter",
																														expr: &choiceExpr{
																															pos: position{line: 731, col: 9, offset: 23611},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 744, col: 26, offset: 24098},
																																	run: (*parser).callonListElements373,
																																	expr: &seqExpr{
																																		pos: position{line: 744, col: 26, offset: 24098},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 744, col: 26, offset: 24098},
																																				val:        "////",
																																				ignoreCase: false,
																																				want:       "\"////\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 744, col: 33, offset: 24105},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements377,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements380,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 748, col: 26, offset: 24212},
																																	run: (*parser).callonListElements387,
																																	expr: &seqExpr{
																																		pos: position{line: 748, col: 26, offset: 24212},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 748, col: 26, offset: 24212},
																																				val:        "====",
																																				ignoreCase: false,
																																				want:       "\"====\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 748, col: 33, offset: 24219},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements391,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements394,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 756, col: 26, offset: 24437},
																																	run: (*parser).callonListElements401,
																																	expr: &seqExpr{
																																		pos: position{line: 756, col: 26, offset: 24437},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 756, col: 26, offset: 24437},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 756, col: 32, offset: 24443},
																																				label: "language",
																																				expr: &actionExpr{
																																					pos: position{line: 760, col: 13, offset: 24573},
																																					run: (*parser).callonListElements405,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 760, col: 14, offset: 24574},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 760, col: 14, offset: 24574},
																																							val:        "[^\\r\\n ]",
																																							chars:      []rune{'\r', '\n', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 756, col: 52, offset: 24463},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements409,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements412,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 752, col: 25, offset: 24325},
																																	run: (*parser).callonListElements419,
																																	expr: &seqExpr{
																																		pos: position{line: 752, col: 25, offset: 24325},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 752, col: 25, offset: 24325},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 752, col: 31, offset: 24331},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements423,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements426,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 764, col: 26, offset: 24646},
																																	run: (*parser).callonListElements433,
																																	expr: &seqExpr{
																																		pos: position{line: 764, col: 26, offset: 24646},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 764, col: 26, offset: 24646},
																																				val:        "----",
																																				ignoreCase: false,
																																				want:       "\"----\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 764, col: 33, offset: 24653},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements437,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements440,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 768, col: 26, offset: 24760},
																																	run: (*parser).callonListElements447,
																																	expr: &seqExpr{
																																		pos: position{line: 768, col: 26, offset: 24760},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 768, col: 26, offset: 24760},
																																				val:        "....",
																																				ignoreCase: false,
																																				want:       "\"....\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 768, col: 33, offset: 24767},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements451,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements454,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 772, col: 30, offset: 24878},
																																	run: (*parser).callonListElements461,
																																	expr: &seqExpr{
																																		pos: position{line: 772, col: 30, offset: 24878},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 772, col: 30, offset: 24878},
																																				val:        "++++",
																																				ignoreCase: false,
																																				want:       "\"++++\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 772, col: 37, offset: 24885},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements465,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements468,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 776, col: 24, offset: 24994},
																																	run: (*parser).callonListElements475,
																																	expr: &seqExpr{
																																		pos: position{line: 776, col: 24, offset: 24994},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 776, col: 24, offset: 24994},
																																				val:        "____",
																																				ignoreCase: false,
																																				want:       "\"____\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 776, col: 31, offset: 25001},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements479,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements482,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 780, col: 26, offset: 25106},
																																	run: (*parser).callonListElements489,
																																	expr: &seqExpr{
																																		pos: position{line: 780, col: 26, offset: 25106},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 780, col: 26, offset: 25106},
																																				val:        "****",
																																				ignoreCase: false,
																																				want:       "\"****\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 780, col: 33, offset: 25113},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElements493,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElements496,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1458, col: 9, offset: 47949},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 1458, col: 18, offset: 47958},
																											run: (*parser).callonListElements504,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1458, col: 18, offset: 47958},
																												expr: &charClassMatcher{
																													pos:        position{line: 1458, col: 18, offset: 47958},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3095, col: 8, offset: 100658},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3088, col: 12, offset: 100518},
																												run: (*parser).callonListElements508,
																												expr: &choiceExpr{
																													pos: position{line: 3088, col: 13, offset: 100519},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3088, col: 13, offset: 100519},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 20, offset: 100526},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 29, offset: 100535},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1661, col: 9, offset: 54549},
																run: (*parser).callonListElements515,
																expr: &seqExpr{
																	pos: position{line: 1661, col: 9, offset: 54549},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 3083, col: 11, offset: 100401},
																			run: (*parser).callonListElements517,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3083, col: 11, offset: 100401},
																				expr: &charClassMatcher{
																					pos:        position{line: 3083, col: 12, offset: 100402},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1662, col: 9, offset: 54601},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1662, col: 18, offset: 54610},
																				run: (*parser).callonListElements521,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1662, col: 18, offset: 54610},
																					expr: &charClassMatcher{
																						pos:        position{line: 1662, col: 18, offset: 54610},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElements525,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1374, col: 5, offset: 44968},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1374, col: 20, offset: 44983},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1384, col: 1, offset: 45238},
			expr: &actionExpr{
				pos: position{line: 1384, col: 22, offset: 45259},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1384, col: 22, offset: 45259},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1384, col: 31, offset: 45268},
						expr: &ruleRefExpr{
							pos:  position{line: 1384, col: 32, offset: 45269},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1388, col: 1, offset: 45349},
			expr: &actionExpr{
				pos: position{line: 1389, col: 5, offset: 45488},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1389, col: 5, offset: 45488},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1389, col: 5, offset: 45488},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 5, offset: 45498},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1391, col: 9, offset: 45516},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1391, col: 13, offset: 45520},
										run: (*parser).callonExtraListElement8,
										expr: &seqExpr{
											pos: position{line: 1391, col: 13, offset: 45520},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1391, col: 13, offset: 45520},
													expr: &actionExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														run: (*parser).callonExtraListElement11,
														expr: &seqExpr{
															pos: position{line: 683, col: 14, offset: 22026},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 683, col: 14, offset: 22026},
																	expr: &notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 683, col: 19, offset: 22031},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonExtraListElement17,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonExtraListElement20,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1392, col: 13, offset: 45544},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1526, col: 5, offset: 49946},
														run: (*parser).callonExtraListElement28,
														expr: &seqExpr{
															pos: position{line: 1526, col: 5, offset: 49946},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1526, col: 5, offset: 49946},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1533, col: 5, offset: 50154},
																		run: (*parser).callonExtraListElement31,
																		expr: &seqExpr{
																			pos: position{line: 1533, col: 5, offset: 50154},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1533, col: 5, offset: 50154},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonExtraListElement34,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1533, col: 12, offset: 50161},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1535, col: 9, offset: 50224},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1535, col: 9, offset: 50224},
																								run: (*parser).callonExtraListElement38,
																								expr: &seqExpr{
																									pos: position{line: 1535, col: 9, offset: 50224},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1535, col: 9, offset: 50224},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1535, col: 16, offset: 50231},
																												run: (*parser).callonExtraListElement41,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1535, col: 16, offset: 50231},
																													expr: &litMatcher{
																														pos:        position{line: 1535, col: 17, offset: 50232},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1539, col: 9, offset: 50332},
																											run: (*parser).callonExtraListElement44,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1558, col: 11, offset: 51049},
																								run: (*parser).callonExtraListElement45,
																								expr: &seqExpr{
																									pos: position{line: 1558, col: 11, offset: 51049},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1558, col: 11, offset: 51049},
																											expr: &charClassMatcher{
																												pos:        position{line: 1558, col: 12, offset: 51050},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1558, col: 20, offset: 51058},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1560, col: 13, offset: 51175},
																								run: (*parser).callonExtraListElement50,
																								expr: &seqExpr{
																									pos: position{line: 1560, col: 13, offset: 51175},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1560, col: 14, offset: 51176},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1560, col: 21, offset: 51183},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1562, col: 13, offset: 51303},
																								run: (*parser).callonExtraListElement54,
																								expr: &seqExpr{
																									pos: position{line: 1562, col: 13, offset: 51303},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1562, col: 14, offset: 51304},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1562, col: 21, offset: 51311},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1564, col: 13, offset: 51431},
																								run: (*parser).callonExtraListElement58,
																								expr: &seqExpr{
																									pos: position{line: 1564, col: 13, offset: 51431},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1564, col: 13, offset: 51431},
																											expr: &charClassMatcher{
																												pos:        position{line: 1564, col: 14, offset: 51432},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1564, col: 26, offset: 51444},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1566, col: 13, offset: 51564},
																								run: (*parser).callonExtraListElement63,
																								expr: &seqExpr{
																									pos: position{line: 1566, col: 13, offset: 51564},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1566, col: 13, offset: 51564},
																											expr: &charClassMatcher{
																												pos:        position{line: 1566, col: 14, offset: 51565},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1566, col: 26, offset: 51577},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement68,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49985},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 5, offset: 48181},
																		run: (*parser).callonExtraListElement72,
																		expr: &seqExpr{
																			pos: position{line: 1467, col: 5, offset: 48181},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1467, col: 5, offset: 48181},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1467, col: 14, offset: 48190},
																						run: (*parser).callonExtraListElement75,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1467, col: 14, offset: 48190},
																							expr: &charClassMatcher{
																								pos:        position{line: 1467, col: 14, offset: 48190},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement79,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1395, col: 13, offset: 45636},
										run: (*parser).callonExtraListElement86,
										expr: &seqExpr{
											pos: position{line: 1395, col: 13, offset: 45636},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1395, col: 13, offset: 45636},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1395, col: 24, offset: 45647},
														expr: &ruleRefExpr{
															pos:  position{line: 1395, col: 25, offset: 45648},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1396, col: 13, offset: 45679},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1526, col: 5, offset: 49946},
														run: (*parser).callonExtraListElement92,
														expr: &seqExpr{
															pos: position{line: 1526, col: 5, offset: 49946},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1526, col: 5, offset: 49946},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1533, col: 5, offset: 50154},
																		run: (*parser).callonExtraListElement95,
																		expr: &seqExpr{
																			pos: position{line: 1533, col: 5, offset: 50154},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1533, col: 5, offset: 50154},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonExtraListElement98,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1533, col: 12, offset: 50161},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1535, col: 9, offset: 50224},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1535, col: 9, offset: 50224},
																								run: (*parser).callonExtraListElement102,
																								expr: &seqExpr{
																									pos: position{line: 1535, col: 9, offset: 50224},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1535, col: 9, offset: 50224},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1535, col: 16, offset: 50231},
																												run: (*parser).callonExtraListElement105,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1535, col: 16, offset: 50231},
																													expr: &litMatcher{
																														pos:        position{line: 1535, col: 17, offset: 50232},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1539, col: 9, offset: 50332},
																											run: (*parser).callonExtraListElement108,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1558, col: 11, offset: 51049},
																								run: (*parser).callonExtraListElement109,
																								expr: &seqExpr{
																									pos: position{line: 1558, col: 11, offset: 51049},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1558, col: 11, offset: 51049},
																											expr: &charClassMatcher{
																												pos:        position{line: 1558, col: 12, offset: 51050},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1558, col: 20, offset: 51058},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1560, col: 13, offset: 51175},
																								run: (*parser).callonExtraListElement114,
																								expr: &seqExpr{
																									pos: position{line: 1560, col: 13, offset: 51175},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1560, col: 14, offset: 51176},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1560, col: 21, offset: 51183},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1562, col: 13, offset: 51303},
																								run: (*parser).callonExtraListElement118,
																								expr: &seqExpr{
																									pos: position{line: 1562, col: 13, offset: 51303},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1562, col: 14, offset: 51304},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1562, col: 21, offset: 51311},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1564, col: 13, offset: 51431},
																								run: (*parser).callonExtraListElement122,
																								expr: &seqExpr{
																									pos: position{line: 1564, col: 13, offset: 51431},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1564, col: 13, offset: 51431},
																											expr: &charClassMatcher{
																												pos:        position{line: 1564, col: 14, offset: 51432},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1564, col: 26, offset: 51444},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1566, col: 13, offset: 51564},
																								run: (*parser).callonExtraListElement127,
																								expr: &seqExpr{
																									pos: position{line: 1566, col: 13, offset: 51564},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1566, col: 13, offset: 51564},
																											expr: &charClassMatcher{
																												pos:        position{line: 1566, col: 14, offset: 51565},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1566, col: 26, offset: 51577},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement132,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1527, col: 5, offset: 49985},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 5, offset: 48181},
																		run: (*parser).callonExtraListElement136,
																		expr: &seqExpr{
																			pos: position{line: 1467, col: 5, offset: 48181},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1467, col: 5, offset: 48181},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1467, col: 14, offset: 48190},
																						run: (*parser).callonExtraListElement139,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1467, col: 14, offset: 48190},
																							expr: &charClassMatcher{
																								pos:        position{line: 1467, col: 14, offset: 48190},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement143,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1399, col: 13, offset: 45807},
										run: (*parser).callonExtraListElement150,
										expr: &seqExpr{
											pos: position{line: 1399, col: 13, offset: 45807},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1399, col: 13, offset: 45807},
													expr: &actionExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														run: (*parser).callonExtraListElement153,
														expr: &seqExpr{
															pos: position{line: 683, col: 14, offset: 22026},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 683, col: 14, offset: 22026},
																	expr: &notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 683, col: 19, offset: 22031},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonExtraListElement159,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonExtraListElement162,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1400, col: 13, offset: 45831},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1576, col: 5, offset: 51843},
														run: (*parser).callonExtraListElement170,
														expr: &seqExpr{
															pos: position{line: 1576, col: 5, offset: 51843},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1576, col: 5, offset: 51843},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1583, col: 5, offset: 52116},
																		run: (*parser).callonExtraListElement173,
																		expr: &seqExpr{
																			pos: position{line: 1583, col: 5, offset: 52116},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1583, col: 5, offset: 52116},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonExtraListElement176,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1583, col: 12, offset: 52123},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1583, col: 20, offset: 52131},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1585, col: 9, offset: 52188},
																								run: (*parser).callonExtraListElement180,
																								expr: &seqExpr{
																									pos: position{line: 1585, col: 9, offset: 52188},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1585, col: 9, offset: 52188},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1585, col: 16, offset: 52195},
																												run: (*parser).callonExtraListElement183,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1585, col: 16, offset: 52195},
																													expr: &litMatcher{
																														pos:        position{line: 1585, col: 17, offset: 52196},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1589, col: 9, offset: 52296},
																											run: (*parser).callonExtraListElement186,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1606, col: 14, offset: 53003},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1606, col: 21, offset: 53010},
																									run: (*parser).callonExtraListElement188,
																									expr: &litMatcher{
																										pos:        position{line: 1606, col: 22, offset: 53011},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement190,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1577, col: 5, offset: 51884},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1577, col: 16, offset: 51895},
																		expr: &actionExpr{
																			pos: position{line: 1613, col: 5, offset: 53172},
																			run: (*parser).callonExtraListElement195,
																			expr: &seqExpr{
																				pos: position{line: 1613, col: 5, offset: 53172},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1613, col: 5, offset: 53172},
																						expr: &litMatcher{
																							pos:        position{line: 1613, col: 6, offset: 53173},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1613, col: 10, offset: 53177},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1614, col: 7, offset: 53191},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1614, col: 7, offset: 53191},
																									run: (*parser).callonExtraListElement201,
																									expr: &litMatcher{
																										pos:        position{line: 1614, col: 7, offset: 53191},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1615, col: 7, offset: 53236},
																									run: (*parser).callonExtraListElement203,
																									expr: &litMatcher{
																										pos:        position{line: 1615, col: 7, offset: 53236},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1616, col: 7, offset: 53279},
																									run: (*parser).callonExtraListElement205,
																									expr: &litMatcher{
																										pos:        position{line: 1616, col: 7, offset: 53279},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						run: (*parser).callonExtraListElement207,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3083, col: 11, offset: 100401},
																							expr: &charClassMatcher{
																								pos:        position{line: 3083, col: 12, offset: 100402},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1578, col: 5, offset: 51934},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 5, offset: 48181},
																		run: (*parser).callonExtraListElement211,
																		expr: &seqExpr{
																			pos: position{line: 1467, col: 5, offset: 48181},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1467, col: 5, offset: 48181},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1467, col: 14, offset: 48190},
																						run: (*parser).callonExtraListElement214,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1467, col: 14, offset: 48190},
																							expr: &charClassMatcher{
																								pos:        position{line: 1467, col: 14, offset: 48190},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement218,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1403, col: 13, offset: 45925},
										run: (*parser).callonExtraListElement225,
										expr: &seqExpr{
											pos: position{line: 1403, col: 13, offset: 45925},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1403, col: 13, offset: 45925},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1403, col: 24, offset: 45936},
														expr: &ruleRefExpr{
															pos:  position{line: 1403, col: 25, offset: 45937},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1404, col: 13, offset: 45968},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1576, col: 5, offset: 51843},
														run: (*parser).callonExtraListElement231,
														expr: &seqExpr{
															pos: position{line: 1576, col: 5, offset: 51843},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1576, col: 5, offset: 51843},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1583, col: 5, offset: 52116},
																		run: (*parser).callonExtraListElement234,
																		expr: &seqExpr{
																			pos: position{line: 1583, col: 5, offset: 52116},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1583, col: 5, offset: 52116},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonExtraListElement237,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1583, col: 12, offset: 52123},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1583, col: 20, offset: 52131},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1585, col: 9, offset: 52188},
																								run: (*parser).callonExtraListElement241,
																								expr: &seqExpr{
																									pos: position{line: 1585, col: 9, offset: 52188},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1585, col: 9, offset: 52188},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1585, col: 16, offset: 52195},
																												run: (*parser).callonExtraListElement244,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1585, col: 16, offset: 52195},
																													expr: &litMatcher{
																														pos:        position{line: 1585, col: 17, offset: 52196},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1589, col: 9, offset: 52296},
																											run: (*parser).callonExtraListElement247,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1606, col: 14, offset: 53003},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1606, col: 21, offset: 53010},
																									run: (*parser).callonExtraListElement249,
																									expr: &litMatcher{
																										pos:        position{line: 1606, col: 22, offset: 53011},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement251,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1577, col: 5, offset: 51884},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1577, col: 16, offset: 51895},
																		expr: &actionExpr{
																			pos: position{line: 1613, col: 5, offset: 53172},
																			run: (*parser).callonExtraListElement256,
																			expr: &seqExpr{
																				pos: position{line: 1613, col: 5, offset: 53172},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1613, col: 5, offset: 53172},
																						expr: &litMatcher{
																							pos:        position{line: 1613, col: 6, offset: 53173},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1613, col: 10, offset: 53177},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1614, col: 7, offset: 53191},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1614, col: 7, offset: 53191},
																									run: (*parser).callonExtraListElement262,
																									expr: &litMatcher{
																										pos:        position{line: 1614, col: 7, offset: 53191},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1615, col: 7, offset: 53236},
																									run: (*parser).callonExtraListElement264,
																									expr: &litMatcher{
																										pos:        position{line: 1615, col: 7, offset: 53236},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1616, col: 7, offset: 53279},
																									run: (*parser).callonExtraListElement266,
																									expr: &litMatcher{
																										pos:        position{line: 1616, col: 7, offset: 53279},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						run: (*parser).callonExtraListElement268,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3083, col: 11, offset: 100401},
																							expr: &charClassMatcher{
																								pos:        position{line: 3083, col: 12, offset: 100402},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1578, col: 5, offset: 51934},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 5, offset: 48181},
																		run: (*parser).callonExtraListElement272,
																		expr: &seqExpr{
																			pos: position{line: 1467, col: 5, offset: 48181},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1467, col: 5, offset: 48181},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1467, col: 14, offset: 48190},
																						run: (*parser).callonExtraListElement275,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1467, col: 14, offset: 48190},
																							expr: &charClassMatcher{
																								pos:        position{line: 1467, col: 14, offset: 48190},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement279,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1407, col: 13, offset: 46098},
										run: (*parser).callonExtraListElement286,
										expr: &seqExpr{
											pos: position{line: 1407, col: 13, offset: 46098},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1407, col: 13, offset: 46098},
													expr: &actionExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														run: (*parser).callonExtraListElement289,
														expr: &seqExpr{
															pos: position{line: 683, col: 14, offset: 22026},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 683, col: 14, offset: 22026},
																	expr: &notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 683, col: 19, offset: 22031},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonExtraListElement295,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonExtraListElement298,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1408, col: 13, offset: 46122},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1683, col: 5, offset: 55152},
														run: (*parser).callonExtraListElement306,
														expr: &seqExpr{
															pos: position{line: 1683, col: 5, offset: 55152},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1683, col: 5, offset: 55152},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1689, col: 5, offset: 55353},
																		run: (*parser).callonExtraListElement309,
																		expr: &seqExpr{
																			pos: position{line: 1689, col: 5, offset: 55353},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1689, col: 5, offset: 55353},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1689, col: 9, offset: 55357},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1689, col: 14, offset: 55362},
																						run: (*parser).callonExtraListElement313,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1689, col: 14, offset: 55362},
																							expr: &charClassMatcher{
																								pos:        position{line: 1689, col: 14, offset: 55362},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1689, col: 62, offset: 55410},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement317,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1684, col: 5, offset: 55188},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1694, col: 5, offset: 55536},
																		run: (*parser).callonExtraListElement321,
																		expr: &seqExpr{
																			pos: position{line: 1694, col: 5, offset: 55536},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1694, col: 5, offset: 55536},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1694, col: 14, offset: 55545},
																						run: (*parser).callonExtraListElement324,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1694, col: 14, offset: 55545},
																							expr: &charClassMatcher{
																								pos:        position{line: 1694, col: 14, offset: 55545},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement328,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1411, col: 13, offset: 46214},
										run: (*parser).callonExtraListElement335,
										expr: &seqExpr{
											pos: position{line: 1411, col: 13, offset: 46214},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1411, col: 13, offset: 46214},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1411, col: 24, offset: 46225},
														expr: &ruleRefExpr{
															pos:  position{line: 1411, col: 25, offset: 46226},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1412, col: 13, offset: 46257},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1683, col: 5, offset: 55152},
														run: (*parser).callonExtraListElement341,
														expr: &seqExpr{
															pos: position{line: 1683, col: 5, offset: 55152},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1683, col: 5, offset: 55152},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1689, col: 5, offset: 55353},
																		run: (*parser).callonExtraListElement344,
																		expr: &seqExpr{
																			pos: position{line: 1689, col: 5, offset: 55353},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1689, col: 5, offset: 55353},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1689, col: 9, offset: 55357},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1689, col: 14, offset: 55362},
																						run: (*parser).callonExtraListElement348,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1689, col: 14, offset: 55362},
																							expr: &charClassMatcher{
																								pos:        position{line: 1689, col: 14, offset: 55362},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1689, col: 62, offset: 55410},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement352,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1684, col: 5, offset: 55188},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1694, col: 5, offset: 55536},
																		run: (*parser).callonExtraListElement356,
																		expr: &seqExpr{
																			pos: position{line: 1694, col: 5, offset: 55536},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1694, col: 5, offset: 55536},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1694, col: 14, offset: 55545},
																						run: (*parser).callonExtraListElement359,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1694, col: 14, offset: 55545},
																							expr: &charClassMatcher{
																								pos:        position{line: 1694, col: 14, offset: 55545},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement363,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1415, col: 11, offset: 46383},
										name: "ListElementContinuation",
									},
									&actionExpr{
										pos: position{line: 1416, col: 13, offset: 46419},
										run: (*parser).callonExtraListElement371,
										expr: &seqExpr{
											pos: position{line: 1416, col: 13, offset: 46419},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1416, col: 13, offset: 46419},
													expr: &actionExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														run: (*parser).callonExtraListElement374,
														expr: &seqExpr{
															pos: position{line: 683, col: 14, offset: 22026},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 683, col: 14, offset: 22026},
																	expr: &notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 683, col: 19, offset: 22031},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonExtraListElement380,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonExtraListElement383,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1417, col: 13, offset: 46443},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1625, col: 5, offset: 53472},
														run: (*parser).callonExtraListElement391,
														expr: &seqExpr{
															pos: position{line: 1625, col: 5, offset: 53472},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1625, col: 5, offset: 53472},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1633, col: 5, offset: 53731},
																		run: (*parser).callonExtraListElement394,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1633, col: 5, offset: 53731},
																			expr: &seqExpr{
																				pos: position{line: 1633, col: 6, offset: 53732},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1633, col: 6, offset: 53732},
																						expr: &actionExpr{
																							pos: position{line: 1638, col: 5, offset: 53882},
																							run: (*parser).callonExtraListElement398,
																							expr: &seqExpr{
																								pos: position{line: 1638, col: 5, offset: 53882},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1638, col: 5, offset: 53882},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1638, col: 16, offset: 53893},
																											run: (*parser).callonExtraListElement401,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1638, col: 16, offset: 53893},
																												expr: &litMatcher{
																													pos:        position{line: 1638, col: 17, offset: 53894},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1641, col: 5, offset: 53951},
																										run: (*parser).callonExtraListElement404,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1633, col: 35, offset: 53761},
																						expr: &choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonExtraListElement407,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1633, col: 40, offset: 53766,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1626, col: 5, offset: 53507},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1638, col: 5, offset: 53882},
																		run: (*parser).callonExtraListElement416,
																		expr: &seqExpr{
																			pos: position{line: 1638, col: 5, offset: 53882},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1638, col: 5, offset: 53882},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1638, col: 16, offset: 53893},
																						run: (*parser).callonExtraListElement419,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1638, col: 16, offset: 53893},
																							expr: &litMatcher{
																								pos:        position{line: 1638, col: 17, offset: 53894},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1641, col: 5, offset: 53951},
																					run: (*parser).callonExtraListElement422,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1627, col: 5, offset: 53552},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1649, col: 5, offset: 54201},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1651, col: 9, offset: 54266},
																				run: (*parser).callonExtraListElement425,
																				expr: &seqExpr{
																					pos: position{line: 1651, col: 9, offset: 54266},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1651, col: 9, offset: 54266},
																							expr: &actionExpr{
																								pos: position{line: 3079, col: 10, offset: 100334},
																								run: (*parser).callonExtraListElement428,
																								expr: &charClassMatcher{
																									pos:        position{line: 3079, col: 11, offset: 100335},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonExtraListElement431,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1652, col: 9, offset: 54286},
																							expr: &actionExpr{
																								pos: position{line: 683, col: 14, offset: 22026},
																								run: (*parser).callonExtraListElement439,
																								expr: &seqExpr{
																									pos: position{line: 683, col: 14, offset: 22026},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 683, col: 14, offset: 22026},
																											expr: &notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 683, col: 19, offset: 22031},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement445,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement448,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1653, col: 9, offset: 54306},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1653, col: 17, offset: 54314},
																								expr: &choiceExpr{
																									pos: position{line: 1447, col: 5, offset: 47548},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1447, col: 5, offset: 47548},
																											run: (*parser).callonExtraListElement458,
																											expr: &actionExpr{
																												pos: position{line: 2781, col: 22, offset: 91184},
																												run: (*parser).callonExtraListElement459,
																												expr: &seqExpr{
																													pos: position{line: 2781, col: 22, offset: 91184},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2786, col: 31, offset: 91405},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																														&notExpr{
																															pos: position{line: 2786, col: 36, offset: 91410},
																															expr: &litMatcher{
																																pos:        position{line: 2786, col: 37, offset: 91411},
																																val:        "//",
																																ignoreCase: false,
																																want:       "\"//\"",
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2781, col: 49, offset: 91211},
																															label: "content",
																															expr: &actionExpr{
																																pos: position{line: 2788, col: 29, offset: 91446},
																																run: (*parser).callonExtraListElement465,
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 2788, col: 29, offset: 91446},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2788, col: 29, offset: 91446},
																																		val:        "[^\\r\\n]",
																																		chars:      []rune{'\r', '\n'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 3095, col: 8, offset: 100658},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 3088, col: 12, offset: 100518},
																																	run: (*parser).callonExtraListElement469,
																																	expr: &choiceExpr{
																																		pos: position{line: 3088, col: 13, offset: 100519},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 13, offset: 100519},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 20, offset: 100526},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 29, offset: 100535},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3092, col: 8, offset: 100608},
																																	expr: &anyMatcher{
																																		line: 3092, col: 9, offset: 100609,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1451, col: 9, offset: 47701},
																											run: (*parser).callonExtraListElement476,
																											expr: &seqExpr{
																												pos: position{line: 1451, col: 9, offset: 47701},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 1451, col: 9, offset: 47701},
																														expr: &actionExpr{
																															pos: position{line: 683, col: 14, offset: 22026},
																															run: (*parser).callonExtraListElement479,
																															expr: &seqExpr{
																																pos: position{line: 683, col: 14, offset: 22026},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 683, col: 14, offset: 22026},
																																		expr: &notExpr{
																																			pos: position{line: 3092, col: 8, offset: 100608},
																																			expr: &anyMatcher{
																																				line: 3092, col: 9, offset: 100609,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 683, col: 19, offset: 22031},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExtraListElement485,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3095, col: 8, offset: 100658},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3088, col: 12, offset: 100518},
																																				run: (*parser).callonExtraListElement488,
																																				expr: &choiceExpr{
																																					pos: position{line: 3088, col: 13, offset: 100519},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 13, offset: 100519},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 20, offset: 100526},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 29, offset: 100535},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3092, col: 8, offset: 100608},
																																				expr: &anyMatcher{
																																					line: 3092, col: 9, offset: 100609,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1452, col: 9, offset: 47720},
																														expr: &seqExpr{
																															pos: position{line: 1485, col: 34, offset: 48680},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1485, col: 34, offset: 48680},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1485, col: 38, offset: 48684},
																																	expr: &actionExpr{
																																		pos: position{line: 3079, col: 10, offset: 100334},
																																		run: (*parser).callonExtraListElement499,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3079, col: 11, offset: 100335},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3088, col: 12, offset: 100518},
																																	run: (*parser).callonExtraListElement501,
																																	expr: &choiceExpr{
																																		pos: position{line: 3088, col: 13, offset: 100519},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 13, offset: 100519},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 20, offset: 100526},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 29, offset: 100535},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1453, col: 9, offset: 47759},
																														expr: &actionExpr{
																															pos: position{line: 1533, col: 5, offset: 50154},
																															run: (*parser).callonExtraListElement507,
																															expr: &seqExpr{
																																pos: position{line: 1533, col: 5, offset: 50154},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1533, col: 5, offset: 50154},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExtraListElement510,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1533, col: 12, offset: 50161},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1535, col: 9, offset: 50224},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1535, col: 9, offset: 50224},
																																					run: (*parser).callonExtraListElement514,
																																					expr: &seqExpr{
																																						pos: position{line: 1535, col: 9, offset: 50224},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1535, col: 9, offset: 50224},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1535, col: 16, offset: 50231},
																																									run: (*parser).callonExtraListElement517,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1535, col: 16, offset: 50231},
																																										expr: &litMatcher{
																																											pos:        position{line: 1535, col: 17, offset: 50232},
																																											val:        ".",
																																											ignoreCase: false,
																																											want:       "\".\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1539, col: 9, offset: 50332},
																																								run: (*parser).callonExtraListElement520,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1558, col: 11, offset: 51049},
																																					run: (*parser).callonExtraListElement521,
																																					expr: &seqExpr{
																																						pos: position{line: 1558, col: 11, offset: 51049},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1558, col: 11, offset: 51049},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1558, col: 12, offset: 51050},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1558, col: 20, offset: 51058},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1560, col: 13, offset: 51175},
																																					run: (*parser).callonExtraListElement526,
																																					expr: &seqExpr{
																																						pos: position{line: 1560, col: 13, offset: 51175},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1560, col: 14, offset: 51176},
																																								val:        "[a-z]",
																																								ranges:     []rune{'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1560, col: 21, offset: 51183},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1562, col: 13, offset: 51303},
																																					run: (*parser).callonExtraListElement530,
																																					expr: &seqExpr{
																																						pos: position{line: 1562, col: 13, offset: 51303},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1562, col: 14, offset: 51304},
																																								val:        "[A-Z]",
																																								ranges:     []rune{'A', 'Z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1562, col: 21, offset: 51311},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1564, col: 13, offset: 51431},
																																					run: (*parser).callonExtraListElement534,
																																					expr: &seqExpr{
																																						pos: position{line: 1564, col: 13, offset: 51431},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1564, col: 13, offset: 51431},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1564, col: 14, offset: 51432},
																																									val:        "[ivxdlcm]",
																																									chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1564, col: 26, offset: 51444},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1566, col: 13, offset: 51564},
																																					run: (*parser).callonExtraListElement539,
																																					expr: &seqExpr{
																																						pos: position{line: 1566, col: 13, offset: 51564},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1566, col: 13, offset: 51564},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1566, col: 14, offset: 51565},
																																									val:        "[IVXDLCM]",
																																									chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1566, col: 26, offset: 51577},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3083, col: 11, offset: 100401},
																																		run: (*parser).callonExtraListElement544,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3083, col: 11, offset: 100401},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3083, col: 12, offset: 100402},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1454, col: 9, offset: 47793},
																														expr: &actionExpr{
																															pos: position{line: 1583, col: 5, offset: 52116},
																															run: (*parser).callonExtraListElement548,
																															expr: &seqExpr{
																																pos: position{line: 1583, col: 5, offset: 52116},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1583, col: 5, offset: 52116},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExtraListElement551,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1583, col: 12, offset: 52123},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1583, col: 20, offset: 52131},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1585, col: 9, offset: 52188},
																																					run: (*parser).callonExtraListElement555,
																																					expr: &seqExpr{
																																						pos: position{line: 1585, col: 9, offset: 52188},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1585, col: 9, offset: 52188},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1585, col: 16, offset: 52195},
																																									run: (*parser).callonExtraListElement558,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1585, col: 16, offset: 52195},
																																										expr: &litMatcher{
																																											pos:        position{line: 1585, col: 17, offset: 52196},
																																											val:        "*",
																																											ignoreCase: false,
																																											want:       "\"*\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1589, col: 9, offset: 52296},
																																								run: (*parser).callonExtraListElement561,
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1606, col: 14, offset: 53003},
																																					label: "depth",
																																					expr: &actionExpr{
																																						pos: position{line: 1606, col: 21, offset: 53010},
																																						run: (*parser).callonExtraListElement563,
																																						expr: &litMatcher{
																																							pos:        position{line: 1606, col: 22, offset: 53011},
																																							val:        "-",
																																							ignoreCase: false,
																																							want:       "\"-\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3083, col: 11, offset: 100401},
																																		run: (*parser).callonExtraListElement565,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3083, col: 11, offset: 100401},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3083, col: 12, offset: 100402},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1455, col: 9, offset: 47829},
																														expr: &actionExpr{
																															pos: position{line: 1689, col: 5, offset: 55353},
																															run: (*parser).callonExtraListElement569,
																															expr: &seqExpr{
																																pos: position{line: 1689, col: 5, offset: 55353},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1689, col: 5, offset: 55353},
																																		val:        "<",
																																		ignoreCase: false,
																																		want:       "\"<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1689, col: 9, offset: 55357},
																																		label: "ref",
																																		expr: &actionExpr{
																																			pos: position{line: 1689, col: 14, offset: 55362},
																																			run: (*parser).callonExtraListElement573,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1689, col: 14, offset: 55362},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1689, col: 14, offset: 55362},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1689, col: 62, offset: 55410},
																																		val:        ">",
																																		ignoreCase: false,
																																		want:       "\">\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 3083, col: 11, offset: 100401},
																																		run: (*parser).callonExtraListElement577,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3083, col: 11, offset: 100401},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3083, col: 12, offset: 100402},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1456, col: 9, offset: 47863},
																														expr: &seqExpr{
																															pos: position{line: 1456, col: 11, offset: 47865},
																															exprs: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1633, col: 5, offset: 53731},
																																	run: (*parser).callonExtraListElement582,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1633, col: 5, offset: 53731},
																																		expr: &seqExpr{
																																			pos: position{line: 1633, col: 6, offset: 53732},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1633, col: 6, offset: 53732},
																																					expr: &actionExpr{
																																						pos: position{line: 1638, col: 5, offset: 53882},
																																						run: (*parser).callonExtraListElement586,
																																						expr: &seqExpr{
																																							pos: position{line: 1638, col: 5, offset: 53882},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 1638, col: 5, offset: 53882},
																																									label: "separator",
																																									expr: &actionExpr{
																																										pos: position{line: 1638, col: 16, offset: 53893},
																																										run: (*parser).callonExtraListElement589,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 1638, col: 16, offset: 53893},
																																											expr: &litMatcher{
																																												pos:        position{line: 1638, col: 17, offset: 53894},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																										},
																																									},
																																								},
																																								&andCodeExpr{
																																									pos: position{line: 1641, col: 5, offset: 53951},
																																									run: (*parser).callonExtraListElement592,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 1633, col: 35, offset: 53761},
																																					expr: &choiceExpr{
																																						pos: position{line: 3095, col: 8, offset: 100658},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 3088, col: 12, offset: 100518},
																																								run: (*parser).callonExtraListElement595,
																																								expr: &choiceExpr{
																																									pos: position{line: 3088, col: 13, offset: 100519},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 3088, col: 13, offset: 100519},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3088, col: 20, offset: 100526},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3088, col: 29, offset: 100535},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3092, col: 8, offset: 100608},
																																								expr: &anyMatcher{
																																									line: 3092, col: 9, offset: 100609,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&anyMatcher{
																																					line: 1633, col: 40, offset: 53766,
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1638, col: 5, offset: 53882},
																																	run: (*parser).callonExtraListElement603,
																																	expr: &seqExpr{
																																		pos: position{line: 1638, col: 5, offset: 53882},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1638, col: 5, offset: 53882},
																																				label: "separator",
																																				expr: &actionExpr{
																																					pos: position{line: 1638, col: 16, offset: 53893},
																																					run: (*parser).callonExtraListElement606,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1638, col: 16, offset: 53893},
																																						expr: &litMatcher{
																																							pos:        position{line: 1638, col: 17, offset: 53894},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1641, col: 5, offset: 53951},
																																				run: (*parser).callonExtraListElement609,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1457, col: 9, offset: 47925},
																														expr: &actionExpr{
																															pos: position{line: 729, col: 5, offset: 23561},
																															run: (*parser).callonExtraListElement611,
																															expr: &seqExpr{
																																pos: position{line: 729, col: 5, offset: 23561},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 729, col: 5, offset: 23561},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2993, col: 13, offset: 97650},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 730, col: 5, offset: 23591},
																																		label: "delimiter",
																																		expr: &choiceExpr{
																																			pos: position{line: 731, col: 9, offset: 23611},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 744, col: 26, offset: 24098},
																																					run: (*parser).callonExtraListElement617,
																																					expr: &seqExpr{
																																						pos: position{line: 744, col: 26, offset: 24098},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 744, col: 26, offset: 24098},
																																								val:        "////",
																																								ignoreCase: false,
																																								want:       "\"////\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 744, col: 33, offset: 24105},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement621,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement624,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 748, col: 26, offset: 24212},
																																					run: (*parser).callonExtraListElement631,
																																					expr: &seqExpr{
																																						pos: position{line: 748, col: 26, offset: 24212},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 748, col: 26, offset: 24212},
																																								val:        "====",
																																								ignoreCase: false,
																																								want:       "\"====\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 748, col: 33, offset: 24219},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement635,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement638,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 756, col: 26, offset: 24437},
																																					run: (*parser).callonExtraListElement645,
																																					expr: &seqExpr{
																																						pos: position{line: 756, col: 26, offset: 24437},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 756, col: 26, offset: 24437},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 756, col: 32, offset: 24443},
																																								label: "language",
																																								expr: &actionExpr{
																																									pos: position{line: 760, col: 13, offset: 24573},
																																									run: (*parser).callonExtraListElement649,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 760, col: 14, offset: 24574},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 760, col: 14, offset: 24574},
																																											val:        "[^\\r\\n ]",
																																											chars:      []rune{'\r', '\n', ' '},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 756, col: 52, offset: 24463},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement653,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement656,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 752, col: 25, offset: 24325},
																																					run: (*parser).callonExtraListElement663,
																																					expr: &seqExpr{
																																						pos: position{line: 752, col: 25, offset: 24325},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 752, col: 25, offset: 24325},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 752, col: 31, offset: 24331},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement667,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement670,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 764, col: 26, offset: 24646},
																																					run: (*parser).callonExtraListElement677,
																																					expr: &seqExpr{
																																						pos: position{line: 764, col: 26, offset: 24646},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 764, col: 26, offset: 24646},
																																								val:        "----",
																																								ignoreCase: false,
																																								want:       "\"----\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 764, col: 33, offset: 24653},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement681,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement684,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 768, col: 26, offset: 24760},
																																					run: (*parser).callonExtraListElement691,
																																					expr: &seqExpr{
																																						pos: position{line: 768, col: 26, offset: 24760},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 768, col: 26, offset: 24760},
																																								val:        "....",
																																								ignoreCase: false,
																																								want:       "\"....\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 768, col: 33, offset: 24767},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement695,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement698,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 772, col: 30, offset: 24878},
																																					run: (*parser).callonExtraListElement705,
																																					expr: &seqExpr{
																																						pos: position{line: 772, col: 30, offset: 24878},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 772, col: 30, offset: 24878},
																																								val:        "++++",
																																								ignoreCase: false,
																																								want:       "\"++++\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 772, col: 37, offset: 24885},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement709,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement712,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 776, col: 24, offset: 24994},
																																					run: (*parser).callonExtraListElement719,
																																					expr: &seqExpr{
																																						pos: position{line: 776, col: 24, offset: 24994},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 776, col: 24, offset: 24994},
																																								val:        "____",
																																								ignoreCase: false,
																																								want:       "\"____\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 776, col: 31, offset: 25001},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement723,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement726,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 780, col: 26, offset: 25106},
																																					run: (*parser).callonExtraListElement733,
																																					expr: &seqExpr{
																																						pos: position{line: 780, col: 26, offset: 25106},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 780, col: 26, offset: 25106},
																																								val:        "****",
																																								ignoreCase: false,
																																								want:       "\"****\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 780, col: 33, offset: 25113},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement737,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement740,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1458, col: 9, offset: 47949},
																														label: "content",
																														expr: &actionExpr{
																															pos: position{line: 1458, col: 18, offset: 47958},
																															run: (*parser).callonExtraListElement748,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1458, col: 18, offset: 47958},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1458, col: 18, offset: 47958},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3095, col: 8, offset: 100658},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3088, col: 12, offset: 100518},
																																run: (*parser).callonExtraListElement752,
																																expr: &choiceExpr{
																																	pos: position{line: 3088, col: 13, offset: 100519},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 13, offset: 100519},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 20, offset: 100526},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 29, offset: 100535},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3092, col: 8, offset: 100608},
																																expr: &anyMatcher{
																																	line: 3092, col: 9, offset: 100609,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1661, col: 9, offset: 54549},
																				run: (*parser).callonExtraListElement759,
																				expr: &seqExpr{
																					pos: position{line: 1661, col: 9, offset: 54549},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 3083, col: 11, offset: 100401},
																							run: (*parser).callonExtraListElement761,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3083, col: 11, offset: 100401},
																								expr: &charClassMatcher{
																									pos:        position{line: 3083, col: 12, offset: 100402},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1662, col: 9, offset: 54601},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1662, col: 18, offset: 54610},
																								run: (*parser).callonExtraListElement765,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1662, col: 18, offset: 54610},
																									expr: &charClassMatcher{
																										pos:        position{line: 1662, col: 18, offset: 54610},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonExtraListElement769,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1420, col: 13, offset: 46535},
										run: (*parser).callonExtraListElement776,
										expr: &seqExpr{
											pos: position{line: 1420, col: 13, offset: 46535},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1420, col: 13, offset: 46535},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1420, col: 24, offset: 46546},
														expr: &ruleRefExpr{
															pos:  position{line: 1420, col: 25, offset: 46547},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1421, col: 13, offset: 46578},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1625, col: 5, offset: 53472},
														run: (*parser).callonExtraListElement782,
														expr: &seqExpr{
															pos: position{line: 1625, col: 5, offset: 53472},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1625, col: 5, offset: 53472},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1633, col: 5, offset: 53731},
																		run: (*parser).callonExtraListElement785,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1633, col: 5, offset: 53731},
																			expr: &seqExpr{
																				pos: position{line: 1633, col: 6, offset: 53732},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1633, col: 6, offset: 53732},
																						expr: &actionExpr{
																							pos: position{line: 1638, col: 5, offset: 53882},
																							run: (*parser).callonExtraListElement789,
																							expr: &seqExpr{
																								pos: position{line: 1638, col: 5, offset: 53882},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1638, col: 5, offset: 53882},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1638, col: 16, offset: 53893},
																											run: (*parser).callonExtraListElement792,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1638, col: 16, offset: 53893},
																												expr: &litMatcher{
																													pos:        position{line: 1638, col: 17, offset: 53894},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1641, col: 5, offset: 53951},
																										run: (*parser).callonExtraListElement795,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1633, col: 35, offset: 53761},
																						expr: &choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonExtraListElement798,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1633, col: 40, offset: 53766,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1626, col: 5, offset: 53507},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1638, col: 5, offset: 53882},
																		run: (*parser).callonExtraListElement807,
																		expr: &seqExpr{
																			pos: position{line: 1638, col: 5, offset: 53882},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1638, col: 5, offset: 53882},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1638, col: 16, offset: 53893},
																						run: (*parser).callonExtraListElement810,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1638, col: 16, offset: 53893},
																							expr: &litMatcher{
																								pos:        position{line: 1638, col: 17, offset: 53894},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1641, col: 5, offset: 53951},
																					run: (*parser).callonExtraListElement813,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1627, col: 5, offset: 53552},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1649, col: 5, offset: 54201},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1651, col: 9, offset: 54266},
																				run: (*parser).callonExtraListElement816,
																				expr: &seqExpr{
																					pos: position{line: 1651, col: 9, offset: 54266},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1651, col: 9, offset: 54266},
																							expr: &actionExpr{
																								pos: position{line: 3079, col: 10, offset: 100334},
																								run: (*parser).callonExtraListElement819,
																								expr: &charClassMatcher{
																									pos:        position{line: 3079, col: 11, offset: 100335},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonExtraListElement822,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1652, col: 9, offset: 54286},
																							expr: &actionExpr{
																								pos: position{line: 683, col: 14, offset: 22026},
																								run: (*parser).callonExtraListElement830,
																								expr: &seqExpr{
																									pos: position{line: 683, col: 14, offset: 22026},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 683, col: 14, offset: 22026},
																											expr: &notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 683, col: 19, offset: 22031},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement836,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement839,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1653, col: 9, offset: 54306},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1653, col: 17, offset: 54314},
																								expr: &choiceExpr{
																									pos: position{line: 1447, col: 5, offset: 47548},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1447, col: 5, offset: 47548},
																											run: (*parser).callonExtraListElement849,
																											expr: &actionExpr{
																												pos: position{line: 2781, col: 22, offset: 91184},
																												run: (*parser).callonExtraListElement850,
																												expr: &seqExpr{
																													pos: position{line: 2781, col: 22, offset: 91184},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2786, col: 31, offset: 91405},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																														&notExpr{
																															pos: position{line: 2786, col: 36, offset: 91410},
																															expr: &litMatcher{
																																pos:        position{line: 2786, col: 37, offset: 91411},
																																val:        "//",
																																ignoreCase: false,
																																want:       "\"//\"",
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2781, col: 49, offset: 91211},
																															label: "content",
																															expr: &actionExpr{
																																pos: position{line: 2788, col: 29, offset: 91446},
																																run: (*parser).callonExtraListElement856,
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 2788, col: 29, offset: 91446},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2788, col: 29, offset: 91446},
																																		val:        "[^\\r\\n]",
																																		chars:      []rune{'\r', '\n'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 3095, col: 8, offset: 100658},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 3088, col: 12, offset: 100518},
																																	run: (*parser).callonExtraListElement860,
																																	expr: &choiceExpr{
																																		pos: position{line: 3088, col: 13, offset: 100519},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 13, offset: 100519},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 20, offset: 100526},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 29, offset: 100535},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3092, col: 8, offset: 100608},
																																	expr: &anyMatcher{
																																		line: 3092, col: 9, offset: 100609,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1451, col: 9, offset: 47701},
																											run: (*parser).callonExtraListElement867,
																											expr: &seqExpr{
																												pos: position{line: 1451, col: 9, offset: 47701},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 1451, col: 9, offset: 47701},
																														expr: &actionExpr{
																															pos: position{line: 683, col: 14, offset: 22026},
																															run: (*parser).callonExtraListElement870,
																															expr: &seqExpr{
																																pos: position{line: 683, col: 14, offset: 22026},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 683, col: 14, offset: 22026},
																																		expr: &notExpr{
																																			pos: position{line: 3092, col: 8, offset: 100608},
																																			expr: &anyMatcher{
																																				line: 3092, col: 9, offset: 100609,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 683, col: 19, offset: 22031},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExtraListElement876,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3095, col: 8, offset: 100658},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3088, col: 12, offset: 100518},
																																				run: (*parser).callonExtraListElement879,
																																				expr: &choiceExpr{
																																					pos: position{line: 3088, col: 13, offset: 100519},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 13, offset: 100519},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 20, offset: 100526},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 29, offset: 100535},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3092, col: 8, offset: 100608},
																																				expr: &anyMatcher{
																																					line: 3092, col: 9, offset: 100609,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1452, col: 9, offset: 47720},
																														expr: &seqExpr{
																															pos: position{line: 1485, col: 34, offset: 48680},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1485, col: 34, offset: 48680},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1485, col: 38, offset: 48684},
																																	expr: &actionExpr{
																																		pos: position{line: 3079, col: 10, offset: 100334},
																																		run: (*parser).callonExtraListElement890,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3079, col: 11, offset: 100335},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3088, col: 12, offset: 100518},
																																	run: (*parser).callonExtraListElement892,
																																	expr: &choiceExpr{
																																		pos: position{line: 3088, col: 13, offset: 100519},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 13, offset: 100519},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 20, offset: 100526},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3088, col: 29, offset: 100535},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1453, col: 9, offset: 47759},
																														expr: &actionExpr{
																															pos: position{line: 1533, col: 5, offset: 50154},
																															run: (*parser).callonExtraListElement898,
																															expr: &seqExpr{
																																pos: position{line: 1533, col: 5, offset: 50154},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1533, col: 5, offset: 50154},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExtraListElement901,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1533, col: 12, offset: 50161},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1535, col: 9, offset: 50224},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1535, col: 9, offset: 50224},
																																					run: (*parser).callonExtraListElement905,
																																					expr: &seqExpr{
																																						pos: position{line: 1535, col: 9, offset: 50224},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1535, col: 9, offset: 50224},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1535, col: 16, offset: 50231},
																																									run: (*parser).callonExtraListElement908,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1535, col: 16, offset: 50231},
																																										expr: &litMatcher{
																																											pos:        position{line: 1535, col: 17, offset: 50232},
																																											val:        ".",
																																											ignoreCase: false,
																																											want:       "\".\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1539, col: 9, offset: 50332},
																																								run: (*parser).callonExtraListElement911,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1558, col: 11, offset: 51049},
																																					run: (*parser).callonExtraListElement912,
																																					expr: &seqExpr{
																																						pos: position{line: 1558, col: 11, offset: 51049},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1558, col: 11, offset: 51049},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1558, col: 12, offset: 51050},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1558, col: 20, offset: 51058},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1560, col: 13, offset: 51175},
																																					run: (*parser).callonExtraListElement917,
																																					expr: &seqExpr{
																																						pos: position{line: 1560, col: 13, offset: 51175},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1560, col: 14, offset: 51176},
																																								val:        "[a-z]",
																																								ranges:     []rune{'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1560, col: 21, offset: 51183},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1562, col: 13, offset: 51303},
																																					run: (*parser).callonExtraListElement921,
																																					expr: &seqExpr{
																																						pos: position{line: 1562, col: 13, offset: 51303},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1562, col: 14, offset: 51304},
																																								val:        "[A-Z]",
																																								ranges:     []rune{'A', 'Z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1562, col: 21, offset: 51311},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1564, col: 13, offset: 51431},
																																					run: (*parser).callonExtraListElement925,
																																					expr: &seqExpr{
																																						pos: position{line: 1564, col: 13, offset: 51431},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1564, col: 13, offset: 51431},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1564, col: 14, offset: 51432},
																																									val:        "[ivxdlcm]",
																																									chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1564, col: 26, offset: 51444},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1566, col: 13, offset: 51564},
																																					run: (*parser).callonExtraListElement930,
																																					expr: &seqExpr{
																																						pos: position{line: 1566, col: 13, offset: 51564},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1566, col: 13, offset: 51564},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1566, col: 14, offset: 51565},
																																									val:        "[IVXDLCM]",
																																									chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1566, col: 26, offset: 51577},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3083, col: 11, offset: 100401},
																																		run: (*parser).callonExtraListElement935,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3083, col: 11, offset: 100401},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3083, col: 12, offset: 100402},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1454, col: 9, offset: 47793},
																														expr: &actionExpr{
																															pos: position{line: 1583, col: 5, offset: 52116},
																															run: (*parser).callonExtraListElement939,
																															expr: &seqExpr{
																																pos: position{line: 1583, col: 5, offset: 52116},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1583, col: 5, offset: 52116},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonExtraListElement942,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1583, col: 12, offset: 52123},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1583, col: 20, offset: 52131},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1585, col: 9, offset: 52188},
																																					run: (*parser).callonExtraListElement946,
																																					expr: &seqExpr{
																																						pos: position{line: 1585, col: 9, offset: 52188},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1585, col: 9, offset: 52188},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1585, col: 16, offset: 52195},
																																									run: (*parser).callonExtraListElement949,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1585, col: 16, offset: 52195},
																																										expr: &litMatcher{
																																											pos:        position{line: 1585, col: 17, offset: 52196},
																																											val:        "*",
																																											ignoreCase: false,
																																											want:       "\"*\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1589, col: 9, offset: 52296},
																																								run: (*parser).callonExtraListElement952,
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1606, col: 14, offset: 53003},
																																					label: "depth",
																																					expr: &actionExpr{
																																						pos: position{line: 1606, col: 21, offset: 53010},
																																						run: (*parser).callonExtraListElement954,
																																						expr: &litMatcher{
																																							pos:        position{line: 1606, col: 22, offset: 53011},
																																							val:        "-",
																																							ignoreCase: false,
																																							want:       "\"-\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3083, col: 11, offset: 100401},
																																		run: (*parser).callonExtraListElement956,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3083, col: 11, offset: 100401},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3083, col: 12, offset: 100402},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1455, col: 9, offset: 47829},
																														expr: &actionExpr{
																															pos: position{line: 1689, col: 5, offset: 55353},
																															run: (*parser).callonExtraListElement960,
																															expr: &seqExpr{
																																pos: position{line: 1689, col: 5, offset: 55353},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1689, col: 5, offset: 55353},
																																		val:        "<",
																																		ignoreCase: false,
																																		want:       "\"<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1689, col: 9, offset: 55357},
																																		label: "ref",
																																		expr: &actionExpr{
																																			pos: position{line: 1689, col: 14, offset: 55362},
																																			run: (*parser).callonExtraListElement964,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1689, col: 14, offset: 55362},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1689, col: 14, offset: 55362},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1689, col: 62, offset: 55410},
																																		val:        ">",
																																		ignoreCase: false,
																																		want:       "\">\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 3083, col: 11, offset: 100401},
																																		run: (*parser).callonExtraListElement968,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3083, col: 11, offset: 100401},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3083, col: 12, offset: 100402},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1456, col: 9, offset: 47863},
																														expr: &seqExpr{
																															pos: position{line: 1456, col: 11, offset: 47865},
																															exprs: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1633, col: 5, offset: 53731},
																																	run: (*parser).callonExtraListElement973,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1633, col: 5, offset: 53731},
																																		expr: &seqExpr{
																																			pos: position{line: 1633, col: 6, offset: 53732},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1633, col: 6, offset: 53732},
																																					expr: &actionExpr{
																																						pos: position{line: 1638, col: 5, offset: 53882},
																																						run: (*parser).callonExtraListElement977,
																																						expr: &seqExpr{
																																							pos: position{line: 1638, col: 5, offset: 53882},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 1638, col: 5, offset: 53882},
																																									label: "separator",
																																									expr: &actionExpr{
																																										pos: position{line: 1638, col: 16, offset: 53893},
																																										run: (*parser).callonExtraListElement980,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 1638, col: 16, offset: 53893},
																																											expr: &litMatcher{
																																												pos:        position{line: 1638, col: 17, offset: 53894},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																										},
																																									},
																																								},
																																								&andCodeExpr{
																																									pos: position{line: 1641, col: 5, offset: 53951},
																																									run: (*parser).callonExtraListElement983,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 1633, col: 35, offset: 53761},
																																					expr: &choiceExpr{
																																						pos: position{line: 3095, col: 8, offset: 100658},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 3088, col: 12, offset: 100518},
																																								run: (*parser).callonExtraListElement986,
																																								expr: &choiceExpr{
																																									pos: position{line: 3088, col: 13, offset: 100519},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 3088, col: 13, offset: 100519},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3088, col: 20, offset: 100526},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3088, col: 29, offset: 100535},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3092, col: 8, offset: 100608},
																																								expr: &anyMatcher{
																																									line: 3092, col: 9, offset: 100609,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&anyMatcher{
																																					line: 1633, col: 40, offset: 53766,
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1638, col: 5, offset: 53882},
																																	run: (*parser).callonExtraListElement994,
																																	expr: &seqExpr{
																																		pos: position{line: 1638, col: 5, offset: 53882},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1638, col: 5, offset: 53882},
																																				label: "separator",
																																				expr: &actionExpr{
																																					pos: position{line: 1638, col: 16, offset: 53893},
																																					run: (*parser).callonExtraListElement997,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1638, col: 16, offset: 53893},
																																						expr: &litMatcher{
																																							pos:        position{line: 1638, col: 17, offset: 53894},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1641, col: 5, offset: 53951},
																																				run: (*parser).callonExtraListElement1000,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1457, col: 9, offset: 47925},
																														expr: &actionExpr{
																															pos: position{line: 729, col: 5, offset: 23561},
																															run: (*parser).callonExtraListElement1002,
																															expr: &seqExpr{
																																pos: position{line: 729, col: 5, offset: 23561},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 729, col: 5, offset: 23561},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2993, col: 13, offset: 97650},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 730, col: 5, offset: 23591},
																																		label: "delimiter",
																																		expr: &choiceExpr{
																																			pos: position{line: 731, col: 9, offset: 23611},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 744, col: 26, offset: 24098},
																																					run: (*parser).callonExtraListElement1008,
																																					expr: &seqExpr{
																																						pos: position{line: 744, col: 26, offset: 24098},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 744, col: 26, offset: 24098},
																																								val:        "////",
																																								ignoreCase: false,
																																								want:       "\"////\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 744, col: 33, offset: 24105},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1012,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1015,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 748, col: 26, offset: 24212},
																																					run: (*parser).callonExtraListElement1022,
																																					expr: &seqExpr{
																																						pos: position{line: 748, col: 26, offset: 24212},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 748, col: 26, offset: 24212},
																																								val:        "====",
																																								ignoreCase: false,
																																								want:       "\"====\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 748, col: 33, offset: 24219},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1026,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1029,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 756, col: 26, offset: 24437},
																																					run: (*parser).callonExtraListElement1036,
																																					expr: &seqExpr{
																																						pos: position{line: 756, col: 26, offset: 24437},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 756, col: 26, offset: 24437},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 756, col: 32, offset: 24443},
																																								label: "language",
																																								expr: &actionExpr{
																																									pos: position{line: 760, col: 13, offset: 24573},
																																									run: (*parser).callonExtraListElement1040,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 760, col: 14, offset: 24574},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 760, col: 14, offset: 24574},
																																											val:        "[^\\r\\n ]",
																																											chars:      []rune{'\r', '\n', ' '},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 756, col: 52, offset: 24463},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1044,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1047,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 752, col: 25, offset: 24325},
																																					run: (*parser).callonExtraListElement1054,
																																					expr: &seqExpr{
																																						pos: position{line: 752, col: 25, offset: 24325},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 752, col: 25, offset: 24325},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 752, col: 31, offset: 24331},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1058,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1061,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 764, col: 26, offset: 24646},
																																					run: (*parser).callonExtraListElement1068,
																																					expr: &seqExpr{
																																						pos: position{line: 764, col: 26, offset: 24646},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 764, col: 26, offset: 24646},
																																								val:        "----",
																																								ignoreCase: false,
																																								want:       "\"----\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 764, col: 33, offset: 24653},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1072,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1075,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 768, col: 26, offset: 24760},
																																					run: (*parser).callonExtraListElement1082,
																																					expr: &seqExpr{
																																						pos: position{line: 768, col: 26, offset: 24760},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 768, col: 26, offset: 24760},
																																								val:        "....",
																																								ignoreCase: false,
																																								want:       "\"....\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 768, col: 33, offset: 24767},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1086,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1089,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 772, col: 30, offset: 24878},
																																					run: (*parser).callonExtraListElement1096,
																																					expr: &seqExpr{
																																						pos: position{line: 772, col: 30, offset: 24878},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 772, col: 30, offset: 24878},
																																								val:        "++++",
																																								ignoreCase: false,
																																								want:       "\"++++\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 772, col: 37, offset: 24885},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1100,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1103,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 776, col: 24, offset: 24994},
																																					run: (*parser).callonExtraListElement1110,
																																					expr: &seqExpr{
																																						pos: position{line: 776, col: 24, offset: 24994},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 776, col: 24, offset: 24994},
																																								val:        "____",
																																								ignoreCase: false,
																																								want:       "\"____\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 776, col: 31, offset: 25001},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1114,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1117,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 780, col: 26, offset: 25106},
																																					run: (*parser).callonExtraListElement1124,
																																					expr: &seqExpr{
																																						pos: position{line: 780, col: 26, offset: 25106},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 780, col: 26, offset: 25106},
																																								val:        "****",
																																								ignoreCase: false,
																																								want:       "\"****\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 780, col: 33, offset: 25113},
																																								expr: &actionExpr{
																																									pos: position{line: 3079, col: 10, offset: 100334},
																																									run: (*parser).callonExtraListElement1128,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3079, col: 11, offset: 100335},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3095, col: 8, offset: 100658},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3088, col: 12, offset: 100518},
																																										run: (*parser).callonExtraListElement1131,
																																										expr: &choiceExpr{
																																											pos: position{line: 3088, col: 13, offset: 100519},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 13, offset: 100519},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 20, offset: 100526},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3088, col: 29, offset: 100535},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3092, col: 8, offset: 100608},
																																										expr: &anyMatcher{
																																											line: 3092, col: 9, offset: 100609,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1458, col: 9, offset: 47949},
																														label: "content",
																														expr: &actionExpr{
																															pos: position{line: 1458, col: 18, offset: 47958},
																															run: (*parser).callonExtraListElement1139,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1458, col: 18, offset: 47958},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1458, col: 18, offset: 47958},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3095, col: 8, offset: 100658},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3088, col: 12, offset: 100518},
																																run: (*parser).callonExtraListElement1143,
																																expr: &choiceExpr{
																																	pos: position{line: 3088, col: 13, offset: 100519},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 13, offset: 100519},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 20, offset: 100526},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 29, offset: 100535},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3092, col: 8, offset: 100608},
																																expr: &anyMatcher{
																																	line: 3092, col: 9, offset: 100609,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1661, col: 9, offset: 54549},
																				run: (*parser).callonExtraListElement1150,
																				expr: &seqExpr{
																					pos: position{line: 1661, col: 9, offset: 54549},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 3083, col: 11, offset: 100401},
																							run: (*parser).callonExtraListElement1152,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3083, col: 11, offset: 100401},
																								expr: &charClassMatcher{
																									pos:        position{line: 3083, col: 12, offset: 100402},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1662, col: 9, offset: 54601},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1662, col: 18, offset: 54610},
																								run: (*parser).callonExtraListElement1156,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1662, col: 18, offset: 54610},
																									expr: &charClassMatcher{
																										pos:        position{line: 1662, col: 18, offset: 54610},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonExtraListElement1160,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2781, col: 22, offset: 91184},
										run: (*parser).callonExtraListElement1167,
										expr: &seqExpr{
											pos: position{line: 2781, col: 22, offset: 91184},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2786, col: 31, offset: 91405},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2786, col: 36, offset: 91410},
													expr: &litMatcher{
														pos:        position{line: 2786, col: 37, offset: 91411},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2781, col: 49, offset: 91211},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2788, col: 29, offset: 91446},
														run: (*parser).callonExtraListElement1173,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2788, col: 29, offset: 91446},
															expr: &charClassMatcher{
																pos:        position{line: 2788, col: 29, offset: 91446},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonExtraListElement1177,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1425, col: 13, offset: 46734},
										run: (*parser).callonExtraListElement1184,
										expr: &seqExpr{
											pos: position{line: 1425, col: 13, offset: 46734},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1425, col: 13, offset: 46734},
													expr: &actionExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														run: (*parser).callonExtraListElement1187,
														expr: &seqExpr{
															pos: position{line: 683, col: 14, offset: 22026},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 683, col: 14, offset: 22026},
																	expr: &notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 683, col: 19, offset: 22031},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonExtraListElement1193,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonExtraListElement1196,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1426, col: 13, offset: 46757},
													label: "attributes",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1426, col: 24, offset: 46768},
														expr: &ruleRefExpr{
															pos:  position{line: 1426, col: 25, offset: 46769},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1427, col: 13, offset: 46800},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1768, col: 5, offset: 57960},
														run: (*parser).callonExtraListElement1207,
														expr: &seqExpr{
															pos: position{line: 1768, col: 5, offset: 57960},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1768, col: 5, offset: 57960},
																	label: "firstLine",
																	expr: &actionExpr{
																		pos: position{line: 1775, col: 5, offset: 58245},
																		run: (*parser).callonExtraListElement1210,
																		expr: &seqExpr{
																			pos: position{line: 1775, col: 5, offset: 58245},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1775, col: 5, offset: 58245},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1775, col: 14, offset: 58254},
																						run: (*parser).callonExtraListElement1213,
																						expr: &seqExpr{
																							pos: position{line: 1775, col: 14, offset: 58254},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 3083, col: 11, offset: 100401},
																									run: (*parser).callonExtraListElement1215,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3083, col: 11, offset: 100401},
																										expr: &charClassMatcher{
																											pos:        position{line: 3083, col: 12, offset: 100402},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 1775, col: 21, offset: 58261},
																									expr: &charClassMatcher{
																										pos:        position{line: 1775, col: 21, offset: 58261},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1778, col: 5, offset: 58318},
																					run: (*parser).callonExtraListElement1220,
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement1222,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1769, col: 5, offset: 58001},
																	label: "otherLines",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 1769, col: 16, offset: 58012},
																		expr: &choiceExpr{
																			pos: position{line: 1769, col: 17, offset: 58013},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2781, col: 22, offset: 91184},
																					run: (*parser).callonExtraListElement1232,
																					expr: &seqExpr{
																						pos: position{line: 2781, col: 22, offset: 91184},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2786, col: 31, offset: 91405},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2786, col: 36, offset: 91410},
																								expr: &litMatcher{
																									pos:        position{line: 2786, col: 37, offset: 91411},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2781, col: 49, offset: 91211},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2788, col: 29, offset: 91446},
																									run: (*parser).callonExtraListElement1238,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2788, col: 29, offset: 91446},
																										expr: &charClassMatcher{
																											pos:        position{line: 2788, col: 29, offset: 91446},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonExtraListElement1242,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1757, col: 5, offset: 57678},
																					run: (*parser).callonExtraListElement1249,
																					expr: &seqExpr{
																						pos: position{line: 1757, col: 5, offset: 57678},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1757, col: 5, offset: 57678},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1757, col: 14, offset: 57687},
																									run: (*parser).callonExtraListElement1252,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1757, col: 14, offset: 57687},
																										expr: &charClassMatcher{
																											pos:        position{line: 1757, col: 14, offset: 57687},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1760, col: 5, offset: 57794},
																								run: (*parser).callonExtraListElement1255,
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonExtraListElement1257,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1439, col: 13, offset: 47347},
										run: (*parser).callonExtraListElement1264,
										expr: &labeledExpr{
											pos:   position{line: 1439, col: 13, offset: 47347},
											label: "element",
											expr: &choiceExpr{
												pos: position{line: 1447, col: 5, offset: 47548},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 1447, col: 5, offset: 47548},
														run: (*parser).callonExtraListElement1267,
														expr: &actionExpr{
															pos: position{line: 2781, col: 22, offset: 91184},
															run: (*parser).callonExtraListElement1268,
															expr: &seqExpr{
																pos: position{line: 2781, col: 22, offset: 91184},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2786, col: 31, offset: 91405},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2786, col: 36, offset: 91410},
																		expr: &litMatcher{
																			pos:        position{line: 2786, col: 37, offset: 91411},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2781, col: 49, offset: 91211},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2788, col: 29, offset: 91446},
																			run: (*parser).callonExtraListElement1274,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2788, col: 29, offset: 91446},
																				expr: &charClassMatcher{
																					pos:        position{line: 2788, col: 29, offset: 91446},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonExtraListElement1278,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1451, col: 9, offset: 47701},
														run: (*parser).callonExtraListElement1285,
														expr: &seqExpr{
															pos: position{line: 1451, col: 9, offset: 47701},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1451, col: 9, offset: 47701},
																	expr: &actionExpr{
																		pos: position{line: 683, col: 14, offset: 22026},
																		run: (*parser).callonExtraListElement1288,
																		expr: &seqExpr{
																			pos: position{line: 683, col: 14, offset: 22026},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 683, col: 14, offset: 22026},
																					expr: &notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 683, col: 19, offset: 22031},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonExtraListElement1294,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonExtraListElement1297,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1452, col: 9, offset: 47720},
																	expr: &seqExpr{
																		pos: position{line: 1485, col: 34, offset: 48680},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1485, col: 34, offset: 48680},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1485, col: 38, offset: 48684},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonExtraListElement1308,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonExtraListElement1310,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1453, col: 9, offset: 47759},
																	expr: &actionExpr{
																		pos: position{line: 1533, col: 5, offset: 50154},
																		run: (*parser).callonExtraListElement1316,
																		expr: &seqExpr{
																			pos: position{line: 1533, col: 5, offset: 50154},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1533, col: 5, offset: 50154},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonExtraListElement1319,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1533, col: 12, offset: 50161},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1535, col: 9, offset: 50224},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1535, col: 9, offset: 50224},
																								run: (*parser).callonExtraListElement1323,
																								expr: &seqExpr{
																									pos: position{line: 1535, col: 9, offset: 50224},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1535, col: 9, offset: 50224},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1535, col: 16, offset: 50231},
																												run: (*parser).callonExtraListElement1326,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1535, col: 16, offset: 50231},
																													expr: &litMatcher{
																														pos:        position{line: 1535, col: 17, offset: 50232},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1539, col: 9, offset: 50332},
																											run: (*parser).callonExtraListElement1329,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1558, col: 11, offset: 51049},
																								run: (*parser).callonExtraListElement1330,
																								expr: &seqExpr{
																									pos: position{line: 1558, col: 11, offset: 51049},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1558, col: 11, offset: 51049},
																											expr: &charClassMatcher{
																												pos:        position{line: 1558, col: 12, offset: 51050},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1558, col: 20, offset: 51058},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1560, col: 13, offset: 51175},
																								run: (*parser).callonExtraListElement1335,
																								expr: &seqExpr{
																									pos: position{line: 1560, col: 13, offset: 51175},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1560, col: 14, offset: 51176},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1560, col: 21, offset: 51183},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1562, col: 13, offset: 51303},
																								run: (*parser).callonExtraListElement1339,
																								expr: &seqExpr{
																									pos: position{line: 1562, col: 13, offset: 51303},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1562, col: 14, offset: 51304},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1562, col: 21, offset: 51311},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1564, col: 13, offset: 51431},
																								run: (*parser).callonExtraListElement1343,
																								expr: &seqExpr{
																									pos: position{line: 1564, col: 13, offset: 51431},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1564, col: 13, offset: 51431},
																											expr: &charClassMatcher{
																												pos:        position{line: 1564, col: 14, offset: 51432},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1564, col: 26, offset: 51444},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1566, col: 13, offset: 51564},
																								run: (*parser).callonExtraListElement1348,
																								expr: &seqExpr{
																									pos: position{line: 1566, col: 13, offset: 51564},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1566, col: 13, offset: 51564},
																											expr: &charClassMatcher{
																												pos:        position{line: 1566, col: 14, offset: 51565},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1566, col: 26, offset: 51577},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement1353,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1454, col: 9, offset: 47793},
																	expr: &actionExpr{
																		pos: position{line: 1583, col: 5, offset: 52116},
																		run: (*parser).callonExtraListElement1357,
																		expr: &seqExpr{
																			pos: position{line: 1583, col: 5, offset: 52116},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1583, col: 5, offset: 52116},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonExtraListElement1360,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1583, col: 12, offset: 52123},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1583, col: 20, offset: 52131},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1585, col: 9, offset: 52188},
																								run: (*parser).callonExtraListElement1364,
																								expr: &seqExpr{
																									pos: position{line: 1585, col: 9, offset: 52188},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1585, col: 9, offset: 52188},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1585, col: 16, offset: 52195},
																												run: (*parser).callonExtraListElement1367,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1585, col: 16, offset: 52195},
																													expr: &litMatcher{
																														pos:        position{line: 1585, col: 17, offset: 52196},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1589, col: 9, offset: 52296},
																											run: (*parser).callonExtraListElement1370,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1606, col: 14, offset: 53003},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1606, col: 21, offset: 53010},
																									run: (*parser).callonExtraListElement1372,
																									expr: &litMatcher{
																										pos:        position{line: 1606, col: 22, offset: 53011},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement1374,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1455, col: 9, offset: 47829},
																	expr: &actionExpr{
																		pos: position{line: 1689, col: 5, offset: 55353},
																		run: (*parser).callonExtraListElement1378,
																		expr: &seqExpr{
																			pos: position{line: 1689, col: 5, offset: 55353},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1689, col: 5, offset: 55353},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1689, col: 9, offset: 55357},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1689, col: 14, offset: 55362},
																						run: (*parser).callonExtraListElement1382,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1689, col: 14, offset: 55362},
																							expr: &charClassMatcher{
																								pos:        position{line: 1689, col: 14, offset: 55362},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1689, col: 62, offset: 55410},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonExtraListElement1386,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1456, col: 9, offset: 47863},
																	expr: &seqExpr{
																		pos: position{line: 1456, col: 11, offset: 47865},
																		exprs: []interface{}{
																			&actionExpr{
																				pos: position{line: 1633, col: 5, offset: 53731},
																				run: (*parser).callonExtraListElement1391,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1633, col: 5, offset: 53731},
																					expr: &seqExpr{
																						pos: position{line: 1633, col: 6, offset: 53732},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1633, col: 6, offset: 53732},
																								expr: &actionExpr{
																									pos: position{line: 1638, col: 5, offset: 53882},
																									run: (*parser).callonExtraListElement1395,
																									expr: &seqExpr{
																										pos: position{line: 1638, col: 5, offset: 53882},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1638, col: 5, offset: 53882},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1638, col: 16, offset: 53893},
																													run: (*parser).callonExtraListElement1398,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1638, col: 16, offset: 53893},
																														expr: &litMatcher{
																															pos:        position{line: 1638, col: 17, offset: 53894},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1641, col: 5, offset: 53951},
																												run: (*parser).callonExtraListElement1401,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1633, col: 35, offset: 53761},
																								expr: &choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonExtraListElement1404,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1633, col: 40, offset: 53766,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1638, col: 5, offset: 53882},
																				run: (*parser).callonExtraListElement1412,
																				expr: &seqExpr{
																					pos: position{line: 1638, col: 5, offset: 53882},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1638, col: 5, offset: 53882},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1638, col: 16, offset: 53893},
																								run: (*parser).callonExtraListElement1415,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1638, col: 16, offset: 53893},
																									expr: &litMatcher{
																										pos:        position{line: 1638, col: 17, offset: 53894},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1641, col: 5, offset: 53951},
																							run: (*parser).callonExtraListElement1418,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1457, col: 9, offset: 47925},
																	expr: &actionExpr{
																		pos: position{line: 729, col: 5, offset: 23561},
																		run: (*parser).callonExtraListElement1420,
																		expr: &seqExpr{
																			pos: position{line: 729, col: 5, offset: 23561},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 729, col: 5, offset: 23561},
																					expr: &charClassMatcher{
																						pos:        position{line: 2993, col: 13, offset: 97650},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 730, col: 5, offset: 23591},
																					label: "delimiter",
																					expr: &choiceExpr{
																						pos: position{line: 731, col: 9, offset: 23611},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 744, col: 26, offset: 24098},
																								run: (*parser).callonExtraListElement1426,
																								expr: &seqExpr{
																									pos: position{line: 744, col: 26, offset: 24098},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 744, col: 26, offset: 24098},
																											val:        "////",
																											ignoreCase: false,
																											want:       "\"////\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 744, col: 33, offset: 24105},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1430,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1433,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 748, col: 26, offset: 24212},
																								run: (*parser).callonExtraListElement1440,
																								expr: &seqExpr{
																									pos: position{line: 748, col: 26, offset: 24212},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 748, col: 26, offset: 24212},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 748, col: 33, offset: 24219},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1444,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1447,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 756, col: 26, offset: 24437},
																								run: (*parser).callonExtraListElement1454,
																								expr: &seqExpr{
																									pos: position{line: 756, col: 26, offset: 24437},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 756, col: 26, offset: 24437},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 756, col: 32, offset: 24443},
																											label: "language",
																											expr: &actionExpr{
																												pos: position{line: 760, col: 13, offset: 24573},
																												run: (*parser).callonExtraListElement1458,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 760, col: 14, offset: 24574},
																													expr: &charClassMatcher{
																														pos:        position{line: 760, col: 14, offset: 24574},
																														val:        "[^\\r\\n ]",
																														chars:      []rune{'\r', '\n', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 756, col: 52, offset: 24463},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1462,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1465,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 752, col: 25, offset: 24325},
																								run: (*parser).callonExtraListElement1472,
																								expr: &seqExpr{
																									pos: position{line: 752, col: 25, offset: 24325},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 752, col: 25, offset: 24325},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 752, col: 31, offset: 24331},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1476,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1479,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 764, col: 26, offset: 24646},
																								run: (*parser).callonExtraListElement1486,
																								expr: &seqExpr{
																									pos: position{line: 764, col: 26, offset: 24646},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 764, col: 26, offset: 24646},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 764, col: 33, offset: 24653},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1490,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1493,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 768, col: 26, offset: 24760},
																								run: (*parser).callonExtraListElement1500,
																								expr: &seqExpr{
																									pos: position{line: 768, col: 26, offset: 24760},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 768, col: 26, offset: 24760},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 768, col: 33, offset: 24767},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1504,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1507,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 772, col: 30, offset: 24878},
																								run: (*parser).callonExtraListElement1514,
																								expr: &seqExpr{
																									pos: position{line: 772, col: 30, offset: 24878},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 772, col: 30, offset: 24878},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 772, col: 37, offset: 24885},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1518,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1521,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 776, col: 24, offset: 24994},
																								run: (*parser).callonExtraListElement1528,
																								expr: &seqExpr{
																									pos: position{line: 776, col: 24, offset: 24994},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 776, col: 24, offset: 24994},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 776, col: 31, offset: 25001},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1532,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1535,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 780, col: 26, offset: 25106},
																								run: (*parser).callonExtraListElement1542,
																								expr: &seqExpr{
																									pos: position{line: 780, col: 26, offset: 25106},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 780, col: 26, offset: 25106},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 780, col: 33, offset: 25113},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonExtraListElement1546,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonExtraListElement1549,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1458, col: 9, offset: 47949},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1458, col: 18, offset: 47958},
																		run: (*parser).callonExtraListElement1557,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1458, col: 18, offset: 47958},
																			expr: &charClassMatcher{
																				pos:        position{line: 1458, col: 18, offset: 47958},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonExtraListElement1561,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1477, col: 1, offset: 48408},
			expr: &actionExpr{
				pos: position{line: 1478, col: 5, offset: 48440},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1478, col: 5, offset: 48440},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1478, col: 5, offset: 48440},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1478, col: 12, offset: 48447},
								expr: &seqExpr{
									pos: position{line: 1478, col: 13, offset: 48448},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1478, col: 13, offset: 48448},
											expr: &actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonListElementContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 3088, col: 12, offset: 100518},
											run: (*parser).callonListElementContinuation9,
											expr: &choiceExpr{
												pos: position{line: 3088, col: 13, offset: 100519},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 3088, col: 13, offset: 100519},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 3088, col: 20, offset: 100526},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 3088, col: 29, offset: 100535},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1485, col: 34, offset: 48680},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1485, col: 38, offset: 48684},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonListElementContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 3088, col: 12, offset: 100518},
							run: (*parser).callonListElementContinuation18,
							expr: &choiceExpr{
								pos: position{line: 3088, col: 13, offset: 100519},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 3088, col: 13, offset: 100519},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 3088, col: 20, offset: 100526},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 3088, col: 29, offset: 100535},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 5, offset: 48504},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1480, col: 13, offset: 48512},
								expr: &ruleRefExpr{
									pos:  position{line: 1480, col: 13, offset: 48512},
									name: "ListElementContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuationElement",
			pos:  position{line: 1487, col: 1, offset: 48700},
			expr: &actionExpr{
				pos: position{line: 1488, col: 5, offset: 48778},
				run: (*parser).callonListElementContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1488, col: 5, offset: 48778},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1488, col: 5, offset: 48778},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&notExpr{
							pos: position{line: 1489, col: 5, offset: 48804},
							expr: &choiceExpr{
								pos: position{line: 1379, col: 5, offset: 45139},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1526, col: 5, offset: 49946},
										run: (*parser).callonListElementContinuationElement8,
										expr: &seqExpr{
											pos: position{line: 1526, col: 5, offset: 49946},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1526, col: 5, offset: 49946},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1533, col: 5, offset: 50154},
														run: (*parser).callonListElementContinuationElement11,
														expr: &seqExpr{
															pos: position{line: 1533, col: 5, offset: 50154},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1533, col: 5, offset: 50154},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonListElementContinuationElement14,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1533, col: 12, offset: 50161},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1535, col: 9, offset: 50224},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1535, col: 9, offset: 50224},
																				run: (*parser).callonListElementContinuationElement18,
																				expr: &seqExpr{
																					pos: position{line: 1535, col: 9, offset: 50224},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1535, col: 9, offset: 50224},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1535, col: 16, offset: 50231},
																								run: (*parser).callonListElementContinuationElement21,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1535, col: 16, offset: 50231},
																									expr: &litMatcher{
																										pos:        position{line: 1535, col: 17, offset: 50232},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1539, col: 9, offset: 50332},
																							run: (*parser).callonListElementContinuationElement24,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1558, col: 11, offset: 51049},
																				run: (*parser).callonListElementContinuationElement25,
																				expr: &seqExpr{
																					pos: position{line: 1558, col: 11, offset: 51049},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1558, col: 11, offset: 51049},
																							expr: &charClassMatcher{
																								pos:        position{line: 1558, col: 12, offset: 51050},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1558, col: 20, offset: 51058},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1560, col: 13, offset: 51175},
																				run: (*parser).callonListElementContinuationElement30,
																				expr: &seqExpr{
																					pos: position{line: 1560, col: 13, offset: 51175},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1560, col: 14, offset: 51176},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1560, col: 21, offset: 51183},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1562, col: 13, offset: 51303},
																				run: (*parser).callonListElementContinuationElement34,
																				expr: &seqExpr{
																					pos: position{line: 1562, col: 13, offset: 51303},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1562, col: 14, offset: 51304},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1562, col: 21, offset: 51311},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1564, col: 13, offset: 51431},
																				run: (*parser).callonListElementContinuationElement38,
																				expr: &seqExpr{
																					pos: position{line: 1564, col: 13, offset: 51431},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1564, col: 13, offset: 51431},
																							expr: &charClassMatcher{
																								pos:        position{line: 1564, col: 14, offset: 51432},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1564, col: 26, offset: 51444},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1566, col: 13, offset: 51564},
																				run: (*parser).callonListElementContinuationElement43,
																				expr: &seqExpr{
																					pos: position{line: 1566, col: 13, offset: 51564},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1566, col: 13, offset: 51564},
																							expr: &charClassMatcher{
																								pos:        position{line: 1566, col: 14, offset: 51565},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1566, col: 26, offset: 51577},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3083, col: 11, offset: 100401},
																	run: (*parser).callonListElementContinuationElement48,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		expr: &charClassMatcher{
																			pos:        position{line: 3083, col: 12, offset: 100402},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1527, col: 5, offset: 49985},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1467, col: 5, offset: 48181},
														run: (*parser).callonListElementContinuationElement52,
														expr: &seqExpr{
															pos: position{line: 1467, col: 5, offset: 48181},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1467, col: 5, offset: 48181},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 14, offset: 48190},
																		run: (*parser).callonListElementContinuationElement55,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1467, col: 14, offset: 48190},
																			expr: &charClassMatcher{
																				pos:        position{line: 1467, col: 14, offset: 48190},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement59,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1576, col: 5, offset: 51843},
										run: (*parser).callonListElementContinuationElement66,
										expr: &seqExpr{
											pos: position{line: 1576, col: 5, offset: 51843},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1576, col: 5, offset: 51843},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1583, col: 5, offset: 52116},
														run: (*parser).callonListElementContinuationElement69,
														expr: &seqExpr{
															pos: position{line: 1583, col: 5, offset: 52116},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1583, col: 5, offset: 52116},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonListElementContinuationElement72,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1583, col: 12, offset: 52123},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1583, col: 20, offset: 52131},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1585, col: 9, offset: 52188},
																				run: (*parser).callonListElementContinuationElement76,
																				expr: &seqExpr{
																					pos: position{line: 1585, col: 9, offset: 52188},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1585, col: 9, offset: 52188},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1585, col: 16, offset: 52195},
																								run: (*parser).callonListElementContinuationElement79,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1585, col: 16, offset: 52195},
																									expr: &litMatcher{
																										pos:        position{line: 1585, col: 17, offset: 52196},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1589, col: 9, offset: 52296},
																							run: (*parser).callonListElementContinuationElement82,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1606, col: 14, offset: 53003},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1606, col: 21, offset: 53010},
																					run: (*parser).callonListElementContinuationElement84,
																					expr: &litMatcher{
																						pos:        position{line: 1606, col: 22, offset: 53011},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3083, col: 11, offset: 100401},
																	run: (*parser).callonListElementContinuationElement86,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		expr: &charClassMatcher{
																			pos:        position{line: 3083, col: 12, offset: 100402},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1577, col: 5, offset: 51884},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1577, col: 16, offset: 51895},
														expr: &actionExpr{
															pos: position{line: 1613, col: 5, offset: 53172},
															run: (*parser).callonListElementContinuationElement91,
															expr: &seqExpr{
																pos: position{line: 1613, col: 5, offset: 53172},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1613, col: 5, offset: 53172},
																		expr: &litMatcher{
																			pos:        position{line: 1613, col: 6, offset: 53173},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1613, col: 10, offset: 53177},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1614, col: 7, offset: 53191},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1614, col: 7, offset: 53191},
																					run: (*parser).callonListElementContinuationElement97,
																					expr: &litMatcher{
																						pos:        position{line: 1614, col: 7, offset: 53191},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1615, col: 7, offset: 53236},
																					run: (*parser).callonListElementContinuationElement99,
																					expr: &litMatcher{
																						pos:        position{line: 1615, col: 7, offset: 53236},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1616, col: 7, offset: 53279},
																					run: (*parser).callonListElementContinuationElement101,
																					expr: &litMatcher{
																						pos:        position{line: 1616, col: 7, offset: 53279},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		run: (*parser).callonListElementContinuationElement103,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3083, col: 11, offset: 100401},
																			expr: &charClassMatcher{
																				pos:        position{line: 3083, col: 12, offset: 100402},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1578, col: 5, offset: 51934},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1467, col: 5, offset: 48181},
														run: (*parser).callonListElementContinuationElement107,
														expr: &seqExpr{
															pos: position{line: 1467, col: 5, offset: 48181},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1467, col: 5, offset: 48181},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1467, col: 14, offset: 48190},
																		run: (*parser).callonListElementContinuationElement110,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1467, col: 14, offset: 48190},
																			expr: &charClassMatcher{
																				pos:        position{line: 1467, col: 14, offset: 48190},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement114,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1683, col: 5, offset: 55152},
										run: (*parser).callonListElementContinuationElement121,
										expr: &seqExpr{
											pos: position{line: 1683, col: 5, offset: 55152},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1683, col: 5, offset: 55152},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1689, col: 5, offset: 55353},
														run: (*parser).callonListElementContinuationElement124,
														expr: &seqExpr{
															pos: position{line: 1689, col: 5, offset: 55353},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1689, col: 5, offset: 55353},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1689, col: 9, offset: 55357},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1689, col: 14, offset: 55362},
																		run: (*parser).callonListElementContinuationElement128,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1689, col: 14, offset: 55362},
																			expr: &charClassMatcher{
																				pos:        position{line: 1689, col: 14, offset: 55362},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1689, col: 62, offset: 55410},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 3083, col: 11, offset: 100401},
																	run: (*parser).callonListElementContinuationElement132,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3083, col: 11, offset: 100401},
																		expr: &charClassMatcher{
																			pos:        position{line: 3083, col: 12, offset: 100402},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1684, col: 5, offset: 55188},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1694, col: 5, offset: 55536},
														run: (*parser).callonListElementContinuationElement136,
														expr: &seqExpr{
															pos: position{line: 1694, col: 5, offset: 55536},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1694, col: 5, offset: 55536},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1694, col: 14, offset: 55545},
																		run: (*parser).callonListElementContinuationElement139,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1694, col: 14, offset: 55545},
																			expr: &charClassMatcher{
																				pos:        position{line: 1694, col: 14, offset: 55545},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement143,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1625, col: 5, offset: 53472},
										run: (*parser).callonListElementContinuationElement150,
										expr: &seqExpr{
											pos: position{line: 1625, col: 5, offset: 53472},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1625, col: 5, offset: 53472},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1633, col: 5, offset: 53731},
														run: (*parser).callonListElementContinuationElement153,
														expr: &oneOrMoreExpr{
															pos: position{line: 1633, col: 5, offset: 53731},
															expr: &seqExpr{
																pos: position{line: 1633, col: 6, offset: 53732},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1633, col: 6, offset: 53732},
																		expr: &actionExpr{
																			pos: position{line: 1638, col: 5, offset: 53882},
																			run: (*parser).callonListElementContinuationElement157,
																			expr: &seqExpr{
																				pos: position{line: 1638, col: 5, offset: 53882},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1638, col: 5, offset: 53882},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1638, col: 16, offset: 53893},
																							run: (*parser).callonListElementContinuationElement160,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1638, col: 16, offset: 53893},
																								expr: &litMatcher{
																									pos:        position{line: 1638, col: 17, offset: 53894},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1641, col: 5, offset: 53951},
																						run: (*parser).callonListElementContinuationElement163,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1633, col: 35, offset: 53761},
																		expr: &choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement166,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1633, col: 40, offset: 53766,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1626, col: 5, offset: 53507},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1638, col: 5, offset: 53882},
														run: (*parser).callonListElementContinuationElement175,
														expr: &seqExpr{
															pos: position{line: 1638, col: 5, offset: 53882},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1638, col: 5, offset: 53882},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1638, col: 16, offset: 53893},
																		run: (*parser).callonListElementContinuationElement178,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1638, col: 16, offset: 53893},
																			expr: &litMatcher{
																				pos:        position{line: 1638, col: 17, offset: 53894},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1641, col: 5, offset: 53951},
																	run: (*parser).callonListElementContinuationElement181,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1627, col: 5, offset: 53552},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1649, col: 5, offset: 54201},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1651, col: 9, offset: 54266},
																run: (*parser).callonListElementContinuationElement184,
																expr: &seqExpr{
																	pos: position{line: 1651, col: 9, offset: 54266},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1651, col: 9, offset: 54266},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement187,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement190,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1652, col: 9, offset: 54286},
																			expr: &actionExpr{
																				pos: position{line: 683, col: 14, offset: 22026},
																				run: (*parser).callonListElementContinuationElement198,
																				expr: &seqExpr{
																					pos: position{line: 683, col: 14, offset: 22026},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 683, col: 14, offset: 22026},
																							expr: &notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 683, col: 19, offset: 22031},
																							expr: &actionExpr{
																								pos: position{line: 3079, col: 10, offset: 100334},
																								run: (*parser).callonListElementContinuationElement204,
																								expr: &charClassMatcher{
																									pos:        position{line: 3079, col: 11, offset: 100335},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3095, col: 8, offset: 100658},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3088, col: 12, offset: 100518},
																									run: (*parser).callonListElementContinuationElement207,
																									expr: &choiceExpr{
																										pos: position{line: 3088, col: 13, offset: 100519},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3088, col: 13, offset: 100519},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 20, offset: 100526},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3088, col: 29, offset: 100535},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1653, col: 9, offset: 54306},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1653, col: 17, offset: 54314},
																				expr: &choiceExpr{
																					pos: position{line: 1447, col: 5, offset: 47548},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 1447, col: 5, offset: 47548},
																							run: (*parser).callonListElementContinuationElement217,
																							expr: &actionExpr{
																								pos: position{line: 2781, col: 22, offset: 91184},
																								run: (*parser).callonListElementContinuationElement218,
																								expr: &seqExpr{
																									pos: position{line: 2781, col: 22, offset: 91184},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2786, col: 31, offset: 91405},
																											val:        "//",
																											ignoreCase: false,
																											want:       "\"//\"",
																										},
																										&notExpr{
																											pos: position{line: 2786, col: 36, offset: 91410},
																											expr: &litMatcher{
																												pos:        position{line: 2786, col: 37, offset: 91411},
																												val:        "//",
																												ignoreCase: false,
																												want:       "\"//\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 2781, col: 49, offset: 91211},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2788, col: 29, offset: 91446},
																												run: (*parser).callonListElementContinuationElement224,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2788, col: 29, offset: 91446},
																													expr: &charClassMatcher{
																														pos:        position{line: 2788, col: 29, offset: 91446},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonListElementContinuationElement228,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1451, col: 9, offset: 47701},
																							run: (*parser).callonListElementContinuationElement235,
																							expr: &seqExpr{
																								pos: position{line: 1451, col: 9, offset: 47701},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1451, col: 9, offset: 47701},
																										expr: &actionExpr{
																											pos: position{line: 683, col: 14, offset: 22026},
																											run: (*parser).callonListElementContinuationElement238,
																											expr: &seqExpr{
																												pos: position{line: 683, col: 14, offset: 22026},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 683, col: 14, offset: 22026},
																														expr: &notExpr{
																															pos: position{line: 3092, col: 8, offset: 100608},
																															expr: &anyMatcher{
																																line: 3092, col: 9, offset: 100609,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 683, col: 19, offset: 22031},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonListElementContinuationElement244,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3095, col: 8, offset: 100658},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3088, col: 12, offset: 100518},
																																run: (*parser).callonListElementContinuationElement247,
																																expr: &choiceExpr{
																																	pos: position{line: 3088, col: 13, offset: 100519},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 13, offset: 100519},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 20, offset: 100526},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 29, offset: 100535},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3092, col: 8, offset: 100608},
																																expr: &anyMatcher{
																																	line: 3092, col: 9, offset: 100609,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1452, col: 9, offset: 47720},
																										expr: &seqExpr{
																											pos: position{line: 1485, col: 34, offset: 48680},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1485, col: 34, offset: 48680},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1485, col: 38, offset: 48684},
																													expr: &actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonListElementContinuationElement258,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonListElementContinuationElement260,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1453, col: 9, offset: 47759},
																										expr: &actionExpr{
																											pos: position{line: 1533, col: 5, offset: 50154},
																											run: (*parser).callonListElementContinuationElement266,
																											expr: &seqExpr{
																												pos: position{line: 1533, col: 5, offset: 50154},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1533, col: 5, offset: 50154},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonListElementContinuationElement269,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1533, col: 12, offset: 50161},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1535, col: 9, offset: 50224},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1535, col: 9, offset: 50224},
																																	run: (*parser).callonListElementContinuationElement273,
																																	expr: &seqExpr{
																																		pos: position{line: 1535, col: 9, offset: 50224},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1535, col: 9, offset: 50224},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1535, col: 16, offset: 50231},
																																					run: (*parser).callonListElementContinuationElement276,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1535, col: 16, offset: 50231},
																																						expr: &litMatcher{
																																							pos:        position{line: 1535, col: 17, offset: 50232},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1539, col: 9, offset: 50332},
																																				run: (*parser).callonListElementContinuationElement279,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1558, col: 11, offset: 51049},
																																	run: (*parser).callonListElementContinuationElement280,
																																	expr: &seqExpr{
																																		pos: position{line: 1558, col: 11, offset: 51049},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1558, col: 11, offset: 51049},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1558, col: 12, offset: 51050},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1558, col: 20, offset: 51058},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1560, col: 13, offset: 51175},
																																	run: (*parser).callonListElementContinuationElement285,
																																	expr: &seqExpr{
																																		pos: position{line: 1560, col: 13, offset: 51175},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1560, col: 14, offset: 51176},
																																				val:        "[a-z]",
																																				ranges:     []rune{'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1560, col: 21, offset: 51183},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1562, col: 13, offset: 51303},
																																	run: (*parser).callonListElementContinuationElement289,
																																	expr: &seqExpr{
																																		pos: position{line: 1562, col: 13, offset: 51303},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1562, col: 14, offset: 51304},
																																				val:        "[A-Z]",
																																				ranges:     []rune{'A', 'Z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1562, col: 21, offset: 51311},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1564, col: 13, offset: 51431},
																																	run: (*parser).callonListElementContinuationElement293,
																																	expr: &seqExpr{
																																		pos: position{line: 1564, col: 13, offset: 51431},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1564, col: 13, offset: 51431},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1564, col: 14, offset: 51432},
																																					val:        "[ivxdlcm]",
																																					chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1564, col: 26, offset: 51444},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1566, col: 13, offset: 51564},
																																	run: (*parser).callonListElementContinuationElement298,
																																	expr: &seqExpr{
																																		pos: position{line: 1566, col: 13, offset: 51564},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1566, col: 13, offset: 51564},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1566, col: 14, offset: 51565},
																																					val:        "[IVXDLCM]",
																																					chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1566, col: 26, offset: 51577},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3083, col: 11, offset: 100401},
																														run: (*parser).callonListElementContinuationElement303,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3083, col: 11, offset: 100401},
																															expr: &charClassMatcher{
																																pos:        position{line: 3083, col: 12, offset: 100402},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1454, col: 9, offset: 47793},
																										expr: &actionExpr{
																											pos: position{line: 1583, col: 5, offset: 52116},
																											run: (*parser).callonListElementContinuationElement307,
																											expr: &seqExpr{
																												pos: position{line: 1583, col: 5, offset: 52116},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1583, col: 5, offset: 52116},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonListElementContinuationElement310,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1583, col: 12, offset: 52123},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1583, col: 20, offset: 52131},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1585, col: 9, offset: 52188},
																																	run: (*parser).callonListElementContinuationElement314,
																																	expr: &seqExpr{
																																		pos: position{line: 1585, col: 9, offset: 52188},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1585, col: 9, offset: 52188},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1585, col: 16, offset: 52195},
																																					run: (*parser).callonListElementContinuationElement317,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1585, col: 16, offset: 52195},
																																						expr: &litMatcher{
																																							pos:        position{line: 1585, col: 17, offset: 52196},
																																							val:        "*",
																																							ignoreCase: false,
																																							want:       "\"*\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1589, col: 9, offset: 52296},
																																				run: (*parser).callonListElementContinuationElement320,
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 1606, col: 14, offset: 53003},
																																	label: "depth",
																																	expr: &actionExpr{
																																		pos: position{line: 1606, col: 21, offset: 53010},
																																		run: (*parser).callonListElementContinuationElement322,
																																		expr: &litMatcher{
																																			pos:        position{line: 1606, col: 22, offset: 53011},
																																			val:        "-",
																																			ignoreCase: false,
																																			want:       "\"-\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3083, col: 11, offset: 100401},
																														run: (*parser).callonListElementContinuationElement324,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3083, col: 11, offset: 100401},
																															expr: &charClassMatcher{
																																pos:        position{line: 3083, col: 12, offset: 100402},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1455, col: 9, offset: 47829},
																										expr: &actionExpr{
																											pos: position{line: 1689, col: 5, offset: 55353},
																											run: (*parser).callonListElementContinuationElement328,
																											expr: &seqExpr{
																												pos: position{line: 1689, col: 5, offset: 55353},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 1689, col: 5, offset: 55353},
																														val:        "<",
																														ignoreCase: false,
																														want:       "\"<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 1689, col: 9, offset: 55357},
																														label: "ref",
																														expr: &actionExpr{
																															pos: position{line: 1689, col: 14, offset: 55362},
																															run: (*parser).callonListElementContinuationElement332,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1689, col: 14, offset: 55362},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1689, col: 14, offset: 55362},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 1689, col: 62, offset: 55410},
																														val:        ">",
																														ignoreCase: false,
																														want:       "\">\"",
																													},
																													&actionExpr{
																														pos: position{line: 3083, col: 11, offset: 100401},
																														run: (*parser).callonListElementContinuationElement336,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3083, col: 11, offset: 100401},
																															expr: &charClassMatcher{
																																pos:        position{line: 3083, col: 12, offset: 100402},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1456, col: 9, offset: 47863},
																										expr: &seqExpr{
																											pos: position{line: 1456, col: 11, offset: 47865},
																											exprs: []interface{}{
																												&actionExpr{
																													pos: position{line: 1633, col: 5, offset: 53731},
																													run: (*parser).callonListElementContinuationElement341,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1633, col: 5, offset: 53731},
																														expr: &seqExpr{
																															pos: position{line: 1633, col: 6, offset: 53732},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 1633, col: 6, offset: 53732},
																																	expr: &actionExpr{
																																		pos: position{line: 1638, col: 5, offset: 53882},
																																		run: (*parser).callonListElementContinuationElement345,
																																		expr: &seqExpr{
																																			pos: position{line: 1638, col: 5, offset: 53882},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1638, col: 5, offset: 53882},
																																					label: "separator",
																																					expr: &actionExpr{
																																						pos: position{line: 1638, col: 16, offset: 53893},
																																						run: (*parser).callonListElementContinuationElement348,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1638, col: 16, offset: 53893},
																																							expr: &litMatcher{
																																								pos:        position{line: 1638, col: 17, offset: 53894},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 1641, col: 5, offset: 53951},
																																					run: (*parser).callonListElementContinuationElement351,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 1633, col: 35, offset: 53761},
																																	expr: &choiceExpr{
																																		pos: position{line: 3095, col: 8, offset: 100658},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3088, col: 12, offset: 100518},
																																				run: (*parser).callonListElementContinuationElement354,
																																				expr: &choiceExpr{
																																					pos: position{line: 3088, col: 13, offset: 100519},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 13, offset: 100519},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 20, offset: 100526},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 29, offset: 100535},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3092, col: 8, offset: 100608},
																																				expr: &anyMatcher{
																																					line: 3092, col: 9, offset: 100609,
																																				},
																																			},
																																		},
																																	},
																																},
																																&anyMatcher{
																																	line: 1633, col: 40, offset: 53766,
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 1638, col: 5, offset: 53882},
																													run: (*parser).callonListElementContinuationElement362,
																													expr: &seqExpr{
																														pos: position{line: 1638, col: 5, offset: 53882},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1638, col: 5, offset: 53882},
																																label: "separator",
																																expr: &actionExpr{
																																	pos: position{line: 1638, col: 16, offset: 53893},
																																	run: (*parser).callonListElementContinuationElement365,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1638, col: 16, offset: 53893},
																																		expr: &litMatcher{
																																			pos:        position{line: 1638, col: 17, offset: 53894},
																																			val:        ":",
																																			ignoreCase: false,
																																			want:       "\":\"",
																																		},
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1641, col: 5, offset: 53951},
																																run: (*parser).callonListElementContinuationElement368,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1457, col: 9, offset: 47925},
																										expr: &actionExpr{
																											pos: position{line: 729, col: 5, offset: 23561},
																											run: (*parser).callonListElementContinuationElement370,
																											expr: &seqExpr{
																												pos: position{line: 729, col: 5, offset: 23561},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 729, col: 5, offset: 23561},
																														expr: &charClassMatcher{
																															pos:        position{line: 2993, col: 13, offset: 97650},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 730, col: 5, offset: 23591},
																														label: "delimiter",
																														expr: &choiceExpr{
																															pos: position{line: 731, col: 9, offset: 23611},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 744, col: 26, offset: 24098},
																																	run: (*parser).callonListElementContinuationElement376,
																																	expr: &seqExpr{
																																		pos: position{line: 744, col: 26, offset: 24098},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 744, col: 26, offset: 24098},
																																				val:        "////",
																																				ignoreCase: false,
																																				want:       "\"////\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 744, col: 33, offset: 24105},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement380,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement383,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 748, col: 26, offset: 24212},
																																	run: (*parser).callonListElementContinuationElement390,
																																	expr: &seqExpr{
																																		pos: position{line: 748, col: 26, offset: 24212},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 748, col: 26, offset: 24212},
																																				val:        "====",
																																				ignoreCase: false,
																																				want:       "\"====\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 748, col: 33, offset: 24219},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement394,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement397,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 756, col: 26, offset: 24437},
																																	run: (*parser).callonListElementContinuationElement404,
																																	expr: &seqExpr{
																																		pos: position{line: 756, col: 26, offset: 24437},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 756, col: 26, offset: 24437},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 756, col: 32, offset: 24443},
																																				label: "language",
																																				expr: &actionExpr{
																																					pos: position{line: 760, col: 13, offset: 24573},
																																					run: (*parser).callonListElementContinuationElement408,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 760, col: 14, offset: 24574},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 760, col: 14, offset: 24574},
																																							val:        "[^\\r\\n ]",
																																							chars:      []rune{'\r', '\n', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 756, col: 52, offset: 24463},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement412,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement415,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 752, col: 25, offset: 24325},
																																	run: (*parser).callonListElementContinuationElement422,
																																	expr: &seqExpr{
																																		pos: position{line: 752, col: 25, offset: 24325},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 752, col: 25, offset: 24325},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 752, col: 31, offset: 24331},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement426,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement429,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 764, col: 26, offset: 24646},
																																	run: (*parser).callonListElementContinuationElement436,
																																	expr: &seqExpr{
																																		pos: position{line: 764, col: 26, offset: 24646},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 764, col: 26, offset: 24646},
																																				val:        "----",
																																				ignoreCase: false,
																																				want:       "\"----\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 764, col: 33, offset: 24653},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement440,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement443,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 768, col: 26, offset: 24760},
																																	run: (*parser).callonListElementContinuationElement450,
																																	expr: &seqExpr{
																																		pos: position{line: 768, col: 26, offset: 24760},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 768, col: 26, offset: 24760},
																																				val:        "....",
																																				ignoreCase: false,
																																				want:       "\"....\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 768, col: 33, offset: 24767},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement454,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement457,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 772, col: 30, offset: 24878},
																																	run: (*parser).callonListElementContinuationElement464,
																																	expr: &seqExpr{
																																		pos: position{line: 772, col: 30, offset: 24878},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 772, col: 30, offset: 24878},
																																				val:        "++++",
																																				ignoreCase: false,
																																				want:       "\"++++\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 772, col: 37, offset: 24885},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement468,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement471,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 776, col: 24, offset: 24994},
																																	run: (*parser).callonListElementContinuationElement478,
																																	expr: &seqExpr{
																																		pos: position{line: 776, col: 24, offset: 24994},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 776, col: 24, offset: 24994},
																																				val:        "____",
																																				ignoreCase: false,
																																				want:       "\"____\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 776, col: 31, offset: 25001},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement482,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement485,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 780, col: 26, offset: 25106},
																																	run: (*parser).callonListElementContinuationElement492,
																																	expr: &seqExpr{
																																		pos: position{line: 780, col: 26, offset: 25106},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 780, col: 26, offset: 25106},
																																				val:        "****",
																																				ignoreCase: false,
																																				want:       "\"****\"",
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 780, col: 33, offset: 25113},
																																				expr: &actionExpr{
																																					pos: position{line: 3079, col: 10, offset: 100334},
																																					run: (*parser).callonListElementContinuationElement496,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3079, col: 11, offset: 100335},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3095, col: 8, offset: 100658},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3088, col: 12, offset: 100518},
																																						run: (*parser).callonListElementContinuationElement499,
																																						expr: &choiceExpr{
																																							pos: position{line: 3088, col: 13, offset: 100519},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 13, offset: 100519},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 20, offset: 100526},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3088, col: 29, offset: 100535},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3092, col: 8, offset: 100608},
																																						expr: &anyMatcher{
																																							line: 3092, col: 9, offset: 100609,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1458, col: 9, offset: 47949},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 1458, col: 18, offset: 47958},
																											run: (*parser).callonListElementContinuationElement507,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1458, col: 18, offset: 47958},
																												expr: &charClassMatcher{
																													pos:        position{line: 1458, col: 18, offset: 47958},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3095, col: 8, offset: 100658},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3088, col: 12, offset: 100518},
																												run: (*parser).callonListElementContinuationElement511,
																												expr: &choiceExpr{
																													pos: position{line: 3088, col: 13, offset: 100519},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3088, col: 13, offset: 100519},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 20, offset: 100526},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 29, offset: 100535},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1661, col: 9, offset: 54549},
																run: (*parser).callonListElementContinuationElement518,
																expr: &seqExpr{
																	pos: position{line: 1661, col: 9, offset: 54549},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 3083, col: 11, offset: 100401},
																			run: (*parser).callonListElementContinuationElement520,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3083, col: 11, offset: 100401},
																				expr: &charClassMatcher{
																					pos:        position{line: 3083, col: 12, offset: 100402},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1662, col: 9, offset: 54601},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1662, col: 18, offset: 54610},
																				run: (*parser).callonListElementContinuationElement524,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1662, col: 18, offset: 54610},
																					expr: &charClassMatcher{
																						pos:        position{line: 1662, col: 18, offset: 54610},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement528,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1490, col: 5, offset: 48821},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1490, col: 16, offset: 48832},
								expr: &ruleRefExpr{
									pos:  position{line: 1490, col: 17, offset: 48833},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 48855},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1492, col: 9, offset: 48873},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 683, col: 14, offset: 22026},
										run: (*parser).callonListElementContinuationElement540,
										expr: &seqExpr{
											pos: position{line: 683, col: 14, offset: 22026},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 683, col: 14, offset: 22026},
													expr: &notExpr{
														pos: position{line: 3092, col: 8, offset: 100608},
														expr: &anyMatcher{
															line: 3092, col: 9, offset: 100609,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 683, col: 19, offset: 22031},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonListElementContinuationElement546,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement549,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1493, col: 11, offset: 48893},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 364, col: 19, offset: 11171},
										run: (*parser).callonListElementContinuationElement557,
										expr: &seqExpr{
											pos: position{line: 364, col: 19, offset: 11171},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 364, col: 19, offset: 11171},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 364, col: 24, offset: 11176},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonListElementContinuationElement561,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 364, col: 45, offset: 11197},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 364, col: 49, offset: 11201},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonListElementContinuationElement568,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement571,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 366, col: 5, offset: 11284},
										run: (*parser).callonListElementContinuationElement578,
										expr: &seqExpr{
											pos: position{line: 366, col: 5, offset: 11284},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 366, col: 5, offset: 11284},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 366, col: 9, offset: 11288},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonListElementContinuationElement582,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 366, col: 30, offset: 11309},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 366, col: 35, offset: 11314},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonListElementContinuationElement589,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement592,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 796, col: 5, offset: 25530},
										run: (*parser).callonListElementContinuationElement599,
										expr: &seqExpr{
											pos: position{line: 796, col: 5, offset: 25530},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 744, col: 26, offset: 24098},
													run: (*parser).callonListElementContinuationElement601,
													expr: &seqExpr{
														pos: position{line: 744, col: 26, offset: 24098},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 744, col: 26, offset: 24098},
																val:        "////",
																ignoreCase: false,
																want:       "\"////\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 744, col: 33, offset: 24105},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement605,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement608,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 797, col: 5, offset: 25561},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 808, col: 5, offset: 25885},
														expr: &actionExpr{
															pos: position{line: 808, col: 6, offset: 25886},
															run: (*parser).callonListElementContinuationElement617,
															expr: &seqExpr{
																pos: position{line: 808, col: 6, offset: 25886},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 808, col: 6, offset: 25886},
																		expr: &choiceExpr{
																			pos: position{line: 805, col: 29, offset: 25828},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 744, col: 26, offset: 24098},
																					run: (*parser).callonListElementContinuationElement621,
																					expr: &seqExpr{
																						pos: position{line: 744, col: 26, offset: 24098},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 744, col: 26, offset: 24098},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 744, col: 33, offset: 24105},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement625,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement628,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 809, col: 5, offset: 25916},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement638,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement644,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement648,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 798, col: 5, offset: 25595},
													expr: &choiceExpr{
														pos: position{line: 805, col: 29, offset: 25828},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 744, col: 26, offset: 24098},
																run: (*parser).callonListElementContinuationElement657,
																expr: &seqExpr{
																	pos: position{line: 744, col: 26, offset: 24098},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 744, col: 26, offset: 24098},
																			val:        "////",
																			ignoreCase: false,
																			want:       "\"////\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 744, col: 33, offset: 24105},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement661,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement664,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 817, col: 5, offset: 26069},
										run: (*parser).callonListElementContinuationElement673,
										expr: &seqExpr{
											pos: position{line: 817, col: 5, offset: 26069},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 748, col: 26, offset: 24212},
													run: (*parser).callonListElementContinuationElement675,
													expr: &seqExpr{
														pos: position{line: 748, col: 26, offset: 24212},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 748, col: 26, offset: 24212},
																val:        "====",
																ignoreCase: false,
																want:       "\"====\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 748, col: 33, offset: 24219},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement679,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement682,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 818, col: 5, offset: 26100},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 829, col: 4, offset: 26423},
														expr: &actionExpr{
															pos: position{line: 829, col: 5, offset: 26424},
															run: (*parser).callonListElementContinuationElement691,
															expr: &seqExpr{
																pos: position{line: 829, col: 5, offset: 26424},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 829, col: 5, offset: 26424},
																		expr: &choiceExpr{
																			pos: position{line: 826, col: 29, offset: 26367},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 748, col: 26, offset: 24212},
																					run: (*parser).callonListElementContinuationElement695,
																					expr: &seqExpr{
																						pos: position{line: 748, col: 26, offset: 24212},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 748, col: 26, offset: 24212},
																								val:        "====",
																								ignoreCase: false,
																								want:       "\"====\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 748, col: 33, offset: 24219},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement699,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement702,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 830, col: 5, offset: 26454},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement712,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement718,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement722,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 819, col: 5, offset: 26134},
													expr: &choiceExpr{
														pos: position{line: 826, col: 29, offset: 26367},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 748, col: 26, offset: 24212},
																run: (*parser).callonListElementContinuationElement731,
																expr: &seqExpr{
																	pos: position{line: 748, col: 26, offset: 24212},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 748, col: 26, offset: 24212},
																			val:        "====",
																			ignoreCase: false,
																			want:       "\"====\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 748, col: 33, offset: 24219},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement735,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement738,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 901, col: 5, offset: 28234},
										run: (*parser).callonListElementContinuationElement747,
										expr: &seqExpr{
											pos: position{line: 901, col: 5, offset: 28234},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 901, col: 5, offset: 28234},
													label: "delimiter",
													expr: &actionExpr{
														pos: position{line: 756, col: 26, offset: 24437},
														run: (*parser).callonListElementContinuationElement750,
														expr: &seqExpr{
															pos: position{line: 756, col: 26, offset: 24437},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 756, col: 26, offset: 24437},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&labeledExpr{
																	pos:   position{line: 756, col: 32, offset: 24443},
																	label: "language",
																	expr: &actionExpr{
																		pos: position{line: 760, col: 13, offset: 24573},
																		run: (*parser).callonListElementContinuationElement754,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 760, col: 14, offset: 24574},
																			expr: &charClassMatcher{
																				pos:        position{line: 760, col: 14, offset: 24574},
																				val:        "[^\\r\\n ]",
																				chars:      []rune{'\r', '\n', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 756, col: 52, offset: 24463},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonListElementContinuationElement758,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement761,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 902, col: 5, offset: 28280},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 916, col: 5, offset: 28797},
														expr: &actionExpr{
															pos: position{line: 916, col: 6, offset: 28798},
															run: (*parser).callonListElementContinuationElement770,
															expr: &seqExpr{
																pos: position{line: 916, col: 6, offset: 28798},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 916, col: 6, offset: 28798},
																		expr: &choiceExpr{
																			pos: position{line: 847, col: 28, offset: 26903},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 752, col: 25, offset: 24325},
																					run: (*parser).callonListElementContinuationElement774,
																					expr: &seqExpr{
																						pos: position{line: 752, col: 25, offset: 24325},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 752, col: 25, offset: 24325},
																								val:        "```",
																								ignoreCase: false,
																								want:       "\"```\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 752, col: 31, offset: 24331},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement778,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement781,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 917, col: 5, offset: 28833},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement791,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement797,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement801,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 903, col: 5, offset: 28319},
													expr: &choiceExpr{
														pos: position{line: 847, col: 28, offset: 26903},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 752, col: 25, offset: 24325},
																run: (*parser).callonListElementContinuationElement810,
																expr: &seqExpr{
																	pos: position{line: 752, col: 25, offset: 24325},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 752, col: 25, offset: 24325},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 752, col: 31, offset: 24331},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement814,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement817,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 838, col: 5, offset: 26607},
										run: (*parser).callonListElementContinuationElement826,
										expr: &seqExpr{
											pos: position{line: 838, col: 5, offset: 26607},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 752, col: 25, offset: 24325},
													run: (*parser).callonListElementContinuationElement828,
													expr: &seqExpr{
														pos: position{line: 752, col: 25, offset: 24325},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 752, col: 25, offset: 24325},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 752, col: 31, offset: 24331},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement832,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement835,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 839, col: 5, offset: 26637},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 850, col: 5, offset: 26958},
														expr: &actionExpr{
															pos: position{line: 850, col: 6, offset: 26959},
															run: (*parser).callonListElementContinuationElement844,
															expr: &seqExpr{
																pos: position{line: 850, col: 6, offset: 26959},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 850, col: 6, offset: 26959},
																		expr: &choiceExpr{
																			pos: position{line: 847, col: 28, offset: 26903},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 752, col: 25, offset: 24325},
																					run: (*parser).callonListElementContinuationElement848,
																					expr: &seqExpr{
																						pos: position{line: 752, col: 25, offset: 24325},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 752, col: 25, offset: 24325},
																								val:        "```",
																								ignoreCase: false,
																								want:       "\"```\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 752, col: 31, offset: 24331},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement852,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement855,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 851, col: 5, offset: 26988},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement865,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement871,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement875,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 840, col: 5, offset: 26670},
													expr: &choiceExpr{
														pos: position{line: 847, col: 28, offset: 26903},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 752, col: 25, offset: 24325},
																run: (*parser).callonListElementContinuationElement884,
																expr: &seqExpr{
																	pos: position{line: 752, col: 25, offset: 24325},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 752, col: 25, offset: 24325},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 752, col: 31, offset: 24331},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement888,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement891,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 859, col: 5, offset: 27143},
										run: (*parser).callonListElementContinuationElement900,
										expr: &seqExpr{
											pos: position{line: 859, col: 5, offset: 27143},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 764, col: 26, offset: 24646},
													run: (*parser).callonListElementContinuationElement902,
													expr: &seqExpr{
														pos: position{line: 764, col: 26, offset: 24646},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 764, col: 26, offset: 24646},
																val:        "----",
																ignoreCase: false,
																want:       "\"----\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 764, col: 33, offset: 24653},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement906,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement909,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 860, col: 5, offset: 27174},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 871, col: 5, offset: 27503},
														expr: &actionExpr{
															pos: position{line: 871, col: 6, offset: 27504},
															run: (*parser).callonListElementContinuationElement918,
															expr: &seqExpr{
																pos: position{line: 871, col: 6, offset: 27504},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 871, col: 6, offset: 27504},
																		expr: &choiceExpr{
																			pos: position{line: 868, col: 29, offset: 27446},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 764, col: 26, offset: 24646},
																					run: (*parser).callonListElementContinuationElement922,
																					expr: &seqExpr{
																						pos: position{line: 764, col: 26, offset: 24646},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 764, col: 26, offset: 24646},
																								val:        "----",
																								ignoreCase: false,
																								want:       "\"----\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 764, col: 33, offset: 24653},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement926,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement929,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 872, col: 5, offset: 27534},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement939,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement945,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement949,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 861, col: 5, offset: 27208},
													expr: &choiceExpr{
														pos: position{line: 868, col: 29, offset: 27446},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 764, col: 26, offset: 24646},
																run: (*parser).callonListElementContinuationElement958,
																expr: &seqExpr{
																	pos: position{line: 764, col: 26, offset: 24646},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 764, col: 26, offset: 24646},
																			val:        "----",
																			ignoreCase: false,
																			want:       "\"----\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 764, col: 33, offset: 24653},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement962,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement965,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 880, col: 5, offset: 27689},
										run: (*parser).callonListElementContinuationElement974,
										expr: &seqExpr{
											pos: position{line: 880, col: 5, offset: 27689},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 768, col: 26, offset: 24760},
													run: (*parser).callonListElementContinuationElement976,
													expr: &seqExpr{
														pos: position{line: 768, col: 26, offset: 24760},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 768, col: 26, offset: 24760},
																val:        "....",
																ignoreCase: false,
																want:       "\"....\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 768, col: 33, offset: 24767},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement980,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement983,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 881, col: 5, offset: 27720},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 892, col: 5, offset: 28044},
														expr: &actionExpr{
															pos: position{line: 892, col: 6, offset: 28045},
															run: (*parser).callonListElementContinuationElement992,
															expr: &seqExpr{
																pos: position{line: 892, col: 6, offset: 28045},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 892, col: 6, offset: 28045},
																		expr: &choiceExpr{
																			pos: position{line: 889, col: 29, offset: 27987},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 768, col: 26, offset: 24760},
																					run: (*parser).callonListElementContinuationElement996,
																					expr: &seqExpr{
																						pos: position{line: 768, col: 26, offset: 24760},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 768, col: 26, offset: 24760},
																								val:        "....",
																								ignoreCase: false,
																								want:       "\"....\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 768, col: 33, offset: 24767},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement1000,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1003,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 893, col: 5, offset: 28075},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement1013,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement1019,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement1023,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 882, col: 5, offset: 27754},
													expr: &choiceExpr{
														pos: position{line: 889, col: 29, offset: 27987},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 768, col: 26, offset: 24760},
																run: (*parser).callonListElementContinuationElement1032,
																expr: &seqExpr{
																	pos: position{line: 768, col: 26, offset: 24760},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 768, col: 26, offset: 24760},
																			val:        "....",
																			ignoreCase: false,
																			want:       "\"....\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 768, col: 33, offset: 24767},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement1036,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement1039,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 925, col: 5, offset: 29002},
										run: (*parser).callonListElementContinuationElement1048,
										expr: &seqExpr{
											pos: position{line: 925, col: 5, offset: 29002},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 925, col: 5, offset: 29002},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 932, col: 5, offset: 29261},
														run: (*parser).callonListElementContinuationElement1051,
														expr: &seqExpr{
															pos: position{line: 932, col: 5, offset: 29261},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 932, col: 5, offset: 29261},
																	expr: &actionExpr{
																		pos: position{line: 683, col: 14, offset: 22026},
																		run: (*parser).callonListElementContinuationElement1054,
																		expr: &seqExpr{
																			pos: position{line: 683, col: 14, offset: 22026},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 683, col: 14, offset: 22026},
																					expr: &notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 683, col: 19, offset: 22031},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonListElementContinuationElement1060,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3095, col: 8, offset: 100658},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonListElementContinuationElement1063,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 933, col: 5, offset: 29276},
																	val:        "> ",
																	ignoreCase: false,
																	want:       "\"> \"",
																},
																&labeledExpr{
																	pos:   position{line: 934, col: 5, offset: 29286},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 934, col: 14, offset: 29295},
																		run: (*parser).callonListElementContinuationElement1072,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 934, col: 15, offset: 29296},
																			expr: &charClassMatcher{
																				pos:        position{line: 934, col: 15, offset: 29296},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement1076,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 926, col: 5, offset: 29039},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 926, col: 16, offset: 29050},
														expr: &choiceExpr{
															pos: position{line: 926, col: 17, offset: 29051},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 932, col: 5, offset: 29261},
																	run: (*parser).callonListElementContinuationElement1086,
																	expr: &seqExpr{
																		pos: position{line: 932, col: 5, offset: 29261},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 932, col: 5, offset: 29261},
																				expr: &actionExpr{
																					pos: position{line: 683, col: 14, offset: 22026},
																					run: (*parser).callonListElementContinuationElement1089,
																					expr: &seqExpr{
																						pos: position{line: 683, col: 14, offset: 22026},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 683, col: 14, offset: 22026},
																								expr: &notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 683, col: 19, offset: 22031},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement1095,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1098,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 933, col: 5, offset: 29276},
																				val:        "> ",
																				ignoreCase: false,
																				want:       "\"> \"",
																			},
																			&labeledExpr{
																				pos:   position{line: 934, col: 5, offset: 29286},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 934, col: 14, offset: 29295},
																					run: (*parser).callonListElementContinuationElement1107,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 934, col: 15, offset: 29296},
																						expr: &charClassMatcher{
																							pos:        position{line: 934, col: 15, offset: 29296},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonListElementContinuationElement1111,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1757, col: 5, offset: 57678},
																	run: (*parser).callonListElementContinuationElement1118,
																	expr: &seqExpr{
																		pos: position{line: 1757, col: 5, offset: 57678},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1757, col: 5, offset: 57678},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1757, col: 14, offset: 57687},
																					run: (*parser).callonListElementContinuationElement1121,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1757, col: 14, offset: 57687},
																						expr: &charClassMatcher{
																							pos:        position{line: 1757, col: 14, offset: 57687},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1760, col: 5, offset: 57794},
																				run: (*parser).callonListElementContinuationElement1124,
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonListElementContinuationElement1126,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 951, col: 5, offset: 29654},
										run: (*parser).callonListElementContinuationElement1133,
										expr: &seqExpr{
											pos: position{line: 951, col: 5, offset: 29654},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 772, col: 30, offset: 24878},
													run: (*parser).callonListElementContinuationElement1135,
													expr: &seqExpr{
														pos: position{line: 772, col: 30, offset: 24878},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 772, col: 30, offset: 24878},
																val:        "++++",
																ignoreCase: false,
																want:       "\"++++\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 772, col: 37, offset: 24885},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement1139,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement1142,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 952, col: 5, offset: 29689},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 963, col: 5, offset: 30045},
														expr: &actionExpr{
															pos: position{line: 963, col: 6, offset: 30046},
															run: (*parser).callonListElementContinuationElement1151,
															expr: &seqExpr{
																pos: position{line: 963, col: 6, offset: 30046},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 963, col: 6, offset: 30046},
																		expr: &choiceExpr{
																			pos: position{line: 960, col: 33, offset: 29980},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 772, col: 30, offset: 24878},
																					run: (*parser).callonListElementContinuationElement1155,
																					expr: &seqExpr{
																						pos: position{line: 772, col: 30, offset: 24878},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 772, col: 30, offset: 24878},
																								val:        "++++",
																								ignoreCase: false,
																								want:       "\"++++\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 772, col: 37, offset: 24885},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement1159,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1162,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 964, col: 5, offset: 30080},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement1172,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement1178,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement1182,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 953, col: 5, offset: 29727},
													expr: &choiceExpr{
														pos: position{line: 960, col: 33, offset: 29980},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 772, col: 30, offset: 24878},
																run: (*parser).callonListElementContinuationElement1191,
																expr: &seqExpr{
																	pos: position{line: 772, col: 30, offset: 24878},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 772, col: 30, offset: 24878},
																			val:        "++++",
																			ignoreCase: false,
																			want:       "\"++++\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 772, col: 37, offset: 24885},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement1195,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement1198,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 972, col: 5, offset: 30231},
										run: (*parser).callonListElementContinuationElement1207,
										expr: &seqExpr{
											pos: position{line: 972, col: 5, offset: 30231},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 776, col: 24, offset: 24994},
													run: (*parser).callonListElementContinuationElement1209,
													expr: &seqExpr{
														pos: position{line: 776, col: 24, offset: 24994},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 776, col: 24, offset: 24994},
																val:        "____",
																ignoreCase: false,
																want:       "\"____\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 776, col: 31, offset: 25001},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement1213,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement1216,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 973, col: 5, offset: 30260},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 984, col: 4, offset: 30567},
														expr: &actionExpr{
															pos: position{line: 984, col: 5, offset: 30568},
															run: (*parser).callonListElementContinuationElement1225,
															expr: &seqExpr{
																pos: position{line: 984, col: 5, offset: 30568},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 984, col: 5, offset: 30568},
																		expr: &choiceExpr{
																			pos: position{line: 981, col: 27, offset: 30515},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 776, col: 24, offset: 24994},
																					run: (*parser).callonListElementContinuationElement1229,
																					expr: &seqExpr{
																						pos: position{line: 776, col: 24, offset: 24994},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 776, col: 24, offset: 24994},
																								val:        "____",
																								ignoreCase: false,
																								want:       "\"____\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 776, col: 31, offset: 25001},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement1233,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1236,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 985, col: 5, offset: 30596},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement1246,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement1252,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement1256,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 974, col: 5, offset: 30292},
													expr: &choiceExpr{
														pos: position{line: 981, col: 27, offset: 30515},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 776, col: 24, offset: 24994},
																run: (*parser).callonListElementContinuationElement1265,
																expr: &seqExpr{
																	pos: position{line: 776, col: 24, offset: 24994},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 776, col: 24, offset: 24994},
																			val:        "____",
																			ignoreCase: false,
																			want:       "\"____\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 776, col: 31, offset: 25001},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement1269,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement1272,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 993, col: 5, offset: 30751},
										run: (*parser).callonListElementContinuationElement1281,
										expr: &seqExpr{
											pos: position{line: 993, col: 5, offset: 30751},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 780, col: 26, offset: 25106},
													run: (*parser).callonListElementContinuationElement1283,
													expr: &seqExpr{
														pos: position{line: 780, col: 26, offset: 25106},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 780, col: 26, offset: 25106},
																val:        "****",
																ignoreCase: false,
																want:       "\"****\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 780, col: 33, offset: 25113},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonListElementContinuationElement1287,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonListElementContinuationElement1290,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 994, col: 5, offset: 30782},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1005, col: 4, offset: 31107},
														expr: &actionExpr{
															pos: position{line: 1005, col: 5, offset: 31108},
															run: (*parser).callonListElementContinuationElement1299,
															expr: &seqExpr{
																pos: position{line: 1005, col: 5, offset: 31108},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1005, col: 5, offset: 31108},
																		expr: &choiceExpr{
																			pos: position{line: 1002, col: 29, offset: 31050},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 780, col: 26, offset: 25106},
																					run: (*parser).callonListElementContinuationElement1303,
																					expr: &seqExpr{
																						pos: position{line: 780, col: 26, offset: 25106},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 780, col: 26, offset: 25106},
																								val:        "****",
																								ignoreCase: false,
																								want:       "\"****\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 780, col: 33, offset: 25113},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement1307,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1310,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1006, col: 5, offset: 31138},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 785, col: 5, offset: 25225},
																			run: (*parser).callonListElementContinuationElement1320,
																			expr: &seqExpr{
																				pos: position{line: 785, col: 5, offset: 25225},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 785, col: 5, offset: 25225},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 786, col: 5, offset: 25298},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 786, col: 14, offset: 25307},
																							run: (*parser).callonListElementContinuationElement1326,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 786, col: 14, offset: 25307},
																								expr: &charClassMatcher{
																									pos:        position{line: 786, col: 14, offset: 25307},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement1330,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 995, col: 5, offset: 30816},
													expr: &choiceExpr{
														pos: position{line: 1002, col: 29, offset: 31050},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 780, col: 26, offset: 25106},
																run: (*parser).callonListElementContinuationElement1339,
																expr: &seqExpr{
																	pos: position{line: 780, col: 26, offset: 25106},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 780, col: 26, offset: 25106},
																			val:        "****",
																			ignoreCase: false,
																			want:       "\"****\"",
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 780, col: 33, offset: 25113},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonListElementContinuationElement1343,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement1346,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2948, col: 18, offset: 96121},
										run: (*parser).callonListElementContinuationElement1355,
										expr: &seqExpr{
											pos: position{line: 2948, col: 18, offset: 96121},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2949, col: 9, offset: 96131},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2949, col: 9, offset: 96131},
															val:        "'''",
															ignoreCase: false,
															want:       "\"'''\"",
														},
														&litMatcher{
															pos:        position{line: 2950, col: 11, offset: 96167},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2950, col: 19, offset: 96175},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2950, col: 29, offset: 96185},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2950, col: 37, offset: 96193},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2950, col: 47, offset: 96203},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2950, col: 55, offset: 96211},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2951, col: 11, offset: 96269},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonListElementContinuationElement1366,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement1369,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement1377,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1497, col: 11, offset: 49035},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 2846, col: 5, offset: 93250},
										run: (*parser).callonListElementContinuationElement1385,
										expr: &seqExpr{
											pos: position{line: 2846, col: 5, offset: 93250},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2854, col: 19, offset: 93427},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2854, col: 26, offset: 93434},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonListElementContinuationElement1389,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement1392,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2847, col: 5, offset: 93274},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2847, col: 12, offset: 93281},
														expr: &actionExpr{
															pos: position{line: 2862, col: 5, offset: 93594},
															run: (*parser).callonListElementContinuationElement1401,
															expr: &seqExpr{
																pos: position{line: 2862, col: 5, offset: 93594},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2862, col: 5, offset: 93594},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2862, col: 11, offset: 93600},
																			expr: &actionExpr{
																				pos: position{line: 2868, col: 5, offset: 93717},
																				run: (*parser).callonListElementContinuationElement1405,
																				expr: &seqExpr{
																					pos: position{line: 2868, col: 5, offset: 93717},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2868, col: 5, offset: 93717},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2868, col: 9, offset: 93721},
																							expr: &actionExpr{
																								pos: position{line: 3079, col: 10, offset: 100334},
																								run: (*parser).callonListElementContinuationElement1409,
																								expr: &charClassMatcher{
																									pos:        position{line: 3079, col: 11, offset: 100335},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2869, col: 5, offset: 93733},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2869, col: 14, offset: 93742},
																								expr: &actionExpr{
																									pos: position{line: 2901, col: 5, offset: 94530},
																									run: (*parser).callonListElementContinuationElement1413,
																									expr: &labeledExpr{
																										pos:   position{line: 2901, col: 5, offset: 94530},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2901, col: 14, offset: 94539},
																											run: (*parser).callonListElementContinuationElement1415,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2901, col: 14, offset: 94539},
																												expr: &charClassMatcher{
																													pos:        position{line: 2901, col: 14, offset: 94539},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonListElementContinuationElement1419,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2863, col: 5, offset: 93622},
																		expr: &actionExpr{
																			pos: position{line: 683, col: 14, offset: 22026},
																			run: (*parser).callonListElementContinuationElement1427,
																			expr: &seqExpr{
																				pos: position{line: 683, col: 14, offset: 22026},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 683, col: 14, offset: 22026},
																						expr: &notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 683, col: 19, offset: 22031},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonListElementContinuationElement1433,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3095, col: 8, offset: 100658},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3088, col: 12, offset: 100518},
																								run: (*parser).callonListElementContinuationElement1436,
																								expr: &choiceExpr{
																									pos: position{line: 3088, col: 13, offset: 100519},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3088, col: 13, offset: 100519},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 20, offset: 100526},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3088, col: 29, offset: 100535},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3092, col: 8, offset: 100608},
																								expr: &anyMatcher{
																									line: 3092, col: 9, offset: 100609,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2848, col: 5, offset: 93300},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2848, col: 10, offset: 93305},
														expr: &choiceExpr{
															pos: position{line: 2873, col: 13, offset: 93839},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2883, col: 5, offset: 94058},
																	run: (*parser).callonListElementContinuationElement1446,
																	expr: &seqExpr{
																		pos: position{line: 2883, col: 5, offset: 94058},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2883, col: 5, offset: 94058},
																				expr: &choiceExpr{
																					pos: position{line: 2858, col: 22, offset: 93507},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2854, col: 19, offset: 93427},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2854, col: 19, offset: 93427},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2854, col: 26, offset: 93434},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonListElementContinuationElement1453,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonListElementContinuationElement1456,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2884, col: 5, offset: 94081},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2884, col: 11, offset: 94087},
																					expr: &actionExpr{
																						pos: position{line: 2884, col: 12, offset: 94088},
																						run: (*parser).callonListElementContinuationElement1467,
																						expr: &seqExpr{
																							pos: position{line: 2884, col: 12, offset: 94088},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2884, col: 12, offset: 94088},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2893, col: 5, offset: 94329},
																										run: (*parser).callonListElementContinuationElement1470,
																										expr: &seqExpr{
																											pos: position{line: 2893, col: 5, offset: 94329},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2893, col: 5, offset: 94329},
																													expr: &choiceExpr{
																														pos: position{line: 2858, col: 22, offset: 93507},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2854, col: 19, offset: 93427},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2854, col: 19, offset: 93427},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2854, col: 26, offset: 93434},
																																		expr: &actionExpr{
																																			pos: position{line: 3079, col: 10, offset: 100334},
																																			run: (*parser).callonListElementContinuationElement1477,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3079, col: 11, offset: 100335},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3095, col: 8, offset: 100658},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3088, col: 12, offset: 100518},
																																				run: (*parser).callonListElementContinuationElement1480,
																																				expr: &choiceExpr{
																																					pos: position{line: 3088, col: 13, offset: 100519},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 13, offset: 100519},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 20, offset: 100526},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3088, col: 29, offset: 100535},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3092, col: 8, offset: 100608},
																																				expr: &anyMatcher{
																																					line: 3092, col: 9, offset: 100609,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3092, col: 8, offset: 100608},
																																expr: &anyMatcher{
																																	line: 3092, col: 9, offset: 100609,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2894, col: 5, offset: 94352},
																													expr: &actionExpr{
																														pos: position{line: 683, col: 14, offset: 22026},
																														run: (*parser).callonListElementContinuationElement1490,
																														expr: &seqExpr{
																															pos: position{line: 683, col: 14, offset: 22026},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 683, col: 14, offset: 22026},
																																	expr: &notExpr{
																																		pos: position{line: 3092, col: 8, offset: 100608},
																																		expr: &anyMatcher{
																																			line: 3092, col: 9, offset: 100609,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 683, col: 19, offset: 22031},
																																	expr: &actionExpr{
																																		pos: position{line: 3079, col: 10, offset: 100334},
																																		run: (*parser).callonListElementContinuationElement1496,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3079, col: 11, offset: 100335},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 3095, col: 8, offset: 100658},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 3088, col: 12, offset: 100518},
																																			run: (*parser).callonListElementContinuationElement1499,
																																			expr: &choiceExpr{
																																				pos: position{line: 3088, col: 13, offset: 100519},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 3088, col: 13, offset: 100519},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 3088, col: 20, offset: 100526},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 3088, col: 29, offset: 100535},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 3092, col: 8, offset: 100608},
																																			expr: &anyMatcher{
																																				line: 3092, col: 9, offset: 100609,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2895, col: 5, offset: 94367},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2895, col: 9, offset: 94371},
																													expr: &actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonListElementContinuationElement1508,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2895, col: 16, offset: 94378},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2895, col: 25, offset: 94387},
																														expr: &actionExpr{
																															pos: position{line: 2901, col: 5, offset: 94530},
																															run: (*parser).callonListElementContinuationElement1512,
																															expr: &labeledExpr{
																																pos:   position{line: 2901, col: 5, offset: 94530},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2901, col: 14, offset: 94539},
																																	run: (*parser).callonListElementContinuationElement1514,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2901, col: 14, offset: 94539},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2901, col: 14, offset: 94539},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonListElementContinuationElement1518,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2887, col: 6, offset: 94150},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2887, col: 6, offset: 94150},
																						expr: &actionExpr{
																							pos: position{line: 683, col: 14, offset: 22026},
																							run: (*parser).callonListElementContinuationElement1527,
																							expr: &seqExpr{
																								pos: position{line: 683, col: 14, offset: 22026},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 683, col: 14, offset: 22026},
																										expr: &notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 683, col: 19, offset: 22031},
																										expr: &actionExpr{
																											pos: position{line: 3079, col: 10, offset: 100334},
																											run: (*parser).callonListElementContinuationElement1533,
																											expr: &charClassMatcher{
																												pos:        position{line: 3079, col: 11, offset: 100335},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3095, col: 8, offset: 100658},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3088, col: 12, offset: 100518},
																												run: (*parser).callonListElementContinuationElement1536,
																												expr: &choiceExpr{
																													pos: position{line: 3088, col: 13, offset: 100519},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3088, col: 13, offset: 100519},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 20, offset: 100526},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3088, col: 29, offset: 100535},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2887, col: 19, offset: 94163},
																						expr: &choiceExpr{
																							pos: position{line: 2858, col: 22, offset: 93507},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2854, col: 19, offset: 93427},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2854, col: 19, offset: 93427},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2854, col: 26, offset: 93434},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonListElementContinuationElement1548,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3095, col: 8, offset: 100658},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3088, col: 12, offset: 100518},
																													run: (*parser).callonListElementContinuationElement1551,
																													expr: &choiceExpr{
																														pos: position{line: 3088, col: 13, offset: 100519},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3088, col: 13, offset: 100519},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 20, offset: 100526},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3088, col: 29, offset: 100535},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3092, col: 8, offset: 100608},
																													expr: &anyMatcher{
																														line: 3092, col: 9, offset: 100609,
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2876, col: 5, offset: 93906},
																	run: (*parser).callonListElementContinuationElement1560,
																	expr: &seqExpr{
																		pos: position{line: 2876, col: 5, offset: 93906},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2876, col: 5, offset: 93906},
																				expr: &choiceExpr{
																					pos: position{line: 2858, col: 22, offset: 93507},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2854, col: 19, offset: 93427},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2854, col: 19, offset: 93427},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2854, col: 26, offset: 93434},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonListElementContinuationElement1567,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3095, col: 8, offset: 100658},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3088, col: 12, offset: 100518},
																											run: (*parser).callonListElementContinuationElement1570,
																											expr: &choiceExpr{
																												pos: position{line: 3088, col: 13, offset: 100519},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3088, col: 13, offset: 100519},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 20, offset: 100526},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3088, col: 29, offset: 100535},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3092, col: 8, offset: 100608},
																											expr: &anyMatcher{
																												line: 3092, col: 9, offset: 100609,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2877, col: 5, offset: 93929},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2877, col: 11, offset: 93935},
																					expr: &actionExpr{
																						pos: position{line: 2893, col: 5, offset: 94329},
																						run: (*parser).callonListElementContinuationElement1581,
																						expr: &seqExpr{
																							pos: position{line: 2893, col: 5, offset: 94329},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2893, col: 5, offset: 94329},
																									expr: &choiceExpr{
																										pos: position{line: 2858, col: 22, offset: 93507},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2854, col: 19, offset: 93427},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2854, col: 19, offset: 93427},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2854, col: 26, offset: 93434},
																														expr: &actionExpr{
																															pos: position{line: 3079, col: 10, offset: 100334},
																															run: (*parser).callonListElementContinuationElement1588,
																															expr: &charClassMatcher{
																																pos:        position{line: 3079, col: 11, offset: 100335},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3095, col: 8, offset: 100658},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3088, col: 12, offset: 100518},
																																run: (*parser).callonListElementContinuationElement1591,
																																expr: &choiceExpr{
																																	pos: position{line: 3088, col: 13, offset: 100519},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 13, offset: 100519},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 20, offset: 100526},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3088, col: 29, offset: 100535},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3092, col: 8, offset: 100608},
																																expr: &anyMatcher{
																																	line: 3092, col: 9, offset: 100609,
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3092, col: 8, offset: 100608},
																												expr: &anyMatcher{
																													line: 3092, col: 9, offset: 100609,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2894, col: 5, offset: 94352},
																									expr: &actionExpr{
																										pos: position{line: 683, col: 14, offset: 22026},
																										run: (*parser).callonListElementContinuationElement1601,
																										expr: &seqExpr{
																											pos: position{line: 683, col: 14, offset: 22026},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 683, col: 14, offset: 22026},
																													expr: &notExpr{
																														pos: position{line: 3092, col: 8, offset: 100608},
																														expr: &anyMatcher{
																															line: 3092, col: 9, offset: 100609,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 683, col: 19, offset: 22031},
																													expr: &actionExpr{
																														pos: position{line: 3079, col: 10, offset: 100334},
																														run: (*parser).callonListElementContinuationElement1607,
																														expr: &charClassMatcher{
																															pos:        position{line: 3079, col: 11, offset: 100335},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 3095, col: 8, offset: 100658},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 3088, col: 12, offset: 100518},
																															run: (*parser).callonListElementContinuationElement1610,
																															expr: &choiceExpr{
																																pos: position{line: 3088, col: 13, offset: 100519},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 13, offset: 100519},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 20, offset: 100526},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3088, col: 29, offset: 100535},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3092, col: 8, offset: 100608},
																															expr: &anyMatcher{
																																line: 3092, col: 9, offset: 100609,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2895, col: 5, offset: 94367},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2895, col: 9, offset: 94371},
																									expr: &actionExpr{
																										pos: position{line: 3079, col: 10, offset: 100334},
																										run: (*parser).callonListElementContinuationElement1619,
																										expr: &charClassMatcher{
																											pos:        position{line: 3079, col: 11, offset: 100335},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2895, col: 16, offset: 94378},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2895, col: 25, offset: 94387},
																										expr: &actionExpr{
																											pos: position{line: 2901, col: 5, offset: 94530},
																											run: (*parser).callonListElementContinuationElement1623,
																											expr: &labeledExpr{
																												pos:   position{line: 2901, col: 5, offset: 94530},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2901, col: 14, offset: 94539},
																													run: (*parser).callonListElementContinuationElement1625,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2901, col: 14, offset: 94539},
																														expr: &charClassMatcher{
																															pos:        position{line: 2901, col: 14, offset: 94539},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonListElementContinuationElement1629,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2878, col: 5, offset: 93956},
																				expr: &actionExpr{
																					pos: position{line: 683, col: 14, offset: 22026},
																					run: (*parser).callonListElementContinuationElement1637,
																					expr: &seqExpr{
																						pos: position{line: 683, col: 14, offset: 22026},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 683, col: 14, offset: 22026},
																								expr: &notExpr{
																									pos: position{line: 3092, col: 8, offset: 100608},
																									expr: &anyMatcher{
																										line: 3092, col: 9, offset: 100609,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 683, col: 19, offset: 22031},
																								expr: &actionExpr{
																									pos: position{line: 3079, col: 10, offset: 100334},
																									run: (*parser).callonListElementContinuationElement1643,
																									expr: &charClassMatcher{
																										pos:        position{line: 3079, col: 11, offset: 100335},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1646,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2858, col: 22, offset: 93507},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2854, col: 19, offset: 93427},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2854, col: 19, offset: 93427},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2854, col: 26, offset: 93434},
																	expr: &actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonListElementContinuationElement1657,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement1660,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2781, col: 22, offset: 91184},
										run: (*parser).callonListElementContinuationElement1669,
										expr: &seqExpr{
											pos: position{line: 2781, col: 22, offset: 91184},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2786, col: 31, offset: 91405},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2786, col: 36, offset: 91410},
													expr: &litMatcher{
														pos:        position{line: 2786, col: 37, offset: 91411},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2781, col: 49, offset: 91211},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2788, col: 29, offset: 91446},
														run: (*parser).callonListElementContinuationElement1675,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2788, col: 29, offset: 91446},
															expr: &charClassMatcher{
																pos:        position{line: 2788, col: 29, offset: 91446},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement1679,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1745, col: 5, offset: 57302},
										run: (*parser).callonListElementContinuationElement1686,
										expr: &seqExpr{
											pos: position{line: 1745, col: 5, offset: 57302},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1745, col: 5, offset: 57302},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 293, col: 19, offset: 9062},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 293, col: 19, offset: 9062},
																run: (*parser).callonListElementContinuationElement1690,
																expr: &litMatcher{
																	pos:        position{line: 293, col: 19, offset: 9062},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 295, col: 5, offset: 9100},
																run: (*parser).callonListElementContinuationElement1692,
																expr: &litMatcher{
																	pos:        position{line: 295, col: 5, offset: 9100},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 297, col: 5, offset: 9140},
																run: (*parser).callonListElementContinuationElement1694,
																expr: &litMatcher{
																	pos:        position{line: 297, col: 5, offset: 9140},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 299, col: 5, offset: 9190},
																run: (*parser).callonListElementContinuationElement1696,
																expr: &litMatcher{
																	pos:        position{line: 299, col: 5, offset: 9190},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 301, col: 5, offset: 9236},
																run: (*parser).callonListElementContinuationElement1698,
																expr: &litMatcher{
																	pos:        position{line: 301, col: 5, offset: 9236},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1745, col: 27, offset: 57324},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1746, col: 5, offset: 57334},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1757, col: 5, offset: 57678},
														run: (*parser).callonListElementContinuationElement1702,
														expr: &seqExpr{
															pos: position{line: 1757, col: 5, offset: 57678},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1757, col: 5, offset: 57678},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1757, col: 14, offset: 57687},
																		run: (*parser).callonListElementContinuationElement1705,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1757, col: 14, offset: 57687},
																			expr: &charClassMatcher{
																				pos:        position{line: 1757, col: 14, offset: 57687},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1760, col: 5, offset: 57794},
																	run: (*parser).callonListElementContinuationElement1708,
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement1710,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1747, col: 5, offset: 57368},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1747, col: 16, offset: 57379},
														expr: &actionExpr{
															pos: position{line: 1748, col: 9, offset: 57389},
															run: (*parser).callonListElementContinuationElement1719,
															expr: &seqExpr{
																pos: position{line: 1748, col: 9, offset: 57389},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1748, col: 9, offset: 57389},
																		expr: &seqExpr{
																			pos: position{line: 1485, col: 34, offset: 48680},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1485, col: 34, offset: 48680},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1485, col: 38, offset: 48684},
																					expr: &actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonListElementContinuationElement1725,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonListElementContinuationElement1727,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1749, col: 9, offset: 57428},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1749, col: 15, offset: 57434},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2781, col: 22, offset: 91184},
																					run: (*parser).callonListElementContinuationElement1734,
																					expr: &seqExpr{
																						pos: position{line: 2781, col: 22, offset: 91184},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2786, col: 31, offset: 91405},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2786, col: 36, offset: 91410},
																								expr: &litMatcher{
																									pos:        position{line: 2786, col: 37, offset: 91411},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2781, col: 49, offset: 91211},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2788, col: 29, offset: 91446},
																									run: (*parser).callonListElementContinuationElement1740,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2788, col: 29, offset: 91446},
																										expr: &charClassMatcher{
																											pos:        position{line: 2788, col: 29, offset: 91446},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1744,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1757, col: 5, offset: 57678},
																					run: (*parser).callonListElementContinuationElement1751,
																					expr: &seqExpr{
																						pos: position{line: 1757, col: 5, offset: 57678},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1757, col: 5, offset: 57678},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1757, col: 14, offset: 57687},
																									run: (*parser).callonListElementContinuationElement1754,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1757, col: 14, offset: 57687},
																										expr: &charClassMatcher{
																											pos:        position{line: 1757, col: 14, offset: 57687},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1760, col: 5, offset: 57794},
																								run: (*parser).callonListElementContinuationElement1757,
																							},
																							&choiceExpr{
																								pos: position{line: 3095, col: 8, offset: 100658},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3088, col: 12, offset: 100518},
																										run: (*parser).callonListElementContinuationElement1759,
																										expr: &choiceExpr{
																											pos: position{line: 3088, col: 13, offset: 100519},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3088, col: 13, offset: 100519},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 20, offset: 100526},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3088, col: 29, offset: 100535},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3092, col: 8, offset: 100608},
																										expr: &anyMatcher{
																											line: 3092, col: 9, offset: 100609,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1768, col: 5, offset: 57960},
										run: (*parser).callonListElementContinuationElement1766,
										expr: &seqExpr{
											pos: position{line: 1768, col: 5, offset: 57960},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1768, col: 5, offset: 57960},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1775, col: 5, offset: 58245},
														run: (*parser).callonListElementContinuationElement1769,
														expr: &seqExpr{
															pos: position{line: 1775, col: 5, offset: 58245},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1775, col: 5, offset: 58245},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1775, col: 14, offset: 58254},
																		run: (*parser).callonListElementContinuationElement1772,
																		expr: &seqExpr{
																			pos: position{line: 1775, col: 14, offset: 58254},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3083, col: 11, offset: 100401},
																					run: (*parser).callonListElementContinuationElement1774,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3083, col: 11, offset: 100401},
																						expr: &charClassMatcher{
																							pos:        position{line: 3083, col: 12, offset: 100402},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1775, col: 21, offset: 58261},
																					expr: &charClassMatcher{
																						pos:        position{line: 1775, col: 21, offset: 58261},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1778, col: 5, offset: 58318},
																	run: (*parser).callonListElementContinuationElement1779,
																},
																&choiceExpr{
																	pos: position{line: 3095, col: 8, offset: 100658},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3088, col: 12, offset: 100518},
																			run: (*parser).callonListElementContinuationElement1781,
																			expr: &choiceExpr{
																				pos: position{line: 3088, col: 13, offset: 100519},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3088, col: 13, offset: 100519},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 20, offset: 100526},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3088, col: 29, offset: 100535},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3092, col: 8, offset: 100608},
																			expr: &anyMatcher{
																				line: 3092, col: 9, offset: 100609,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1769, col: 5, offset: 58001},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1769, col: 16, offset: 58012},
														expr: &choiceExpr{
															pos: position{line: 1769, col: 17, offset: 58013},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2781, col: 22, offset: 91184},
																	run: (*parser).callonListElementContinuationElement1791,
																	expr: &seqExpr{
																		pos: position{line: 2781, col: 22, offset: 91184},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2786, col: 31, offset: 91405},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2786, col: 36, offset: 91410},
																				expr: &litMatcher{
																					pos:        position{line: 2786, col: 37, offset: 91411},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2781, col: 49, offset: 91211},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2788, col: 29, offset: 91446},
																					run: (*parser).callonListElementContinuationElement1797,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2788, col: 29, offset: 91446},
																						expr: &charClassMatcher{
																							pos:        position{line: 2788, col: 29, offset: 91446},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonListElementContinuationElement1801,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1757, col: 5, offset: 57678},
																	run: (*parser).callonListElementContinuationElement1808,
																	expr: &seqExpr{
																		pos: position{line: 1757, col: 5, offset: 57678},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1757, col: 5, offset: 57678},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1757, col: 14, offset: 57687},
																					run: (*parser).callonListElementContinuationElement1811,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1757, col: 14, offset: 57687},
																						expr: &charClassMatcher{
																							pos:        position{line: 1757, col: 14, offset: 57687},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1760, col: 5, offset: 57794},
																				run: (*parser).callonListElementContinuationElement1814,
																			},
																			&choiceExpr{
																				pos: position{line: 3095, col: 8, offset: 100658},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3088, col: 12, offset: 100518},
																						run: (*parser).callonListElementContinuationElement1816,
																						expr: &choiceExpr{
																							pos: position{line: 3088, col: 13, offset: 100519},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3088, col: 13, offset: 100519},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 20, offset: 100526},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3088, col: 29, offset: 100535},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1515, col: 5, offset: 49661},
										run: (*parser).callonListElementContinuationElement1823,
										expr: &seqExpr{
											pos: position{line: 1515, col: 5, offset: 49661},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1515, col: 5, offset: 49661},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1515, col: 14, offset: 49670},
														run: (*parser).callonListElementContinuationElement1826,
														expr: &oneOrMoreExpr{
															pos: position{line: 1515, col: 14, offset: 49670},
															expr: &charClassMatcher{
																pos:        position{line: 1515, col: 14, offset: 49670},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3095, col: 8, offset: 100658},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonListElementContinuationElement1830,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3092, col: 8, offset: 100608},
															expr: &anyMatcher{
																line: 3092, col: 9, offset: 100609,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1673, col: 1, offset: 54843},
			expr: &actionExpr{
				pos: position{line: 1675, col: 5, offset: 54921},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1675, col: 5, offset: 54921},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1675, col: 5, offset: 54921},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1678, col: 5, offset: 54988},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 9, offset: 54992},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1678, col: 14, offset: 54997},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1678, col: 14, offset: 54997},
									expr: &charClassMatcher{
										pos:        position{line: 1678, col: 14, offset: 54997},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1678, col: 62, offset: 55045},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1678, col: 66, offset: 55049},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1678, col: 73, offset: 55056},
							expr: &choiceExpr{
								pos: position{line: 1678, col: 75, offset: 55058},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 3088, col: 12, offset: 100518},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 3088, col: 13, offset: 100519},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 3088, col: 13, offset: 100519},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 3088, col: 20, offset: 100526},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 3088, col: 29, offset: 100535},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 3092, col: 8, offset: 100608},
										expr: &anyMatcher{
											line: 3092, col: 9, offset: 100609,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1678, col: 81, offset: 55064},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1704, col: 1, offset: 55925},
			expr: &actionExpr{
				pos: position{line: 1705, col: 5, offset: 55951},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 5, offset: 55951},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1705, col: 5, offset: 55951},
							expr: &charClassMatcher{
								pos:        position{line: 2993, col: 13, offset: 97650},
								val:        "[0-9\\pL]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1706, col: 5, offset: 56062},
							expr: &notExpr{
								pos: position{line: 1706, col: 7, offset: 56064},
								expr: &actionExpr{
									pos: position{line: 1533, col: 5, offset: 50154},
									run: (*parser).callonShortcutParagraph7,
									expr: &seqExpr{
										pos: position{line: 1533, col: 5, offset: 50154},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1533, col: 5, offset: 50154},
												expr: &actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonShortcutParagraph10,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1533, col: 12, offset: 50161},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1535, col: 9, offset: 50224},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1535, col: 9, offset: 50224},
															run: (*parser).callonShortcutParagraph14,
															expr: &seqExpr{
																pos: position{line: 1535, col: 9, offset: 50224},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1535, col: 9, offset: 50224},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1535, col: 16, offset: 50231},
																			run: (*parser).callonShortcutParagraph17,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1535, col: 16, offset: 50231},
																				expr: &litMatcher{
																					pos:        position{line: 1535, col: 17, offset: 50232},
																					val:        ".",
																					ignoreCase: false,
																					want:       "\".\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1539, col: 9, offset: 50332},
																		run: (*parser).callonShortcutParagraph20,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1558, col: 11, offset: 51049},
															run: (*parser).callonShortcutParagraph21,
															expr: &seqExpr{
																pos: position{line: 1558, col: 11, offset: 51049},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1558, col: 11, offset: 51049},
																		expr: &charClassMatcher{
																			pos:        position{line: 1558, col: 12, offset: 51050},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1558, col: 20, offset: 51058},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1560, col: 13, offset: 51175},
															run: (*parser).callonShortcutParagraph26,
															expr: &seqExpr{
																pos: position{line: 1560, col: 13, offset: 51175},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1560, col: 14, offset: 51176},
																		val:        "[a-z]",
																		ranges:     []rune{'a', 'z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1560, col: 21, offset: 51183},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1562, col: 13, offset: 51303},
															run: (*parser).callonShortcutParagraph30,
															expr: &seqExpr{
																pos: position{line: 1562, col: 13, offset: 51303},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1562, col: 14, offset: 51304},
																		val:        "[A-Z]",
																		ranges:     []rune{'A', 'Z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1562, col: 21, offset: 51311},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1564, col: 13, offset: 51431},
															run: (*parser).callonShortcutParagraph34,
															expr: &seqExpr{
																pos: position{line: 1564, col: 13, offset: 51431},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1564, col: 13, offset: 51431},
																		expr: &charClassMatcher{
																			pos:        position{line: 1564, col: 14, offset: 51432},
																			val:        "[ivxdlcm]",
																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1564, col: 26, offset: 51444},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1566, col: 13, offset: 51564},
															run: (*parser).callonShortcutParagraph39,
															expr: &seqExpr{
																pos: position{line: 1566, col: 13, offset: 51564},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1566, col: 13, offset: 51564},
																		expr: &charClassMatcher{
																			pos:        position{line: 1566, col: 14, offset: 51565},
																			val:        "[IVXDLCM]",
																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1566, col: 26, offset: 51577},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3083, col: 11, offset: 100401},
												run: (*parser).callonShortcutParagraph44,
												expr: &oneOrMoreExpr{
													pos: position{line: 3083, col: 11, offset: 100401},
													expr: &charClassMatcher{
														pos:        position{line: 3083, col: 12, offset: 100402},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1707, col: 5, offset: 56095},
							expr: &notExpr{
								pos: position{line: 1707, col: 7, offset: 56097},
								expr: &actionExpr{
									pos: position{line: 1583, col: 5, offset: 52116},
									run: (*parser).callonShortcutParagraph49,
									expr: &seqExpr{
										pos: position{line: 1583, col: 5, offset: 52116},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1583, col: 5, offset: 52116},
												expr: &actionExpr{
													pos: position{line: 3079, col: 10, offset: 100334},
													run: (*parser).callonShortcutParagraph52,
													expr: &charClassMatcher{
														pos:        position{line: 3079, col: 11, offset: 100335},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1583, col: 12, offset: 52123},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1583, col: 20, offset: 52131},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1585, col: 9, offset: 52188},
															run: (*parser).callonShortcutParagraph56,
															expr: &seqExpr{
																pos: position{line: 1585, col: 9, offset: 52188},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1585, col: 9, offset: 52188},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1585, col: 16, offset: 52195},
																			run: (*parser).callonShortcutParagraph59,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1585, col: 16, offset: 52195},
																				expr: &litMatcher{
																					pos:        position{line: 1585, col: 17, offset: 52196},
																					val:        "*",
																					ignoreCase: false,
																					want:       "\"*\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1589, col: 9, offset: 52296},
																		run: (*parser).callonShortcutParagraph62,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 1606, col: 14, offset: 53003},
															label: "depth",
															expr: &actionExpr{
																pos: position{line: 1606, col: 21, offset: 53010},
																run: (*parser).callonShortcutParagraph64,
																expr: &litMatcher{
																	pos:        position{line: 1606, col: 22, offset: 53011},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3083, col: 11, offset: 100401},
												run: (*parser).callonShortcutParagraph66,
												expr: &oneOrMoreExpr{
													pos: position{line: 3083, col: 11, offset: 100401},
													expr: &charClassMatcher{
														pos:        position{line: 3083, col: 12, offset: 100402},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1708, col: 5, offset: 56130},
							expr: &notExpr{
								pos: position{line: 1708, col: 7, offset: 56132},
								expr: &choiceExpr{
									pos: position{line: 293, col: 19, offset: 9062},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 293, col: 19, offset: 9062},
											run: (*parser).callonShortcutParagraph72,
											expr: &litMatcher{
												pos:        position{line: 293, col: 19, offset: 9062},
												val:        "TIP",
												ignoreCase: false,
												want:       "\"TIP\"",
											},
										},
										&actionExpr{
											pos: position{line: 295, col: 5, offset: 9100},
											run: (*parser).callonShortcutParagraph74,
											expr: &litMatcher{
												pos:        position{line: 295, col: 5, offset: 9100},
												val:        "NOTE",
												ignoreCase: false,
												want:       "\"NOTE\"",
											},
										},
										&actionExpr{
											pos: position{line: 297, col: 5, offset: 9140},
											run: (*parser).callonShortcutParagraph76,
											expr: &litMatcher{
												pos:        position{line: 297, col: 5, offset: 9140},
												val:        "IMPORTANT",
												ignoreCase: false,
												want:       "\"IMPORTANT\"",
											},
										},
										&actionExpr{
											pos: position{line: 299, col: 5, offset: 9190},
											run: (*parser).callonShortcutParagraph78,
											expr: &litMatcher{
												pos:        position{line: 299, col: 5, offset: 9190},
												val:        "WARNING",
												ignoreCase: false,
												want:       "\"WARNING\"",
											},
										},
										&actionExpr{
											pos: position{line: 301, col: 5, offset: 9236},
											run: (*parser).callonShortcutParagraph80,
											expr: &litMatcher{
												pos:        position{line: 301, col: 5, offset: 9236},
												val:        "CAUTION",
												ignoreCase: false,
												want:       "\"CAUTION\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1709, col: 5, offset: 56153},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1757, col: 5, offset: 57678},
								run: (*parser).callonShortcutParagraph83,
								expr: &seqExpr{
									pos: position{line: 1757, col: 5, offset: 57678},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1757, col: 5, offset: 57678},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1757, col: 14, offset: 57687},
												run: (*parser).callonShortcutParagraph86,
												expr: &oneOrMoreExpr{
													pos: position{line: 1757, col: 14, offset: 57687},
													expr: &charClassMatcher{
														pos:        position{line: 1757, col: 14, offset: 57687},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1760, col: 5, offset: 57794},
											run: (*parser).callonShortcutParagraph89,
										},
										&choiceExpr{
											pos: position{line: 3095, col: 8, offset: 100658},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonShortcutParagraph91,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1710, col: 5, offset: 56187},
							run: (*parser).callonShortcutParagraph98,
						},
						&labeledExpr{
							pos:   position{line: 1717, col: 5, offset: 56549},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1717, col: 16, offset: 56560},
								expr: &actionExpr{
									pos: position{line: 1718, col: 9, offset: 56570},
									run: (*parser).callonShortcutParagraph101,
									expr: &seqExpr{
										pos: position{line: 1718, col: 9, offset: 56570},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1718, col: 9, offset: 56570},
												expr: &notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
											&notExpr{
												pos: position{line: 1719, col: 9, offset: 56584},
												expr: &actionExpr{
													pos: position{line: 683, col: 14, offset: 22026},
													run: (*parser).callonShortcutParagraph107,
													expr: &seqExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 683, col: 14, offset: 22026},
																expr: &notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 683, col: 19, offset: 22031},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonShortcutParagraph113,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonShortcutParagraph116,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1720, col: 9, offset: 56603},
												expr: &ruleRefExpr{
													pos:  position{line: 1720, col: 10, offset: 56604},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1721, col: 9, offset: 56628},
												expr: &seqExpr{
													pos: position{line: 1485, col: 34, offset: 48680},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1485, col: 34, offset: 48680},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1485, col: 38, offset: 48684},
															expr: &actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonShortcutParagraph129,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonShortcutParagraph131,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1722, col: 9, offset: 56667},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1722, col: 15, offset: 56673},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2781, col: 22, offset: 91184},
															run: (*parser).callonShortcutParagraph138,
															expr: &seqExpr{
																pos: position{line: 2781, col: 22, offset: 91184},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2786, col: 31, offset: 91405},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2786, col: 36, offset: 91410},
																		expr: &litMatcher{
																			pos:        position{line: 2786, col: 37, offset: 91411},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2781, col: 49, offset: 91211},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2788, col: 29, offset: 91446},
																			run: (*parser).callonShortcutParagraph144,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2788, col: 29, offset: 91446},
																				expr: &charClassMatcher{
																					pos:        position{line: 2788, col: 29, offset: 91446},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonShortcutParagraph148,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1757, col: 5, offset: 57678},
															run: (*parser).callonShortcutParagraph155,
															expr: &seqExpr{
																pos: position{line: 1757, col: 5, offset: 57678},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1757, col: 5, offset: 57678},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1757, col: 14, offset: 57687},
																			run: (*parser).callonShortcutParagraph158,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1757, col: 14, offset: 57687},
																				expr: &charClassMatcher{
																					pos:        position{line: 1757, col: 14, offset: 57687},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1760, col: 5, offset: 57794},
																		run: (*parser).callonShortcutParagraph161,
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonShortcutParagraph163,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1729, col: 1, offset: 56870},
			expr: &actionExpr{
				pos: position{line: 1730, col: 5, offset: 56888},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1730, col: 5, offset: 56888},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1730, col: 5, offset: 56888},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1757, col: 5, offset: 57678},
								run: (*parser).callonParagraph4,
								expr: &seqExpr{
									pos: position{line: 1757, col: 5, offset: 57678},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1757, col: 5, offset: 57678},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1757, col: 14, offset: 57687},
												run: (*parser).callonParagraph7,
												expr: &oneOrMoreExpr{
													pos: position{line: 1757, col: 14, offset: 57687},
													expr: &charClassMatcher{
														pos:        position{line: 1757, col: 14, offset: 57687},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1760, col: 5, offset: 57794},
											run: (*parser).callonParagraph10,
										},
										&choiceExpr{
											pos: position{line: 3095, col: 8, offset: 100658},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonParagraph12,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1731, col: 5, offset: 56922},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1731, col: 16, offset: 56933},
								expr: &actionExpr{
									pos: position{line: 1732, col: 9, offset: 56943},
									run: (*parser).callonParagraph21,
									expr: &seqExpr{
										pos: position{line: 1732, col: 9, offset: 56943},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1732, col: 9, offset: 56943},
												expr: &notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
											&notExpr{
												pos: position{line: 1733, col: 9, offset: 56956},
												expr: &actionExpr{
													pos: position{line: 683, col: 14, offset: 22026},
													run: (*parser).callonParagraph27,
													expr: &seqExpr{
														pos: position{line: 683, col: 14, offset: 22026},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 683, col: 14, offset: 22026},
																expr: &notExpr{
																	pos: position{line: 3092, col: 8, offset: 100608},
																	expr: &anyMatcher{
																		line: 3092, col: 9, offset: 100609,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 683, col: 19, offset: 22031},
																expr: &actionExpr{
																	pos: position{line: 3079, col: 10, offset: 100334},
																	run: (*parser).callonParagraph33,
																	expr: &charClassMatcher{
																		pos:        position{line: 3079, col: 11, offset: 100335},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonParagraph36,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1734, col: 9, offset: 56975},
												expr: &ruleRefExpr{
													pos:  position{line: 1734, col: 10, offset: 56976},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1735, col: 9, offset: 57000},
												expr: &seqExpr{
													pos: position{line: 1485, col: 34, offset: 48680},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1485, col: 34, offset: 48680},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1485, col: 38, offset: 48684},
															expr: &actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonParagraph49,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonParagraph51,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1736, col: 9, offset: 57039},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1736, col: 15, offset: 57045},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2781, col: 22, offset: 91184},
															run: (*parser).callonParagraph58,
															expr: &seqExpr{
																pos: position{line: 2781, col: 22, offset: 91184},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2786, col: 31, offset: 91405},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2786, col: 36, offset: 91410},
																		expr: &litMatcher{
																			pos:        position{line: 2786, col: 37, offset: 91411},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2781, col: 49, offset: 91211},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2788, col: 29, offset: 91446},
																			run: (*parser).callonParagraph64,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2788, col: 29, offset: 91446},
																				expr: &charClassMatcher{
																					pos:        position{line: 2788, col: 29, offset: 91446},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonParagraph68,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1757, col: 5, offset: 57678},
															run: (*parser).callonParagraph75,
															expr: &seqExpr{
																pos: position{line: 1757, col: 5, offset: 57678},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1757, col: 5, offset: 57678},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1757, col: 14, offset: 57687},
																			run: (*parser).callonParagraph78,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1757, col: 14, offset: 57687},
																				expr: &charClassMatcher{
																					pos:        position{line: 1757, col: 14, offset: 57687},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1760, col: 5, offset: 57794},
																		run: (*parser).callonParagraph81,
																	},
																	&choiceExpr{
																		pos: position{line: 3095, col: 8, offset: 100658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonParagraph83,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3092, col: 8, offset: 100608},
																				expr: &anyMatcher{
																					line: 3092, col: 9, offset: 100609,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1788, col: 1, offset: 58780},
			expr: &choiceExpr{
				pos: position{line: 1792, col: 5, offset: 59001},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1792, col: 5, offset: 59001},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1792, col: 5, offset: 59001},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1792, col: 5, offset: 59001},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1792, col: 16, offset: 59012},
										expr: &actionExpr{
											pos: position{line: 1792, col: 17, offset: 59013},
											run: (*parser).callonQuotedText6,
											expr: &ruleRefExpr{
												pos:  position{line: 1792, col: 17, offset: 59013},
												name: "LongHandAttributes",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1795, col: 5, offset: 59101},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1795, col: 10, offset: 59106},
										name: "EscapedQuotedText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1801, col: 5, offset: 59290},
						run: (*parser).callonQuotedText10,
						expr: &seqExpr{
							pos: position{line: 1801, col: 5, offset: 59290},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1801, col: 5, offset: 59290},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1801, col: 16, offset: 59301},
										expr: &ruleRefExpr{
											pos:  position{line: 1801, col: 17, offset: 59302},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1802, col: 5, offset: 59328},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1802, col: 11, offset: 59334},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1802, col: 11, offset: 59334},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1802, col: 37, offset: 59360},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1811, col: 1, offset: 59636},
			expr: &choiceExpr{
				pos: position{line: 1812, col: 5, offset: 59666},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1812, col: 5, offset: 59666},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 7, offset: 59693},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 7, offset: 59721},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 7, offset: 59749},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 7, offset: 59781},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 7, offset: 59802},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1819, col: 1, offset: 59820},
			expr: &choiceExpr{
				pos: position{line: 1820, col: 5, offset: 59852},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1820, col: 5, offset: 59852},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1821, col: 7, offset: 59878},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1822, col: 7, offset: 59906},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1823, col: 7, offset: 59934},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1825, col: 1, offset: 59960},
			expr: &actionExpr{
				pos: position{line: 1826, col: 5, offset: 60041},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1826, col: 5, offset: 60041},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1826, col: 5, offset: 60041},
							expr: &litMatcher{
								pos:        position{line: 1826, col: 7, offset: 60043},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1827, col: 5, offset: 60052},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1828, col: 9, offset: 60070},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1828, col: 9, offset: 60070},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1829, col: 11, offset: 60097},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1830, col: 11, offset: 60125},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1831, col: 11, offset: 60153},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1832, col: 11, offset: 60184},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1833, col: 11, offset: 60215},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1853, col: 1, offset: 60742},
			expr: &choiceExpr{
				pos: position{line: 1853, col: 13, offset: 60754},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1853, col: 13, offset: 60754},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1853, col: 35, offset: 60776},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1867, col: 1, offset: 61138},
			expr: &actionExpr{
				pos: position{line: 1868, col: 5, offset: 61166},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1868, col: 5, offset: 61166},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1865, col: 33, offset: 61132},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1869, col: 5, offset: 61200},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1869, col: 15, offset: 61210},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1865, col: 33, offset: 61132},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1874, col: 1, offset: 61367},
			expr: &oneOrMoreExpr{
				pos: position{line: 1874, col: 32, offset: 61398},
				expr: &ruleRefExpr{
					pos:  position{line: 1874, col: 32, offset: 61398},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1876, col: 1, offset: 61429},
			expr: &actionExpr{
				pos: position{line: 1877, col: 5, offset: 61464},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1877, col: 5, offset: 61464},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1877, col: 5, offset: 61464},
							expr: &litMatcher{
								pos:        position{line: 1865, col: 33, offset: 61132},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1878, col: 5, offset: 61498},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1879, col: 9, offset: 61516},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1858, col: 5, offset: 60890},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 1858, col: 5, offset: 60890},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1858, col: 5, offset: 60890},
													expr: &charClassMatcher{
														pos:        position{line: 1858, col: 5, offset: 60890},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1858, col: 19, offset: 60904},
													expr: &choiceExpr{
														pos: position{line: 1858, col: 21, offset: 60906},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonDoubleQuoteBoldTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1855, col: 22, offset: 60864},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3083, col: 11, offset: 100401},
										run: (*parser).callonDoubleQuoteBoldTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3083, col: 11, offset: 100401},
											expr: &charClassMatcher{
												pos:        position{line: 3083, col: 12, offset: 100402},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1881, col: 11, offset: 61589},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDoubleQuoteBoldTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1881, col: 19, offset: 61597},
												expr: &actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonDoubleQuoteBoldTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										run: (*parser).callonDoubleQuoteBoldTextElement31,
										expr: &seqExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonDoubleQuoteBoldTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 644, col: 5, offset: 20666},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 644, col: 14, offset: 20675},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																run: (*parser).callonDoubleQuoteBoldTextElement36,
																expr: &seqExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 25, offset: 21328},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 37, offset: 21340},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 56, offset: 21359},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 664, col: 62, offset: 21365},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteBoldTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteBoldTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteBoldTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 78, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																run: (*parser).callonDoubleQuoteBoldTextElement58,
																expr: &seqExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 668, col: 25, offset: 21499},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 38, offset: 21512},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 57, offset: 21531},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 668, col: 63, offset: 21537},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteBoldTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteBoldTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteBoldTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 668, col: 79, offset: 21553},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																run: (*parser).callonDoubleQuoteBoldTextElement80,
																expr: &seqExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 650, col: 5, offset: 20804},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 650, col: 13, offset: 20812},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 650, col: 32, offset: 20831},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																run: (*parser).callonDoubleQuoteBoldTextElement90,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21072},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 9, offset: 21076},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 28, offset: 21095},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1883, col: 11, offset: 61679},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										run: (*parser).callonDoubleQuoteBoldTextElement101,
										expr: &seqExpr{
											pos: position{line: 2764, col: 5, offset: 90546},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													run: (*parser).callonDoubleQuoteBoldTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 5, offset: 90622},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2769, col: 9, offset: 90720},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																run: (*parser).callonDoubleQuoteBoldTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 692, col: 27, offset: 22379},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			run: (*parser).callonDoubleQuoteBoldTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 692, col: 27, offset: 22379},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 692, col: 27, offset: 22379},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 32, offset: 22384},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteBoldTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 692, col: 40, offset: 22392},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDoubleQuoteBoldTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 47, offset: 22399},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 51, offset: 22403},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 702, col: 24, offset: 22804},
																							expr: &choiceExpr{
																								pos: position{line: 703, col: 5, offset: 22810},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										run: (*parser).callonDoubleQuoteBoldTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 703, col: 6, offset: 22811},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 703, col: 6, offset: 22811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 703, col: 14, offset: 22819},
																													expr: &charClassMatcher{
																														pos:        position{line: 703, col: 14, offset: 22819},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonDoubleQuoteBoldTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteBoldTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonDoubleQuoteBoldTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteBoldTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 707, col: 8, offset: 23045},
																										run: (*parser).callonDoubleQuoteBoldTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 707, col: 8, offset: 23045},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 79, offset: 22431},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			run: (*parser).callonDoubleQuoteBoldTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 9, offset: 22504},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 9, offset: 22504},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 14, offset: 22509},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteBoldTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 22, offset: 22517},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2772, col: 11, offset: 90824},
																run: (*parser).callonDoubleQuoteBoldTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2772, col: 12, offset: 90825},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2797, col: 5, offset: 91718},
										run: (*parser).callonDoubleQuoteBoldTextElement160,
										expr: &seqExpr{
											pos: position{line: 2797, col: 5, offset: 91718},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2797, col: 5, offset: 91718},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2797, col: 10, offset: 91723},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2805, col: 15, offset: 91999},
															run: (*parser).callonDoubleQuoteBoldTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2805, col: 15, offset: 91999},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2811, col: 14, offset: 92114},
															run: (*parser).callonDoubleQuoteBoldTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2811, col: 14, offset: 92114},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2815, col: 14, offset: 92190},
															run: (*parser).callonDoubleQuoteBoldTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2815, col: 14, offset: 92190},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2819, col: 15, offset: 92268},
															run: (*parser).callonDoubleQuoteBoldTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2819, col: 15, offset: 92268},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2823, col: 13, offset: 92343},
															run: (*parser).callonDoubleQuoteBoldTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2823, col: 13, offset: 92343},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2805, col: 15, offset: 91999},
										run: (*parser).callonDoubleQuoteBoldTextElement174,
										expr: &litMatcher{
											pos:        position{line: 2805, col: 15, offset: 91999},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 14, offset: 92114},
										run: (*parser).callonDoubleQuoteBoldTextElement176,
										expr: &litMatcher{
											pos:        position{line: 2811, col: 14, offset: 92114},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2815, col: 14, offset: 92190},
										run: (*parser).callonDoubleQuoteBoldTextElement178,
										expr: &litMatcher{
											pos:        position{line: 2815, col: 14, offset: 92190},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2819, col: 15, offset: 92268},
										run: (*parser).callonDoubleQuoteBoldTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2819, col: 15, offset: 92268},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2823, col: 13, offset: 92343},
										run: (*parser).callonDoubleQuoteBoldTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2823, col: 13, offset: 92343},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2832, col: 5, offset: 92667},
										run: (*parser).callonDoubleQuoteBoldTextElement184,
										expr: &seqExpr{
											pos: position{line: 2832, col: 5, offset: 92667},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2832, col: 14, offset: 92676},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2832, col: 19, offset: 92681},
													expr: &charClassMatcher{
														pos:        position{line: 2832, col: 20, offset: 92682},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2838, col: 5, offset: 92913},
										run: (*parser).callonDoubleQuoteBoldTextElement190,
										expr: &seqExpr{
											pos: position{line: 2838, col: 5, offset: 92913},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2838, col: 14, offset: 92922},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2838, col: 18, offset: 92926},
													expr: &charClassMatcher{
														pos:        position{line: 2838, col: 19, offset: 92927},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1886, col: 11, offset: 61795},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1887, col: 11, offset: 61818},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 1141, col: 23, offset: 35577},
										run: (*parser).callonDoubleQuoteBoldTextElement198,
										expr: &seqExpr{
											pos: position{line: 1141, col: 23, offset: 35577},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1141, col: 51, offset: 35605},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1141, col: 56, offset: 35610},
														run: (*parser).callonDoubleQuoteBoldTextElement202,
														expr: &oneOrMoreExpr{
															pos: position{line: 1141, col: 56, offset: 35610},
															expr: &charClassMatcher{
																pos:        position{line: 1141, col: 56, offset: 35610},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 1906, col: 5, offset: 62330},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 1907, col: 7, offset: 62427},
										run: (*parser).callonDoubleQuoteBoldTextElement207,
										expr: &seqExpr{
											pos: position{line: 1907, col: 7, offset: 62427},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1865, col: 33, offset: 61132},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2997, col: 14, offset: 97724},
													run: (*parser).callonDoubleQuoteBoldTextElement210,
													expr: &oneOrMoreExpr{
														pos: position{line: 2997, col: 14, offset: 97724},
														expr: &charClassMatcher{
															pos:        position{line: 2997, col: 14, offset: 97724},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 1893, col: 1, offset: 61972},
			expr: &actionExpr{
				pos: position{line: 1894, col: 5, offset: 62012},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1894, col: 5, offset: 62012},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1894, col: 5, offset: 62012},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1894, col: 16, offset: 62023},
								expr: &ruleRefExpr{
									pos:  position{line: 1894, col: 17, offset: 62024},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1895, col: 5, offset: 62050},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 1896, col: 9, offset: 62065},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1896, col: 9, offset: 62065},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1897, col: 11, offset: 62095},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1898, col: 11, offset: 62116},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1899, col: 11, offset: 62137},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1900, col: 11, offset: 62161},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1901, col: 11, offset: 62185},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1918, col: 1, offset: 62814},
			expr: &actionExpr{
				pos: position{line: 1919, col: 4, offset: 62841},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1919, col: 4, offset: 62841},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1914, col: 38, offset: 62768},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 1920, col: 5, offset: 62879},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1920, col: 15, offset: 62889},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1916, col: 36, offset: 62808},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1925, col: 1, offset: 63049},
			expr: &actionExpr{
				pos: position{line: 1926, col: 5, offset: 63086},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 1926, col: 5, offset: 63086},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1926, col: 5, offset: 63086},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&notExpr{
							pos: position{line: 1926, col: 10, offset: 63091},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonSingleQuoteBoldTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1927, col: 5, offset: 63130},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1927, col: 14, offset: 63139},
								expr: &ruleRefExpr{
									pos:  position{line: 1927, col: 15, offset: 63140},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1928, col: 5, offset: 63174},
							run: (*parser).callonSingleQuoteBoldTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1934, col: 1, offset: 63315},
			expr: &choiceExpr{
				pos: position{line: 1935, col: 5, offset: 63350},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1858, col: 5, offset: 60890},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 1858, col: 5, offset: 60890},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1858, col: 5, offset: 60890},
									expr: &charClassMatcher{
										pos:        position{line: 1858, col: 5, offset: 60890},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1858, col: 19, offset: 60904},
									expr: &choiceExpr{
										pos: position{line: 1858, col: 21, offset: 60906},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonSingleQuoteBoldTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1855, col: 22, offset: 60864},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3083, col: 11, offset: 100401},
						run: (*parser).callonSingleQuoteBoldTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 3083, col: 11, offset: 100401},
							expr: &charClassMatcher{
								pos:        position{line: 3083, col: 12, offset: 100402},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 1937, col: 7, offset: 63382},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3088, col: 12, offset: 100518},
								run: (*parser).callonSingleQuoteBoldTextElement15,
								expr: &choiceExpr{
									pos: position{line: 3088, col: 13, offset: 100519},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3088, col: 13, offset: 100519},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 20, offset: 100526},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 29, offset: 100535},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 1937, col: 15, offset: 63390},
								expr: &actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonSingleQuoteBoldTextElement21,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 20597},
						run: (*parser).callonSingleQuoteBoldTextElement26,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 20597},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 641, col: 5, offset: 20597},
									run: (*parser).callonSingleQuoteBoldTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 644, col: 5, offset: 20666},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 644, col: 14, offset: 20675},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 664, col: 25, offset: 21328},
												run: (*parser).callonSingleQuoteBoldTextElement31,
												expr: &seqExpr{
													pos: position{line: 664, col: 25, offset: 21328},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 25, offset: 21328},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 37, offset: 21340},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement35,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 664, col: 56, offset: 21359},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 664, col: 62, offset: 21365},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteBoldTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteBoldTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteBoldTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 78, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 668, col: 25, offset: 21499},
												run: (*parser).callonSingleQuoteBoldTextElement53,
												expr: &seqExpr{
													pos: position{line: 668, col: 25, offset: 21499},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 668, col: 25, offset: 21499},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 668, col: 38, offset: 21512},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement57,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 668, col: 57, offset: 21531},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 668, col: 63, offset: 21537},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteBoldTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteBoldTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteBoldTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 668, col: 79, offset: 21553},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 650, col: 5, offset: 20804},
												run: (*parser).callonSingleQuoteBoldTextElement75,
												expr: &seqExpr{
													pos: position{line: 650, col: 5, offset: 20804},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 650, col: 5, offset: 20804},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 650, col: 13, offset: 20812},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement79,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 650, col: 32, offset: 20831},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21072},
												run: (*parser).callonSingleQuoteBoldTextElement85,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21072},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21072},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 9, offset: 21076},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement89,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 28, offset: 21095},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1939, col: 7, offset: 63464},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2764, col: 5, offset: 90546},
						run: (*parser).callonSingleQuoteBoldTextElement96,
						expr: &seqExpr{
							pos: position{line: 2764, col: 5, offset: 90546},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2764, col: 5, offset: 90546},
									run: (*parser).callonSingleQuoteBoldTextElement98,
								},
								&labeledExpr{
									pos:   position{line: 2767, col: 5, offset: 90622},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2769, col: 9, offset: 90720},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2769, col: 9, offset: 90720},
												run: (*parser).callonSingleQuoteBoldTextElement101,
												expr: &choiceExpr{
													pos: position{line: 692, col: 27, offset: 22379},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 692, col: 27, offset: 22379},
															run: (*parser).callonSingleQuoteBoldTextElement103,
															expr: &seqExpr{
																pos: position{line: 692, col: 27, offset: 22379},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 692, col: 27, offset: 22379},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 32, offset: 22384},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteBoldTextElement107,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 692, col: 40, offset: 22392},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonSingleQuoteBoldTextElement111,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 47, offset: 22399},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 22403},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 702, col: 24, offset: 22804},
																			expr: &choiceExpr{
																				pos: position{line: 703, col: 5, offset: 22810},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 703, col: 6, offset: 22811},
																						run: (*parser).callonSingleQuoteBoldTextElement117,
																						expr: &seqExpr{
																							pos: position{line: 703, col: 6, offset: 22811},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 703, col: 6, offset: 22811},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 703, col: 14, offset: 22819},
																									expr: &charClassMatcher{
																										pos:        position{line: 703, col: 14, offset: 22819},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonSingleQuoteBoldTextElement122,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteBoldTextElement126,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonSingleQuoteBoldTextElement132,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteBoldTextElement136,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 707, col: 8, offset: 23045},
																						run: (*parser).callonSingleQuoteBoldTextElement142,
																						expr: &litMatcher{
																							pos:        position{line: 707, col: 8, offset: 23045},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 79, offset: 22431},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 694, col: 9, offset: 22504},
															run: (*parser).callonSingleQuoteBoldTextElement145,
															expr: &seqExpr{
																pos: position{line: 694, col: 9, offset: 22504},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 9, offset: 22504},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 14, offset: 22509},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteBoldTextElement149,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 22, offset: 22517},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2772, col: 11, offset: 90824},
												run: (*parser).callonSingleQuoteBoldTextElement153,
												expr: &charClassMatcher{
													pos:        position{line: 2772, col: 12, offset: 90825},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2797, col: 5, offset: 91718},
						run: (*parser).callonSingleQuoteBoldTextElement155,
						expr: &seqExpr{
							pos: position{line: 2797, col: 5, offset: 91718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2797, col: 5, offset: 91718},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2797, col: 10, offset: 91723},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 15, offset: 91999},
											run: (*parser).callonSingleQuoteBoldTextElement159,
											expr: &litMatcher{
												pos:        position{line: 2805, col: 15, offset: 91999},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 14, offset: 92114},
											run: (*parser).callonSingleQuoteBoldTextElement161,
											expr: &litMatcher{
												pos:        position{line: 2811, col: 14, offset: 92114},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2815, col: 14, offset: 92190},
											run: (*parser).callonSingleQuoteBoldTextElement163,
											expr: &litMatcher{
												pos:        position{line: 2815, col: 14, offset: 92190},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2819, col: 15, offset: 92268},
											run: (*parser).callonSingleQuoteBoldTextElement165,
											expr: &litMatcher{
												pos:        position{line: 2819, col: 15, offset: 92268},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2823, col: 13, offset: 92343},
											run: (*parser).callonSingleQuoteBoldTextElement167,
											expr: &litMatcher{
												pos:        position{line: 2823, col: 13, offset: 92343},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2805, col: 15, offset: 91999},
						run: (*parser).callonSingleQuoteBoldTextElement169,
						expr: &litMatcher{
							pos:        position{line: 2805, col: 15, offset: 91999},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2811, col: 14, offset: 92114},
						run: (*parser).callonSingleQuoteBoldTextElement171,
						expr: &litMatcher{
							pos:        position{line: 2811, col: 14, offset: 92114},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2815, col: 14, offset: 92190},
						run: (*parser).callonSingleQuoteBoldTextElement173,
						expr: &litMatcher{
							pos:        position{line: 2815, col: 14, offset: 92190},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2819, col: 15, offset: 92268},
						run: (*parser).callonSingleQuoteBoldTextElement175,
						expr: &litMatcher{
							pos:        position{line: 2819, col: 15, offset: 92268},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2823, col: 13, offset: 92343},
						run: (*parser).callonSingleQuoteBoldTextElement177,
						expr: &litMatcher{
							pos:        position{line: 2823, col: 13, offset: 92343},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2832, col: 5, offset: 92667},
						run: (*parser).callonSingleQuoteBoldTextElement179,
						expr: &seqExpr{
							pos: position{line: 2832, col: 5, offset: 92667},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2832, col: 14, offset: 92676},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2832, col: 19, offset: 92681},
									expr: &charClassMatcher{
										pos:        position{line: 2832, col: 20, offset: 92682},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2838, col: 5, offset: 92913},
						run: (*parser).callonSingleQuoteBoldTextElement185,
						expr: &seqExpr{
							pos: position{line: 2838, col: 5, offset: 92913},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2838, col: 14, offset: 92922},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2838, col: 18, offset: 92926},
									expr: &charClassMatcher{
										pos:        position{line: 2838, col: 19, offset: 92927},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1942, col: 7, offset: 63568},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1943, col: 7, offset: 63587},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 1141, col: 23, offset: 35577},
						run: (*parser).callonSingleQuoteBoldTextElement193,
						expr: &seqExpr{
							pos: position{line: 1141, col: 23, offset: 35577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 51, offset: 35605},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1141, col: 56, offset: 35610},
										run: (*parser).callonSingleQuoteBoldTextElement197,
										expr: &oneOrMoreExpr{
											pos: position{line: 1141, col: 56, offset: 35610},
											expr: &charClassMatcher{
												pos:        position{line: 1141, col: 56, offset: 35610},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 1973, col: 5, offset: 64316},
						val:        "[^\\r\\n *]",
						chars:      []rune{'\r', '\n', ' ', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1974, col: 7, offset: 64421},
						run: (*parser).callonSingleQuoteBoldTextElement202,
						expr: &seqExpr{
							pos: position{line: 1974, col: 7, offset: 64421},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1974, col: 7, offset: 64421},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2997, col: 14, offset: 97724},
									run: (*parser).callonSingleQuoteBoldTextElement205,
									expr: &oneOrMoreExpr{
										pos: position{line: 2997, col: 14, offset: 97724},
										expr: &charClassMatcher{
											pos:        position{line: 2997, col: 14, offset: 97724},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 1947, col: 1, offset: 63688},
			expr: &choiceExpr{
				pos: position{line: 1949, col: 5, offset: 63751},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1949, col: 5, offset: 63751},
						run: (*parser).callonQuotedTextInSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1949, col: 5, offset: 63751},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 1949, col: 5, offset: 63751},
									expr: &litMatcher{
										pos:        position{line: 1949, col: 7, offset: 63753},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 1950, col: 5, offset: 63762},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 1951, col: 9, offset: 63780},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1951, col: 9, offset: 63780},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 1952, col: 11, offset: 63808},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1953, col: 11, offset: 63836},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 1954, col: 11, offset: 63867},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 1955, col: 11, offset: 63898},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1961, col: 5, offset: 63998},
						run: (*parser).callonQuotedTextInSingleQuoteBoldText13,
						expr: &seqExpr{
							pos: position{line: 1961, col: 5, offset: 63998},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1961, col: 5, offset: 63998},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1961, col: 16, offset: 64009},
										expr: &ruleRefExpr{
											pos:  position{line: 1961, col: 17, offset: 64010},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1962, col: 5, offset: 64036},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1963, col: 9, offset: 64051},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1963, col: 9, offset: 64051},
												name: "DoubleQuoteBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 1964, col: 11, offset: 64081},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 1965, col: 11, offset: 64102},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 1966, col: 11, offset: 64126},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1967, col: 11, offset: 64147},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 1968, col: 11, offset: 64171},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1978, col: 1, offset: 64596},
			expr: &choiceExpr{
				pos: position{line: 1980, col: 5, offset: 64657},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1980, col: 5, offset: 64657},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1980, col: 5, offset: 64657},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1980, col: 5, offset: 64657},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 60558},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 60558},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 60558},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 60563},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 60563},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1980, col: 40, offset: 64692},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1980, col: 45, offset: 64697},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1980, col: 55, offset: 64707},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1980, col: 84, offset: 64736},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1984, col: 7, offset: 64900},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 1984, col: 7, offset: 64900},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1984, col: 7, offset: 64900},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1984, col: 42, offset: 64935},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1984, col: 47, offset: 64940},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1984, col: 57, offset: 64950},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1984, col: 86, offset: 64979},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1989, col: 7, offset: 65181},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 1989, col: 7, offset: 65181},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1989, col: 7, offset: 65181},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1989, col: 42, offset: 65216},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1989, col: 46, offset: 65220},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1989, col: 56, offset: 65230},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1989, col: 85, offset: 65259},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1997, col: 1, offset: 65513},
			expr: &choiceExpr{
				pos: position{line: 1997, col: 15, offset: 65527},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1997, col: 15, offset: 65527},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1997, col: 39, offset: 65551},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 2011, col: 1, offset: 65879},
			expr: &actionExpr{
				pos: position{line: 2012, col: 5, offset: 65909},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2012, col: 5, offset: 65909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2009, col: 35, offset: 65873},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 2013, col: 5, offset: 65945},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2013, col: 15, offset: 65955},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2009, col: 35, offset: 65873},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 2018, col: 1, offset: 66163},
			expr: &oneOrMoreExpr{
				pos: position{line: 2018, col: 34, offset: 66196},
				expr: &ruleRefExpr{
					pos:  position{line: 2018, col: 34, offset: 66196},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 2020, col: 1, offset: 66228},
			expr: &actionExpr{
				pos: position{line: 2021, col: 5, offset: 66265},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 5, offset: 66265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2021, col: 5, offset: 66265},
							expr: &litMatcher{
								pos:        position{line: 2009, col: 35, offset: 65873},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 5, offset: 66301},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2023, col: 9, offset: 66319},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2002, col: 5, offset: 65625},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 2002, col: 5, offset: 65625},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2002, col: 5, offset: 65625},
													expr: &charClassMatcher{
														pos:        position{line: 2002, col: 5, offset: 65625},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2002, col: 15, offset: 65635},
													expr: &choiceExpr{
														pos: position{line: 2002, col: 17, offset: 65637},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonDoubleQuoteItalicTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1999, col: 24, offset: 65597},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3083, col: 11, offset: 100401},
										run: (*parser).callonDoubleQuoteItalicTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3083, col: 11, offset: 100401},
											expr: &charClassMatcher{
												pos:        position{line: 3083, col: 12, offset: 100402},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2025, col: 11, offset: 66394},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDoubleQuoteItalicTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2025, col: 19, offset: 66402},
												expr: &actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonDoubleQuoteItalicTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										run: (*parser).callonDoubleQuoteItalicTextElement31,
										expr: &seqExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonDoubleQuoteItalicTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 644, col: 5, offset: 20666},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 644, col: 14, offset: 20675},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																run: (*parser).callonDoubleQuoteItalicTextElement36,
																expr: &seqExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 25, offset: 21328},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 37, offset: 21340},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 56, offset: 21359},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 664, col: 62, offset: 21365},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteItalicTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteItalicTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteItalicTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 78, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																run: (*parser).callonDoubleQuoteItalicTextElement58,
																expr: &seqExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 668, col: 25, offset: 21499},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 38, offset: 21512},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 57, offset: 21531},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 668, col: 63, offset: 21537},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteItalicTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteItalicTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteItalicTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 668, col: 79, offset: 21553},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																run: (*parser).callonDoubleQuoteItalicTextElement80,
																expr: &seqExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 650, col: 5, offset: 20804},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 650, col: 13, offset: 20812},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 650, col: 32, offset: 20831},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																run: (*parser).callonDoubleQuoteItalicTextElement90,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21072},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 9, offset: 21076},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 28, offset: 21095},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2027, col: 11, offset: 66484},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										run: (*parser).callonDoubleQuoteItalicTextElement101,
										expr: &seqExpr{
											pos: position{line: 2764, col: 5, offset: 90546},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													run: (*parser).callonDoubleQuoteItalicTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 5, offset: 90622},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2769, col: 9, offset: 90720},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																run: (*parser).callonDoubleQuoteItalicTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 692, col: 27, offset: 22379},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			run: (*parser).callonDoubleQuoteItalicTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 692, col: 27, offset: 22379},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 692, col: 27, offset: 22379},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 32, offset: 22384},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteItalicTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 692, col: 40, offset: 22392},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDoubleQuoteItalicTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 47, offset: 22399},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 51, offset: 22403},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 702, col: 24, offset: 22804},
																							expr: &choiceExpr{
																								pos: position{line: 703, col: 5, offset: 22810},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										run: (*parser).callonDoubleQuoteItalicTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 703, col: 6, offset: 22811},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 703, col: 6, offset: 22811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 703, col: 14, offset: 22819},
																													expr: &charClassMatcher{
																														pos:        position{line: 703, col: 14, offset: 22819},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonDoubleQuoteItalicTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteItalicTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonDoubleQuoteItalicTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteItalicTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 707, col: 8, offset: 23045},
																										run: (*parser).callonDoubleQuoteItalicTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 707, col: 8, offset: 23045},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 79, offset: 22431},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			run: (*parser).callonDoubleQuoteItalicTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 9, offset: 22504},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 9, offset: 22504},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 14, offset: 22509},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteItalicTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 22, offset: 22517},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2772, col: 11, offset: 90824},
																run: (*parser).callonDoubleQuoteItalicTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2772, col: 12, offset: 90825},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2797, col: 5, offset: 91718},
										run: (*parser).callonDoubleQuoteItalicTextElement160,
										expr: &seqExpr{
											pos: position{line: 2797, col: 5, offset: 91718},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2797, col: 5, offset: 91718},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2797, col: 10, offset: 91723},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2805, col: 15, offset: 91999},
															run: (*parser).callonDoubleQuoteItalicTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2805, col: 15, offset: 91999},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2811, col: 14, offset: 92114},
															run: (*parser).callonDoubleQuoteItalicTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2811, col: 14, offset: 92114},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2815, col: 14, offset: 92190},
															run: (*parser).callonDoubleQuoteItalicTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2815, col: 14, offset: 92190},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2819, col: 15, offset: 92268},
															run: (*parser).callonDoubleQuoteItalicTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2819, col: 15, offset: 92268},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2823, col: 13, offset: 92343},
															run: (*parser).callonDoubleQuoteItalicTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2823, col: 13, offset: 92343},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2805, col: 15, offset: 91999},
										run: (*parser).callonDoubleQuoteItalicTextElement174,
										expr: &litMatcher{
											pos:        position{line: 2805, col: 15, offset: 91999},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 14, offset: 92114},
										run: (*parser).callonDoubleQuoteItalicTextElement176,
										expr: &litMatcher{
											pos:        position{line: 2811, col: 14, offset: 92114},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2815, col: 14, offset: 92190},
										run: (*parser).callonDoubleQuoteItalicTextElement178,
										expr: &litMatcher{
											pos:        position{line: 2815, col: 14, offset: 92190},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2819, col: 15, offset: 92268},
										run: (*parser).callonDoubleQuoteItalicTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2819, col: 15, offset: 92268},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2823, col: 13, offset: 92343},
										run: (*parser).callonDoubleQuoteItalicTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2823, col: 13, offset: 92343},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2832, col: 5, offset: 92667},
										run: (*parser).callonDoubleQuoteItalicTextElement184,
										expr: &seqExpr{
											pos: position{line: 2832, col: 5, offset: 92667},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2832, col: 14, offset: 92676},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2832, col: 19, offset: 92681},
													expr: &charClassMatcher{
														pos:        position{line: 2832, col: 20, offset: 92682},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2838, col: 5, offset: 92913},
										run: (*parser).callonDoubleQuoteItalicTextElement190,
										expr: &seqExpr{
											pos: position{line: 2838, col: 5, offset: 92913},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2838, col: 14, offset: 92922},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2838, col: 18, offset: 92926},
													expr: &charClassMatcher{
														pos:        position{line: 2838, col: 19, offset: 92927},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2030, col: 11, offset: 66600},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2031, col: 11, offset: 66623},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 1141, col: 23, offset: 35577},
										run: (*parser).callonDoubleQuoteItalicTextElement198,
										expr: &seqExpr{
											pos: position{line: 1141, col: 23, offset: 35577},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1141, col: 51, offset: 35605},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1141, col: 56, offset: 35610},
														run: (*parser).callonDoubleQuoteItalicTextElement202,
														expr: &oneOrMoreExpr{
															pos: position{line: 1141, col: 56, offset: 35610},
															expr: &charClassMatcher{
																pos:        position{line: 1141, col: 56, offset: 35610},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2062, col: 5, offset: 67403},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2063, col: 7, offset: 67502},
										run: (*parser).callonDoubleQuoteItalicTextElement207,
										expr: &seqExpr{
											pos: position{line: 2063, col: 7, offset: 67502},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2063, col: 7, offset: 67502},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2997, col: 14, offset: 97724},
													run: (*parser).callonDoubleQuoteItalicTextElement210,
													expr: &oneOrMoreExpr{
														pos: position{line: 2997, col: 14, offset: 97724},
														expr: &charClassMatcher{
															pos:        position{line: 2997, col: 14, offset: 97724},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 2037, col: 1, offset: 66781},
			expr: &choiceExpr{
				pos: position{line: 2039, col: 5, offset: 66846},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2039, col: 5, offset: 66846},
						run: (*parser).callonQuotedTextInDoubleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 2039, col: 5, offset: 66846},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2039, col: 5, offset: 66846},
									expr: &litMatcher{
										pos:        position{line: 2039, col: 7, offset: 66848},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2040, col: 5, offset: 66857},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2041, col: 9, offset: 66875},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2041, col: 9, offset: 66875},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2042, col: 11, offset: 66902},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2043, col: 11, offset: 66930},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2044, col: 11, offset: 66961},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2045, col: 11, offset: 66992},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2051, col: 5, offset: 67092},
						run: (*parser).callonQuotedTextInDoubleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 2051, col: 5, offset: 67092},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2051, col: 5, offset: 67092},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2051, col: 16, offset: 67103},
										expr: &ruleRefExpr{
											pos:  position{line: 2051, col: 17, offset: 67104},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2052, col: 5, offset: 67130},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2052, col: 11, offset: 67136},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2052, col: 11, offset: 67136},
												name: "SingleQuoteItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2053, col: 11, offset: 67168},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2054, col: 11, offset: 67187},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2055, col: 11, offset: 67208},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2056, col: 11, offset: 67232},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2057, col: 11, offset: 67256},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 2074, col: 1, offset: 67878},
			expr: &actionExpr{
				pos: position{line: 2075, col: 5, offset: 67908},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2075, col: 5, offset: 67908},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2070, col: 40, offset: 67829},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 2076, col: 5, offset: 67948},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2076, col: 15, offset: 67958},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2072, col: 38, offset: 67872},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 2081, col: 1, offset: 68125},
			expr: &actionExpr{
				pos: position{line: 2082, col: 5, offset: 68163},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 2082, col: 5, offset: 68163},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2082, col: 5, offset: 68163},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&notExpr{
							pos: position{line: 2082, col: 10, offset: 68168},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonSingleQuoteItalicTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2083, col: 5, offset: 68207},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2083, col: 14, offset: 68216},
								expr: &ruleRefExpr{
									pos:  position{line: 2083, col: 15, offset: 68217},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2084, col: 5, offset: 68252},
							run: (*parser).callonSingleQuoteItalicTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 2090, col: 1, offset: 68393},
			expr: &choiceExpr{
				pos: position{line: 2091, col: 5, offset: 68430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2002, col: 5, offset: 65625},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 2002, col: 5, offset: 65625},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2002, col: 5, offset: 65625},
									expr: &charClassMatcher{
										pos:        position{line: 2002, col: 5, offset: 65625},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2002, col: 15, offset: 65635},
									expr: &choiceExpr{
										pos: position{line: 2002, col: 17, offset: 65637},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonSingleQuoteItalicTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1999, col: 24, offset: 65597},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3083, col: 11, offset: 100401},
						run: (*parser).callonSingleQuoteItalicTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 3083, col: 11, offset: 100401},
							expr: &charClassMatcher{
								pos:        position{line: 3083, col: 12, offset: 100402},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2093, col: 7, offset: 68464},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3088, col: 12, offset: 100518},
								run: (*parser).callonSingleQuoteItalicTextElement15,
								expr: &choiceExpr{
									pos: position{line: 3088, col: 13, offset: 100519},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3088, col: 13, offset: 100519},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 20, offset: 100526},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 29, offset: 100535},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2093, col: 15, offset: 68472},
								expr: &actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonSingleQuoteItalicTextElement21,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 20597},
						run: (*parser).callonSingleQuoteItalicTextElement26,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 20597},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 641, col: 5, offset: 20597},
									run: (*parser).callonSingleQuoteItalicTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 644, col: 5, offset: 20666},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 644, col: 14, offset: 20675},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 664, col: 25, offset: 21328},
												run: (*parser).callonSingleQuoteItalicTextElement31,
												expr: &seqExpr{
													pos: position{line: 664, col: 25, offset: 21328},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 25, offset: 21328},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 37, offset: 21340},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement35,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 664, col: 56, offset: 21359},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 664, col: 62, offset: 21365},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteItalicTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteItalicTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteItalicTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 78, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 668, col: 25, offset: 21499},
												run: (*parser).callonSingleQuoteItalicTextElement53,
												expr: &seqExpr{
													pos: position{line: 668, col: 25, offset: 21499},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 668, col: 25, offset: 21499},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 668, col: 38, offset: 21512},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement57,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 668, col: 57, offset: 21531},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 668, col: 63, offset: 21537},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteItalicTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteItalicTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteItalicTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 668, col: 79, offset: 21553},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 650, col: 5, offset: 20804},
												run: (*parser).callonSingleQuoteItalicTextElement75,
												expr: &seqExpr{
													pos: position{line: 650, col: 5, offset: 20804},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 650, col: 5, offset: 20804},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 650, col: 13, offset: 20812},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement79,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 650, col: 32, offset: 20831},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21072},
												run: (*parser).callonSingleQuoteItalicTextElement85,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21072},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21072},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 9, offset: 21076},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement89,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 28, offset: 21095},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2095, col: 7, offset: 68546},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2764, col: 5, offset: 90546},
						run: (*parser).callonSingleQuoteItalicTextElement96,
						expr: &seqExpr{
							pos: position{line: 2764, col: 5, offset: 90546},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2764, col: 5, offset: 90546},
									run: (*parser).callonSingleQuoteItalicTextElement98,
								},
								&labeledExpr{
									pos:   position{line: 2767, col: 5, offset: 90622},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2769, col: 9, offset: 90720},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2769, col: 9, offset: 90720},
												run: (*parser).callonSingleQuoteItalicTextElement101,
												expr: &choiceExpr{
													pos: position{line: 692, col: 27, offset: 22379},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 692, col: 27, offset: 22379},
															run: (*parser).callonSingleQuoteItalicTextElement103,
															expr: &seqExpr{
																pos: position{line: 692, col: 27, offset: 22379},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 692, col: 27, offset: 22379},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 32, offset: 22384},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteItalicTextElement107,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 692, col: 40, offset: 22392},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonSingleQuoteItalicTextElement111,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 47, offset: 22399},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 22403},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 702, col: 24, offset: 22804},
																			expr: &choiceExpr{
																				pos: position{line: 703, col: 5, offset: 22810},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 703, col: 6, offset: 22811},
																						run: (*parser).callonSingleQuoteItalicTextElement117,
																						expr: &seqExpr{
																							pos: position{line: 703, col: 6, offset: 22811},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 703, col: 6, offset: 22811},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 703, col: 14, offset: 22819},
																									expr: &charClassMatcher{
																										pos:        position{line: 703, col: 14, offset: 22819},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonSingleQuoteItalicTextElement122,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteItalicTextElement126,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonSingleQuoteItalicTextElement132,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteItalicTextElement136,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 707, col: 8, offset: 23045},
																						run: (*parser).callonSingleQuoteItalicTextElement142,
																						expr: &litMatcher{
																							pos:        position{line: 707, col: 8, offset: 23045},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 79, offset: 22431},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 694, col: 9, offset: 22504},
															run: (*parser).callonSingleQuoteItalicTextElement145,
															expr: &seqExpr{
																pos: position{line: 694, col: 9, offset: 22504},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 9, offset: 22504},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 14, offset: 22509},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteItalicTextElement149,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 22, offset: 22517},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2772, col: 11, offset: 90824},
												run: (*parser).callonSingleQuoteItalicTextElement153,
												expr: &charClassMatcher{
													pos:        position{line: 2772, col: 12, offset: 90825},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2797, col: 5, offset: 91718},
						run: (*parser).callonSingleQuoteItalicTextElement155,
						expr: &seqExpr{
							pos: position{line: 2797, col: 5, offset: 91718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2797, col: 5, offset: 91718},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2797, col: 10, offset: 91723},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 15, offset: 91999},
											run: (*parser).callonSingleQuoteItalicTextElement159,
											expr: &litMatcher{
												pos:        position{line: 2805, col: 15, offset: 91999},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 14, offset: 92114},
											run: (*parser).callonSingleQuoteItalicTextElement161,
											expr: &litMatcher{
												pos:        position{line: 2811, col: 14, offset: 92114},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2815, col: 14, offset: 92190},
											run: (*parser).callonSingleQuoteItalicTextElement163,
											expr: &litMatcher{
												pos:        position{line: 2815, col: 14, offset: 92190},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2819, col: 15, offset: 92268},
											run: (*parser).callonSingleQuoteItalicTextElement165,
											expr: &litMatcher{
												pos:        position{line: 2819, col: 15, offset: 92268},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2823, col: 13, offset: 92343},
											run: (*parser).callonSingleQuoteItalicTextElement167,
											expr: &litMatcher{
												pos:        position{line: 2823, col: 13, offset: 92343},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2805, col: 15, offset: 91999},
						run: (*parser).callonSingleQuoteItalicTextElement169,
						expr: &litMatcher{
							pos:        position{line: 2805, col: 15, offset: 91999},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2811, col: 14, offset: 92114},
						run: (*parser).callonSingleQuoteItalicTextElement171,
						expr: &litMatcher{
							pos:        position{line: 2811, col: 14, offset: 92114},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2815, col: 14, offset: 92190},
						run: (*parser).callonSingleQuoteItalicTextElement173,
						expr: &litMatcher{
							pos:        position{line: 2815, col: 14, offset: 92190},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2819, col: 15, offset: 92268},
						run: (*parser).callonSingleQuoteItalicTextElement175,
						expr: &litMatcher{
							pos:        position{line: 2819, col: 15, offset: 92268},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2823, col: 13, offset: 92343},
						run: (*parser).callonSingleQuoteItalicTextElement177,
						expr: &litMatcher{
							pos:        position{line: 2823, col: 13, offset: 92343},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2832, col: 5, offset: 92667},
						run: (*parser).callonSingleQuoteItalicTextElement179,
						expr: &seqExpr{
							pos: position{line: 2832, col: 5, offset: 92667},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2832, col: 14, offset: 92676},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2832, col: 19, offset: 92681},
									expr: &charClassMatcher{
										pos:        position{line: 2832, col: 20, offset: 92682},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2838, col: 5, offset: 92913},
						run: (*parser).callonSingleQuoteItalicTextElement185,
						expr: &seqExpr{
							pos: position{line: 2838, col: 5, offset: 92913},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2838, col: 14, offset: 92922},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2838, col: 18, offset: 92926},
									expr: &charClassMatcher{
										pos:        position{line: 2838, col: 19, offset: 92927},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2098, col: 7, offset: 68650},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2099, col: 7, offset: 68669},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 1141, col: 23, offset: 35577},
						run: (*parser).callonSingleQuoteItalicTextElement193,
						expr: &seqExpr{
							pos: position{line: 1141, col: 23, offset: 35577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 51, offset: 35605},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1141, col: 56, offset: 35610},
										run: (*parser).callonSingleQuoteItalicTextElement197,
										expr: &oneOrMoreExpr{
											pos: position{line: 1141, col: 56, offset: 35610},
											expr: &charClassMatcher{
												pos:        position{line: 1141, col: 56, offset: 35610},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2128, col: 5, offset: 69395},
						val:        "[^\\r\\n _]",
						chars:      []rune{'\r', '\n', ' ', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2129, col: 7, offset: 69502},
						run: (*parser).callonSingleQuoteItalicTextElement202,
						expr: &seqExpr{
							pos: position{line: 2129, col: 7, offset: 69502},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2129, col: 7, offset: 69502},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2997, col: 14, offset: 97724},
									run: (*parser).callonSingleQuoteItalicTextElement205,
									expr: &oneOrMoreExpr{
										pos: position{line: 2997, col: 14, offset: 97724},
										expr: &charClassMatcher{
											pos:        position{line: 2997, col: 14, offset: 97724},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 2103, col: 1, offset: 68774},
			expr: &choiceExpr{
				pos: position{line: 2105, col: 5, offset: 68838},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2105, col: 5, offset: 68838},
						run: (*parser).callonQuotedTextInSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 2105, col: 5, offset: 68838},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2105, col: 5, offset: 68838},
									expr: &litMatcher{
										pos:        position{line: 2105, col: 7, offset: 68840},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2106, col: 5, offset: 68849},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2107, col: 9, offset: 68867},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2107, col: 9, offset: 68867},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2108, col: 11, offset: 68894},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2109, col: 11, offset: 68922},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2110, col: 11, offset: 68953},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2111, col: 11, offset: 68984},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2117, col: 5, offset: 69084},
						run: (*parser).callonQuotedTextInSingleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 2117, col: 5, offset: 69084},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2117, col: 5, offset: 69084},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2117, col: 16, offset: 69095},
										expr: &ruleRefExpr{
											pos:  position{line: 2117, col: 17, offset: 69096},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2118, col: 5, offset: 69122},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2118, col: 11, offset: 69128},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2118, col: 11, offset: 69128},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2119, col: 11, offset: 69147},
												name: "DoubleQuoteItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2120, col: 11, offset: 69179},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2121, col: 11, offset: 69200},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2122, col: 11, offset: 69224},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2123, col: 11, offset: 69248},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 2133, col: 1, offset: 69680},
			expr: &choiceExpr{
				pos: position{line: 2135, col: 5, offset: 69745},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2135, col: 5, offset: 69745},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 2135, col: 5, offset: 69745},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2135, col: 5, offset: 69745},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 60558},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 60558},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 60558},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 60563},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 60563},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2135, col: 40, offset: 69780},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2135, col: 45, offset: 69785},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2135, col: 55, offset: 69795},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2135, col: 86, offset: 69826},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2139, col: 7, offset: 69991},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 2139, col: 7, offset: 69991},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2139, col: 7, offset: 69991},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2139, col: 42, offset: 70026},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2139, col: 47, offset: 70031},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2139, col: 57, offset: 70041},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2139, col: 88, offset: 70072},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2144, col: 7, offset: 70313},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 2144, col: 7, offset: 70313},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2144, col: 7, offset: 70313},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2144, col: 42, offset: 70348},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 2144, col: 46, offset: 70352},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2144, col: 56, offset: 70362},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2144, col: 87, offset: 70393},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 2151, col: 1, offset: 70712},
			expr: &choiceExpr{
				pos: position{line: 2151, col: 18, offset: 70729},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2151, col: 18, offset: 70729},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 2151, col: 45, offset: 70756},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2165, col: 1, offset: 71108},
			expr: &actionExpr{
				pos: position{line: 2166, col: 5, offset: 71141},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2166, col: 5, offset: 71141},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2163, col: 38, offset: 71102},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 2167, col: 5, offset: 71180},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2167, col: 15, offset: 71190},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2163, col: 38, offset: 71102},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2172, col: 1, offset: 71362},
			expr: &oneOrMoreExpr{
				pos: position{line: 2172, col: 37, offset: 71398},
				expr: &ruleRefExpr{
					pos:  position{line: 2172, col: 37, offset: 71398},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2174, col: 1, offset: 71465},
			expr: &actionExpr{
				pos: position{line: 2175, col: 5, offset: 71505},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2175, col: 5, offset: 71505},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2175, col: 5, offset: 71505},
							expr: &litMatcher{
								pos:        position{line: 2163, col: 38, offset: 71102},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2176, col: 5, offset: 71544},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2177, col: 9, offset: 71562},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2156, col: 5, offset: 70839},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 2156, col: 5, offset: 70839},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2156, col: 5, offset: 70839},
													expr: &charClassMatcher{
														pos:        position{line: 2156, col: 5, offset: 70839},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2156, col: 15, offset: 70849},
													expr: &choiceExpr{
														pos: position{line: 2156, col: 17, offset: 70851},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonDoubleQuoteMonospaceTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2153, col: 27, offset: 70808},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3083, col: 11, offset: 100401},
										run: (*parser).callonDoubleQuoteMonospaceTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3083, col: 11, offset: 100401},
											expr: &charClassMatcher{
												pos:        position{line: 3083, col: 12, offset: 100402},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2179, col: 11, offset: 71640},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDoubleQuoteMonospaceTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2179, col: 19, offset: 71648},
												expr: &actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonDoubleQuoteMonospaceTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										run: (*parser).callonDoubleQuoteMonospaceTextElement31,
										expr: &seqExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonDoubleQuoteMonospaceTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 644, col: 5, offset: 20666},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 644, col: 14, offset: 20675},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																run: (*parser).callonDoubleQuoteMonospaceTextElement36,
																expr: &seqExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 25, offset: 21328},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 37, offset: 21340},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 56, offset: 21359},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 664, col: 62, offset: 21365},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 78, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																run: (*parser).callonDoubleQuoteMonospaceTextElement58,
																expr: &seqExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 668, col: 25, offset: 21499},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 38, offset: 21512},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 57, offset: 21531},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 668, col: 63, offset: 21537},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 668, col: 79, offset: 21553},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																run: (*parser).callonDoubleQuoteMonospaceTextElement80,
																expr: &seqExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 650, col: 5, offset: 20804},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 650, col: 13, offset: 20812},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 650, col: 32, offset: 20831},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																run: (*parser).callonDoubleQuoteMonospaceTextElement90,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21072},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 9, offset: 21076},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 28, offset: 21095},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2181, col: 11, offset: 71730},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										run: (*parser).callonDoubleQuoteMonospaceTextElement101,
										expr: &seqExpr{
											pos: position{line: 2764, col: 5, offset: 90546},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													run: (*parser).callonDoubleQuoteMonospaceTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 5, offset: 90622},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2769, col: 9, offset: 90720},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																run: (*parser).callonDoubleQuoteMonospaceTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 692, col: 27, offset: 22379},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 692, col: 27, offset: 22379},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 692, col: 27, offset: 22379},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 32, offset: 22384},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 692, col: 40, offset: 22392},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 47, offset: 22399},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 51, offset: 22403},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 702, col: 24, offset: 22804},
																							expr: &choiceExpr{
																								pos: position{line: 703, col: 5, offset: 22810},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 703, col: 6, offset: 22811},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 703, col: 6, offset: 22811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 703, col: 14, offset: 22819},
																													expr: &charClassMatcher{
																														pos:        position{line: 703, col: 14, offset: 22819},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMonospaceTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMonospaceTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 707, col: 8, offset: 23045},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 707, col: 8, offset: 23045},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 79, offset: 22431},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 9, offset: 22504},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 9, offset: 22504},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 14, offset: 22509},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 22, offset: 22517},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2772, col: 11, offset: 90824},
																run: (*parser).callonDoubleQuoteMonospaceTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2772, col: 12, offset: 90825},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2797, col: 5, offset: 91718},
										run: (*parser).callonDoubleQuoteMonospaceTextElement160,
										expr: &seqExpr{
											pos: position{line: 2797, col: 5, offset: 91718},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2797, col: 5, offset: 91718},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2797, col: 10, offset: 91723},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2805, col: 15, offset: 91999},
															run: (*parser).callonDoubleQuoteMonospaceTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2805, col: 15, offset: 91999},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2811, col: 14, offset: 92114},
															run: (*parser).callonDoubleQuoteMonospaceTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2811, col: 14, offset: 92114},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2815, col: 14, offset: 92190},
															run: (*parser).callonDoubleQuoteMonospaceTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2815, col: 14, offset: 92190},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2819, col: 15, offset: 92268},
															run: (*parser).callonDoubleQuoteMonospaceTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2819, col: 15, offset: 92268},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2823, col: 13, offset: 92343},
															run: (*parser).callonDoubleQuoteMonospaceTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2823, col: 13, offset: 92343},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2805, col: 15, offset: 91999},
										run: (*parser).callonDoubleQuoteMonospaceTextElement174,
										expr: &litMatcher{
											pos:        position{line: 2805, col: 15, offset: 91999},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 14, offset: 92114},
										run: (*parser).callonDoubleQuoteMonospaceTextElement176,
										expr: &litMatcher{
											pos:        position{line: 2811, col: 14, offset: 92114},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2815, col: 14, offset: 92190},
										run: (*parser).callonDoubleQuoteMonospaceTextElement178,
										expr: &litMatcher{
											pos:        position{line: 2815, col: 14, offset: 92190},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2819, col: 15, offset: 92268},
										run: (*parser).callonDoubleQuoteMonospaceTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2819, col: 15, offset: 92268},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2823, col: 13, offset: 92343},
										run: (*parser).callonDoubleQuoteMonospaceTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2823, col: 13, offset: 92343},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2832, col: 5, offset: 92667},
										run: (*parser).callonDoubleQuoteMonospaceTextElement184,
										expr: &seqExpr{
											pos: position{line: 2832, col: 5, offset: 92667},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2832, col: 14, offset: 92676},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2832, col: 19, offset: 92681},
													expr: &charClassMatcher{
														pos:        position{line: 2832, col: 20, offset: 92682},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2838, col: 5, offset: 92913},
										run: (*parser).callonDoubleQuoteMonospaceTextElement190,
										expr: &seqExpr{
											pos: position{line: 2838, col: 5, offset: 92913},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2838, col: 14, offset: 92922},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2838, col: 18, offset: 92926},
													expr: &charClassMatcher{
														pos:        position{line: 2838, col: 19, offset: 92927},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2184, col: 11, offset: 71846},
										name: "QuotedString",
									},
									&litMatcher{
										pos:        position{line: 2809, col: 18, offset: 92078},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2186, col: 11, offset: 71936},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 1141, col: 23, offset: 35577},
										run: (*parser).callonDoubleQuoteMonospaceTextElement199,
										expr: &seqExpr{
											pos: position{line: 1141, col: 23, offset: 35577},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1141, col: 51, offset: 35605},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1141, col: 56, offset: 35610},
														run: (*parser).callonDoubleQuoteMonospaceTextElement203,
														expr: &oneOrMoreExpr{
															pos: position{line: 1141, col: 56, offset: 35610},
															expr: &charClassMatcher{
																pos:        position{line: 1141, col: 56, offset: 35610},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2218, col: 5, offset: 72734},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2219, col: 7, offset: 72836},
										run: (*parser).callonDoubleQuoteMonospaceTextElement208,
										expr: &seqExpr{
											pos: position{line: 2219, col: 7, offset: 72836},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2219, col: 7, offset: 72836},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2997, col: 14, offset: 97724},
													run: (*parser).callonDoubleQuoteMonospaceTextElement211,
													expr: &oneOrMoreExpr{
														pos: position{line: 2997, col: 14, offset: 97724},
														expr: &charClassMatcher{
															pos:        position{line: 2997, col: 14, offset: 97724},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 2192, col: 1, offset: 72100},
			expr: &choiceExpr{
				pos: position{line: 2194, col: 5, offset: 72167},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2194, col: 5, offset: 72167},
						run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2194, col: 5, offset: 72167},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2194, col: 5, offset: 72167},
									expr: &litMatcher{
										pos:        position{line: 2194, col: 7, offset: 72169},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2195, col: 5, offset: 72178},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2196, col: 9, offset: 72196},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2196, col: 9, offset: 72196},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2197, col: 11, offset: 72223},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2198, col: 11, offset: 72251},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2199, col: 11, offset: 72279},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2200, col: 11, offset: 72310},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2206, col: 5, offset: 72410},
						run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 2206, col: 5, offset: 72410},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2206, col: 5, offset: 72410},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2206, col: 16, offset: 72421},
										expr: &ruleRefExpr{
											pos:  position{line: 2206, col: 17, offset: 72422},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2207, col: 5, offset: 72448},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2208, col: 9, offset: 72463},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2208, col: 9, offset: 72463},
												name: "SingleQuoteMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2209, col: 11, offset: 72498},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2210, col: 11, offset: 72517},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2211, col: 11, offset: 72538},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2212, col: 11, offset: 72559},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2213, col: 11, offset: 72583},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2232, col: 1, offset: 73322},
			expr: &actionExpr{
				pos: position{line: 2233, col: 5, offset: 73355},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2233, col: 5, offset: 73355},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2228, col: 43, offset: 73270},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 2234, col: 5, offset: 73399},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2234, col: 15, offset: 73409},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2230, col: 41, offset: 73316},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2239, col: 1, offset: 73585},
			expr: &actionExpr{
				pos: position{line: 2240, col: 5, offset: 73626},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2240, col: 5, offset: 73626},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2240, col: 5, offset: 73626},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&notExpr{
							pos: position{line: 2240, col: 10, offset: 73631},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonSingleQuoteMonospaceTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2241, col: 5, offset: 73670},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2241, col: 14, offset: 73679},
								expr: &ruleRefExpr{
									pos:  position{line: 2241, col: 15, offset: 73680},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2242, col: 5, offset: 73718},
							run: (*parser).callonSingleQuoteMonospaceTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2248, col: 1, offset: 73859},
			expr: &choiceExpr{
				pos: position{line: 2249, col: 5, offset: 73900},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3005, col: 5, offset: 98105},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 3005, col: 5, offset: 98105},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 3005, col: 5, offset: 98105},
									expr: &charClassMatcher{
										pos:        position{line: 3005, col: 5, offset: 98105},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 3005, col: 15, offset: 98115},
									expr: &choiceExpr{
										pos: position{line: 3005, col: 17, offset: 98117},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3005, col: 17, offset: 98117},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 3092, col: 8, offset: 100608},
												expr: &anyMatcher{
													line: 3092, col: 9, offset: 100609,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3007, col: 9, offset: 98199},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 3007, col: 9, offset: 98199},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 3007, col: 9, offset: 98199},
									expr: &charClassMatcher{
										pos:        position{line: 3007, col: 9, offset: 98199},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 3007, col: 19, offset: 98209},
									expr: &seqExpr{
										pos: position{line: 3007, col: 20, offset: 98210},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3007, col: 20, offset: 98210},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 3007, col: 27, offset: 98217},
												expr: &charClassMatcher{
													pos:        position{line: 3007, col: 27, offset: 98217},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3083, col: 11, offset: 100401},
						run: (*parser).callonSingleQuoteMonospaceTextElement20,
						expr: &oneOrMoreExpr{
							pos: position{line: 3083, col: 11, offset: 100401},
							expr: &charClassMatcher{
								pos:        position{line: 3083, col: 12, offset: 100402},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2251, col: 7, offset: 73925},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3088, col: 12, offset: 100518},
								run: (*parser).callonSingleQuoteMonospaceTextElement24,
								expr: &choiceExpr{
									pos: position{line: 3088, col: 13, offset: 100519},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3088, col: 13, offset: 100519},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 20, offset: 100526},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 29, offset: 100535},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2251, col: 15, offset: 73933},
								expr: &actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonSingleQuoteMonospaceTextElement30,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 20597},
						run: (*parser).callonSingleQuoteMonospaceTextElement35,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 20597},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 641, col: 5, offset: 20597},
									run: (*parser).callonSingleQuoteMonospaceTextElement37,
								},
								&labeledExpr{
									pos:   position{line: 644, col: 5, offset: 20666},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 644, col: 14, offset: 20675},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 664, col: 25, offset: 21328},
												run: (*parser).callonSingleQuoteMonospaceTextElement40,
												expr: &seqExpr{
													pos: position{line: 664, col: 25, offset: 21328},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 25, offset: 21328},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 37, offset: 21340},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement44,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 664, col: 56, offset: 21359},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 664, col: 62, offset: 21365},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteMonospaceTextElement51,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteMonospaceTextElement56,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteMonospaceTextElement58,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 78, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 668, col: 25, offset: 21499},
												run: (*parser).callonSingleQuoteMonospaceTextElement62,
												expr: &seqExpr{
													pos: position{line: 668, col: 25, offset: 21499},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 668, col: 25, offset: 21499},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 668, col: 38, offset: 21512},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement66,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 668, col: 57, offset: 21531},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 668, col: 63, offset: 21537},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteMonospaceTextElement73,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteMonospaceTextElement78,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteMonospaceTextElement80,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 668, col: 79, offset: 21553},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 650, col: 5, offset: 20804},
												run: (*parser).callonSingleQuoteMonospaceTextElement84,
												expr: &seqExpr{
													pos: position{line: 650, col: 5, offset: 20804},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 650, col: 5, offset: 20804},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 650, col: 13, offset: 20812},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement88,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 650, col: 32, offset: 20831},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21072},
												run: (*parser).callonSingleQuoteMonospaceTextElement94,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21072},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21072},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 9, offset: 21076},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement98,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 28, offset: 21095},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2253, col: 7, offset: 74007},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2764, col: 5, offset: 90546},
						run: (*parser).callonSingleQuoteMonospaceTextElement105,
						expr: &seqExpr{
							pos: position{line: 2764, col: 5, offset: 90546},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2764, col: 5, offset: 90546},
									run: (*parser).callonSingleQuoteMonospaceTextElement107,
								},
								&labeledExpr{
									pos:   position{line: 2767, col: 5, offset: 90622},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2769, col: 9, offset: 90720},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2769, col: 9, offset: 90720},
												run: (*parser).callonSingleQuoteMonospaceTextElement110,
												expr: &choiceExpr{
													pos: position{line: 692, col: 27, offset: 22379},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 692, col: 27, offset: 22379},
															run: (*parser).callonSingleQuoteMonospaceTextElement112,
															expr: &seqExpr{
																pos: position{line: 692, col: 27, offset: 22379},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 692, col: 27, offset: 22379},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 32, offset: 22384},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteMonospaceTextElement116,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 692, col: 40, offset: 22392},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonSingleQuoteMonospaceTextElement120,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 47, offset: 22399},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 22403},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 702, col: 24, offset: 22804},
																			expr: &choiceExpr{
																				pos: position{line: 703, col: 5, offset: 22810},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 703, col: 6, offset: 22811},
																						run: (*parser).callonSingleQuoteMonospaceTextElement126,
																						expr: &seqExpr{
																							pos: position{line: 703, col: 6, offset: 22811},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 703, col: 6, offset: 22811},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 703, col: 14, offset: 22819},
																									expr: &charClassMatcher{
																										pos:        position{line: 703, col: 14, offset: 22819},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonSingleQuoteMonospaceTextElement131,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMonospaceTextElement135,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonSingleQuoteMonospaceTextElement141,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMonospaceTextElement145,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 707, col: 8, offset: 23045},
																						run: (*parser).callonSingleQuoteMonospaceTextElement151,
																						expr: &litMatcher{
																							pos:        position{line: 707, col: 8, offset: 23045},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 79, offset: 22431},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 694, col: 9, offset: 22504},
															run: (*parser).callonSingleQuoteMonospaceTextElement154,
															expr: &seqExpr{
																pos: position{line: 694, col: 9, offset: 22504},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 9, offset: 22504},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 14, offset: 22509},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteMonospaceTextElement158,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 22, offset: 22517},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2772, col: 11, offset: 90824},
												run: (*parser).callonSingleQuoteMonospaceTextElement162,
												expr: &charClassMatcher{
													pos:        position{line: 2772, col: 12, offset: 90825},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2797, col: 5, offset: 91718},
						run: (*parser).callonSingleQuoteMonospaceTextElement164,
						expr: &seqExpr{
							pos: position{line: 2797, col: 5, offset: 91718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2797, col: 5, offset: 91718},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2797, col: 10, offset: 91723},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 15, offset: 91999},
											run: (*parser).callonSingleQuoteMonospaceTextElement168,
											expr: &litMatcher{
												pos:        position{line: 2805, col: 15, offset: 91999},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 14, offset: 92114},
											run: (*parser).callonSingleQuoteMonospaceTextElement170,
											expr: &litMatcher{
												pos:        position{line: 2811, col: 14, offset: 92114},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2815, col: 14, offset: 92190},
											run: (*parser).callonSingleQuoteMonospaceTextElement172,
											expr: &litMatcher{
												pos:        position{line: 2815, col: 14, offset: 92190},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2819, col: 15, offset: 92268},
											run: (*parser).callonSingleQuoteMonospaceTextElement174,
											expr: &litMatcher{
												pos:        position{line: 2819, col: 15, offset: 92268},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2823, col: 13, offset: 92343},
											run: (*parser).callonSingleQuoteMonospaceTextElement176,
											expr: &litMatcher{
												pos:        position{line: 2823, col: 13, offset: 92343},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2805, col: 15, offset: 91999},
						run: (*parser).callonSingleQuoteMonospaceTextElement178,
						expr: &litMatcher{
							pos:        position{line: 2805, col: 15, offset: 91999},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2811, col: 14, offset: 92114},
						run: (*parser).callonSingleQuoteMonospaceTextElement180,
						expr: &litMatcher{
							pos:        position{line: 2811, col: 14, offset: 92114},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2815, col: 14, offset: 92190},
						run: (*parser).callonSingleQuoteMonospaceTextElement182,
						expr: &litMatcher{
							pos:        position{line: 2815, col: 14, offset: 92190},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2819, col: 15, offset: 92268},
						run: (*parser).callonSingleQuoteMonospaceTextElement184,
						expr: &litMatcher{
							pos:        position{line: 2819, col: 15, offset: 92268},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2823, col: 13, offset: 92343},
						run: (*parser).callonSingleQuoteMonospaceTextElement186,
						expr: &litMatcher{
							pos:        position{line: 2823, col: 13, offset: 92343},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2832, col: 5, offset: 92667},
						run: (*parser).callonSingleQuoteMonospaceTextElement188,
						expr: &seqExpr{
							pos: position{line: 2832, col: 5, offset: 92667},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2832, col: 14, offset: 92676},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2832, col: 19, offset: 92681},
									expr: &charClassMatcher{
										pos:        position{line: 2832, col: 20, offset: 92682},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2838, col: 5, offset: 92913},
						run: (*parser).callonSingleQuoteMonospaceTextElement194,
						expr: &seqExpr{
							pos: position{line: 2838, col: 5, offset: 92913},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2838, col: 14, offset: 92922},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2838, col: 18, offset: 92926},
									expr: &charClassMatcher{
										pos:        position{line: 2838, col: 19, offset: 92927},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2256, col: 7, offset: 74111},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2257, col: 7, offset: 74130},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 2809, col: 18, offset: 92078},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 1141, col: 23, offset: 35577},
						run: (*parser).callonSingleQuoteMonospaceTextElement203,
						expr: &seqExpr{
							pos: position{line: 1141, col: 23, offset: 35577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 51, offset: 35605},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1141, col: 56, offset: 35610},
										run: (*parser).callonSingleQuoteMonospaceTextElement207,
										expr: &oneOrMoreExpr{
											pos: position{line: 1141, col: 56, offset: 35610},
											expr: &charClassMatcher{
												pos:        position{line: 1141, col: 56, offset: 35610},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2288, col: 5, offset: 74895},
						run: (*parser).callonSingleQuoteMonospaceTextElement211,
						expr: &choiceExpr{
							pos: position{line: 2288, col: 6, offset: 74896},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2288, col: 6, offset: 74896},
									val:        "[^\\r\\n` ]",
									chars:      []rune{'\r', '\n', '`', ' '},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 2289, col: 7, offset: 75008},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2153, col: 27, offset: 70808},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2997, col: 14, offset: 97724},
											run: (*parser).callonSingleQuoteMonospaceTextElement216,
											expr: &oneOrMoreExpr{
												pos: position{line: 2997, col: 14, offset: 97724},
												expr: &charClassMatcher{
													pos:        position{line: 2997, col: 14, offset: 97724},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 2262, col: 1, offset: 74261},
			expr: &choiceExpr{
				pos: position{line: 2264, col: 5, offset: 74328},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2264, col: 5, offset: 74328},
						run: (*parser).callonQuotedTextInSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2264, col: 5, offset: 74328},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2264, col: 5, offset: 74328},
									expr: &litMatcher{
										pos:        position{line: 2264, col: 7, offset: 74330},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2265, col: 5, offset: 74339},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2266, col: 9, offset: 74357},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2266, col: 9, offset: 74357},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2267, col: 11, offset: 74384},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2268, col: 11, offset: 74412},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2269, col: 11, offset: 74440},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2270, col: 11, offset: 74471},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2276, col: 5, offset: 74571},
						run: (*parser).callonQuotedTextInSingleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 2276, col: 5, offset: 74571},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2276, col: 5, offset: 74571},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2276, col: 16, offset: 74582},
										expr: &ruleRefExpr{
											pos:  position{line: 2276, col: 17, offset: 74583},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2277, col: 5, offset: 74609},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2278, col: 9, offset: 74624},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2278, col: 9, offset: 74624},
												name: "DoubleQuoteMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2279, col: 11, offset: 74659},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2280, col: 11, offset: 74678},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2281, col: 11, offset: 74699},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2282, col: 11, offset: 74720},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2283, col: 11, offset: 74744},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2293, col: 1, offset: 75209},
			expr: &choiceExpr{
				pos: position{line: 2295, col: 5, offset: 75280},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2295, col: 5, offset: 75280},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2295, col: 5, offset: 75280},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2295, col: 5, offset: 75280},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 60558},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 60558},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 60558},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 60563},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 60563},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2295, col: 40, offset: 75315},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2295, col: 45, offset: 75320},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2295, col: 55, offset: 75330},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2295, col: 89, offset: 75364},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2299, col: 7, offset: 75533},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2299, col: 7, offset: 75533},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2299, col: 7, offset: 75533},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2299, col: 42, offset: 75568},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2299, col: 47, offset: 75573},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2299, col: 57, offset: 75583},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2299, col: 91, offset: 75617},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2304, col: 7, offset: 75823},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2304, col: 7, offset: 75823},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2304, col: 7, offset: 75823},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2304, col: 42, offset: 75858},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2304, col: 46, offset: 75862},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2304, col: 56, offset: 75872},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2304, col: 90, offset: 75906},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 2311, col: 1, offset: 76158},
			expr: &choiceExpr{
				pos: position{line: 2311, col: 15, offset: 76172},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2311, col: 15, offset: 76172},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2311, col: 39, offset: 76196},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2325, col: 1, offset: 76534},
			expr: &actionExpr{
				pos: position{line: 2326, col: 5, offset: 76564},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2326, col: 5, offset: 76564},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2323, col: 35, offset: 76528},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2327, col: 5, offset: 76600},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2327, col: 15, offset: 76610},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2323, col: 35, offset: 76528},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2332, col: 1, offset: 76773},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2332, col: 34, offset: 76806},
				expr: &ruleRefExpr{
					pos:  position{line: 2332, col: 34, offset: 76806},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2334, col: 1, offset: 76837},
			expr: &actionExpr{
				pos: position{line: 2335, col: 5, offset: 76906},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2335, col: 5, offset: 76906},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2335, col: 5, offset: 76906},
							expr: &litMatcher{
								pos:        position{line: 2323, col: 35, offset: 76528},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2336, col: 5, offset: 76942},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2337, col: 9, offset: 76960},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2316, col: 5, offset: 76270},
										run: (*parser).callonDoubleQuoteMarkedTextElement7,
										expr: &seqExpr{
											pos: position{line: 2316, col: 5, offset: 76270},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2316, col: 5, offset: 76270},
													expr: &charClassMatcher{
														pos:        position{line: 2316, col: 5, offset: 76270},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2316, col: 19, offset: 76284},
													expr: &choiceExpr{
														pos: position{line: 2316, col: 21, offset: 76286},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonDoubleQuoteMarkedTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2313, col: 24, offset: 76242},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3083, col: 11, offset: 100401},
										run: (*parser).callonDoubleQuoteMarkedTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3083, col: 11, offset: 100401},
											expr: &charClassMatcher{
												pos:        position{line: 3083, col: 12, offset: 100402},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2339, col: 11, offset: 77035},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDoubleQuoteMarkedTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2339, col: 19, offset: 77043},
												expr: &actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonDoubleQuoteMarkedTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										run: (*parser).callonDoubleQuoteMarkedTextElement31,
										expr: &seqExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonDoubleQuoteMarkedTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 644, col: 5, offset: 20666},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 644, col: 14, offset: 20675},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																run: (*parser).callonDoubleQuoteMarkedTextElement36,
																expr: &seqExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 25, offset: 21328},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 37, offset: 21340},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 56, offset: 21359},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 664, col: 62, offset: 21365},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteMarkedTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteMarkedTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteMarkedTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 78, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																run: (*parser).callonDoubleQuoteMarkedTextElement58,
																expr: &seqExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 668, col: 25, offset: 21499},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 38, offset: 21512},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 57, offset: 21531},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 668, col: 63, offset: 21537},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuoteMarkedTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuoteMarkedTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuoteMarkedTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 668, col: 79, offset: 21553},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																run: (*parser).callonDoubleQuoteMarkedTextElement80,
																expr: &seqExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 650, col: 5, offset: 20804},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 650, col: 13, offset: 20812},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 650, col: 32, offset: 20831},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																run: (*parser).callonDoubleQuoteMarkedTextElement90,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21072},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 9, offset: 21076},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 28, offset: 21095},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2341, col: 11, offset: 77125},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										run: (*parser).callonDoubleQuoteMarkedTextElement101,
										expr: &seqExpr{
											pos: position{line: 2764, col: 5, offset: 90546},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													run: (*parser).callonDoubleQuoteMarkedTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 5, offset: 90622},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2769, col: 9, offset: 90720},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																run: (*parser).callonDoubleQuoteMarkedTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 692, col: 27, offset: 22379},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			run: (*parser).callonDoubleQuoteMarkedTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 692, col: 27, offset: 22379},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 692, col: 27, offset: 22379},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 32, offset: 22384},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteMarkedTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 692, col: 40, offset: 22392},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDoubleQuoteMarkedTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 47, offset: 22399},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 51, offset: 22403},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 702, col: 24, offset: 22804},
																							expr: &choiceExpr{
																								pos: position{line: 703, col: 5, offset: 22810},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										run: (*parser).callonDoubleQuoteMarkedTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 703, col: 6, offset: 22811},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 703, col: 6, offset: 22811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 703, col: 14, offset: 22819},
																													expr: &charClassMatcher{
																														pos:        position{line: 703, col: 14, offset: 22819},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonDoubleQuoteMarkedTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMarkedTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonDoubleQuoteMarkedTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMarkedTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 707, col: 8, offset: 23045},
																										run: (*parser).callonDoubleQuoteMarkedTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 707, col: 8, offset: 23045},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 79, offset: 22431},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			run: (*parser).callonDoubleQuoteMarkedTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 9, offset: 22504},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 9, offset: 22504},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 14, offset: 22509},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuoteMarkedTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 22, offset: 22517},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2772, col: 11, offset: 90824},
																run: (*parser).callonDoubleQuoteMarkedTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2772, col: 12, offset: 90825},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2797, col: 5, offset: 91718},
										run: (*parser).callonDoubleQuoteMarkedTextElement160,
										expr: &seqExpr{
											pos: position{line: 2797, col: 5, offset: 91718},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2797, col: 5, offset: 91718},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2797, col: 10, offset: 91723},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2805, col: 15, offset: 91999},
															run: (*parser).callonDoubleQuoteMarkedTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2805, col: 15, offset: 91999},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2811, col: 14, offset: 92114},
															run: (*parser).callonDoubleQuoteMarkedTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2811, col: 14, offset: 92114},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2815, col: 14, offset: 92190},
															run: (*parser).callonDoubleQuoteMarkedTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2815, col: 14, offset: 92190},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2819, col: 15, offset: 92268},
															run: (*parser).callonDoubleQuoteMarkedTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2819, col: 15, offset: 92268},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2823, col: 13, offset: 92343},
															run: (*parser).callonDoubleQuoteMarkedTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2823, col: 13, offset: 92343},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2805, col: 15, offset: 91999},
										run: (*parser).callonDoubleQuoteMarkedTextElement174,
										expr: &litMatcher{
											pos:        position{line: 2805, col: 15, offset: 91999},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 14, offset: 92114},
										run: (*parser).callonDoubleQuoteMarkedTextElement176,
										expr: &litMatcher{
											pos:        position{line: 2811, col: 14, offset: 92114},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2815, col: 14, offset: 92190},
										run: (*parser).callonDoubleQuoteMarkedTextElement178,
										expr: &litMatcher{
											pos:        position{line: 2815, col: 14, offset: 92190},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2819, col: 15, offset: 92268},
										run: (*parser).callonDoubleQuoteMarkedTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2819, col: 15, offset: 92268},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2823, col: 13, offset: 92343},
										run: (*parser).callonDoubleQuoteMarkedTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2823, col: 13, offset: 92343},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2832, col: 5, offset: 92667},
										run: (*parser).callonDoubleQuoteMarkedTextElement184,
										expr: &seqExpr{
											pos: position{line: 2832, col: 5, offset: 92667},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2832, col: 14, offset: 92676},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2832, col: 19, offset: 92681},
													expr: &charClassMatcher{
														pos:        position{line: 2832, col: 20, offset: 92682},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2838, col: 5, offset: 92913},
										run: (*parser).callonDoubleQuoteMarkedTextElement190,
										expr: &seqExpr{
											pos: position{line: 2838, col: 5, offset: 92913},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2838, col: 14, offset: 92922},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2838, col: 18, offset: 92926},
													expr: &charClassMatcher{
														pos:        position{line: 2838, col: 19, offset: 92927},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2344, col: 11, offset: 77241},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2345, col: 11, offset: 77264},
										name: "QuotedTextInDoubleMarkedBoldText",
									},
									&actionExpr{
										pos: position{line: 1141, col: 23, offset: 35577},
										run: (*parser).callonDoubleQuoteMarkedTextElement198,
										expr: &seqExpr{
											pos: position{line: 1141, col: 23, offset: 35577},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1141, col: 51, offset: 35605},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1141, col: 56, offset: 35610},
														run: (*parser).callonDoubleQuoteMarkedTextElement202,
														expr: &oneOrMoreExpr{
															pos: position{line: 1141, col: 56, offset: 35610},
															expr: &charClassMatcher{
																pos:        position{line: 1141, col: 56, offset: 35610},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2378, col: 5, offset: 78048},
										val:        "[^\\r\\n#]",
										chars:      []rune{'\r', '\n', '#'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2379, col: 7, offset: 78147},
										run: (*parser).callonDoubleQuoteMarkedTextElement207,
										expr: &seqExpr{
											pos: position{line: 2379, col: 7, offset: 78147},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2323, col: 35, offset: 76528},
													val:        "##",
													ignoreCase: false,
													want:       "\"##\"",
												},
												&actionExpr{
													pos: position{line: 2997, col: 14, offset: 97724},
													run: (*parser).callonDoubleQuoteMarkedTextElement210,
													expr: &oneOrMoreExpr{
														pos: position{line: 2997, col: 14, offset: 97724},
														expr: &charClassMatcher{
															pos:        position{line: 2997, col: 14, offset: 97724},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleMarkedBoldText",
			pos:  position{line: 2352, col: 1, offset: 77418},
			expr: &choiceExpr{
				pos: position{line: 2354, col: 5, offset: 77481},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2354, col: 5, offset: 77481},
						run: (*parser).callonQuotedTextInDoubleMarkedBoldText2,
						expr: &seqExpr{
							pos: position{line: 2354, col: 5, offset: 77481},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2354, col: 5, offset: 77481},
									expr: &litMatcher{
										pos:        position{line: 2354, col: 7, offset: 77483},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2355, col: 5, offset: 77492},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2356, col: 9, offset: 77510},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2356, col: 9, offset: 77510},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2357, col: 11, offset: 77537},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2358, col: 11, offset: 77565},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2359, col: 11, offset: 77596},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2360, col: 11, offset: 77627},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2366, col: 5, offset: 77727},
						run: (*parser).callonQuotedTextInDoubleMarkedBoldText13,
						expr: &seqExpr{
							pos: position{line: 2366, col: 5, offset: 77727},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2366, col: 5, offset: 77727},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2366, col: 16, offset: 77738},
										expr: &ruleRefExpr{
											pos:  position{line: 2366, col: 17, offset: 77739},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2367, col: 5, offset: 77765},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2368, col: 9, offset: 77780},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2368, col: 9, offset: 77780},
												name: "SingleQuoteMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2369, col: 11, offset: 77812},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2370, col: 11, offset: 77831},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2371, col: 11, offset: 77852},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2372, col: 11, offset: 77876},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2373, col: 11, offset: 77900},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2390, col: 1, offset: 78554},
			expr: &actionExpr{
				pos: position{line: 2391, col: 5, offset: 78584},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2391, col: 5, offset: 78584},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2386, col: 40, offset: 78506},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 2392, col: 5, offset: 78624},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2392, col: 15, offset: 78634},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2388, col: 38, offset: 78548},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2397, col: 1, offset: 78801},
			expr: &actionExpr{
				pos: position{line: 2398, col: 5, offset: 78839},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2398, col: 5, offset: 78839},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2398, col: 5, offset: 78839},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&notExpr{
							pos: position{line: 2398, col: 10, offset: 78844},
							expr: &actionExpr{
								pos: position{line: 3079, col: 10, offset: 100334},
								run: (*parser).callonSingleQuoteMarkedTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3079, col: 11, offset: 100335},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2399, col: 5, offset: 78883},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2399, col: 14, offset: 78892},
								expr: &ruleRefExpr{
									pos:  position{line: 2399, col: 15, offset: 78893},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2400, col: 5, offset: 78929},
							run: (*parser).callonSingleQuoteMarkedTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2406, col: 1, offset: 79070},
			expr: &choiceExpr{
				pos: position{line: 2407, col: 5, offset: 79107},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2316, col: 5, offset: 76270},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2316, col: 5, offset: 76270},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2316, col: 5, offset: 76270},
									expr: &charClassMatcher{
										pos:        position{line: 2316, col: 5, offset: 76270},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2316, col: 19, offset: 76284},
									expr: &choiceExpr{
										pos: position{line: 2316, col: 21, offset: 76286},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonSingleQuoteMarkedTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2313, col: 24, offset: 76242},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3083, col: 11, offset: 100401},
						run: (*parser).callonSingleQuoteMarkedTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 3083, col: 11, offset: 100401},
							expr: &charClassMatcher{
								pos:        position{line: 3083, col: 12, offset: 100402},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2409, col: 7, offset: 79141},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3088, col: 12, offset: 100518},
								run: (*parser).callonSingleQuoteMarkedTextElement15,
								expr: &choiceExpr{
									pos: position{line: 3088, col: 13, offset: 100519},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3088, col: 13, offset: 100519},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 20, offset: 100526},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3088, col: 29, offset: 100535},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2409, col: 15, offset: 79149},
								expr: &actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonSingleQuoteMarkedTextElement21,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 20597},
						run: (*parser).callonSingleQuoteMarkedTextElement26,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 20597},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 641, col: 5, offset: 20597},
									run: (*parser).callonSingleQuoteMarkedTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 644, col: 5, offset: 20666},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 644, col: 14, offset: 20675},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 664, col: 25, offset: 21328},
												run: (*parser).callonSingleQuoteMarkedTextElement31,
												expr: &seqExpr{
													pos: position{line: 664, col: 25, offset: 21328},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 25, offset: 21328},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 37, offset: 21340},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement35,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 664, col: 56, offset: 21359},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 664, col: 62, offset: 21365},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteMarkedTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteMarkedTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteMarkedTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 78, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 668, col: 25, offset: 21499},
												run: (*parser).callonSingleQuoteMarkedTextElement53,
												expr: &seqExpr{
													pos: position{line: 668, col: 25, offset: 21499},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 668, col: 25, offset: 21499},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 668, col: 38, offset: 21512},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement57,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 668, col: 57, offset: 21531},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 668, col: 63, offset: 21537},
																expr: &actionExpr{
																	pos: position{line: 672, col: 17, offset: 21660},
																	run: (*parser).callonSingleQuoteMarkedTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 672, col: 17, offset: 21660},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 672, col: 17, offset: 21660},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 672, col: 21, offset: 21664},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 672, col: 28, offset: 21671},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 672, col: 28, offset: 21671},
																							run: (*parser).callonSingleQuoteMarkedTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 672, col: 28, offset: 21671},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 674, col: 9, offset: 21725},
																							run: (*parser).callonSingleQuoteMarkedTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 674, col: 9, offset: 21725},
																								expr: &charClassMatcher{
																									pos:        position{line: 674, col: 9, offset: 21725},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 668, col: 79, offset: 21553},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 650, col: 5, offset: 20804},
												run: (*parser).callonSingleQuoteMarkedTextElement75,
												expr: &seqExpr{
													pos: position{line: 650, col: 5, offset: 20804},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 650, col: 5, offset: 20804},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 650, col: 13, offset: 20812},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement79,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 650, col: 32, offset: 20831},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21072},
												run: (*parser).callonSingleQuoteMarkedTextElement85,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21072},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21072},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 9, offset: 21076},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement89,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 28, offset: 21095},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2411, col: 7, offset: 79223},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2764, col: 5, offset: 90546},
						run: (*parser).callonSingleQuoteMarkedTextElement96,
						expr: &seqExpr{
							pos: position{line: 2764, col: 5, offset: 90546},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2764, col: 5, offset: 90546},
									run: (*parser).callonSingleQuoteMarkedTextElement98,
								},
								&labeledExpr{
									pos:   position{line: 2767, col: 5, offset: 90622},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2769, col: 9, offset: 90720},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2769, col: 9, offset: 90720},
												run: (*parser).callonSingleQuoteMarkedTextElement101,
												expr: &choiceExpr{
													pos: position{line: 692, col: 27, offset: 22379},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 692, col: 27, offset: 22379},
															run: (*parser).callonSingleQuoteMarkedTextElement103,
															expr: &seqExpr{
																pos: position{line: 692, col: 27, offset: 22379},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 692, col: 27, offset: 22379},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 32, offset: 22384},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteMarkedTextElement107,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 692, col: 40, offset: 22392},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonSingleQuoteMarkedTextElement111,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 47, offset: 22399},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 692, col: 51, offset: 22403},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 702, col: 24, offset: 22804},
																			expr: &choiceExpr{
																				pos: position{line: 703, col: 5, offset: 22810},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 703, col: 6, offset: 22811},
																						run: (*parser).callonSingleQuoteMarkedTextElement117,
																						expr: &seqExpr{
																							pos: position{line: 703, col: 6, offset: 22811},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 703, col: 6, offset: 22811},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 703, col: 14, offset: 22819},
																									expr: &charClassMatcher{
																										pos:        position{line: 703, col: 14, offset: 22819},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonSingleQuoteMarkedTextElement122,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMarkedTextElement126,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonSingleQuoteMarkedTextElement132,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMarkedTextElement136,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 707, col: 8, offset: 23045},
																						run: (*parser).callonSingleQuoteMarkedTextElement142,
																						expr: &litMatcher{
																							pos:        position{line: 707, col: 8, offset: 23045},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 692, col: 79, offset: 22431},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 694, col: 9, offset: 22504},
															run: (*parser).callonSingleQuoteMarkedTextElement145,
															expr: &seqExpr{
																pos: position{line: 694, col: 9, offset: 22504},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 694, col: 9, offset: 22504},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 694, col: 14, offset: 22509},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3064, col: 7, offset: 99986},
																			run: (*parser).callonSingleQuoteMarkedTextElement149,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3064, col: 7, offset: 99986},
																				expr: &charClassMatcher{
																					pos:        position{line: 3064, col: 7, offset: 99986},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 694, col: 22, offset: 22517},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2772, col: 11, offset: 90824},
												run: (*parser).callonSingleQuoteMarkedTextElement153,
												expr: &charClassMatcher{
													pos:        position{line: 2772, col: 12, offset: 90825},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2797, col: 5, offset: 91718},
						run: (*parser).callonSingleQuoteMarkedTextElement155,
						expr: &seqExpr{
							pos: position{line: 2797, col: 5, offset: 91718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2797, col: 5, offset: 91718},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2797, col: 10, offset: 91723},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2805, col: 15, offset: 91999},
											run: (*parser).callonSingleQuoteMarkedTextElement159,
											expr: &litMatcher{
												pos:        position{line: 2805, col: 15, offset: 91999},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2811, col: 14, offset: 92114},
											run: (*parser).callonSingleQuoteMarkedTextElement161,
											expr: &litMatcher{
												pos:        position{line: 2811, col: 14, offset: 92114},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2815, col: 14, offset: 92190},
											run: (*parser).callonSingleQuoteMarkedTextElement163,
											expr: &litMatcher{
												pos:        position{line: 2815, col: 14, offset: 92190},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2819, col: 15, offset: 92268},
											run: (*parser).callonSingleQuoteMarkedTextElement165,
											expr: &litMatcher{
												pos:        position{line: 2819, col: 15, offset: 92268},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2823, col: 13, offset: 92343},
											run: (*parser).callonSingleQuoteMarkedTextElement167,
											expr: &litMatcher{
												pos:        position{line: 2823, col: 13, offset: 92343},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2805, col: 15, offset: 91999},
						run: (*parser).callonSingleQuoteMarkedTextElement169,
						expr: &litMatcher{
							pos:        position{line: 2805, col: 15, offset: 91999},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2811, col: 14, offset: 92114},
						run: (*parser).callonSingleQuoteMarkedTextElement171,
						expr: &litMatcher{
							pos:        position{line: 2811, col: 14, offset: 92114},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2815, col: 14, offset: 92190},
						run: (*parser).callonSingleQuoteMarkedTextElement173,
						expr: &litMatcher{
							pos:        position{line: 2815, col: 14, offset: 92190},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2819, col: 15, offset: 92268},
						run: (*parser).callonSingleQuoteMarkedTextElement175,
						expr: &litMatcher{
							pos:        position{line: 2819, col: 15, offset: 92268},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2823, col: 13, offset: 92343},
						run: (*parser).callonSingleQuoteMarkedTextElement177,
						expr: &litMatcher{
							pos:        position{line: 2823, col: 13, offset: 92343},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2832, col: 5, offset: 92667},
						run: (*parser).callonSingleQuoteMarkedTextElement179,
						expr: &seqExpr{
							pos: position{line: 2832, col: 5, offset: 92667},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2832, col: 14, offset: 92676},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2832, col: 19, offset: 92681},
									expr: &charClassMatcher{
										pos:        position{line: 2832, col: 20, offset: 92682},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2838, col: 5, offset: 92913},
						run: (*parser).callonSingleQuoteMarkedTextElement185,
						expr: &seqExpr{
							pos: position{line: 2838, col: 5, offset: 92913},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2993, col: 13, offset: 97650},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2838, col: 14, offset: 92922},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2838, col: 18, offset: 92926},
									expr: &charClassMatcher{
										pos:        position{line: 2838, col: 19, offset: 92927},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2414, col: 7, offset: 79327},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2415, col: 7, offset: 79346},
						name: "QuotedTextInSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 1141, col: 23, offset: 35577},
						run: (*parser).callonSingleQuoteMarkedTextElement193,
						expr: &seqExpr{
							pos: position{line: 1141, col: 23, offset: 35577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1141, col: 51, offset: 35605},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1141, col: 56, offset: 35610},
										run: (*parser).callonSingleQuoteMarkedTextElement197,
										expr: &oneOrMoreExpr{
											pos: position{line: 1141, col: 56, offset: 35610},
											expr: &charClassMatcher{
												pos:        position{line: 1141, col: 56, offset: 35610},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 32, offset: 35545},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2445, col: 5, offset: 80082},
						val:        "[^\\r\\n #]",
						chars:      []rune{'\r', '\n', ' ', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2446, col: 7, offset: 80187},
						run: (*parser).callonSingleQuoteMarkedTextElement202,
						expr: &seqExpr{
							pos: position{line: 2446, col: 7, offset: 80187},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2446, col: 7, offset: 80187},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2997, col: 14, offset: 97724},
									run: (*parser).callonSingleQuoteMarkedTextElement205,
									expr: &oneOrMoreExpr{
										pos: position{line: 2997, col: 14, offset: 97724},
										expr: &charClassMatcher{
											pos:        position{line: 2997, col: 14, offset: 97724},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMarkedText",
			pos:  position{line: 2419, col: 1, offset: 79451},
			expr: &choiceExpr{
				pos: position{line: 2421, col: 5, offset: 79515},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2421, col: 5, offset: 79515},
						run: (*parser).callonQuotedTextInSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2421, col: 5, offset: 79515},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2421, col: 5, offset: 79515},
									expr: &litMatcher{
										pos:        position{line: 2421, col: 7, offset: 79517},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2422, col: 5, offset: 79526},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2423, col: 9, offset: 79544},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2423, col: 9, offset: 79544},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2424, col: 11, offset: 79571},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2425, col: 11, offset: 79599},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2426, col: 11, offset: 79630},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2427, col: 11, offset: 79661},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2433, col: 5, offset: 79761},
						run: (*parser).callonQuotedTextInSingleQuoteMarkedText13,
						expr: &seqExpr{
							pos: position{line: 2433, col: 5, offset: 79761},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2433, col: 5, offset: 79761},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2433, col: 16, offset: 79772},
										expr: &ruleRefExpr{
											pos:  position{line: 2433, col: 17, offset: 79773},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2434, col: 5, offset: 79799},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2435, col: 9, offset: 79814},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2435, col: 9, offset: 79814},
												name: "DoubleQuoteMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2436, col: 11, offset: 79846},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2437, col: 11, offset: 79865},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2438, col: 11, offset: 79886},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2439, col: 11, offset: 79910},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2440, col: 11, offset: 79934},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2450, col: 1, offset: 80362},
			expr: &choiceExpr{
				pos: position{line: 2452, col: 5, offset: 80426},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2452, col: 5, offset: 80426},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2452, col: 5, offset: 80426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2452, col: 5, offset: 80426},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1846, col: 25, offset: 60558},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1846, col: 25, offset: 60558},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1846, col: 25, offset: 60558},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1846, col: 30, offset: 60563},
													expr: &litMatcher{
														pos:        position{line: 1846, col: 30, offset: 60563},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2452, col: 40, offset: 80461},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2452, col: 45, offset: 80466},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2452, col: 55, offset: 80476},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2452, col: 86, offset: 80507},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2456, col: 7, offset: 80672},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2456, col: 7, offset: 80672},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2456, col: 7, offset: 80672},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2456, col: 42, offset: 80707},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2456, col: 47, offset: 80712},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2456, col: 57, offset: 80722},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2456, col: 88, offset: 80753},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2461, col: 7, offset: 80956},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2461, col: 7, offset: 80956},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2461, col: 7, offset: 80956},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1842, col: 25, offset: 60485},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1842, col: 25, offset: 60485},
											expr: &litMatcher{
												pos:        position{line: 1842, col: 25, offset: 60485},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2461, col: 42, offset: 80991},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2461, col: 46, offset: 80995},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2461, col: 56, offset: 81005},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2461, col: 87, offset: 81036},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2468, col: 1, offset: 81303},
			expr: &actionExpr{
				pos: position{line: 2469, col: 5, offset: 81325},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2469, col: 5, offset: 81325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2475, col: 27, offset: 81540},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2470, col: 5, offset: 81352},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2470, col: 14, offset: 81361},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2475, col: 27, offset: 81540},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2477, col: 1, offset: 81545},
			expr: &choiceExpr{
				pos: position{line: 2477, col: 25, offset: 81569},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2477, col: 25, offset: 81569},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2479, col: 21, offset: 81621},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2479, col: 21, offset: 81621},
							expr: &charClassMatcher{
								pos:        position{line: 2479, col: 21, offset: 81621},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2483, col: 1, offset: 81706},
			expr: &actionExpr{
				pos: position{line: 2485, col: 5, offset: 81773},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2485, col: 5, offset: 81773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2485, col: 5, offset: 81773},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1842, col: 25, offset: 60485},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1842, col: 25, offset: 60485},
									expr: &litMatcher{
										pos:        position{line: 1842, col: 25, offset: 60485},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2475, col: 27, offset: 81540},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2487, col: 5, offset: 81841},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2487, col: 14, offset: 81850},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2475, col: 27, offset: 81540},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2495, col: 1, offset: 82113},
			expr: &actionExpr{
				pos: position{line: 2496, col: 5, offset: 82137},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2496, col: 5, offset: 82137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2502, col: 29, offset: 82364},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2497, col: 5, offset: 82167},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2497, col: 14, offset: 82176},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2502, col: 29, offset: 82364},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2504, col: 1, offset: 82369},
			expr: &choiceExpr{
				pos: position{line: 2504, col: 27, offset: 82395},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2504, col: 27, offset: 82395},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2506, col: 23, offset: 82451},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2506, col: 23, offset: 82451},
							expr: &charClassMatcher{
								pos:        position{line: 2506, col: 23, offset: 82451},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2510, col: 1, offset: 82536},
			expr: &actionExpr{
				pos: position{line: 2512, col: 5, offset: 82608},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2512, col: 5, offset: 82608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2512, col: 5, offset: 82608},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1842, col: 25, offset: 60485},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1842, col: 25, offset: 60485},
									expr: &litMatcher{
										pos:        position{line: 1842, col: 25, offset: 60485},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2502, col: 29, offset: 82364},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2514, col: 5, offset: 82678},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2514, col: 14, offset: 82687},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2502, col: 29, offset: 82364},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 2523, col: 1, offset: 83135},
			expr: &choiceExpr{
				pos: position{line: 2523, col: 17, offset: 83151},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2523, col: 17, offset: 83151},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 2523, col: 38, offset: 83172},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 2525, col: 1, offset: 83192},
			expr: &actionExpr{
				pos: position{line: 2526, col: 5, offset: 83219},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2526, col: 5, offset: 83219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2538, col: 27, offset: 83594},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
						&notExpr{
							pos: position{line: 2538, col: 32, offset: 83599},
							expr: &charClassMatcher{
								pos:        position{line: 2538, col: 33, offset: 83600},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2527, col: 5, offset: 83247},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2527, col: 14, offset: 83256},
								name: "SingleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2540, col: 25, offset: 83635},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 2532, col: 1, offset: 83400},
			expr: &actionExpr{
				pos: position{line: 2533, col: 5, offset: 83435},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2533, col: 5, offset: 83435},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2533, col: 14, offset: 83444},
						expr: &ruleRefExpr{
							pos:  position{line: 2533, col: 15, offset: 83445},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 2547, col: 1, offset: 83848},
			expr: &actionExpr{
				pos: position{line: 2548, col: 5, offset: 83882},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2548, col: 5, offset: 83882},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2548, col: 5, offset: 83882},
							expr: &litMatcher{
								pos:        position{line: 2540, col: 25, offset: 83635},
								val:        "`'",
								ignoreCase: false,
								want:       "\"`'\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2549, col: 5, offset: 83908},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2550, col: 9, offset: 83926},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2542, col: 21, offset: 83661},
										run: (*parser).callonSingleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2542, col: 21, offset: 83661},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2542, col: 21, offset: 83661},
													expr: &charClassMatcher{
														pos:        position{line: 2542, col: 21, offset: 83661},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2542, col: 31, offset: 83671},
													expr: &choiceExpr{
														pos: position{line: 2542, col: 33, offset: 83673},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonSingleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2540, col: 25, offset: 83635},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2551, col: 11, offset: 83953},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonSingleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2551, col: 17, offset: 83959},
												expr: &litMatcher{
													pos:        position{line: 2540, col: 25, offset: 83635},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2552, col: 11, offset: 83991},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonSingleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2552, col: 19, offset: 83999},
												expr: &actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonSingleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										run: (*parser).callonSingleQuotedStringElement33,
										expr: &seqExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonSingleQuotedStringElement35,
												},
												&labeledExpr{
													pos:   position{line: 644, col: 5, offset: 20666},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 644, col: 14, offset: 20675},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																run: (*parser).callonSingleQuotedStringElement38,
																expr: &seqExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 25, offset: 21328},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 37, offset: 21340},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonSingleQuotedStringElement42,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 56, offset: 21359},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 664, col: 62, offset: 21365},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonSingleQuotedStringElement49,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonSingleQuotedStringElement54,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonSingleQuotedStringElement56,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 78, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																run: (*parser).callonSingleQuotedStringElement60,
																expr: &seqExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 668, col: 25, offset: 21499},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 38, offset: 21512},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonSingleQuotedStringElement64,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 57, offset: 21531},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 668, col: 63, offset: 21537},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonSingleQuotedStringElement71,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonSingleQuotedStringElement76,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonSingleQuotedStringElement78,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 668, col: 79, offset: 21553},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																run: (*parser).callonSingleQuotedStringElement82,
																expr: &seqExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 650, col: 5, offset: 20804},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 650, col: 13, offset: 20812},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonSingleQuotedStringElement86,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 650, col: 32, offset: 20831},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																run: (*parser).callonSingleQuotedStringElement92,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21072},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 9, offset: 21076},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonSingleQuotedStringElement96,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 28, offset: 21095},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2554, col: 11, offset: 84081},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										run: (*parser).callonSingleQuotedStringElement103,
										expr: &seqExpr{
											pos: position{line: 2764, col: 5, offset: 90546},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													run: (*parser).callonSingleQuotedStringElement105,
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 5, offset: 90622},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2769, col: 9, offset: 90720},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																run: (*parser).callonSingleQuotedStringElement108,
																expr: &choiceExpr{
																	pos: position{line: 692, col: 27, offset: 22379},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			run: (*parser).callonSingleQuotedStringElement110,
																			expr: &seqExpr{
																				pos: position{line: 692, col: 27, offset: 22379},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 692, col: 27, offset: 22379},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 32, offset: 22384},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonSingleQuotedStringElement114,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 692, col: 40, offset: 22392},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonSingleQuotedStringElement118,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 47, offset: 22399},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 51, offset: 22403},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 702, col: 24, offset: 22804},
																							expr: &choiceExpr{
																								pos: position{line: 703, col: 5, offset: 22810},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										run: (*parser).callonSingleQuotedStringElement124,
																										expr: &seqExpr{
																											pos: position{line: 703, col: 6, offset: 22811},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 703, col: 6, offset: 22811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 703, col: 14, offset: 22819},
																													expr: &charClassMatcher{
																														pos:        position{line: 703, col: 14, offset: 22819},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonSingleQuotedStringElement129,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonSingleQuotedStringElement133,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonSingleQuotedStringElement139,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonSingleQuotedStringElement143,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 707, col: 8, offset: 23045},
																										run: (*parser).callonSingleQuotedStringElement149,
																										expr: &litMatcher{
																											pos:        position{line: 707, col: 8, offset: 23045},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 79, offset: 22431},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			run: (*parser).callonSingleQuotedStringElement152,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 9, offset: 22504},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 9, offset: 22504},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 14, offset: 22509},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonSingleQuotedStringElement156,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 22, offset: 22517},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2772, col: 11, offset: 90824},
																run: (*parser).callonSingleQuotedStringElement160,
																expr: &charClassMatcher{
																	pos:        position{line: 2772, col: 12, offset: 90825},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2556, col: 11, offset: 84180},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 1149, col: 5, offset: 36023},
												run: (*parser).callonSingleQuotedStringElement163,
												expr: &seqExpr{
													pos: position{line: 1149, col: 5, offset: 36023},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 1149, col: 5, offset: 36023},
															run: (*parser).callonSingleQuotedStringElement165,
														},
														&litMatcher{
															pos:        position{line: 1152, col: 5, offset: 36125},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1152, col: 9, offset: 36129},
															expr: &actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonSingleQuotedStringElement168,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 1152, col: 16, offset: 36136},
															expr: &choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonSingleQuotedStringElement172,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2556, col: 21, offset: 84190},
												expr: &litMatcher{
													pos:        position{line: 2540, col: 25, offset: 83635},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2797, col: 5, offset: 91718},
										run: (*parser).callonSingleQuotedStringElement181,
										expr: &seqExpr{
											pos: position{line: 2797, col: 5, offset: 91718},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2797, col: 5, offset: 91718},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2797, col: 10, offset: 91723},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2805, col: 15, offset: 91999},
															run: (*parser).callonSingleQuotedStringElement185,
															expr: &litMatcher{
																pos:        position{line: 2805, col: 15, offset: 91999},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2811, col: 14, offset: 92114},
															run: (*parser).callonSingleQuotedStringElement187,
															expr: &litMatcher{
																pos:        position{line: 2811, col: 14, offset: 92114},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2815, col: 14, offset: 92190},
															run: (*parser).callonSingleQuotedStringElement189,
															expr: &litMatcher{
																pos:        position{line: 2815, col: 14, offset: 92190},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2819, col: 15, offset: 92268},
															run: (*parser).callonSingleQuotedStringElement191,
															expr: &litMatcher{
																pos:        position{line: 2819, col: 15, offset: 92268},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2823, col: 13, offset: 92343},
															run: (*parser).callonSingleQuotedStringElement193,
															expr: &litMatcher{
																pos:        position{line: 2823, col: 13, offset: 92343},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2805, col: 15, offset: 91999},
										run: (*parser).callonSingleQuotedStringElement195,
										expr: &litMatcher{
											pos:        position{line: 2805, col: 15, offset: 91999},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2811, col: 14, offset: 92114},
										run: (*parser).callonSingleQuotedStringElement197,
										expr: &litMatcher{
											pos:        position{line: 2811, col: 14, offset: 92114},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2815, col: 14, offset: 92190},
										run: (*parser).callonSingleQuotedStringElement199,
										expr: &litMatcher{
											pos:        position{line: 2815, col: 14, offset: 92190},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2819, col: 15, offset: 92268},
										run: (*parser).callonSingleQuotedStringElement201,
										expr: &litMatcher{
											pos:        position{line: 2819, col: 15, offset: 92268},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2823, col: 13, offset: 92343},
										run: (*parser).callonSingleQuotedStringElement203,
										expr: &litMatcher{
											pos:        position{line: 2823, col: 13, offset: 92343},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2832, col: 5, offset: 92667},
										run: (*parser).callonSingleQuotedStringElement205,
										expr: &seqExpr{
											pos: position{line: 2832, col: 5, offset: 92667},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2832, col: 14, offset: 92676},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2832, col: 19, offset: 92681},
													expr: &charClassMatcher{
														pos:        position{line: 2832, col: 20, offset: 92682},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2838, col: 5, offset: 92913},
										run: (*parser).callonSingleQuotedStringElement211,
										expr: &seqExpr{
											pos: position{line: 2838, col: 5, offset: 92913},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2993, col: 13, offset: 97650},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2838, col: 14, offset: 92922},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2838, col: 18, offset: 92926},
													expr: &charClassMatcher{
														pos:        position{line: 2838, col: 19, offset: 92927},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2558, col: 11, offset: 84239},
										name: "QuotedTextInSingleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2559, col: 11, offset: 84280},
										name: "DoubleQuotedString",
									},
									&charClassMatcher{
										pos:        position{line: 2577, col: 41, offset: 84798},
										val:        "[^\\r\\n\\t `]",
										chars:      []rune{'\r', '\n', '\t', ' ', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2577, col: 55, offset: 84812},
										run: (*parser).callonSingleQuotedStringElement220,
										expr: &seqExpr{
											pos: position{line: 2577, col: 55, offset: 84812},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2577, col: 55, offset: 84812},
													val:        "`",
													ignoreCase: false,
													want:       "\"`\"",
												},
												&notExpr{
													pos: position{line: 2577, col: 59, offset: 84816},
													expr: &litMatcher{
														pos:        position{line: 2577, col: 60, offset: 84817},
														val:        "'",
														ignoreCase: false,
														want:       "\"'\"",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuotedString",
			pos:  position{line: 2566, col: 1, offset: 84424},
			expr: &actionExpr{
				pos: position{line: 2567, col: 5, offset: 84462},
				run: (*parser).callonQuotedTextInSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2567, col: 5, offset: 84462},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2567, col: 5, offset: 84462},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2567, col: 16, offset: 84473},
								expr: &ruleRefExpr{
									pos:  position{line: 2567, col: 17, offset: 84474},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2568, col: 5, offset: 84500},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2568, col: 11, offset: 84506},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2568, col: 11, offset: 84506},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2569, col: 11, offset: 84525},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2570, col: 12, offset: 84547},
										run: (*parser).callonQuotedTextInSingleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2570, col: 12, offset: 84547},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2570, col: 12, offset: 84547},
													expr: &litMatcher{
														pos:        position{line: 2570, col: 13, offset: 84548},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2570, col: 18, offset: 84553},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2570, col: 27, offset: 84562},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2571, col: 11, offset: 84611},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2572, col: 11, offset: 84635},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2573, col: 11, offset: 84661},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 2581, col: 1, offset: 84889},
			expr: &actionExpr{
				pos: position{line: 2581, col: 23, offset: 84911},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2581, col: 23, offset: 84911},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2620, col: 27, offset: 86264},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
						&notExpr{
							pos: position{line: 2620, col: 33, offset: 86270},
							expr: &charClassMatcher{
								pos:        position{line: 2620, col: 34, offset: 86271},
								val:        "[ \\t\\r\\n]",
								chars:      []rune{' ', '\t', '\r', '\n'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 2581, col: 46, offset: 84934},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2581, col: 55, offset: 84943},
								name: "DoubleQuotedStringElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2622, col: 25, offset: 86306},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 2585, col: 1, offset: 85082},
			expr: &actionExpr{
				pos: position{line: 2585, col: 31, offset: 85112},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 2585, col: 31, offset: 85112},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2585, col: 41, offset: 85122},
						expr: &ruleRefExpr{
							pos:  position{line: 2585, col: 41, offset: 85122},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 2591, col: 1, offset: 85327},
			expr: &actionExpr{
				pos: position{line: 2592, col: 5, offset: 85361},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &seqExpr{
					pos: position{line: 2592, col: 5, offset: 85361},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2592, col: 5, offset: 85361},
							expr: &litMatcher{
								pos:        position{line: 2622, col: 25, offset: 86306},
								val:        "`\"",
								ignoreCase: false,
								want:       "\"`\\\"\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2593, col: 5, offset: 85387},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2594, col: 9, offset: 85405},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2542, col: 21, offset: 83661},
										run: (*parser).callonDoubleQuotedStringElement7,
										expr: &seqExpr{
											pos: position{line: 2542, col: 21, offset: 83661},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2542, col: 21, offset: 83661},
													expr: &charClassMatcher{
														pos:        position{line: 2542, col: 21, offset: 83661},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2542, col: 31, offset: 83671},
													expr: &choiceExpr{
														pos: position{line: 2542, col: 33, offset: 83673},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonDoubleQuotedStringElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2540, col: 25, offset: 83635},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2595, col: 11, offset: 85432},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3079, col: 10, offset: 100334},
												run: (*parser).callonDoubleQuotedStringElement17,
												expr: &charClassMatcher{
													pos:        position{line: 3079, col: 11, offset: 100335},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&notExpr{
												pos: position{line: 2595, col: 17, offset: 85438},
												expr: &litMatcher{
													pos:        position{line: 2622, col: 25, offset: 86306},
													val:        "`\"",
													ignoreCase: false,
													want:       "\"`\\\"\"",
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2596, col: 11, offset: 85470},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3088, col: 12, offset: 100518},
												run: (*parser).callonDoubleQuotedStringElement22,
												expr: &choiceExpr{
													pos: position{line: 3088, col: 13, offset: 100519},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3088, col: 13, offset: 100519},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 20, offset: 100526},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3088, col: 29, offset: 100535},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2596, col: 19, offset: 85478},
												expr: &actionExpr{
													pos: position{line: 3088, col: 12, offset: 100518},
													run: (*parser).callonDoubleQuotedStringElement28,
													expr: &choiceExpr{
														pos: position{line: 3088, col: 13, offset: 100519},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3088, col: 13, offset: 100519},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 20, offset: 100526},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3088, col: 29, offset: 100535},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&seqExpr{
										pos: position{line: 2597, col: 11, offset: 85531},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 1149, col: 5, offset: 36023},
												run: (*parser).callonDoubleQuotedStringElement34,
												expr: &seqExpr{
													pos: position{line: 1149, col: 5, offset: 36023},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 1149, col: 5, offset: 36023},
															run: (*parser).callonDoubleQuotedStringElement36,
														},
														&litMatcher{
															pos:        position{line: 1152, col: 5, offset: 36125},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1152, col: 9, offset: 36129},
															expr: &actionExpr{
																pos: position{line: 3079, col: 10, offset: 100334},
																run: (*parser).callonDoubleQuotedStringElement39,
																expr: &charClassMatcher{
																	pos:        position{line: 3079, col: 11, offset: 100335},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&andExpr{
															pos: position{line: 1152, col: 16, offset: 36136},
															expr: &choiceExpr{
																pos: position{line: 3095, col: 8, offset: 100658},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3088, col: 12, offset: 100518},
																		run: (*parser).callonDoubleQuotedStringElement43,
																		expr: &choiceExpr{
																			pos: position{line: 3088, col: 13, offset: 100519},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3088, col: 13, offset: 100519},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 20, offset: 100526},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3088, col: 29, offset: 100535},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3092, col: 8, offset: 100608},
																		expr: &anyMatcher{
																			line: 3092, col: 9, offset: 100609,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2597, col: 21, offset: 85541},
												expr: &litMatcher{
													pos:        position{line: 2540, col: 25, offset: 83635},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										run: (*parser).callonDoubleQuotedStringElement52,
										expr: &seqExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonDoubleQuotedStringElement54,
												},
												&labeledExpr{
													pos:   position{line: 644, col: 5, offset: 20666},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 644, col: 14, offset: 20675},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																run: (*parser).callonDoubleQuotedStringElement57,
																expr: &seqExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 25, offset: 21328},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 37, offset: 21340},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuotedStringElement61,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 56, offset: 21359},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 664, col: 62, offset: 21365},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuotedStringElement68,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuotedStringElement73,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuotedStringElement75,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 78, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																run: (*parser).callonDoubleQuotedStringElement79,
																expr: &seqExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 668, col: 25, offset: 21499},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 38, offset: 21512},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuotedStringElement83,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 57, offset: 21531},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 668, col: 63, offset: 21537},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonDoubleQuotedStringElement90,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonDoubleQuotedStringElement95,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonDoubleQuotedStringElement97,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 668, col: 79, offset: 21553},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																run: (*parser).callonDoubleQuotedStringElement101,
																expr: &seqExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 650, col: 5, offset: 20804},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 650, col: 13, offset: 20812},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuotedStringElement105,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 650, col: 32, offset: 20831},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																run: (*parser).callonDoubleQuotedStringElement111,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21072},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 9, offset: 21076},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuotedStringElement115,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 28, offset: 21095},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2599, col: 11, offset: 85603},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										run: (*parser).callonDoubleQuotedStringElement122,
										expr: &seqExpr{
											pos: position{line: 2764, col: 5, offset: 90546},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													run: (*parser).callonDoubleQuotedStringElement124,
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 5, offset: 90622},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2769, col: 9, offset: 90720},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																run: (*parser).callonDoubleQuotedStringElement127,
																expr: &choiceExpr{
																	pos: position{line: 692, col: 27, offset: 22379},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			run: (*parser).callonDoubleQuotedStringElement129,
																			expr: &seqExpr{
																				pos: position{line: 692, col: 27, offset: 22379},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 692, col: 27, offset: 22379},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 32, offset: 22384},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuotedStringElement133,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 692, col: 40, offset: 22392},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonDoubleQuotedStringElement137,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 47, offset: 22399},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 51, offset: 22403},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 702, col: 24, offset: 22804},
																							expr: &choiceExpr{
																								pos: position{line: 703, col: 5, offset: 22810},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										run: (*parser).callonDoubleQuotedStringElement143,
																										expr: &seqExpr{
																											pos: position{line: 703, col: 6, offset: 22811},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 703, col: 6, offset: 22811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 703, col: 14, offset: 22819},
																													expr: &charClassMatcher{
																														pos:        position{line: 703, col: 14, offset: 22819},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonDoubleQuotedStringElement148,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuotedStringElement152,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonDoubleQuotedStringElement158,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuotedStringElement162,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 707, col: 8, offset: 23045},
																										run: (*parser).callonDoubleQuotedStringElement168,
																										expr: &litMatcher{
																											pos:        position{line: 707, col: 8, offset: 23045},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 79, offset: 22431},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			run: (*parser).callonDoubleQuotedStringElement171,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 9, offset: 22504},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 9, offset: 22504},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 14, offset: 22509},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonDoubleQuotedStringElement175,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 22, offset: 22517},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2772, col: 11, offset: 90824},
																run: (*parser).callonDoubleQuotedStringElement179,
																expr: &charClassMatcher{
																	pos:        position{line: 2772, col: 12, offset: 90825},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2601, col: 11, offset: 85702},
										name: "QuotedTextInDoubleQuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 2602, col: 11, offset: 85743},
										name: "SingleQuotedString",
									},
									&actionExpr{
										pos: position{line: 2624, col: 41, offset: 86353},
										run: (*parser).callonDoubleQuotedStringElement183,
										expr: &choiceExpr{
											pos: position{line: 2624, col: 42, offset: 86354},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2624, col: 42, offset: 86354},
													val:        "[^\\r\\n\\t `]",
													chars:      []rune{'\r', '\n', '\t', ' ', '`'},
													ignoreCase: false,
													inverted:   true,
												},
												&seqExpr{
													pos: position{line: 2624, col: 56, offset: 86368},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2624, col: 56, offset: 86368},
															val:        "`",
															ignoreCase: false,
															want:       "\"`\"",
														},
														&notExpr{
															pos: position{line: 2624, col: 60, offset: 86372},
															expr: &litMatcher{
																pos:        position{line: 2624, col: 61, offset: 86373},
																val:        "\"",
																ignoreCase: false,
																want:       "\"\\\"\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuotedString",
			pos:  position{line: 2608, col: 1, offset: 85894},
			expr: &actionExpr{
				pos: position{line: 2609, col: 5, offset: 85932},
				run: (*parser).callonQuotedTextInDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 2609, col: 5, offset: 85932},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2609, col: 5, offset: 85932},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2609, col: 16, offset: 85943},
								expr: &ruleRefExpr{
									pos:  position{line: 2609, col: 17, offset: 85944},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2610, col: 5, offset: 85970},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2611, col: 9, offset: 85985},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2611, col: 9, offset: 85985},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2612, col: 11, offset: 86004},
										name: "ItalicText",
									},
									&actionExpr{
										pos: position{line: 2613, col: 12, offset: 86026},
										run: (*parser).callonQuotedTextInDoubleQuotedString10,
										expr: &seqExpr{
											pos: position{line: 2613, col: 12, offset: 86026},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 2613, col: 12, offset: 86026},
													expr: &litMatcher{
														pos:        position{line: 2613, col: 13, offset: 86027},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2613, col: 19, offset: 86033},
													label: "element",
													expr: &ruleRefExpr{
														pos:  position{line: 2613, col: 28, offset: 86042},
														name: "MonospaceText",
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2614, col: 11, offset: 86091},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2615, col: 11, offset: 86115},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2616, col: 11, offset: 86141},
										name: "MarkedText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Substitutions",
			pos:  position{line: 2658, col: 1, offset: 87574},
			expr: &actionExpr{
				pos: position{line: 2659, col: 5, offset: 87628},
				run: (*parser).callonSubstitutions1,
				expr: &seqExpr{
					pos: position{line: 2659, col: 5, offset: 87628},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2659, col: 5, offset: 87628},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2659, col: 14, offset: 87637},
								expr: &actionExpr{
									pos: position{line: 2660, col: 9, offset: 87647},
									run: (*parser).callonSubstitutions5,
									expr: &seqExpr{
										pos: position{line: 2660, col: 9, offset: 87647},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2660, col: 9, offset: 87647},
												expr: &notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2661, col: 9, offset: 87660},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2662, col: 13, offset: 87682},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3012, col: 5, offset: 98323},
															run: (*parser).callonSubstitutions12,
															expr: &seqExpr{
																pos: position{line: 3012, col: 5, offset: 98323},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 3012, col: 5, offset: 98323},
																		expr: &charClassMatcher{
																			pos:        position{line: 3012, col: 5, offset: 98323},
																			val:        "[,;!?0-9\\pL]",
																			chars:      []rune{',', ';', '!', '?'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3013, col: 6, offset: 98373},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonSubstitutions17,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&andExpr{
																				pos: position{line: 3013, col: 14, offset: 98381},
																				expr: &choiceExpr{
																					pos: position{line: 3013, col: 16, offset: 98383},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 3013, col: 16, offset: 98383},
																							val:        "[.�]",
																							chars:      []rune{'.', '�'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonSubstitutions22,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3092, col: 8, offset: 100608},
																							expr: &anyMatcher{
																								line: 3092, col: 9, offset: 100609,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3079, col: 10, offset: 100334},
															run: (*parser).callonSubstitutions29,
															expr: &charClassMatcher{
																pos:        position{line: 3079, col: 11, offset: 100335},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 3088, col: 12, offset: 100518},
															run: (*parser).callonSubstitutions31,
															expr: &choiceExpr{
																pos: position{line: 3088, col: 13, offset: 100519},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3088, col: 13, offset: 100519},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 20, offset: 100526},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3088, col: 29, offset: 100535},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1141, col: 23, offset: 35577},
															run: (*parser).callonSubstitutions36,
															expr: &seqExpr{
																pos: position{line: 1141, col: 23, offset: 35577},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1139, col: 32, offset: 35545},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1141, col: 51, offset: 35605},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1141, col: 56, offset: 35610},
																			run: (*parser).callonSubstitutions40,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1141, col: 56, offset: 35610},
																				expr: &charClassMatcher{
																					pos:        position{line: 1141, col: 56, offset: 35610},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1139, col: 32, offset: 35545},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1149, col: 5, offset: 36023},
															run: (*parser).callonSubstitutions44,
															expr: &seqExpr{
																pos: position{line: 1149, col: 5, offset: 36023},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1149, col: 5, offset: 36023},
																		run: (*parser).callonSubstitutions46,
																	},
																	&litMatcher{
																		pos:        position{line: 1152, col: 5, offset: 36125},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1152, col: 9, offset: 36129},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonSubstitutions49,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 1152, col: 16, offset: 36136},
																		expr: &choiceExpr{
																			pos: position{line: 3095, col: 8, offset: 100658},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonSubstitutions53,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3018, col: 16, offset: 98504},
															run: (*parser).callonSubstitutions60,
															expr: &seqExpr{
																pos: position{line: 3018, col: 16, offset: 98504},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 3018, col: 16, offset: 98504},
																		label: "char",
																		expr: &actionExpr{
																			pos: position{line: 3025, col: 25, offset: 98695},
																			run: (*parser).callonSubstitutions63,
																			expr: &charClassMatcher{
																				pos:        position{line: 3025, col: 25, offset: 98695},
																				val:        "[.,;?!]",
																				chars:      []rune{'.', ',', ';', '?', '!'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 3018, col: 44, offset: 98532},
																		expr: &choiceExpr{
																			pos: position{line: 3018, col: 46, offset: 98534},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonSubstitutions67,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonSubstitutions69,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3092, col: 8, offset: 100608},
																					expr: &anyMatcher{
																						line: 3092, col: 9, offset: 100609,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2668, col: 15, offset: 87921},
															name: "Quote",
														},
														&ruleRefExpr{
															pos:  position{line: 2669, col: 15, offset: 87941},
															name: "InlinePassthrough",
														},
														&ruleRefExpr{
															pos:  position{line: 2670, col: 15, offset: 87973},
															name: "InlineMacro",
														},
														&ruleRefExpr{
															pos:  position{line: 2671, col: 15, offset: 88062},
															name: "Callout",
														},
														&actionExpr{
															pos: position{line: 2764, col: 5, offset: 90546},
															run: (*parser).callonSubstitutions80,
															expr: &seqExpr{
																pos: position{line: 2764, col: 5, offset: 90546},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2764, col: 5, offset: 90546},
																		run: (*parser).callonSubstitutions82,
																	},
																	&labeledExpr{
																		pos:   position{line: 2767, col: 5, offset: 90622},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2769, col: 9, offset: 90720},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2769, col: 9, offset: 90720},
																					run: (*parser).callonSubstitutions85,
																					expr: &choiceExpr{
																						pos: position{line: 692, col: 27, offset: 22379},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 692, col: 27, offset: 22379},
																								run: (*parser).callonSubstitutions87,
																								expr: &seqExpr{
																									pos: position{line: 692, col: 27, offset: 22379},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 692, col: 27, offset: 22379},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 692, col: 32, offset: 22384},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 3064, col: 7, offset: 99986},
																												run: (*parser).callonSubstitutions91,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 3064, col: 7, offset: 99986},
																													expr: &charClassMatcher{
																														pos:        position{line: 3064, col: 7, offset: 99986},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 692, col: 40, offset: 22392},
																											expr: &actionExpr{
																												pos: position{line: 3079, col: 10, offset: 100334},
																												run: (*parser).callonSubstitutions95,
																												expr: &charClassMatcher{
																													pos:        position{line: 3079, col: 11, offset: 100335},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 692, col: 47, offset: 22399},
																											val:        ",",
																											ignoreCase: false,
																											want:       "\",\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 692, col: 51, offset: 22403},
																											label: "label",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 702, col: 24, offset: 22804},
																												expr: &choiceExpr{
																													pos: position{line: 703, col: 5, offset: 22810},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 703, col: 6, offset: 22811},
																															run: (*parser).callonSubstitutions101,
																															expr: &seqExpr{
																																pos: position{line: 703, col: 6, offset: 22811},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 703, col: 6, offset: 22811},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 703, col: 14, offset: 22819},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 703, col: 14, offset: 22819},
																																			val:        "[^\\r\\n{<>]",
																																			chars:      []rune{'\r', '\n', '{', '<', '>'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 650, col: 5, offset: 20804},
																															run: (*parser).callonSubstitutions106,
																															expr: &seqExpr{
																																pos: position{line: 650, col: 5, offset: 20804},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 650, col: 5, offset: 20804},
																																		val:        "\\{",
																																		ignoreCase: false,
																																		want:       "\"\\\\{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 650, col: 13, offset: 20812},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			run: (*parser).callonSubstitutions110,
																																			expr: &seqExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 324, col: 18, offset: 10072},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 324, col: 28, offset: 10082},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 324, col: 29, offset: 10083},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 650, col: 32, offset: 20831},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 657, col: 5, offset: 21072},
																															run: (*parser).callonSubstitutions116,
																															expr: &seqExpr{
																																pos: position{line: 657, col: 5, offset: 21072},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 657, col: 5, offset: 21072},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 657, col: 9, offset: 21076},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			run: (*parser).callonSubstitutions120,
																																			expr: &seqExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 324, col: 18, offset: 10072},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 324, col: 28, offset: 10082},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 324, col: 29, offset: 10083},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 657, col: 28, offset: 21095},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 707, col: 8, offset: 23045},
																															run: (*parser).callonSubstitutions126,
																															expr: &litMatcher{
																																pos:        position{line: 707, col: 8, offset: 23045},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 692, col: 79, offset: 22431},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 694, col: 9, offset: 22504},
																								run: (*parser).callonSubstitutions129,
																								expr: &seqExpr{
																									pos: position{line: 694, col: 9, offset: 22504},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 694, col: 9, offset: 22504},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 694, col: 14, offset: 22509},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 3064, col: 7, offset: 99986},
																												run: (*parser).callonSubstitutions133,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 3064, col: 7, offset: 99986},
																													expr: &charClassMatcher{
																														pos:        position{line: 3064, col: 7, offset: 99986},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 694, col: 22, offset: 22517},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2772, col: 11, offset: 90824},
																					run: (*parser).callonSubstitutions137,
																					expr: &charClassMatcher{
																						pos:        position{line: 2772, col: 12, offset: 90825},
																						val:        "[<>&]",
																						chars:      []rune{'<', '>', '&'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 641, col: 5, offset: 20597},
															run: (*parser).callonSubstitutions139,
															expr: &seqExpr{
																pos: position{line: 641, col: 5, offset: 20597},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 641, col: 5, offset: 20597},
																		run: (*parser).callonSubstitutions141,
																	},
																	&labeledExpr{
																		pos:   position{line: 644, col: 5, offset: 20666},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 644, col: 14, offset: 20675},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 664, col: 25, offset: 21328},
																					run: (*parser).callonSubstitutions144,
																					expr: &seqExpr{
																						pos: position{line: 664, col: 25, offset: 21328},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 664, col: 25, offset: 21328},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 664, col: 37, offset: 21340},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions148,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 664, col: 56, offset: 21359},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 664, col: 62, offset: 21365},
																									expr: &actionExpr{
																										pos: position{line: 672, col: 17, offset: 21660},
																										run: (*parser).callonSubstitutions155,
																										expr: &seqExpr{
																											pos: position{line: 672, col: 17, offset: 21660},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 672, col: 17, offset: 21660},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 672, col: 21, offset: 21664},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 672, col: 28, offset: 21671},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 672, col: 28, offset: 21671},
																																run: (*parser).callonSubstitutions160,
																																expr: &charClassMatcher{
																																	pos:        position{line: 672, col: 28, offset: 21671},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 674, col: 9, offset: 21725},
																																run: (*parser).callonSubstitutions162,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 674, col: 9, offset: 21725},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 674, col: 9, offset: 21725},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 664, col: 78, offset: 21381},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 668, col: 25, offset: 21499},
																					run: (*parser).callonSubstitutions166,
																					expr: &seqExpr{
																						pos: position{line: 668, col: 25, offset: 21499},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 668, col: 25, offset: 21499},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 668, col: 38, offset: 21512},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions170,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 668, col: 57, offset: 21531},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 668, col: 63, offset: 21537},
																									expr: &actionExpr{
																										pos: position{line: 672, col: 17, offset: 21660},
																										run: (*parser).callonSubstitutions177,
																										expr: &seqExpr{
																											pos: position{line: 672, col: 17, offset: 21660},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 672, col: 17, offset: 21660},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 672, col: 21, offset: 21664},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 672, col: 28, offset: 21671},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 672, col: 28, offset: 21671},
																																run: (*parser).callonSubstitutions182,
																																expr: &charClassMatcher{
																																	pos:        position{line: 672, col: 28, offset: 21671},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 674, col: 9, offset: 21725},
																																run: (*parser).callonSubstitutions184,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 674, col: 9, offset: 21725},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 674, col: 9, offset: 21725},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 668, col: 79, offset: 21553},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 650, col: 5, offset: 20804},
																					run: (*parser).callonSubstitutions188,
																					expr: &seqExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 650, col: 5, offset: 20804},
																								val:        "\\{",
																								ignoreCase: false,
																								want:       "\"\\\\{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 650, col: 13, offset: 20812},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions192,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 650, col: 32, offset: 20831},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 657, col: 5, offset: 21072},
																					run: (*parser).callonSubstitutions198,
																					expr: &seqExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 657, col: 5, offset: 21072},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 657, col: 9, offset: 21076},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions202,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 657, col: 28, offset: 21095},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2753, col: 5, offset: 90320},
															run: (*parser).callonSubstitutions208,
															expr: &seqExpr{
																pos: position{line: 2753, col: 5, offset: 90320},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2753, col: 5, offset: 90320},
																		run: (*parser).callonSubstitutions210,
																	},
																	&labeledExpr{
																		pos:   position{line: 2756, col: 5, offset: 90391},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2797, col: 5, offset: 91718},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2797, col: 5, offset: 91718},
																					run: (*parser).callonSubstitutions213,
																					expr: &seqExpr{
																						pos: position{line: 2797, col: 5, offset: 91718},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2797, col: 5, offset: 91718},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&choiceExpr{
																								pos: position{line: 2797, col: 10, offset: 91723},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2805, col: 15, offset: 91999},
																										run: (*parser).callonSubstitutions217,
																										expr: &litMatcher{
																											pos:        position{line: 2805, col: 15, offset: 91999},
																											val:        "`'",
																											ignoreCase: false,
																											want:       "\"`'\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2811, col: 14, offset: 92114},
																										run: (*parser).callonSubstitutions219,
																										expr: &litMatcher{
																											pos:        position{line: 2811, col: 14, offset: 92114},
																											val:        "(C)",
																											ignoreCase: false,
																											want:       "\"(C)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2815, col: 14, offset: 92190},
																										run: (*parser).callonSubstitutions221,
																										expr: &litMatcher{
																											pos:        position{line: 2815, col: 14, offset: 92190},
																											val:        "(TM)",
																											ignoreCase: false,
																											want:       "\"(TM)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2819, col: 15, offset: 92268},
																										run: (*parser).callonSubstitutions223,
																										expr: &litMatcher{
																											pos:        position{line: 2819, col: 15, offset: 92268},
																											val:        "(R)",
																											ignoreCase: false,
																											want:       "\"(R)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2823, col: 13, offset: 92343},
																										run: (*parser).callonSubstitutions225,
																										expr: &litMatcher{
																											pos:        position{line: 2823, col: 13, offset: 92343},
																											val:        "...",
																											ignoreCase: false,
																											want:       "\"...\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2805, col: 15, offset: 91999},
																					run: (*parser).callonSubstitutions227,
																					expr: &litMatcher{
																						pos:        position{line: 2805, col: 15, offset: 91999},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2811, col: 14, offset: 92114},
																					run: (*parser).callonSubstitutions229,
																					expr: &litMatcher{
																						pos:        position{line: 2811, col: 14, offset: 92114},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2815, col: 14, offset: 92190},
																					run: (*parser).callonSubstitutions231,
																					expr: &litMatcher{
																						pos:        position{line: 2815, col: 14, offset: 92190},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2819, col: 15, offset: 92268},
																					run: (*parser).callonSubstitutions233,
																					expr: &litMatcher{
																						pos:        position{line: 2819, col: 15, offset: 92268},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2823, col: 13, offset: 92343},
																					run: (*parser).callonSubstitutions235,
																					expr: &litMatcher{
																						pos:        position{line: 2823, col: 13, offset: 92343},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2832, col: 5, offset: 92667},
																					run: (*parser).callonSubstitutions237,
																					expr: &seqExpr{
																						pos: position{line: 2832, col: 5, offset: 92667},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2993, col: 13, offset: 97650},
																								val:        "[0-9\\pL]",
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&litMatcher{
																								pos:        position{line: 2832, col: 14, offset: 92676},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&andExpr{
																								pos: position{line: 2832, col: 19, offset: 92681},
																								expr: &charClassMatcher{
																									pos:        position{line: 2832, col: 20, offset: 92682},
																									val:        "[\\pL]",
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2838, col: 5, offset: 92913},
																					run: (*parser).callonSubstitutions243,
																					expr: &seqExpr{
																						pos: position{line: 2838, col: 5, offset: 92913},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2993, col: 13, offset: 97650},
																								val:        "[0-9\\pL]",
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&litMatcher{
																								pos:        position{line: 2838, col: 14, offset: 92922},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&andExpr{
																								pos: position{line: 2838, col: 18, offset: 92926},
																								expr: &charClassMatcher{
																									pos:        position{line: 2838, col: 19, offset: 92927},
																									val:        "[\\pL]",
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3031, col: 12, offset: 98869},
															run: (*parser).callonSubstitutions249,
															expr: &anyMatcher{
																line: 3031, col: 12, offset: 98869,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3092, col: 8, offset: 100608},
							expr: &anyMatcher{
								line: 3092, col: 9, offset: 100609,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 2684, col: 1, offset: 88496},
			expr: &actionExpr{
				pos: position{line: 2685, col: 5, offset: 88516},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 2685, col: 5, offset: 88516},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2685, col: 5, offset: 88516},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2685, col: 14, offset: 88525},
								expr: &ruleRefExpr{
									pos:  position{line: 2685, col: 15, offset: 88526},
									name: "HeaderGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 3092, col: 8, offset: 100608},
							expr: &anyMatcher{
								line: 3092, col: 9, offset: 100609,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroupElement",
			pos:  position{line: 2689, col: 1, offset: 88610},
			expr: &actionExpr{
				pos: position{line: 2690, col: 5, offset: 88636},
				run: (*parser).callonHeaderGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2690, col: 5, offset: 88636},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2690, col: 5, offset: 88636},
							expr: &notExpr{
								pos: position{line: 3092, col: 8, offset: 100608},
								expr: &anyMatcher{
									line: 3092, col: 9, offset: 100609,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2691, col: 5, offset: 88645},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2692, col: 9, offset: 88663},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 3005, col: 5, offset: 98105},
										run: (*parser).callonHeaderGroupElement8,
										expr: &seqExpr{
											pos: position{line: 3005, col: 5, offset: 98105},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 3005, col: 5, offset: 98105},
													expr: &charClassMatcher{
														pos:        position{line: 3005, col: 5, offset: 98105},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 3005, col: 15, offset: 98115},
													expr: &choiceExpr{
														pos: position{line: 3005, col: 17, offset: 98117},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3005, col: 17, offset: 98117},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 3092, col: 8, offset: 100608},
																expr: &anyMatcher{
																	line: 3092, col: 9, offset: 100609,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3007, col: 9, offset: 98199},
										run: (*parser).callonHeaderGroupElement17,
										expr: &seqExpr{
											pos: position{line: 3007, col: 9, offset: 98199},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 3007, col: 9, offset: 98199},
													expr: &charClassMatcher{
														pos:        position{line: 3007, col: 9, offset: 98199},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 3007, col: 19, offset: 98209},
													expr: &seqExpr{
														pos: position{line: 3007, col: 20, offset: 98210},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3007, col: 20, offset: 98210},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 3007, col: 27, offset: 98217},
																expr: &charClassMatcher{
																	pos:        position{line: 3007, col: 27, offset: 98217},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2693, col: 12, offset: 88679},
										run: (*parser).callonHeaderGroupElement26,
										expr: &seqExpr{
											pos: position{line: 2693, col: 12, offset: 88679},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2693, col: 12, offset: 88679},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonHeaderGroupElement29,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2693, col: 19, offset: 88686},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 408, col: 5, offset: 12582},
														run: (*parser).callonHeaderGroupElement32,
														expr: &seqExpr{
															pos: position{line: 408, col: 5, offset: 12582},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 408, col: 5, offset: 12582},
																	val:        "[[",
																	ignoreCase: false,
																	want:       "\"[[\"",
																},
																&labeledExpr{
																	pos:   position{line: 409, col: 5, offset: 12592},
																	label: "id",
																	expr: &actionExpr{
																		pos: position{line: 410, col: 9, offset: 12605},
																		run: (*parser).callonHeaderGroupElement36,
																		expr: &labeledExpr{
																			pos:   position{line: 410, col: 9, offset: 12605},
																			label: "elements",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 410, col: 18, offset: 12614},
																				expr: &choiceExpr{
																					pos: position{line: 411, col: 13, offset: 12628},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 411, col: 14, offset: 12629},
																							run: (*parser).callonHeaderGroupElement40,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 411, col: 14, offset: 12629},
																								expr: &charClassMatcher{
																									pos:        position{line: 411, col: 14, offset: 12629},
																									val:        "[^=\\r\\n�{]]",
																									chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1141, col: 23, offset: 35577},
																							run: (*parser).callonHeaderGroupElement43,
																							expr: &seqExpr{
																								pos: position{line: 1141, col: 23, offset: 35577},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1139, col: 32, offset: 35545},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1141, col: 51, offset: 35605},
																										label: "ref",
																										expr: &actionExpr{
																											pos: position{line: 1141, col: 56, offset: 35610},
																											run: (*parser).callonHeaderGroupElement47,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1141, col: 56, offset: 35610},
																												expr: &charClassMatcher{
																													pos:        position{line: 1141, col: 56, offset: 35610},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1139, col: 32, offset: 35545},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 641, col: 5, offset: 20597},
																							run: (*parser).callonHeaderGroupElement51,
																							expr: &seqExpr{
																								pos: position{line: 641, col: 5, offset: 20597},
																								exprs: []interface{}{
																									&andCodeExpr{
																										pos: position{line: 641, col: 5, offset: 20597},
																										run: (*parser).callonHeaderGroupElement53,
																									},
																									&labeledExpr{
																										pos:   position{line: 644, col: 5, offset: 20666},
																										label: "element",
																										expr: &choiceExpr{
																											pos: position{line: 644, col: 14, offset: 20675},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 664, col: 25, offset: 21328},
																													run: (*parser).callonHeaderGroupElement56,
																													expr: &seqExpr{
																														pos: position{line: 664, col: 25, offset: 21328},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 664, col: 25, offset: 21328},
																																val:        "{counter:",
																																ignoreCase: false,
																																want:       "\"{counter:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 664, col: 37, offset: 21340},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement60,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 664, col: 56, offset: 21359},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 664, col: 62, offset: 21365},
																																	expr: &actionExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		run: (*parser).callonHeaderGroupElement67,
																																		expr: &seqExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 672, col: 17, offset: 21660},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 672, col: 21, offset: 21664},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 672, col: 28, offset: 21671},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 672, col: 28, offset: 21671},
																																								run: (*parser).callonHeaderGroupElement72,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 672, col: 28, offset: 21671},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								run: (*parser).callonHeaderGroupElement74,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 674, col: 9, offset: 21725},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 664, col: 78, offset: 21381},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 668, col: 25, offset: 21499},
																													run: (*parser).callonHeaderGroupElement78,
																													expr: &seqExpr{
																														pos: position{line: 668, col: 25, offset: 21499},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 668, col: 25, offset: 21499},
																																val:        "{counter2:",
																																ignoreCase: false,
																																want:       "\"{counter2:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 668, col: 38, offset: 21512},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement82,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 668, col: 57, offset: 21531},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 668, col: 63, offset: 21537},
																																	expr: &actionExpr{
																																		pos: position{line: 672, col: 17, offset: 21660},
																																		run: (*parser).callonHeaderGroupElement89,
																																		expr: &seqExpr{
																																			pos: position{line: 672, col: 17, offset: 21660},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 672, col: 17, offset: 21660},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 672, col: 21, offset: 21664},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 672, col: 28, offset: 21671},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 672, col: 28, offset: 21671},
																																								run: (*parser).callonHeaderGroupElement94,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 672, col: 28, offset: 21671},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 674, col: 9, offset: 21725},
																																								run: (*parser).callonHeaderGroupElement96,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 674, col: 9, offset: 21725},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 674, col: 9, offset: 21725},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 668, col: 79, offset: 21553},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 650, col: 5, offset: 20804},
																													run: (*parser).callonHeaderGroupElement100,
																													expr: &seqExpr{
																														pos: position{line: 650, col: 5, offset: 20804},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 650, col: 5, offset: 20804},
																																val:        "\\{",
																																ignoreCase: false,
																																want:       "\"\\\\{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 650, col: 13, offset: 20812},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement104,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 650, col: 32, offset: 20831},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 657, col: 5, offset: 21072},
																													run: (*parser).callonHeaderGroupElement110,
																													expr: &seqExpr{
																														pos: position{line: 657, col: 5, offset: 21072},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 657, col: 5, offset: 21072},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 657, col: 9, offset: 21076},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement114,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 657, col: 28, offset: 21095},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 416, col: 16, offset: 12862},
																							run: (*parser).callonHeaderGroupElement120,
																							expr: &litMatcher{
																								pos:        position{line: 416, col: 16, offset: 12862},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 422, col: 5, offset: 13048},
																	val:        "]]",
																	ignoreCase: false,
																	want:       "\"]]\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2693, col: 40, offset: 88707},
													expr: &actionExpr{
														pos: position{line: 3079, col: 10, offset: 100334},
														run: (*parser).callonHeaderGroupElement124,
														expr: &charClassMatcher{
															pos:        position{line: 3079, col: 11, offset: 100335},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 2693, col: 47, offset: 88714},
													expr: &notExpr{
														pos: position{line: 3092, col: 8, offset: 100608},
														expr: &anyMatcher{
															line: 3092, col: 9, offset: 100609,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3079, col: 10, offset: 100334},
										run: (*parser).callonHeaderGroupElement129,
										expr: &charClassMatcher{
											pos:        position{line: 3079, col: 11, offset: 100335},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2695, col: 11, offset: 88787},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2696, col: 11, offset: 88815},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2697, col: 11, offset: 88831},
										name: "Link",
									},
									&actionExpr{
										pos: position{line: 2764, col: 5, offset: 90546},
										run: (*parser).callonHeaderGroupElement134,
										expr: &seqExpr{
											pos: position{line: 2764, col: 5, offset: 90546},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2764, col: 5, offset: 90546},
													run: (*parser).callonHeaderGroupElement136,
												},
												&labeledExpr{
													pos:   position{line: 2767, col: 5, offset: 90622},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2769, col: 9, offset: 90720},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2769, col: 9, offset: 90720},
																run: (*parser).callonHeaderGroupElement139,
																expr: &choiceExpr{
																	pos: position{line: 692, col: 27, offset: 22379},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 692, col: 27, offset: 22379},
																			run: (*parser).callonHeaderGroupElement141,
																			expr: &seqExpr{
																				pos: position{line: 692, col: 27, offset: 22379},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 692, col: 27, offset: 22379},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 32, offset: 22384},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonHeaderGroupElement145,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 692, col: 40, offset: 22392},
																						expr: &actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonHeaderGroupElement149,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 47, offset: 22399},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 692, col: 51, offset: 22403},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 702, col: 24, offset: 22804},
																							expr: &choiceExpr{
																								pos: position{line: 703, col: 5, offset: 22810},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 703, col: 6, offset: 22811},
																										run: (*parser).callonHeaderGroupElement155,
																										expr: &seqExpr{
																											pos: position{line: 703, col: 6, offset: 22811},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 703, col: 6, offset: 22811},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 703, col: 14, offset: 22819},
																													expr: &charClassMatcher{
																														pos:        position{line: 703, col: 14, offset: 22819},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 650, col: 5, offset: 20804},
																										run: (*parser).callonHeaderGroupElement160,
																										expr: &seqExpr{
																											pos: position{line: 650, col: 5, offset: 20804},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 650, col: 5, offset: 20804},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 650, col: 13, offset: 20812},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonHeaderGroupElement164,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 650, col: 32, offset: 20831},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21072},
																										run: (*parser).callonHeaderGroupElement170,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21072},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21072},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 9, offset: 21076},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonHeaderGroupElement174,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 28, offset: 21095},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 707, col: 8, offset: 23045},
																										run: (*parser).callonHeaderGroupElement180,
																										expr: &litMatcher{
																											pos:        position{line: 707, col: 8, offset: 23045},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 692, col: 79, offset: 22431},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 694, col: 9, offset: 22504},
																			run: (*parser).callonHeaderGroupElement183,
																			expr: &seqExpr{
																				pos: position{line: 694, col: 9, offset: 22504},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 694, col: 9, offset: 22504},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 694, col: 14, offset: 22509},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3064, col: 7, offset: 99986},
																							run: (*parser).callonHeaderGroupElement187,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3064, col: 7, offset: 99986},
																								expr: &charClassMatcher{
																									pos:        position{line: 3064, col: 7, offset: 99986},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 694, col: 22, offset: 22517},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2772, col: 11, offset: 90824},
																run: (*parser).callonHeaderGroupElement191,
																expr: &charClassMatcher{
																	pos:        position{line: 2772, col: 12, offset: 90825},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2699, col: 11, offset: 88916},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 641, col: 5, offset: 20597},
										run: (*parser).callonHeaderGroupElement194,
										expr: &seqExpr{
											pos: position{line: 641, col: 5, offset: 20597},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 641, col: 5, offset: 20597},
													run: (*parser).callonHeaderGroupElement196,
												},
												&labeledExpr{
													pos:   position{line: 644, col: 5, offset: 20666},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 644, col: 14, offset: 20675},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 664, col: 25, offset: 21328},
																run: (*parser).callonHeaderGroupElement199,
																expr: &seqExpr{
																	pos: position{line: 664, col: 25, offset: 21328},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 25, offset: 21328},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 37, offset: 21340},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement203,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 56, offset: 21359},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 664, col: 62, offset: 21365},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonHeaderGroupElement210,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonHeaderGroupElement215,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonHeaderGroupElement217,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 78, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 668, col: 25, offset: 21499},
																run: (*parser).callonHeaderGroupElement221,
																expr: &seqExpr{
																	pos: position{line: 668, col: 25, offset: 21499},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 668, col: 25, offset: 21499},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 38, offset: 21512},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement225,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 668, col: 57, offset: 21531},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 668, col: 63, offset: 21537},
																				expr: &actionExpr{
																					pos: position{line: 672, col: 17, offset: 21660},
																					run: (*parser).callonHeaderGroupElement232,
																					expr: &seqExpr{
																						pos: position{line: 672, col: 17, offset: 21660},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 672, col: 17, offset: 21660},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 672, col: 21, offset: 21664},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 672, col: 28, offset: 21671},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 672, col: 28, offset: 21671},
																											run: (*parser).callonHeaderGroupElement237,
																											expr: &charClassMatcher{
																												pos:        position{line: 672, col: 28, offset: 21671},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 674, col: 9, offset: 21725},
																											run: (*parser).callonHeaderGroupElement239,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 674, col: 9, offset: 21725},
																												expr: &charClassMatcher{
																													pos:        position{line: 674, col: 9, offset: 21725},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 668, col: 79, offset: 21553},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 650, col: 5, offset: 20804},
																run: (*parser).callonHeaderGroupElement243,
																expr: &seqExpr{
																	pos: position{line: 650, col: 5, offset: 20804},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 650, col: 5, offset: 20804},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 650, col: 13, offset: 20812},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement247,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 650, col: 32, offset: 20831},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21072},
																run: (*parser).callonHeaderGroupElement253,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21072},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21072},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 9, offset: 21076},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement257,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 28, offset: 21095},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1141, col: 23, offset: 35577},
										run: (*parser).callonHeaderGroupElement263,
										expr: &seqExpr{
											pos: position{line: 1141, col: 23, offset: 35577},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1141, col: 51, offset: 35605},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1141, col: 56, offset: 35610},
														run: (*parser).callonHeaderGroupElement267,
														expr: &oneOrMoreExpr{
															pos: position{line: 1141, col: 56, offset: 35610},
															expr: &charClassMatcher{
																pos:        position{line: 1141, col: 56, offset: 35610},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1139, col: 32, offset: 35545},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2753, col: 5, offset: 90320},
										run: (*parser).callonHeaderGroupElement271,
										expr: &seqExpr{
											pos: position{line: 2753, col: 5, offset: 90320},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2753, col: 5, offset: 90320},
													run: (*parser).callonHeaderGroupElement273,
												},
												&labeledExpr{
													pos:   position{line: 2756, col: 5, offset: 90391},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2797, col: 5, offset: 91718},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2797, col: 5, offset: 91718},
																run: (*parser).callonHeaderGroupElement276,
																expr: &seqExpr{
																	pos: position{line: 2797, col: 5, offset: 91718},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2797, col: 5, offset: 91718},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2797, col: 10, offset: 91723},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2805, col: 15, offset: 91999},
																					run: (*parser).callonHeaderGroupElement280,
																					expr: &litMatcher{
																						pos:        position{line: 2805, col: 15, offset: 91999},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2811, col: 14, offset: 92114},
																					run: (*parser).callonHeaderGroupElement282,
																					expr: &litMatcher{
																						pos:        position{line: 2811, col: 14, offset: 92114},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2815, col: 14, offset: 92190},
																					run: (*parser).callonHeaderGroupElement284,
																					expr: &litMatcher{
																						pos:        position{line: 2815, col: 14, offset: 92190},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2819, col: 15, offset: 92268},
																					run: (*parser).callonHeaderGroupElement286,
																					expr: &litMatcher{
																						pos:        position{line: 2819, col: 15, offset: 92268},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2823, col: 13, offset: 92343},
																					run: (*parser).callonHeaderGroupElement288,
																					expr: &litMatcher{
																						pos:        position{line: 2823, col: 13, offset: 92343},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2805, col: 15, offset: 91999},
																run: (*parser).callonHeaderGroupElement290,
																expr: &litMatcher{
																	pos:        position{line: 2805, col: 15, offset: 91999},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2811, col: 14, offset: 92114},
																run: (*parser).callonHeaderGroupElement292,
																expr: &litMatcher{
																	pos:        position{line: 2811, col: 14, offset: 92114},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2815, col: 14, offset: 92190},
																run: (*parser).callonHeaderGroupElement294,
																expr: &litMatcher{
																	pos:        position{line: 2815, col: 14, offset: 92190},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2819, col: 15, offset: 92268},
																run: (*parser).callonHeaderGroupElement296,
																expr: &litMatcher{
																	pos:        position{line: 2819, col: 15, offset: 92268},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2823, col: 13, offset: 92343},
																run: (*parser).callonHeaderGroupElement298,
																expr: &litMatcher{
																	pos:        position{line: 2823, col: 13, offset: 92343},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2832, col: 5, offset: 92667},
																run: (*parser).callonHeaderGroupElement300,
																expr: &seqExpr{
																	pos: position{line: 2832, col: 5, offset: 92667},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2993, col: 13, offset: 97650},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2832, col: 14, offset: 92676},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2832, col: 19, offset: 92681},
																			expr: &charClassMatcher{
																				pos:        position{line: 2832, col: 20, offset: 92682},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2838, col: 5, offset: 92913},
																run: (*parser).callonHeaderGroupElement306,
																expr: &seqExpr{
																	pos: position{line: 2838, col: 5, offset: 92913},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2993, col: 13, offset: 97650},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2838, col: 14, offset: 92922},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2838, col: 18, offset: 92926},
																			expr: &charClassMatcher{
																				pos:        position{line: 2838, col: 19, offset: 92927},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1222, col: 5, offset: 38204},
										run: (*parser).callonHeaderGroupElement312,
										expr: &seqExpr{
											pos: position{line: 1222, col: 5, offset: 38204},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1222, col: 5, offset: 38204},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1222, col: 14, offset: 38213},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3064, col: 7, offset: 99986},
														run: (*parser).callonHeaderGroupElement316,
														expr: &oneOrMoreExpr{
															pos: position{line: 3064, col: 7, offset: 99986},
															expr: &charClassMatcher{
																pos:        position{line: 3064, col: 7, offset: 99986},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1222, col: 22, offset: 38221},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1228, col: 5, offset: 38407},
										run: (*parser).callonHeaderGroupElement320,
										expr: &seqExpr{
											pos: position{line: 1228, col: 5, offset: 38407},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1228, col: 5, offset: 38407},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1228, col: 10, offset: 38412},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3064, col: 7, offset: 99986},
														run: (*parser).callonHeaderGroupElement324,
														expr: &oneOrMoreExpr{
															pos: position{line: 3064, col: 7, offset: 99986},
															expr: &charClassMatcher{
																pos:        position{line: 3064, col: 7, offset: 99986},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1228, col: 18, offset: 38420},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2704, col: 11, offset: 89161},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 3031, col: 12, offset: 98869},
										run: (*parser).callonHeaderGroupElement329,
										expr: &anyMatcher{
											line: 3031, col: 12, offset: 98869,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2709, col: 1, offset: 89240},
			expr: &actionExpr{
				pos: position{line: 2711, col: 5, offset: 89322},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2711, col: 5, offset: 89322},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2711, col: 5, offset: 89322},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2714, col: 5, offset: 89387},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2715, col: 9, offset: 89405},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2715, col: 9, offset: 89405},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2716, col: 11, offset: 89426},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2717, col: 11, offset: 89449},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2718, col: 11, offset: 89465},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2719, col: 11, offset: 89494},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2720, col: 11, offset: 89520},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2721, col: 11, offset: 89546},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1222, col: 5, offset: 38204},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1222, col: 5, offset: 38204},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1222, col: 5, offset: 38204},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1222, col: 14, offset: 38213},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3064, col: 7, offset: 99986},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 3064, col: 7, offset: 99986},
															expr: &charClassMatcher{
																pos:        position{line: 3064, col: 7, offset: 99986},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1222, col: 22, offset: 38221},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1228, col: 5, offset: 38407},
										run: (*parser).callonInlineMacro21,
										expr: &seqExpr{
											pos: position{line: 1228, col: 5, offset: 38407},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1228, col: 5, offset: 38407},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1228, col: 10, offset: 38412},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3064, col: 7, offset: 99986},
														run: (*parser).callonInlineMacro25,
														expr: &oneOrMoreExpr{
															pos: position{line: 3064, col: 7, offset: 99986},
															expr: &charClassMatcher{
																pos:        position{line: 3064, col: 7, offset: 99986},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1228, col: 18, offset: 38420},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1245, col: 23, offset: 39112},
										run: (*parser).callonInlineMacro29,
										expr: &seqExpr{
											pos: position{line: 1245, col: 23, offset: 39112},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1245, col: 23, offset: 39112},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1245, col: 29, offset: 39118},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1252, col: 30, offset: 39449},
														run: (*parser).callonInlineMacro33,
														expr: &oneOrMoreExpr{
															pos: position{line: 1252, col: 30, offset: 39449},
															expr: &choiceExpr{
																pos: position{line: 1252, col: 31, offset: 39450},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2993, col: 13, offset: 97650},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 3079, col: 10, offset: 100334},
																		run: (*parser).callonInlineMacro37,
																		expr: &charClassMatcher{
																			pos:        position{line: 3079, col: 11, offset: 100335},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1246, col: 5, offset: 39157},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1246, col: 11, offset: 39163},
														expr: &actionExpr{
															pos: position{line: 1246, col: 12, offset: 39164},
															run: (*parser).callonInlineMacro41,
															expr: &seqExpr{
																pos: position{line: 1246, col: 12, offset: 39164},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1246, col: 12, offset: 39164},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonInlineMacro44,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1246, col: 19, offset: 39171},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1246, col: 23, offset: 39175},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonInlineMacro48,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1246, col: 30, offset: 39182},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1252, col: 30, offset: 39449},
																			run: (*parser).callonInlineMacro51,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1252, col: 30, offset: 39449},
																				expr: &choiceExpr{
																					pos: position{line: 1252, col: 31, offset: 39450},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2993, col: 13, offset: 97650},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonInlineMacro55,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1247, col: 5, offset: 39249},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1247, col: 11, offset: 39255},
														expr: &actionExpr{
															pos: position{line: 1247, col: 12, offset: 39256},
															run: (*parser).callonInlineMacro59,
															expr: &seqExpr{
																pos: position{line: 1247, col: 12, offset: 39256},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1247, col: 12, offset: 39256},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonInlineMacro62,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1247, col: 19, offset: 39263},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1247, col: 23, offset: 39267},
																		expr: &actionExpr{
																			pos: position{line: 3079, col: 10, offset: 100334},
																			run: (*parser).callonInlineMacro66,
																			expr: &charClassMatcher{
																				pos:        position{line: 3079, col: 11, offset: 100335},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1247, col: 30, offset: 39274},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1252, col: 30, offset: 39449},
																			run: (*parser).callonInlineMacro69,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1252, col: 30, offset: 39449},
																				expr: &choiceExpr{
																					pos: position{line: 1252, col: 31, offset: 39450},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2993, col: 13, offset: 97650},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 3079, col: 10, offset: 100334},
																							run: (*parser).callonInlineMacro73,
																							expr: &charClassMatcher{
																								pos:        position{line: 3079, col: 11, offset: 100335},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1248, col: 5, offset: 39341},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2724, col: 11, offset: 89625},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2725, col: 11, offset: 89645},
										name: "InlineUserMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2729, col: 1, offset: 89707},
			expr: &actionExpr{
				pos: position{line: 2731, col: 5, offset: 89795},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2731, col: 5, offset: 89795},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2731, col: 5, offset: 89795},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2734, col: 5, offset: 89872},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2735, col: 9, offset: 89890},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1309, col: 26, offset: 42356},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1309, col: 26, offset: 42356},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1307, col: 32, offset: 42324},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1309, col: 54, offset: 42384},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1313, col: 33, offset: 42597},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1313, col: 34, offset: 42598},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1313, col: 34, offset: 42598},
																	expr: &seqExpr{
																		pos: position{line: 1313, col: 35, offset: 42599},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1313, col: 35, offset: 42599},
																				expr: &litMatcher{
																					pos:        position{line: 1307, col: 32, offset: 42324},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1313, col: 64, offset: 42628,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1315, col: 11, offset: 42801},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1315, col: 11, offset: 42801},
																	expr: &seqExpr{
																		pos: position{line: 1315, col: 12, offset: 42802},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1315, col: 12, offset: 42802},
																				expr: &actionExpr{
																					pos: position{line: 3079, col: 10, offset: 100334},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 3079, col: 11, offset: 100335},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1315, col: 19, offset: 42809},
																				expr: &actionExpr{
																					pos: position{line: 3088, col: 12, offset: 100518},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 3088, col: 13, offset: 100519},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3088, col: 13, offset: 100519},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 20, offset: 100526},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3088, col: 29, offset: 100535},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1315, col: 28, offset: 42818},
																				expr: &litMatcher{
																					pos:        position{line: 1307, col: 32, offset: 42324},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1315, col: 57, offset: 42847,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1307, col: 32, offset: 42324},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1309, col: 121, offset: 42451},
													expr: &charClassMatcher{
														pos:        position{line: 2993, col: 13, offset: 97650},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1297, col: 26, offset: 41639},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1297, col: 26, offset: 41639},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1295, col: 32, offset: 41609},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1297, col: 54, offset: 41667},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1301, col: 33, offset: 41880},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1301, col: 34, offset: 41881},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1301, col: 34, offset: 41881},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1301, col: 35, offset: 41882},
																			expr: &litMatcher{
																				pos:        position{line: 1295, col: 32, offset: 41609},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1301, col: 64, offset: 41911},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1301, col: 71, offset: 41918},
																			expr: &actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1301, col: 80, offset: 41927,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1301, col: 83, offset: 41930},
																			expr: &seqExpr{
																				pos: position{line: 1301, col: 84, offset: 41931},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1301, col: 84, offset: 41931},
																						expr: &seqExpr{
																							pos: position{line: 1301, col: 86, offset: 41933},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 3083, col: 11, offset: 100401},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3083, col: 11, offset: 100401},
																										expr: &charClassMatcher{
																											pos:        position{line: 3083, col: 12, offset: 100402},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1295, col: 32, offset: 41609},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1301, col: 122, offset: 41969},
																						expr: &litMatcher{
																							pos:        position{line: 1295, col: 32, offset: 41609},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1301, col: 151, offset: 41998},
																						expr: &actionExpr{
																							pos: position{line: 3088, col: 12, offset: 100518},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 3088, col: 13, offset: 100519},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3088, col: 13, offset: 100519},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 20, offset: 100526},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3088, col: 29, offset: 100535},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1301, col: 160, offset: 42007,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1303, col: 11, offset: 42157},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1303, col: 12, offset: 42158},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1303, col: 12, offset: 42158},
																			expr: &actionExpr{
																				pos: position{line: 3079, col: 10, offset: 100334},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 3079, col: 11, offset: 100335},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1303, col: 19, offset: 42165},
																			expr: &actionExpr{
																				pos: position{line: 3088, col: 12, offset: 100518},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 3088, col: 13, offset: 100519},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3088, col: 13, offset: 100519},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 20, offset: 100526},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3088, col: 29, offset: 100535},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1303, col: 28, offset: 42174},
																			expr: &litMatcher{
																				pos:        position{line: 1295, col: 32, offset: 41609},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1303, col: 57, offset: 42203,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1295, col: 32, offset: 41609},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1297, col: 121, offset: 41734},
													expr: &charClassMatcher{
														pos:        position{line: 2993, col: 13, offset: 97650},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2735, col: 57, offset: 89938},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2740, col: 1, offset: 89998},
			expr: &actionExpr{
				pos: position{line: 2742, col: 5, offset: 90074},
				run: (*parser).callonQuote1,
				expr: &seqExpr{
					pos: position{line: 2742, col: 5, offset: 90074},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2742, col: 5, offset: 90074},
							run: (*parser).callonQuote3,
						},
						&labeledExpr{
							pos:   position{line: 2745, col: 5, offset: 90139},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2746, col: 9, offset: 90157},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2746, col: 9, offset: 90157},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2747, col: 11, offset: 90179},
										name: "QuotedString",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2908, col: 1, offset: 94708},
			expr: &actionExpr{
				pos: position{line: 2908, col: 26, offset: 94733},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2908, col: 26, offset: 94733},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2908, col: 26, offset: 94733},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2908, col: 31, offset: 94738},
								expr: &actionExpr{
									pos: position{line: 2913, col: 5, offset: 94801},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2913, col: 5, offset: 94801},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2913, col: 5, offset: 94801},
												expr: &notExpr{
													pos: position{line: 3092, col: 8, offset: 100608},
													expr: &anyMatcher{
														line: 3092, col: 9, offset: 100609,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2916, col: 5, offset: 94925},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2916, col: 16, offset: 94936},
													expr: &actionExpr{
														pos: position{line: 2916, col: 17, offset: 94937},
														run: (*parser).callonTableColumnsAttribute12,
														expr: &seqExpr{
															pos: position{line: 2916, col: 17, offset: 94937},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2916, col: 17, offset: 94937},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 3071, col: 12, offset: 100161},
																		run: (*parser).callonTableColumnsAttribute15,
																		expr: &seqExpr{
																			pos: position{line: 3071, col: 13, offset: 100162},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3071, col: 13, offset: 100162},
																					expr: &litMatcher{
																						pos:        position{line: 3071, col: 13, offset: 100162},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 3071, col: 18, offset: 100167},
																					expr: &charClassMatcher{
																						pos:        position{line: 3071, col: 18, offset: 100167},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2916, col: 27, offset: 94947},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2917, col: 5, offset: 94975},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2917, col: 12, offset: 94982},
													expr: &choiceExpr{
														pos: position{line: 2918, col: 9, offset: 94992},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2918, col: 9, offset: 94992},
																run: (*parser).callonTableColumnsAttribute25,
																expr: &litMatcher{
																	pos:        position{line: 2918, col: 9, offset: 94992},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2919, col: 11, offset: 95039},
																run: (*parser).callonTableColumnsAttribute27,
																expr: &litMatcher{
																	pos:        position{line: 2919, col: 11, offset: 95039},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2920, col: 11, offset: 95087},
																run: (*parser).callonTableColumnsAttribute29,
																expr: &litMatcher{
																	pos:        position{line: 2920, col: 11, offset: 95087},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2922, col: 5, offset: 95137},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2922, col: 12, offset: 95144},
													expr: &choiceExpr{
														pos: position{line: 2923, col: 9, offset: 95154},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2923, col: 9, offset: 95154},
																run: (*parser).callonTableColumnsAttribute34,
																expr: &litMatcher{
																	pos:        position{line: 2923, col: 9, offset: 95154},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2924, col: 11, offset: 95201},
																run: (*parser).callonTableColumnsAttribute36,
																expr: &litMatcher{
																	pos:        position{line: 2924, col: 11, offset: 95201},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2925, col: 11, offset: 95251},
																run: (*parser).callonTableColumnsAttribute38,
																expr: &litMatcher{
																	pos:        position{line: 2925, col: 11, offset: 95251},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2927, col: 5, offset: 95302},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2927, col: 12, offset: 95309},
													expr: &choiceExpr{
														pos: position{line: 2927, col: 13, offset: 95310},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3071, col: 12, offset: 100161},
																run: (*parser).callonTableColumnsAttribute43,
																expr: &seqExpr{
																	pos: position{line: 3071, col: 13, offset: 100162},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3071, col: 13, offset: 100162},
																			expr: &litMatcher{
																				pos:        position{line: 3071, col: 13, offset: 100162},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3071, col: 18, offset: 100167},
																			expr: &charClassMatcher{
																				pos:        position{line: 3071, col: 18, offset: 100167},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2927, col: 24, offset: 95321},
																run: (*parser).callonTableColumnsAttribute49,
																expr: &litMatcher{
																	pos:        position{line: 2927, col: 24, offset: 95321},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2928, col: 5, offset: 95363},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2928, col: 11, offset: 95369},
													expr: &actionExpr{
														pos: position{line: 2928, col: 12, offset: 95370},
														run: (*parser).callonTableColumnsAttribute53,
														expr: &charClassMatcher{
															pos:        position{line: 2928, col: 12, offset: 95370},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2930, col: 5, offset: 95500},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2930, col: 11, offset: 95506},
													expr: &litMatcher{
														pos:        position{line: 2930, col: 12, offset: 95507},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2931, col: 5, offset: 95517},
												run: (*parser).callonTableColumnsAttribute58,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3092, col: 8, offset: 100608},
							expr: &anyMatcher{
								line: 3092, col: 9, offset: 100609,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2958, col: 1, offset: 96526},
			expr: &actionExpr{
				pos: position{line: 2959, col: 5, offset: 96549},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2959, col: 5, offset: 96549},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2959, col: 5, offset: 96549},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2982, col: 18, offset: 97314},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2982, col: 19, offset: 97315},
									expr: &charClassMatcher{
										pos:        position{line: 2982, col: 19, offset: 97315},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2960, col: 5, offset: 96575},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2964, col: 5, offset: 96715},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2965, col: 5, offset: 96725},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2986, col: 19, offset: 97390},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2986, col: 19, offset: 97390},
									expr: &charClassMatcher{
										pos:        position{line: 2986, col: 19, offset: 97390},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2966, col: 5, offset: 96753},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2966, col: 17, offset: 96765},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 3095, col: 8, offset: 100658},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3088, col: 12, offset: 100518},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 3088, col: 13, offset: 100519},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3088, col: 13, offset: 100519},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 20, offset: 100526},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3088, col: 29, offset: 100535},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3092, col: 8, offset: 100608},
									expr: &anyMatcher{
										line: 3092, col: 9, offset: 100609,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2970, col: 1, offset: 96913},
			expr: &actionExpr{
				pos: position{line: 2971, col: 5, offset: 96937},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2971, col: 5, offset: 96937},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2971, col: 5, offset: 96937},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2982, col: 18, offset: 97314},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2982, col: 19, offset: 97315},
									expr: &charClassMatcher{
										pos:        position{line: 2982, col: 19, offset: 97315},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2972, col: 5, offset: 96963},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2976, col: 5, offset: 97103},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2977, col: 5, offset: 97112},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2986, col: 19, offset: 97390},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2986, col: 19, offset: 97390},
									expr: &charClassMatcher{
										pos:        position{line: 2986, col: 19, offset: 97390},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2978, col: 5, offset: 97140},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2978, col: 17, offset: 97152},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 3035, col: 1, offset: 98936},
			expr: &actionExpr{
				pos: position{line: 3035, col: 17, offset: 98952},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 3035, col: 17, offset: 98952},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 3035, col: 22, offset: 98957},
						expr: &choiceExpr{
							pos: position{line: 3035, col: 23, offset: 98958},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3050, col: 5, offset: 99414},
									run: (*parser).callonFileLocation5,
									expr: &seqExpr{
										pos: position{line: 3050, col: 5, offset: 99414},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 3050, col: 5, offset: 99414},
												expr: &litMatcher{
													pos:        position{line: 3050, col: 6, offset: 99415},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 3051, col: 5, offset: 99439},
												label: "elements",
												expr: &oneOrMoreExpr{
													pos: position{line: 3051, col: 14, offset: 99448},
													expr: &choiceExpr{
														pos: position{line: 3052, col: 9, offset: 99458},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3052, col: 9, offset: 99458},
																run: (*parser).callonFileLocation12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 3052, col: 9, offset: 99458},
																	expr: &charClassMatcher{
																		pos:        position{line: 3052, col: 10, offset: 99459},
																		val:        "[^\\r\\n[]�{.,;?!<> ]",
																		chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&seqExpr{
																pos: position{line: 3055, col: 11, offset: 99724},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 3025, col: 25, offset: 98695},
																		run: (*parser).callonFileLocation16,
																		expr: &charClassMatcher{
																			pos:        position{line: 3025, col: 25, offset: 98695},
																			val:        "[.,;?!]",
																			chars:      []rune{'.', ',', ';', '?', '!'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&andExpr{
																		pos: position{line: 3055, col: 32, offset: 99745},
																		expr: &notExpr{
																			pos: position{line: 3055, col: 34, offset: 99747},
																			expr: &choiceExpr{
																				pos: position{line: 3055, col: 36, offset: 99749},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 3092, col: 8, offset: 100608},
																						expr: &anyMatcher{
																							line: 3092, col: 9, offset: 100609,
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3079, col: 10, offset: 100334},
																						run: (*parser).callonFileLocation23,
																						expr: &charClassMatcher{
																							pos:        position{line: 3079, col: 11, offset: 100335},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 641, col: 5, offset: 20597},
																run: (*parser).callonFileLocation25,
																expr: &seqExpr{
																	pos: position{line: 641, col: 5, offset: 20597},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 641, col: 5, offset: 20597},
																			run: (*parser).callonFileLocation27,
																		},
																		&labeledExpr{
																			pos:   position{line: 644, col: 5, offset: 20666},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 644, col: 14, offset: 20675},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 664, col: 25, offset: 21328},
																						run: (*parser).callonFileLocation30,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 25, offset: 21328},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 25, offset: 21328},
																									val:        "{counter:",
																									ignoreCase: false,
																									want:       "\"{counter:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 37, offset: 21340},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation34,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 56, offset: 21359},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 664, col: 62, offset: 21365},
																										expr: &actionExpr{
																											pos: position{line: 672, col: 17, offset: 21660},
																											run: (*parser).callonFileLocation41,
																											expr: &seqExpr{
																												pos: position{line: 672, col: 17, offset: 21660},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 672, col: 17, offset: 21660},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 672, col: 21, offset: 21664},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 672, col: 28, offset: 21671},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 672, col: 28, offset: 21671},
																																	run: (*parser).callonFileLocation46,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 672, col: 28, offset: 21671},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 674, col: 9, offset: 21725},
																																	run: (*parser).callonFileLocation48,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 674, col: 9, offset: 21725},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 674, col: 9, offset: 21725},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 78, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 668, col: 25, offset: 21499},
																						run: (*parser).callonFileLocation52,
																						expr: &seqExpr{
																							pos: position{line: 668, col: 25, offset: 21499},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 668, col: 25, offset: 21499},
																									val:        "{counter2:",
																									ignoreCase: false,
																									want:       "\"{counter2:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 668, col: 38, offset: 21512},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation56,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 668, col: 57, offset: 21531},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 668, col: 63, offset: 21537},
																										expr: &actionExpr{
																											pos: position{line: 672, col: 17, offset: 21660},
																											run: (*parser).callonFileLocation63,
																											expr: &seqExpr{
																												pos: position{line: 672, col: 17, offset: 21660},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 672, col: 17, offset: 21660},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 672, col: 21, offset: 21664},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 672, col: 28, offset: 21671},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 672, col: 28, offset: 21671},
																																	run: (*parser).callonFileLocation68,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 672, col: 28, offset: 21671},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 674, col: 9, offset: 21725},
																																	run: (*parser).callonFileLocation70,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 674, col: 9, offset: 21725},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 674, col: 9, offset: 21725},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 668, col: 79, offset: 21553},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 650, col: 5, offset: 20804},
																						run: (*parser).callonFileLocation74,
																						expr: &seqExpr{
																							pos: position{line: 650, col: 5, offset: 20804},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 650, col: 5, offset: 20804},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 650, col: 13, offset: 20812},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation78,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 650, col: 32, offset: 20831},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21072},
																						run: (*parser).callonFileLocation84,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21072},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21072},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 9, offset: 21076},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation88,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 28, offset: 21095},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2764, col: 5, offset: 90546},
																run: (*parser).callonFileLocation94,
																expr: &seqExpr{
																	pos: position{line: 2764, col: 5, offset: 90546},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2764, col: 5, offset: 90546},
																			run: (*parser).callonFileLocation96,
																		},
																		&labeledExpr{
																			pos:   position{line: 2767, col: 5, offset: 90622},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 2769, col: 9, offset: 90720},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2769, col: 9, offset: 90720},
																						run: (*parser).callonFileLocation99,
																						expr: &choiceExpr{
																							pos: position{line: 692, col: 27, offset: 22379},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 692, col: 27, offset: 22379},
																									run: (*parser).callonFileLocation101,
																									expr: &seqExpr{
																										pos: position{line: 692, col: 27, offset: 22379},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 692, col: 27, offset: 22379},
																												val:        "<<",
																												ignoreCase: false,
																												want:       "\"<<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 692, col: 32, offset: 22384},
																												label: "id",
																												expr: &actionExpr{
																													pos: position{line: 3064, col: 7, offset: 99986},
																													run: (*parser).callonFileLocation105,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 3064, col: 7, offset: 99986},
																														expr: &charClassMatcher{
																															pos:        position{line: 3064, col: 7, offset: 99986},
																															val:        "[^[]<>,]",
																															chars:      []rune{'[', ']', '<', '>', ','},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 692, col: 40, offset: 22392},
																												expr: &actionExpr{
																													pos: position{line: 3079, col: 10, offset: 100334},
																													run: (*parser).callonFileLocation109,
																													expr: &charClassMatcher{
																														pos:        position{line: 3079, col: 11, offset: 100335},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 692, col: 47, offset: 22399},
																												val:        ",",
																												ignoreCase: false,
																												want:       "\",\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 692, col: 51, offset: 22403},
																												label: "label",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 702, col: 24, offset: 22804},
																													expr: &choiceExpr{
																														pos: position{line: 703, col: 5, offset: 22810},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 703, col: 6, offset: 22811},
																																run: (*parser).callonFileLocation115,
																																expr: &seqExpr{
																																	pos: position{line: 703, col: 6, offset: 22811},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 703, col: 6, offset: 22811},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 703, col: 14, offset: 22819},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 703, col: 14, offset: 22819},
																																				val:        "[^\\r\\n{<>]",
																																				chars:      []rune{'\r', '\n', '{', '<', '>'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 650, col: 5, offset: 20804},
																																run: (*parser).callonFileLocation120,
																																expr: &seqExpr{
																																	pos: position{line: 650, col: 5, offset: 20804},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 650, col: 5, offset: 20804},
																																			val:        "\\{",
																																			ignoreCase: false,
																																			want:       "\"\\\\{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 650, col: 13, offset: 20812},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				run: (*parser).callonFileLocation124,
																																				expr: &seqExpr{
																																					pos: position{line: 324, col: 18, offset: 10072},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 324, col: 18, offset: 10072},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 324, col: 28, offset: 10082},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 324, col: 29, offset: 10083},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 650, col: 32, offset: 20831},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 657, col: 5, offset: 21072},
																																run: (*parser).callonFileLocation130,
																																expr: &seqExpr{
																																	pos: position{line: 657, col: 5, offset: 21072},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 657, col: 5, offset: 21072},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 657, col: 9, offset: 21076},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				run: (*parser).callonFileLocation134,
																																				expr: &seqExpr{
																																					pos: position{line: 324, col: 18, offset: 10072},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 324, col: 18, offset: 10072},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 324, col: 28, offset: 10082},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 324, col: 29, offset: 10083},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 657, col: 28, offset: 21095},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 707, col: 8, offset: 23045},
																																run: (*parser).callonFileLocation140,
																																expr: &litMatcher{
																																	pos:        position{line: 707, col: 8, offset: 23045},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 692, col: 79, offset: 22431},
																												val:        ">>",
																												ignoreCase: false,
																												want:       "\">>\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 694, col: 9, offset: 22504},
																									run: (*parser).callonFileLocation143,
																									expr: &seqExpr{
																										pos: position{line: 694, col: 9, offset: 22504},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 694, col: 9, offset: 22504},
																												val:        "<<",
																												ignoreCase: false,
																												want:       "\"<<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 694, col: 14, offset: 22509},
																												label: "id",
																												expr: &actionExpr{
																													pos: position{line: 3064, col: 7, offset: 99986},
																													run: (*parser).callonFileLocation147,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 3064, col: 7, offset: 99986},
																														expr: &charClassMatcher{
																															pos:        position{line: 3064, col: 7, offset: 99986},
																															val:        "[^[]<>,]",
																															chars:      []rune{'[', ']', '<', '>', ','},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 694, col: 22, offset: 22517},
																												val:        ">>",
																												ignoreCase: false,
																												want:       "\">>\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2772, col: 11, offset: 90824},
																						run: (*parser).callonFileLocation151,
																						expr: &charClassMatcher{
																							pos:        position{line: 2772, col: 12, offset: 90825},
																							val:        "[<>&]",
																							chars:      []rune{'<', '>', '&'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3058, col: 11, offset: 99830},
																run: (*parser).callonFileLocation153,
																expr: &litMatcher{
																	pos:        position{line: 3058, col: 11, offset: 99830},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1141, col: 23, offset: 35577},
									run: (*parser).callonFileLocation155,
									expr: &seqExpr{
										pos: position{line: 1141, col: 23, offset: 35577},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1139, col: 32, offset: 35545},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1141, col: 51, offset: 35605},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1141, col: 56, offset: 35610},
													run: (*parser).callonFileLocation159,
													expr: &oneOrMoreExpr{
														pos: position{line: 1141, col: 56, offset: 35610},
														expr: &charClassMatcher{
															pos:        position{line: 1141, col: 56, offset: 35610},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1139, col: 32, offset: 35545},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentRawLine10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine10()
}

func (c *current) onDocumentRawLine17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine17()
}

func (c *current) onDocumentRawLine20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine20()
}

func (c *current) onDocumentRawLine6(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine6(stack["name"])
}

func (c *current) onDocumentRawLine31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine31()
}

func (c *current) onDocumentRawLine38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine38()
}

func (c *current) onDocumentRawLine41() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine41()
}

func (c *current) onDocumentRawLine27(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine27(stack["name"])
}

func (c *current) onDocumentRawLine53() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine53()
}

func (c *current) onDocumentRawLine59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine59()
}

func (c *current) onDocumentRawLine64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine64()
}

func (c *current) onDocumentRawLine49(name, attr interface{}) (interface{}, error) {
	return types.NewIfdefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine49(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine72() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine72()
}

func (c *current) onDocumentRawLine78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine78()
}

func (c *current) onDocumentRawLine83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine83()
}

func (c *current) onDocumentRawLine68(name, attr interface{}) (interface{}, error) {
	return types.NewIfndefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine68(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine101()
}

func (c *current) onDocumentRawLine97(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine97(stack["name"])
}

func (c *current) onDocumentRawLine111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine111()
}

func (c *current) onDocumentRawLine107(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine107(stack["name"])
}

func (c *current) onDocumentRawLine92(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine92(stack["s"])
}

func (c *current) onDocumentRawLine127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine127()
}

func (c *current) onDocumentRawLine123(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine123(stack["name"])
}

func (c *current) onDocumentRawLine137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine137()
}

func (c *current) onDocumentRawLine133(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine133(stack["name"])
}

func (c *current) onDocumentRawLine118(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine118(stack["s"])
}

func (c *current) onDocumentRawLine151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine151()
}

func (c *current) onDocumentRawLine147(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine147(stack["name"])
}

func (c *current) onDocumentRawLine161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine161()
}

func (c *current) onDocumentRawLine157(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine157(stack["name"])
}

func (c *current) onDocumentRawLine144(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine144(stack["s"])
}

func (c *current) onDocumentRawLine171() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine171()
}

func (c *current) onDocumentRawLine167(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine167(stack["w"])
}

func (c *current) onDocumentRawLine179() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine179()
}

func (c *current) onDocumentRawLine175(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine175(stack["w"])
}

func (c *current) onDocumentRawLine183() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine183()
}

func (c *current) onDocumentRawLine190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine190()
}

func (c *current) onDocumentRawLine194() (interface{}, error) {
	return types.NewEqualOperand()

}

func (p *parser) callonDocumentRawLine194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine194()
}

func (c *current) onDocumentRawLine196() (interface{}, error) {
	return types.NewNotEqualOperand()

}

func (p *parser) callonDocumentRawLine196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine196()
}

func (c *current) onDocumentRawLine198() (interface{}, error) {
	return types.NewLessThanOperand()

}

func (p *parser) callonDocumentRawLine198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine198()
}

func (c *current) onDocumentRawLine200() (interface{}, error) {
	return types.NewLessOrEqualOperand()

}

func (p *parser) callonDocumentRawLine200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine200()
}

func (c *current) onDocumentRawLine202() (interface{}, error) {
	return types.NewGreaterThanOperand()

}

func (p *parser) callonDocumentRawLine202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine202()
}

func (c *current) onDocumentRawLine204() (interface{}, error) {
	return types.NewGreaterOrEqualOperand()

}

func (p *parser) callonDocumentRawLine204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine204()
}

func (c *current) onDocumentRawLine207() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine207()
}

func (c *current) onDocumentRawLine220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine220()
}

func (c *current) onDocumentRawLine216(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine216(stack["name"])
}

func (c *current) onDocumentRawLine230() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine230()
}

func (c *current) onDocumentRawLine226(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine226(stack["name"])
}

func (c *current) onDocumentRawLine211(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine211(stack["s"])
}

func (c *current) onDocumentRawLine246() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine246()
}

func (c *current) onDocumentRawLine242(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine242(stack["name"])
}

func (c *current) onDocumentRawLine256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine256()
}

func (c *current) onDocumentRawLine252(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine252(stack["name"])
}

func (c *current) onDocumentRawLine237(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine237(stack["s"])
}

func (c *current) onDocumentRawLine270() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine270()
}

func (c *current) onDocumentRawLine266(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine266(stack["name"])
}

func (c *current) onDocumentRawLine280() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine280()
}

func (c *current) onDocumentRawLine276(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine276(stack["name"])
}

func (c *current) onDocumentRawLine263(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine263(stack["s"])
}

func (c *current) onDocumentRawLine290() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine290()
}

func (c *current) onDocumentRawLine286(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine286(stack["w"])
}

func (c *current) onDocumentRawLine298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine298()
}

func (c *current) onDocumentRawLine294(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine294(stack["w"])
}

func (c *current) onDocumentRawLine302() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine302()
}

func (c *current) onDocumentRawLine310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine310()
}

func (c *current) onDocumentRawLine87(left, operand, right interface{}) (interface{}, error) {
	return types.NewIfevalCondition(left, right, operand.(types.IfevalOperand))

}

func (p *parser) callonDocumentRawLine87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine87(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onDocumentRawLine319() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine319()
}

func (c *current) onDocumentRawLine325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine325()
}

func (c *current) onDocumentRawLine330() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine330()
}

func (c *current) onDocumentRawLine314(name, attr interface{}) (interface{}, error) {
	return types.NewEndOfCondition() // name and attributes are parsed but ignored

}

func (p *parser) callonDocumentRawLine314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine314(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine344() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine344()
}

func (c *current) onDocumentRawLine347() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine347()
}

func (c *current) onDocumentRawLine340() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentRawLine340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine340()
}

func (c *current) onDocumentRawLine358() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine358()
}

func (c *current) onDocumentRawLine361() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine361()
}

func (c *current) onDocumentRawLine354() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentRawLine354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine354()
}

func (c *current) onDocumentRawLine372() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine372() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine372()
}

func (c *current) onDocumentRawLine376() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine376()
}

func (c *current) onDocumentRawLine379() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine379()
}

func (c *current) onDocumentRawLine368(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine368(stack["language"])
}

func (c *current) onDocumentRawLine390() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine390()
}

func (c *current) onDocumentRawLine393() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine393() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine393()
}

func (c *current) onDocumentRawLine386() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentRawLine386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine386()
}

func (c *current) onDocumentRawLine404() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine404()
}

func (c *current) onDocumentRawLine407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine407()
}

func (c *current) onDocumentRawLine400() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentRawLine400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine400()
}

func (c *current) onDocumentRawLine418() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine418()
}

func (c *current) onDocumentRawLine421() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine421() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine421()
}

func (c *current) onDocumentRawLine414() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentRawLine414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine414()
}

func (c *current) onDocumentRawLine432() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine432()
}

func (c *current) onDocumentRawLine435() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine435()
}

func (c *current) onDocumentRawLine428() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentRawLine428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine428()
}

func (c *current) onDocumentRawLine446() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine446()
}

func (c *current) onDocumentRawLine449() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine449() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine449()
}

func (c *current) onDocumentRawLine442() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentRawLine442() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine442()
}

func (c *current) onDocumentRawLine460() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine460()
}

func (c *current) onDocumentRawLine463() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine463()
}

func (c *current) onDocumentRawLine456() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentRawLine456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine456()
}

func (c *current) onDocumentRawLine334(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentRawLine334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine334(stack["delimiter"])
}

func (c *current) onDocumentRawLine472() (bool, error) {
	// should only be enabled when reading files to include, not the main (root) file
	return c.isSectionEnabled(), nil

}

func (p *parser) callonDocumentRawLine472() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine472()
}

func (c *current) onDocumentRawLine473() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentRawLine473() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine473()
}

func (c *current) onDocumentRawLine475() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentRawLine475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine475()
}

func (c *current) onDocumentRawLine478(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentRawLine478() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine478(stack["level"])
}

func (c *current) onDocumentRawLine479(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine479(stack["level"])
}

func (c *current) onDocumentRawLine470(level interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), string(c.text)) // just retain the raw content

}

func (p *parser) callonDocumentRawLine470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine470(stack["level"])
}

func (c *current) onDocumentRawLine1(element interface{}) (interface{}, error) {
	// in case of parse error, we'll keep the rawline content as-is
	return element, nil

}

func (p *parser) callonDocumentRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine1(stack["element"])
}

func (c *current) onFileInclusion19() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion19()
}

func (c *current) onFileInclusion23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30()
}

func (c *current) onFileInclusion34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonFileInclusion34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion34()
}

func (c *current) onFileInclusion41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion41()
}

func (c *current) onFileInclusion53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion53()
}

func (c *current) onFileInclusion55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion55()
}

func (c *current) onFileInclusion48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion48(stack["start"])
}

func (c *current) onFileInclusion37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37(stack["name"], stack["start"])
}

func (c *current) onFileInclusion63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion63()
}

func (c *current) onFileInclusion75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion75()
}

func (c *current) onFileInclusion77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion77()
}

func (c *current) onFileInclusion70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70(stack["start"])
}

func (c *current) onFileInclusion59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileInclusion59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59(stack["name"], stack["start"])
}

func (c *current) onFileInclusion85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85()
}

func (c *current) onFileInclusion81(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileInclusion81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion81(stack["name"])
}

func (c *current) onFileInclusion95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion95()
}

func (c *current) onFileInclusion91(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91(stack["name"])
}

func (c *current) onFileInclusion32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion32(stack["element"])
}

func (c *current) onFileInclusion103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonFileInclusion103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion103()
}

func (c *current) onFileInclusion112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion112()
}

func (c *current) onFileInclusion116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion116()
}

func (c *current) onFileInclusion122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion122()
}

func (c *current) onFileInclusion131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion131()
}

func (c *current) onFileInclusion127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileInclusion127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion127(stack["name"])
}

func (c *current) onFileInclusion141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion141()
}

func (c *current) onFileInclusion137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion137(stack["name"])
}

func (c *current) onFileInclusion147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion147()
}

func (c *current) onFileInclusion108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileInclusion108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion108(stack["id"], stack["label"])
}

func (c *current) onFileInclusion154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion154()
}

func (c *current) onFileInclusion150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileInclusion150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion150(stack["id"])
}

func (c *current) onFileInclusion106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion106()
}

func (c *current) onFileInclusion158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileInclusion158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion158()
}

func (c *current) onFileInclusion101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion101(stack["element"])
}

func (c *current) onFileInclusion160() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion160()
}

func (c *current) onFileInclusion12(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion12(stack["elements"])
}

func (c *current) onFileInclusion166() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion166()
}

func (c *current) onFileInclusion162(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion162(stack["ref"])
}

func (c *current) onFileInclusion8(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, attributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["attributes"])
}

func (c *current) onFileInclusion173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion173()
}

func (c *current) onFileInclusion176() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion176()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges20() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges20()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges28() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28()
}

func (c *current) onLineRanges26(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26(stack["singleline"])
}

func (c *current) onLineRanges44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44()
}

func (c *current) onLineRanges52() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges41(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges41(stack["start"], stack["end"])
}

func (c *current) onLineRanges60() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges60()
}

func (c *current) onLineRanges58(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges58(stack["singleline"])
}

func (c *current) onLineRanges36(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges36(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges69() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges69()
}

func (c *current) onLineRanges77() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges77()
}

func (c *current) onLineRanges66(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges66(stack["start"], stack["end"])
}

func (c *current) onLineRanges85() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges85()
}

func (c *current) onLineRanges83(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges83(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onDocumentFragment21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment21()
}

func (c *current) onDocumentFragment28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment28()
}

func (c *current) onDocumentFragment31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment31()
}

func (c *current) onDocumentFragment17(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentFragment17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment17(stack["name"])
}

func (c *current) onDocumentFragment42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment42()
}

func (c *current) onDocumentFragment49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment49()
}

func (c *current) onDocumentFragment52() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment52()
}

func (c *current) onDocumentFragment38(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentFragment38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment38(stack["name"])
}

func (c *current) onDocumentFragment65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment65()
}

func (c *current) onDocumentFragment68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment68()
}

func (c *current) onDocumentFragment59() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment59()
}

func (c *current) onDocumentFragment77() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentFragment77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77()
}

func (c *current) onDocumentFragment79() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentFragment79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment79()
}

func (c *current) onDocumentFragment82(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment82(stack["level"])
}

func (c *current) onDocumentFragment83(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment83(stack["level"])
}

func (c *current) onDocumentFragment87() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil

}

func (p *parser) callonDocumentFragment87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment87()
}

func (c *current) onDocumentFragment91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment91()
}

func (c *current) onDocumentFragment75(level, title interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}))

}

func (p *parser) callonDocumentFragment75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment75(stack["level"], stack["title"])
}

func (c *current) onDocumentFragment104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment104()
}

func (c *current) onDocumentFragment107() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment107()
}

func (c *current) onDocumentFragment100() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentFragment100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment100()
}

func (c *current) onDocumentFragment124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment124()
}

func (c *current) onDocumentFragment127() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment127()
}

func (c *current) onDocumentFragment120() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentFragment120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment120()
}

func (c *current) onDocumentFragment143() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment143()
}

func (c *current) onDocumentFragment147() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment147()
}

func (c *current) onDocumentFragment137(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment137(stack["content"])
}

func (c *current) onDocumentFragment116(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment116(stack["line"])
}

func (c *current) onDocumentFragment160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment160()
}

func (c *current) onDocumentFragment163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment163()
}

func (c *current) onDocumentFragment156() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentFragment156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment156()
}

func (c *current) onDocumentFragment98(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment98(stack["content"])
}

func (c *current) onDocumentFragment178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment178()
}

func (c *current) onDocumentFragment181() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment181()
}

func (c *current) onDocumentFragment174() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentFragment174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment174()
}

func (c *current) onDocumentFragment198() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment198()
}

func (c *current) onDocumentFragment201() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment201()
}

func (c *current) onDocumentFragment194() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentFragment194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment194()
}

func (c *current) onDocumentFragment217() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment217()
}

func (c *current) onDocumentFragment221() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment221()
}

func (c *current) onDocumentFragment211(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment211(stack["content"])
}

func (c *current) onDocumentFragment190(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment190(stack["line"])
}

func (c *current) onDocumentFragment234() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment234()
}

func (c *current) onDocumentFragment237() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment237()
}

func (c *current) onDocumentFragment230() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonDocumentFragment230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment230()
}

func (c *current) onDocumentFragment172(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonDocumentFragment172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment172(stack["content"])
}

func (c *current) onDocumentFragment253() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment253()
}

func (c *current) onDocumentFragment257() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment257()
}

func (c *current) onDocumentFragment260() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment260()
}

func (c *current) onDocumentFragment249(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentFragment249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment249(stack["language"])
}

func (c *current) onDocumentFragment277() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment277()
}

func (c *current) onDocumentFragment280() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment280()
}

func (c *current) onDocumentFragment273() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment273()
}

func (c *current) onDocumentFragment296() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment296()
}

func (c *current) onDocumentFragment300() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment300()
}

func (c *current) onDocumentFragment290(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment290(stack["content"])
}

func (c *current) onDocumentFragment269(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment269(stack["line"])
}

func (c *current) onDocumentFragment313() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment313()
}

func (c *current) onDocumentFragment316() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment316()
}

func (c *current) onDocumentFragment309() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment309()
}

func (c *current) onDocumentFragment246(delimiter, content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonDocumentFragment246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment246(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment331() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment331()
}

func (c *current) onDocumentFragment334() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment334()
}

func (c *current) onDocumentFragment327() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment327() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment327()
}

func (c *current) onDocumentFragment351() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment351()
}

func (c *current) onDocumentFragment354() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment354()
}

func (c *current) onDocumentFragment347() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment347()
}

func (c *current) onDocumentFragment370() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment370()
}

func (c *current) onDocumentFragment374() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment374()
}

func (c *current) onDocumentFragment364(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment364(stack["content"])
}

func (c *current) onDocumentFragment343(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment343(stack["line"])
}

func (c *current) onDocumentFragment387() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment387()
}

func (c *current) onDocumentFragment390() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment390()
}

func (c *current) onDocumentFragment383() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonDocumentFragment383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment383()
}

func (c *current) onDocumentFragment325(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonDocumentFragment325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment325(stack["content"])
}

func (c *current) onDocumentFragment405() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment405()
}

func (c *current) onDocumentFragment408() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment408()
}

func (c *current) onDocumentFragment401() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentFragment401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment401()
}

func (c *current) onDocumentFragment425() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment425()
}

func (c *current) onDocumentFragment428() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment428()
}

func (c *current) onDocumentFragment421() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentFragment421() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment421()
}

func (c *current) onDocumentFragment444() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment444()
}

func (c *current) onDocumentFragment448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment448()
}

func (c *current) onDocumentFragment438(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment438(stack["content"])
}

func (c *current) onDocumentFragment417(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment417(stack["line"])
}

func (c *current) onDocumentFragment461() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment461()
}

func (c *current) onDocumentFragment464() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment464()
}

func (c *current) onDocumentFragment457() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonDocumentFragment457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment457()
}

func (c *current) onDocumentFragment399(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonDocumentFragment399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment399(stack["content"])
}

func (c *current) onDocumentFragment479() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment479()
}

func (c *current) onDocumentFragment482() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment482()
}

func (c *current) onDocumentFragment475() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentFragment475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment475()
}

func (c *current) onDocumentFragment499() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment499()
}

func (c *current) onDocumentFragment502() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment502() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment502()
}

func (c *current) onDocumentFragment495() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentFragment495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment495()
}

func (c *current) onDocumentFragment518() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment518()
}

func (c *current) onDocumentFragment522() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment522() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment522()
}

func (c *current) onDocumentFragment512(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment512(stack["content"])
}

func (c *current) onDocumentFragment491(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment491(stack["line"])
}

func (c *current) onDocumentFragment535() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment535()
}

func (c *current) onDocumentFragment538() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment538() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment538()
}

func (c *current) onDocumentFragment531() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonDocumentFragment531() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment531()
}

func (c *current) onDocumentFragment473(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonDocumentFragment473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment473(stack["content"])
}

func (c *current) onDocumentFragment559() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment559() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment559()
}

func (c *current) onDocumentFragment562() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment562()
}

func (c *current) onDocumentFragment553() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment553() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment553()
}

func (c *current) onDocumentFragment571() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment571()
}

func (c *current) onDocumentFragment575() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment575() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment575()
}

func (c *current) onDocumentFragment550(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment550() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment550(stack["content"])
}

func (c *current) onDocumentFragment594() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment594() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment594()
}

func (c *current) onDocumentFragment597() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment597()
}

func (c *current) onDocumentFragment588() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment588()
}

func (c *current) onDocumentFragment606() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment606()
}

func (c *current) onDocumentFragment610() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment610()
}

func (c *current) onDocumentFragment585(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment585() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment585(stack["content"])
}

func (c *current) onDocumentFragment620() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment620() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment620()
}

func (c *current) onDocumentFragment623(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment623() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment623(stack["content"])
}

func (c *current) onDocumentFragment625() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment625()
}

func (c *current) onDocumentFragment617(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment617(stack["content"])
}

func (c *current) onDocumentFragment547(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment547() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment547(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment638() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment638()
}

func (c *current) onDocumentFragment641() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment641()
}

func (c *current) onDocumentFragment634() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentFragment634() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment634()
}

func (c *current) onDocumentFragment658() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment658() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment658()
}

func (c *current) onDocumentFragment661() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment661()
}

func (c *current) onDocumentFragment654() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentFragment654() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment654()
}

func (c *current) onDocumentFragment677() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment677()
}

func (c *current) onDocumentFragment681() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment681()
}

func (c *current) onDocumentFragment671(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment671() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment671(stack["content"])
}

func (c *current) onDocumentFragment650(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment650() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment650(stack["line"])
}

func (c *current) onDocumentFragment694() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment694() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment694()
}

func (c *current) onDocumentFragment697() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment697()
}

func (c *current) onDocumentFragment690() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonDocumentFragment690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment690()
}

func (c *current) onDocumentFragment632(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonDocumentFragment632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment632(stack["content"])
}

func (c *current) onDocumentFragment712() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment712()
}

func (c *current) onDocumentFragment715() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment715() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment715()
}

func (c *current) onDocumentFragment708() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentFragment708() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment708()
}

func (c *current) onDocumentFragment732() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment732() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment732()
}

func (c *current) onDocumentFragment735() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment735()
}

func (c *current) onDocumentFragment728() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentFragment728() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment728()
}

func (c *current) onDocumentFragment751() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment751()
}

func (c *current) onDocumentFragment755() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment755() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment755()
}

func (c *current) onDocumentFragment745(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment745() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment745(stack["content"])
}

func (c *current) onDocumentFragment724(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment724() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment724(stack["line"])
}

func (c *current) onDocumentFragment768() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment768()
}

func (c *current) onDocumentFragment771() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment771()
}

func (c *current) onDocumentFragment764() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonDocumentFragment764() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment764()
}

func (c *current) onDocumentFragment706(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonDocumentFragment706() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment706(stack["content"])
}

func (c *current) onDocumentFragment786() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment786() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment786()
}

func (c *current) onDocumentFragment789() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment789() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment789()
}

func (c *current) onDocumentFragment782() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentFragment782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment782()
}

func (c *current) onDocumentFragment806() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment806()
}

func (c *current) onDocumentFragment809() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment809() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment809()
}

func (c *current) onDocumentFragment802() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentFragment802() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment802()
}

func (c *current) onDocumentFragment825() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment825() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment825()
}

func (c *current) onDocumentFragment829() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment829() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment829()
}

func (c *current) onDocumentFragment819(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment819(stack["content"])
}

func (c *current) onDocumentFragment798(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment798(stack["line"])
}

func (c *current) onDocumentFragment842() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment842() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment842()
}

func (c *current) onDocumentFragment845() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment845() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment845()
}

func (c *current) onDocumentFragment838() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonDocumentFragment838() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment838()
}

func (c *current) onDocumentFragment780(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonDocumentFragment780() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment780(stack["content"])
}

func (c *current) onDocumentFragment865() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment865() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment865()
}

func (c *current) onDocumentFragment868() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment868() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment868()
}

func (c *current) onDocumentFragment876() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment876()
}

func (c *current) onDocumentFragment854() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment854() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment854()
}

func (c *current) onDocumentFragment888() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment888()
}

func (c *current) onDocumentFragment891() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment891()
}

func (c *current) onDocumentFragment908() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment908() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment908()
}

func (c *current) onDocumentFragment914() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment914() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment914()
}

func (c *current) onDocumentFragment912(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment912(stack["content"])
}

func (c *current) onDocumentFragment904(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment904() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment904(stack["content"])
}

func (c *current) onDocumentFragment918() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment918() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment918()
}

func (c *current) onDocumentFragment932() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment932() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment932()
}

func (c *current) onDocumentFragment935() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment935()
}

func (c *current) onDocumentFragment926() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment926()
}

func (c *current) onDocumentFragment900(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment900(stack["cells"])
}

func (c *current) onDocumentFragment952() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment952() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment952()
}

func (c *current) onDocumentFragment955() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment955()
}

func (c *current) onDocumentFragment976() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment976()
}

func (c *current) onDocumentFragment979() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment979() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment979()
}

func (c *current) onDocumentFragment995() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment995()
}

func (c *current) onDocumentFragment998() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment998() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment998()
}

func (c *current) onDocumentFragment989() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment989() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment989()
}

func (c *current) onDocumentFragment1007() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1007() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1007()
}

func (c *current) onDocumentFragment1013() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1013()
}

func (c *current) onDocumentFragment1011(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1011() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1011(stack["content"])
}

func (c *current) onDocumentFragment969(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment969() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment969(stack["content"])
}

func (c *current) onDocumentFragment1017() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1017() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1017()
}

func (c *current) onDocumentFragment966(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonDocumentFragment966() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment966(stack["cell"])
}

func (c *current) onDocumentFragment1032() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1032()
}

func (c *current) onDocumentFragment1035() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1035() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1035()
}

func (c *current) onDocumentFragment1026() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1026()
}

func (c *current) onDocumentFragment1047() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1047() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1047()
}

func (c *current) onDocumentFragment1050() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1050() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1050()
}

func (c *current) onDocumentFragment945(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment945() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment945(stack["cells"])
}

func (c *current) onDocumentFragment1066() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1066()
}

func (c *current) onDocumentFragment1069() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1069() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1069()
}

func (c *current) onDocumentFragment1087() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1087()
}

func (c *current) onDocumentFragment1090() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1090() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1090()
}

func (c *current) onDocumentFragment1106() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1106()
}

func (c *current) onDocumentFragment1109() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1109()
}

func (c *current) onDocumentFragment1100() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1100()
}

func (c *current) onDocumentFragment1118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1118()
}

func (c *current) onDocumentFragment1124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1124()
}

func (c *current) onDocumentFragment1122(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1122(stack["content"])
}

func (c *current) onDocumentFragment1080(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1080() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1080(stack["content"])
}

func (c *current) onDocumentFragment1128() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1128()
}

func (c *current) onDocumentFragment1142() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1142()
}

func (c *current) onDocumentFragment1145() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1145()
}

func (c *current) onDocumentFragment1136() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1136()
}

func (c *current) onDocumentFragment1059(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1059() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1059(stack["cells"])
}

func (c *current) onDocumentFragment1156() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1156()
}

func (c *current) onDocumentFragment1159() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1159()
}

func (c *current) onDocumentFragment884(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonDocumentFragment884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment884(stack["header"], stack["rows"])
}

func (c *current) onDocumentFragment1174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1174()
}

func (c *current) onDocumentFragment1178() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1178()
}

func (c *current) onDocumentFragment1168(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1168(stack["content"])
}

func (c *current) onDocumentFragment1189() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentFragment1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1189()
}

func (c *current) onDocumentFragment1191() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentFragment1191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1191()
}

func (c *current) onDocumentFragment1193() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentFragment1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1193()
}

func (c *current) onDocumentFragment1195() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentFragment1195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1195()
}

func (c *current) onDocumentFragment1197() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentFragment1197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1197()
}

func (c *current) onDocumentFragment1204() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1204()
}

func (c *current) onDocumentFragment1207(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1207() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1207(stack["content"])
}

func (c *current) onDocumentFragment1209() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1209()
}

func (c *current) onDocumentFragment1201(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1201(stack["content"])
}

func (c *current) onDocumentFragment1224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1224()
}

func (c *current) onDocumentFragment1226() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1226()
}

func (c *current) onDocumentFragment1239() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1239()
}

func (c *current) onDocumentFragment1243() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1243()
}

func (c *current) onDocumentFragment1233(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1233(stack["content"])
}

func (c *current) onDocumentFragment1253() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1253()
}

func (c *current) onDocumentFragment1256(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1256() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1256(stack["content"])
}

func (c *current) onDocumentFragment1258() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1258()
}

func (c *current) onDocumentFragment1250(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1250(stack["content"])
}

func (c *current) onDocumentFragment1218(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1218(stack["line"])
}

func (c *current) onDocumentFragment1185(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1185(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1273() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1273()
}

func (c *current) onDocumentFragment1271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1271()
}

func (c *current) onDocumentFragment1278(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1278() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1278(stack["content"])
}

func (c *current) onDocumentFragment1280() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1280()
}

func (c *current) onDocumentFragment1268(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1268(stack["content"])
}

func (c *current) onDocumentFragment1296() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1296()
}

func (c *current) onDocumentFragment1300() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1300()
}

func (c *current) onDocumentFragment1290(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1290(stack["content"])
}

func (c *current) onDocumentFragment1310() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1310()
}

func (c *current) onDocumentFragment1313(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1313() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1313(stack["content"])
}

func (c *current) onDocumentFragment1315() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1315()
}

func (c *current) onDocumentFragment1307(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1307(stack["content"])
}

func (c *current) onDocumentFragment1265(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1265(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1324() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1324() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1324()
}

func (c *current) onDocumentFragment1330() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1330()
}

func (c *current) onDocumentFragment1333() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1333()
}

func (c *current) onDocumentFragment1350() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1350()
}

func (c *current) onDocumentFragment1353() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1353()
}

func (c *current) onDocumentFragment1342() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1342()
}

func (c *current) onDocumentFragment1363() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1363()
}

func (c *current) onDocumentFragment1366() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1366()
}

func (c *current) onDocumentFragment1326(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1326(stack["content"])
}

func (c *current) onDocumentFragment1322(frontmatter interface{}) (interface{}, error) {
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1322(stack["frontmatter"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.disableFrontMatterRule()    // not allowed as soon as a single element is found
	c.disableDocumentHeaderRule() // not allowed anymore, based on element that was found

	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDelimitedBlockElements10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements10()
}

func (c *current) onDelimitedBlockElements6(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements6(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onAttributeDeclaration5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration5()
}

func (c *current) onAttributeDeclaration15() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration15()
}

func (c *current) onAttributeDeclaration13(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeDeclaration13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration13(stack["value"])
}

func (c *current) onAttributeDeclaration21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclaration21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration21()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace), string(c.text))

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeDeclarationValue14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue14()
}

func (c *current) onAttributeDeclarationValue17() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue17()
}

func (c *current) onAttributeDeclarationValue26() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue26()
}

func (c *current) onAttributeDeclarationValue29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue29()
}

func (c *current) onAttributeDeclarationValue33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonAttributeDeclarationValue33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue33()
}

func (c *current) onAttributeDeclarationValue40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue40()
}

func (c *current) onAttributeDeclarationValue52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue52()
}

func (c *current) onAttributeDeclarationValue54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue54()
}

func (c *current) onAttributeDeclarationValue47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValue47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue47(stack["start"])
}

func (c *current) onAttributeDeclarationValue36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeDeclarationValue36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue36(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValue62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue62()
}

func (c *current) onAttributeDeclarationValue74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue74()
}

func (c *current) onAttributeDeclarationValue76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue76()
}

func (c *current) onAttributeDeclarationValue69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValue69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue69(stack["start"])
}

func (c *current) onAttributeDeclarationValue58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeDeclarationValue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue58(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValue84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue84()
}

func (c *current) onAttributeDeclarationValue80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeDeclarationValue80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue80(stack["name"])
}

func (c *current) onAttributeDeclarationValue94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue94()
}

func (c *current) onAttributeDeclarationValue90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonAttributeDeclarationValue90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue90(stack["name"])
}

func (c *current) onAttributeDeclarationValue31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue31(stack["element"])
}

func (c *current) onAttributeDeclarationValue100() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue100()
}

func (c *current) onAttributeDeclarationValue7(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue7(stack["element"])
}

func (c *current) onAttributeDeclarationValue4(elements interface{}) (interface{}, error) {
	return elements.([]interface{}), nil

}

func (p *parser) callonAttributeDeclarationValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue4(stack["elements"])
}

func (c *current) onAttributeDeclarationValue107() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue107()
}

func (c *current) onAttributeDeclarationValue113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue113()
}

func (c *current) onAttributeDeclarationValue104(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttributeDeclarationValue104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue104(stack["elements"])
}

func (c *current) onAttributeDeclarationValue1(elements, otherElements interface{}) (interface{}, error) {
	if otherElements, ok := otherElements.([]interface{}); ok {
		return types.Reduce(append(elements.([]interface{}), otherElements...), strings.TrimSpace), nil
	}
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"], stack["otherElements"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48()
}

func (c *current) onBlockAttributes50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43(stack["start"])
}

func (c *current) onBlockAttributes32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes58()
}

func (c *current) onBlockAttributes70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["start"])
}

func (c *current) onBlockAttributes54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonBlockAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes54(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes80()
}

func (c *current) onBlockAttributes76(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes76(stack["name"])
}

func (c *current) onBlockAttributes90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes86(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes86(stack["name"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes96() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes96()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100()
}

func (c *current) onBlockAttributes103() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103()
}

func (c *current) onBlockAttributes117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes117()
}

func (c *current) onBlockAttributes120() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes120()
}

func (c *current) onBlockAttributes111() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes111()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes141()
}

func (c *current) onBlockAttributes148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes148()
}

func (c *current) onBlockAttributes144(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes144(stack["name"])
}

func (c *current) onBlockAttributes158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes158()
}

func (c *current) onBlockAttributes154(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes154(stack["name"])
}

func (c *current) onBlockAttributes164() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes164()
}

func (c *current) onBlockAttributes134(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes134(stack["elements"])
}

func (c *current) onBlockAttributes130(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes130(stack["title"])
}

func (c *current) onBlockAttributes167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes167()
}

func (c *current) onBlockAttributes170() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes170()
}

func (c *current) onBlockAttributes184() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes184()
}

func (c *current) onBlockAttributes187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes187()
}

func (c *current) onBlockAttributes178() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes178()
}

func (c *current) onBlockAttributes127(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes127(stack["title"])
}

func (c *current) onBlockAttributes199() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes199()
}

func (c *current) onBlockAttributes202() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes202()
}

func (c *current) onBlockAttributes216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes216()
}

func (c *current) onBlockAttributes219() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes219()
}

func (c *current) onBlockAttributes210() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes210()
}

func (c *current) onBlockAttributes194(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes194(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes8(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonFirstPositionalAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes8(stack["extra"])
}

func (c *current) onFirstPositionalAttributes23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFirstPositionalAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes23()
}

func (c *current) onFirstPositionalAttributes25(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes25(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonShortHandAttributeValue14() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue21()
}

func (c *current) onShortHandAttributeValue33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue33()
}

func (c *current) onShortHandAttributeValue35() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue35()
}

func (c *current) onShortHandAttributeValue28(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue28(stack["start"])
}

func (c *current) onShortHandAttributeValue17(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonShortHandAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue17(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue43() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue43()
}

func (c *current) onShortHandAttributeValue55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue55()
}

func (c *current) onShortHandAttributeValue57() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue57()
}

func (c *current) onShortHandAttributeValue50(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue50(stack["start"])
}

func (c *current) onShortHandAttributeValue39(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonShortHandAttributeValue39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue39(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue65()
}

func (c *current) onShortHandAttributeValue61(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonShortHandAttributeValue61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue61(stack["name"])
}

func (c *current) onShortHandAttributeValue75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue75()
}

func (c *current) onShortHandAttributeValue71(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonShortHandAttributeValue71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue71(stack["name"])
}

func (c *current) onShortHandAttributeValue12(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonShortHandAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue12(stack["element"])
}

func (c *current) onShortHandAttributeValue81() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue81()
}

func (c *current) onShortHandAttributeValue87() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue87()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute12()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute24()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue12()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["content"])
}

func (c *current) onSingleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent5()
}

func (c *current) onSingleQuotedAttributeValueContent8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent8()
}

func (c *current) onSingleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent13()
}

func (c *current) onSingleQuotedAttributeValueContent20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent20()
}

func (c *current) onSingleQuotedAttributeValueContent32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent32()
}

func (c *current) onSingleQuotedAttributeValueContent34() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent34()
}

func (c *current) onSingleQuotedAttributeValueContent27(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent27(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent16(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent16(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent42()
}

func (c *current) onSingleQuotedAttributeValueContent54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent54()
}

func (c *current) onSingleQuotedAttributeValueContent56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent56()
}

func (c *current) onSingleQuotedAttributeValueContent49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent49(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent38(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent64()
}

func (c *current) onSingleQuotedAttributeValueContent60(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuotedAttributeValueContent60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent60(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent74()
}

func (c *current) onSingleQuotedAttributeValueContent70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent70(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onSingleQuotedAttributeValueContent80() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonSingleQuotedAttributeValueContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent80()
}

func (c *current) onSingleQuotedAttributeValueContent84() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonSingleQuotedAttributeValueContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent84()
}

func (c *current) onSingleQuotedAttributeValueContent86() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent86()
}

func (c *current) onSingleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["content"])
}

func (c *current) onDoubleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent5()
}

func (c *current) onDoubleQuotedAttributeValueContent8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent8()
}

func (c *current) onDoubleQuotedAttributeValueContent13() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent13()
}

func (c *current) onDoubleQuotedAttributeValueContent20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent20()
}

func (c *current) onDoubleQuotedAttributeValueContent32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent32()
}

func (c *current) onDoubleQuotedAttributeValueContent34() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent34()
}

func (c *current) onDoubleQuotedAttributeValueContent27(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent27(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent16(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent16(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent42()
}

func (c *current) onDoubleQuotedAttributeValueContent54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent54()
}

func (c *current) onDoubleQuotedAttributeValueContent56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent56()
}

func (c *current) onDoubleQuotedAttributeValueContent49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent49(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent38(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent64()
}

func (c *current) onDoubleQuotedAttributeValueContent60(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuotedAttributeValueContent60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent60(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent74()
}

func (c *current) onDoubleQuotedAttributeValueContent70(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent70(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent11(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent11(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValueContent80() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonDoubleQuotedAttributeValueContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent80()
}

func (c *current) onDoubleQuotedAttributeValueContent85() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonDoubleQuotedAttributeValueContent85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent85()
}

func (c *current) onDoubleQuotedAttributeValueContent87() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent87()
}

func (c *current) onDoubleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue4()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	// not within brackets and stop on space and `{`
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue17()
}

func (c *current) onUnquotedAttributeValue21() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonUnquotedAttributeValue21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue28()
}

func (c *current) onUnquotedAttributeValue40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue40()
}

func (c *current) onUnquotedAttributeValue42() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue42()
}

func (c *current) onUnquotedAttributeValue35(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue35(stack["start"])
}

func (c *current) onUnquotedAttributeValue24(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue24(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue50()
}

func (c *current) onUnquotedAttributeValue62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue62()
}

func (c *current) onUnquotedAttributeValue64() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue64()
}

func (c *current) onUnquotedAttributeValue57(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue57(stack["start"])
}

func (c *current) onUnquotedAttributeValue46(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue46(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue72()
}

func (c *current) onUnquotedAttributeValue68(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonUnquotedAttributeValue68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue68(stack["name"])
}

func (c *current) onUnquotedAttributeValue82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue82()
}

func (c *current) onUnquotedAttributeValue78(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonUnquotedAttributeValue78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue78(stack["name"])
}

func (c *current) onUnquotedAttributeValue19(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue19(stack["element"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference21(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["name"])
}

func (c *current) onCrossReference35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference35()
}

func (c *current) onCrossReference31(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonCrossReference31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference31(stack["name"])
}

func (c *current) onCrossReference41() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference41()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference48() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference48()
}

func (c *current) onCrossReference44(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44(stack["id"])
}

func (c *current) onExternalCrossReference16() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16()
}

func (c *current) onExternalCrossReference20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference20()
}

func (c *current) onExternalCrossReference27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference27()
}

func (c *current) onExternalCrossReference31() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalCrossReference31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference31()
}

func (c *current) onExternalCrossReference38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference38()
}

func (c *current) onExternalCrossReference50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference50()
}

func (c *current) onExternalCrossReference52() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference52()
}

func (c *current) onExternalCrossReference45(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference45(stack["start"])
}

func (c *current) onExternalCrossReference34(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalCrossReference34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference34(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference60()
}

func (c *current) onExternalCrossReference72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference72()
}

func (c *current) onExternalCrossReference74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference74()
}

func (c *current) onExternalCrossReference67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference67(stack["start"])
}

func (c *current) onExternalCrossReference56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalCrossReference56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference56(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82()
}

func (c *current) onExternalCrossReference78(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalCrossReference78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference78(stack["name"])
}

func (c *current) onExternalCrossReference92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference92()
}

func (c *current) onExternalCrossReference88(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference88(stack["name"])
}

func (c *current) onExternalCrossReference29(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference29(stack["element"])
}

func (c *current) onExternalCrossReference100() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalCrossReference100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference100()
}

func (c *current) onExternalCrossReference109() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference109()
}

func (c *current) onExternalCrossReference113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference113()
}

func (c *current) onExternalCrossReference119() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference119()
}

func (c *current) onExternalCrossReference128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference128()
}

func (c *current) onExternalCrossReference124(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalCrossReference124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference124(stack["name"])
}

func (c *current) onExternalCrossReference138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference138()
}

func (c *current) onExternalCrossReference134(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference134(stack["name"])
}

func (c *current) onExternalCrossReference144() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference144()
}

func (c *current) onExternalCrossReference105(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalCrossReference105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference105(stack["id"], stack["label"])
}

func (c *current) onExternalCrossReference151() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference151()
}

func (c *current) onExternalCrossReference147(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalCrossReference147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference147(stack["id"])
}

func (c *current) onExternalCrossReference103() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference103()
}

func (c *current) onExternalCrossReference155() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalCrossReference155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference155()
}

func (c *current) onExternalCrossReference98(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference98(stack["element"])
}

func (c *current) onExternalCrossReference157() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference157()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference163() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference163()
}

func (c *current) onExternalCrossReference159(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference159(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, attributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["attributes"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader14() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader14()
}

func (c *current) onDocumentHeader18() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil

}

func (p *parser) callonDocumentHeader18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader18()
}

func (c *current) onDocumentHeader22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader22()
}

func (c *current) onDocumentHeader11(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentHeader11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader11(stack["title"])
}

func (c *current) onDocumentHeader37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader37()
}

func (c *current) onDocumentHeader41() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader41()
}

func (c *current) onDocumentHeader31(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeader31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader31(stack["content"])
}

func (c *current) onDocumentHeader54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader54()
}

func (c *current) onDocumentHeader57() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader57()
}

func (c *current) onDocumentHeader50() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader50()
}

func (c *current) onDocumentHeader74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader74()
}

func (c *current) onDocumentHeader77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader77()
}

func (c *current) onDocumentHeader70() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader70()
}

func (c *current) onDocumentHeader93() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader93()
}

func (c *current) onDocumentHeader97() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader97()
}

func (c *current) onDocumentHeader87(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader87(stack["content"])
}

func (c *current) onDocumentHeader66(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader66(stack["line"])
}

func (c *current) onDocumentHeader110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader110()
}

func (c *current) onDocumentHeader113() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader113()
}

func (c *current) onDocumentHeader106() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader106()
}

func (c *current) onDocumentHeader48(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader48(stack["content"])
}

func (c *current) onDocumentHeader130() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader130()
}

func (c *current) onDocumentHeader147() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader147()
}

func (c *current) onDocumentHeader151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader151()
}

func (c *current) onDocumentHeader155() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader155()
}

func (c *current) onDocumentHeader159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader159()
}

func (c *current) onDocumentHeader163() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader163()
}

func (c *current) onDocumentHeader167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader167()
}

func (c *current) onDocumentHeader144(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader144(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader178()
}

func (c *current) onDocumentHeader171(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader171(stack["email"])
}

func (c *current) onDocumentHeader183() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader183()
}

func (c *current) onDocumentHeader188() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader188()
}

func (c *current) onDocumentHeader190(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader190() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader190(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader140(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader140(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader134(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentHeader134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader134(stack["authors"])
}

func (c *current) onDocumentHeader195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader195()
}

func (c *current) onDocumentHeader205() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader205()
}

func (c *current) onDocumentHeader209() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader209()
}

func (c *current) onDocumentHeader213() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader213()
}

func (c *current) onDocumentHeader217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader217()
}

func (c *current) onDocumentHeader221() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader221()
}

func (c *current) onDocumentHeader225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader225()
}

func (c *current) onDocumentHeader202(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader202(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader236() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader236()
}

func (c *current) onDocumentHeader229(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader229(stack["email"])
}

func (c *current) onDocumentHeader241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader241()
}

func (c *current) onDocumentHeader246() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader246()
}

func (c *current) onDocumentHeader248(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader248() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader248(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader198(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader198(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader191(author interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(author)
}

func (p *parser) callonDocumentHeader191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader191(stack["author"])
}

func (c *current) onDocumentHeader250() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader250()
}

func (c *current) onDocumentHeader127(authors interface{}) (interface{}, error) {
	return authors, nil
}

func (p *parser) callonDocumentHeader127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader127(stack["authors"])
}

func (c *current) onDocumentHeader265() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader265()
}

func (c *current) onDocumentHeader269() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader269()
}

func (c *current) onDocumentHeader259(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeader259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader259(stack["content"])
}

func (c *current) onDocumentHeader282() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader282()
}

func (c *current) onDocumentHeader285() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader285()
}

func (c *current) onDocumentHeader278() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader278()
}

func (c *current) onDocumentHeader302() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader302()
}

func (c *current) onDocumentHeader305() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader305()
}

func (c *current) onDocumentHeader298() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader298()
}

func (c *current) onDocumentHeader321() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader321()
}

func (c *current) onDocumentHeader325() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader325()
}

func (c *current) onDocumentHeader315(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader315(stack["content"])
}

func (c *current) onDocumentHeader294(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader294(stack["line"])
}

func (c *current) onDocumentHeader338() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader338()
}

func (c *current) onDocumentHeader341() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader341()
}

func (c *current) onDocumentHeader334() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeader334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader334()
}

func (c *current) onDocumentHeader276(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader276(stack["content"])
}

func (c *current) onDocumentHeader355() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader355()
}

func (c *current) onDocumentHeader365() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader365()
}

func (c *current) onDocumentHeader379() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader379()
}

func (c *current) onDocumentHeader371() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader371()
}

func (c *current) onDocumentHeader387() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader387()
}

func (c *current) onDocumentHeader394() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader394()
}

func (c *current) onDocumentHeader361(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentHeader361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader361(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader400() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader400() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader400()
}

func (c *current) onDocumentHeader407() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader407()
}

func (c *current) onDocumentHeader397(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentHeader397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader397(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader411() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader411()
}

func (c *current) onDocumentHeader352(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentHeader352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader352(stack["revision"])
}

func (c *current) onDocumentHeader124(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentAuthorsAndRevision(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentHeader124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader124(stack["authors"], stack["revision"])
}

func (c *current) onDocumentHeader8(title, authorsAndRevision interface{}) (interface{}, error) {
	return types.NewDocumentInformation(title.([]interface{}), authorsAndRevision)

}

func (p *parser) callonDocumentHeader8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader8(stack["title"], stack["authorsAndRevision"])
}

func (c *current) onDocumentHeader420(extraAttrs, info, moreExtraAttrs interface{}) (bool, error) {
	// at least one of title/info/extraArgs must be present
	// log.Debugf("checking document header data: title=%s / info=%s / extraAttrs=%s", title, info, extraAttrs)
	return info != nil ||
		len(extraAttrs.([]interface{})) > 0 ||
		len(moreExtraAttrs.([]interface{})) > 0, nil

}

func (p *parser) callonDocumentHeader420() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader420(stack["extraAttrs"], stack["info"], stack["moreExtraAttrs"])
}

func (c *current) onDocumentHeader1(extraAttrs, info, moreExtraAttrs interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if a, ok := extraAttrs.([]interface{}); ok {
		attrs = append(attrs, a...)
	}
	if a, ok := moreExtraAttrs.([]interface{}); ok {
		attrs = append(attrs, a...)
	}
	return types.NewDocumentHeader(info, attrs)

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["extraAttrs"], stack["info"], stack["moreExtraAttrs"])
}

func (c *current) onDocumentHeaderAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes8()
}

func (c *current) onDocumentHeaderAttributes15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes15()
}

func (c *current) onDocumentHeaderAttributes18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes18()
}

func (c *current) onDocumentHeaderAttributes4(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentHeaderAttributes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes4(stack["name"])
}

func (c *current) onDocumentHeaderAttributes29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes29()
}

func (c *current) onDocumentHeaderAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes36()
}

func (c *current) onDocumentHeaderAttributes39() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes39()
}

func (c *current) onDocumentHeaderAttributes25(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonDocumentHeaderAttributes25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes25(stack["name"])
}

func (c *current) onDocumentHeaderAttributes52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes52()
}

func (c *current) onDocumentHeaderAttributes56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes56()
}

func (c *current) onDocumentHeaderAttributes46(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeaderAttributes46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes46(stack["content"])
}

func (c *current) onDocumentHeaderAttributes69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes69()
}

func (c *current) onDocumentHeaderAttributes72() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes72()
}

func (c *current) onDocumentHeaderAttributes65() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeaderAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes65()
}

func (c *current) onDocumentHeaderAttributes89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes89()
}

func (c *current) onDocumentHeaderAttributes92() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes92()
}

func (c *current) onDocumentHeaderAttributes85() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeaderAttributes85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes85()
}

func (c *current) onDocumentHeaderAttributes108() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes108()
}

func (c *current) onDocumentHeaderAttributes112() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes112()
}

func (c *current) onDocumentHeaderAttributes102(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeaderAttributes102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes102(stack["content"])
}

func (c *current) onDocumentHeaderAttributes81(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeaderAttributes81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes81(stack["line"])
}

func (c *current) onDocumentHeaderAttributes125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes125()
}

func (c *current) onDocumentHeaderAttributes128() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes128()
}

func (c *current) onDocumentHeaderAttributes121() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonDocumentHeaderAttributes121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes121()
}

func (c *current) onDocumentHeaderAttributes63(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeaderAttributes63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes63(stack["content"])
}

func (c *current) onDocumentHeaderAttributes143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes143()
}

func (c *current) onDocumentHeaderAttributes146() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes146() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes146()
}

func (c *current) onDocumentHeaderAttributes137() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentHeaderAttributes137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes137()
}

func (c *current) onInlineElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement9()
}

func (c *current) onInlineElement14() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement14()
}

func (c *current) onInlineElement4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4()
}

func (c *current) onInlineElement21() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlineElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement21()
}

func (c *current) onInlineElement26() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonInlineElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement26()
}

func (c *current) onInlineElement29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement29()
}

func (c *current) onInlineElement33() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement33()
}

func (c *current) onInlineElement24() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement24()
}

func (c *current) onInlineElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement43()
}

func (c *current) onInlineElement54() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonInlineElement54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement54()
}

func (c *current) onInlineElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement61()
}

func (c *current) onInlineElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement73()
}

func (c *current) onInlineElement75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement75()
}

func (c *current) onInlineElement68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement68(stack["start"])
}

func (c *current) onInlineElement57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement57(stack["name"], stack["start"])
}

func (c *current) onInlineElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement83()
}

func (c *current) onInlineElement95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement95()
}

func (c *current) onInlineElement97() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement97()
}

func (c *current) onInlineElement90(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement90(stack["start"])
}

func (c *current) onInlineElement79(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement79(stack["name"], stack["start"])
}

func (c *current) onInlineElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement105()
}

func (c *current) onInlineElement101(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement101(stack["name"])
}

func (c *current) onInlineElement115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement115()
}

func (c *current) onInlineElement111(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement111(stack["name"])
}

func (c *current) onInlineElement52(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement52(stack["element"])
}

func (c *current) onInlineElement124() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonInlineElement124() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement124()
}

func (c *current) onInlineElement133() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement133()
}

func (c *current) onInlineElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement137()
}

func (c *current) onInlineElement143() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement143()
}

func (c *current) onInlineElement152() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement152()
}

func (c *current) onInlineElement148(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement148(stack["name"])
}

func (c *current) onInlineElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement162()
}

func (c *current) onInlineElement158(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement158(stack["name"])
}

func (c *current) onInlineElement168() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement168()
}

func (c *current) onInlineElement129(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement129(stack["id"], stack["label"])
}

func (c *current) onInlineElement175() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement175()
}

func (c *current) onInlineElement171(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement171(stack["id"])
}

func (c *current) onInlineElement127() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement127()
}

func (c *current) onInlineElement179() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement179()
}

func (c *current) onInlineElement122(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement122(stack["element"])
}

func (c *current) onInlineElement185() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonInlineElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement185()
}

func (c *current) onInlineElement187() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonInlineElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement187()
}

func (c *current) onInlineElement189() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonInlineElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement189()
}

func (c *current) onInlineElement191() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonInlineElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement191()
}

func (c *current) onInlineElement193() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonInlineElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement193()
}

func (c *current) onInlineElement181() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement181()
}

func (c *current) onInlineElement195() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonInlineElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement195()
}

func (c *current) onInlineElement197() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonInlineElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement197()
}

func (c *current) onInlineElement199() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonInlineElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement199()
}

func (c *current) onInlineElement201() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonInlineElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement201()
}

func (c *current) onInlineElement203() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonInlineElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement203()
}

func (c *current) onInlineElement205() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonInlineElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement205()
}

func (c *current) onInlineElement211() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonInlineElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement211()
}

func (c *current) onInlineElement221() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement221()
}

func (c *current) onInlineElement217(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement217(stack["ref"])
}

func (c *current) onInlineElement225() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement225()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent25()
}

func (c *current) onIndexTermContent29() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonIndexTermContent29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent29()
}

func (c *current) onIndexTermContent38() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent38()
}

func (c *current) onIndexTermContent42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent42()
}

func (c *current) onIndexTermContent48() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent48()
}

func (c *current) onIndexTermContent57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent57()
}

func (c *current) onIndexTermContent53(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonIndexTermContent53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent53(stack["name"])
}

func (c *current) onIndexTermContent67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent67()
}

func (c *current) onIndexTermContent63(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonIndexTermContent63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent63(stack["name"])
}

func (c *current) onIndexTermContent73() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent73()
}

func (c *current) onIndexTermContent34(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent34(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent80() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent80()
}

func (c *current) onIndexTermContent76(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent76(stack["id"])
}

func (c *current) onIndexTermContent32() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent32()
}

func (c *current) onIndexTermContent84() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent84()
}

func (c *current) onIndexTermContent27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent27(stack["element"])
}

func (c *current) onIndexTermContent90() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent90()
}

func (c *current) onIndexTermContent86(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent86(stack["ref"])
}

func (c *current) onIndexTermContent94() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent94()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock25() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock25()
}

func (c *current) onImageBlock29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock29()
}

func (c *current) onImageBlock36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock36()
}

func (c *current) onImageBlock40() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonImageBlock40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock40()
}

func (c *current) onImageBlock47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock47()
}

func (c *current) onImageBlock59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock59()
}

func (c *current) onImageBlock61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock61()
}

func (c *current) onImageBlock54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock54(stack["start"])
}

func (c *current) onImageBlock43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonImageBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock43(stack["name"], stack["start"])
}

func (c *current) onImageBlock69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock69()
}

func (c *current) onImageBlock81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock81()
}

func (c *current) onImageBlock83() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock83()
}

func (c *current) onImageBlock76(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock76(stack["start"])
}

func (c *current) onImageBlock65(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonImageBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock65(stack["name"], stack["start"])
}

func (c *current) onImageBlock91() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock91()
}

func (c *current) onImageBlock87(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonImageBlock87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock87(stack["name"])
}

func (c *current) onImageBlock101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock101()
}

func (c *current) onImageBlock97(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonImageBlock97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock97(stack["name"])
}

func (c *current) onImageBlock38(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock38(stack["element"])
}

func (c *current) onImageBlock109() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonImageBlock109() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock109()
}

func (c *current) onImageBlock118() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock118()
}

func (c *current) onImageBlock122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock122()
}

func (c *current) onImageBlock128() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock128()
}

func (c *current) onImageBlock137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock137()
}

func (c *current) onImageBlock133(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonImageBlock133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock133(stack["name"])
}

func (c *current) onImageBlock147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock147()
}

func (c *current) onImageBlock143(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonImageBlock143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock143(stack["name"])
}

func (c *current) onImageBlock153() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock153()
}

func (c *current) onImageBlock114(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonImageBlock114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock114(stack["id"], stack["label"])
}

func (c *current) onImageBlock160() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock160()
}

func (c *current) onImageBlock156(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonImageBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock156(stack["id"])
}

func (c *current) onImageBlock112() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock112()
}

func (c *current) onImageBlock164() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonImageBlock164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock164()
}

func (c *current) onImageBlock107(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock107(stack["element"])
}

func (c *current) onImageBlock166() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock166()
}

func (c *current) onImageBlock18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock18(stack["elements"])
}

func (c *current) onImageBlock172() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock172()
}

func (c *current) onImageBlock168(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock168(stack["ref"])
}

func (c *current) onImageBlock5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock5(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock179() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock179()
}

func (c *current) onImageBlock182() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock182()
}

func (c *current) onImageBlock1(path, attributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage27() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27()
}

func (c *current) onInlineImage31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage31()
}

func (c *current) onInlineImage38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage38()
}

func (c *current) onInlineImage42() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonInlineImage42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage42()
}

func (c *current) onInlineImage49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage49()
}

func (c *current) onInlineImage61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage61()
}

func (c *current) onInlineImage63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage63()
}

func (c *current) onInlineImage56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage56(stack["start"])
}

func (c *current) onInlineImage45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineImage45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage45(stack["name"], stack["start"])
}

func (c *current) onInlineImage71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage71()
}

func (c *current) onInlineImage83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage83()
}

func (c *current) onInlineImage85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage85()
}

func (c *current) onInlineImage78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage78(stack["start"])
}

func (c *current) onInlineImage67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineImage67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage67(stack["name"], stack["start"])
}

func (c *current) onInlineImage93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage93()
}

func (c *current) onInlineImage89(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineImage89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage89(stack["name"])
}

func (c *current) onInlineImage103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage103()
}

func (c *current) onInlineImage99(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineImage99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage99(stack["name"])
}

func (c *current) onInlineImage40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage40(stack["element"])
}

func (c *current) onInlineImage111() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonInlineImage111() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage111()
}

func (c *current) onInlineImage120() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage120()
}

func (c *current) onInlineImage124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage124()
}

func (c *current) onInlineImage130() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage130()
}

func (c *current) onInlineImage139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage139()
}

func (c *current) onInlineImage135(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineImage135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage135(stack["name"])
}

func (c *current) onInlineImage149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage149()
}

func (c *current) onInlineImage145(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineImage145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage145(stack["name"])
}

func (c *current) onInlineImage155() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage155()
}

func (c *current) onInlineImage116(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineImage116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage116(stack["id"], stack["label"])
}

func (c *current) onInlineImage162() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage162()
}

func (c *current) onInlineImage158(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineImage158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage158(stack["id"])
}

func (c *current) onInlineImage114() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage114()
}

func (c *current) onInlineImage166() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineImage166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage166()
}

func (c *current) onInlineImage109(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage109(stack["element"])
}

func (c *current) onInlineImage168() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage168()
}

func (c *current) onInlineImage20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20(stack["elements"])
}

func (c *current) onInlineImage174() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage174()
}

func (c *current) onInlineImage170(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage170(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, attributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content)

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref.(string), content)

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onLink26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink26()
}

func (c *current) onLink30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink30()
}

func (c *current) onLink37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink37()
}

func (c *current) onLink41() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink41()
}

func (c *current) onLink48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink48()
}

func (c *current) onLink60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink60()
}

func (c *current) onLink62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink62()
}

func (c *current) onLink55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink55(stack["start"])
}

func (c *current) onLink44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink44(stack["name"], stack["start"])
}

func (c *current) onLink70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink70()
}

func (c *current) onLink82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink82()
}

func (c *current) onLink84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink84()
}

func (c *current) onLink77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink77(stack["start"])
}

func (c *current) onLink66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink66(stack["name"], stack["start"])
}

func (c *current) onLink92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink92()
}

func (c *current) onLink88(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLink88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink88(stack["name"])
}

func (c *current) onLink102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink102()
}

func (c *current) onLink98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonLink98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink98(stack["name"])
}

func (c *current) onLink39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink39(stack["element"])
}

func (c *current) onLink110() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonLink110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink110()
}

func (c *current) onLink119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink119()
}

func (c *current) onLink123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink123()
}

func (c *current) onLink129() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink129()
}

func (c *current) onLink138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink138()
}

func (c *current) onLink134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLink134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink134(stack["name"])
}

func (c *current) onLink148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink148()
}

func (c *current) onLink144(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonLink144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink144(stack["name"])
}

func (c *current) onLink154() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink154()
}

func (c *current) onLink115(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink115(stack["id"], stack["label"])
}

func (c *current) onLink161() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink161()
}

func (c *current) onLink157(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink157(stack["id"])
}

func (c *current) onLink113() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink113()
}

func (c *current) onLink165() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink165()
}

func (c *current) onLink108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink108(stack["element"])
}

func (c *current) onLink167() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink167()
}

func (c *current) onLink19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink19(stack["elements"])
}

func (c *current) onLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink6(stack["scheme"], stack["path"])
}

func (c *current) onLink172(url, closingBracket interface{}) (bool, error) {
	return url.(*types.Location).TrimAngleBracketSuffix()

}

func (p *parser) callonLink172() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink172(stack["url"], stack["closingBracket"])
}

func (c *current) onLink2(url, closingBracket interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(*types.Location), nil)

}

func (p *parser) callonLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink2(stack["url"], stack["closingBracket"])
}

func (c *current) onRelativeLink26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink26()
}

func (c *current) onRelativeLink30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink30()
}

func (c *current) onRelativeLink37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink37()
}

func (c *current) onRelativeLink41() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonRelativeLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink41()
}

func (c *current) onRelativeLink48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink48()
}

func (c *current) onRelativeLink60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink60()
}

func (c *current) onRelativeLink62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink62()
}

func (c *current) onRelativeLink55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink55(stack["start"])
}

func (c *current) onRelativeLink44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink44(stack["name"], stack["start"])
}

func (c *current) onRelativeLink70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink70()
}

func (c *current) onRelativeLink82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink82()
}

func (c *current) onRelativeLink84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink84()
}

func (c *current) onRelativeLink77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink77(stack["start"])
}

func (c *current) onRelativeLink66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink66(stack["name"], stack["start"])
}

func (c *current) onRelativeLink92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink92()
}

func (c *current) onRelativeLink88(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink88(stack["name"])
}

func (c *current) onRelativeLink102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink102()
}

func (c *current) onRelativeLink98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink98(stack["name"])
}

func (c *current) onRelativeLink39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink39(stack["element"])
}

func (c *current) onRelativeLink110() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonRelativeLink110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink110()
}

func (c *current) onRelativeLink119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink119()
}

func (c *current) onRelativeLink123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink123()
}

func (c *current) onRelativeLink129() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink129()
}

func (c *current) onRelativeLink138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink138()
}

func (c *current) onRelativeLink134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink134(stack["name"])
}

func (c *current) onRelativeLink148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink148()
}

func (c *current) onRelativeLink144(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink144(stack["name"])
}

func (c *current) onRelativeLink154() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink154()
}

func (c *current) onRelativeLink115(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink115(stack["id"], stack["label"])
}

func (c *current) onRelativeLink161() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink161()
}

func (c *current) onRelativeLink157(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink157(stack["id"])
}

func (c *current) onRelativeLink113() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink113()
}

func (c *current) onRelativeLink165() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink165()
}

func (c *current) onRelativeLink108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink108(stack["element"])
}

func (c *current) onRelativeLink167() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink167()
}

func (c *current) onRelativeLink19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink19(stack["elements"])
}

func (c *current) onRelativeLink173() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink173()
}

func (c *current) onRelativeLink169(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink169(stack["ref"])
}

func (c *current) onRelativeLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink6(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink2(stack["url"], stack["attributes"])
}

func (c *current) onRelativeLink203() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink203()
}

func (c *current) onRelativeLink207() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink207()
}

func (c *current) onRelativeLink214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink214()
}

func (c *current) onRelativeLink218() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonRelativeLink218() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink218()
}

func (c *current) onRelativeLink225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink225()
}

func (c *current) onRelativeLink237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink237()
}

func (c *current) onRelativeLink239() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink239()
}

func (c *current) onRelativeLink232(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink232(stack["start"])
}

func (c *current) onRelativeLink221(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink221(stack["name"], stack["start"])
}

func (c *current) onRelativeLink247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink247()
}

func (c *current) onRelativeLink259() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink259()
}

func (c *current) onRelativeLink261() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink261()
}

func (c *current) onRelativeLink254(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink254(stack["start"])
}

func (c *current) onRelativeLink243(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink243(stack["name"], stack["start"])
}

func (c *current) onRelativeLink269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink269()
}

func (c *current) onRelativeLink265(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink265(stack["name"])
}

func (c *current) onRelativeLink279() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink279()
}

func (c *current) onRelativeLink275(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink275(stack["name"])
}

func (c *current) onRelativeLink216(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink216(stack["element"])
}

func (c *current) onRelativeLink287() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonRelativeLink287() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink287()
}

func (c *current) onRelativeLink296() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink296()
}

func (c *current) onRelativeLink300() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink300()
}

func (c *current) onRelativeLink306() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink306()
}

func (c *current) onRelativeLink315() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink315()
}

func (c *current) onRelativeLink311(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink311(stack["name"])
}

func (c *current) onRelativeLink325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink325()
}

func (c *current) onRelativeLink321(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink321(stack["name"])
}

func (c *current) onRelativeLink331() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink331()
}

func (c *current) onRelativeLink292(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink292(stack["id"], stack["label"])
}

func (c *current) onRelativeLink338() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink338()
}

func (c *current) onRelativeLink334(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink334(stack["id"])
}

func (c *current) onRelativeLink290() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink290()
}

func (c *current) onRelativeLink342() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink342()
}

func (c *current) onRelativeLink285(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink285(stack["element"])
}

func (c *current) onRelativeLink344() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink344()
}

func (c *current) onRelativeLink196(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink196(stack["elements"])
}

func (c *current) onRelativeLink350() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink350()
}

func (c *current) onRelativeLink346(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink346(stack["ref"])
}

func (c *current) onRelativeLink183(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink183(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink179(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonRelativeLink179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink179(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink26()
}

func (c *current) onExternalLink30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink30()
}

func (c *current) onExternalLink37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink37()
}

func (c *current) onExternalLink41() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink41()
}

func (c *current) onExternalLink48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink48()
}

func (c *current) onExternalLink60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink60()
}

func (c *current) onExternalLink62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink62()
}

func (c *current) onExternalLink55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink55(stack["start"])
}

func (c *current) onExternalLink44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink44(stack["name"], stack["start"])
}

func (c *current) onExternalLink70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink70()
}

func (c *current) onExternalLink82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink82()
}

func (c *current) onExternalLink84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink84()
}

func (c *current) onExternalLink77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink77(stack["start"])
}

func (c *current) onExternalLink66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink66(stack["name"], stack["start"])
}

func (c *current) onExternalLink92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink92()
}

func (c *current) onExternalLink88(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink88(stack["name"])
}

func (c *current) onExternalLink102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink102()
}

func (c *current) onExternalLink98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink98(stack["name"])
}

func (c *current) onExternalLink39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink39(stack["element"])
}

func (c *current) onExternalLink110() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalLink110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink110()
}

func (c *current) onExternalLink119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink119()
}

func (c *current) onExternalLink123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink123()
}

func (c *current) onExternalLink129() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink129()
}

func (c *current) onExternalLink138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink138()
}

func (c *current) onExternalLink134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink134(stack["name"])
}

func (c *current) onExternalLink148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink148()
}

func (c *current) onExternalLink144(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink144(stack["name"])
}

func (c *current) onExternalLink154() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink154()
}

func (c *current) onExternalLink115(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink115(stack["id"], stack["label"])
}

func (c *current) onExternalLink161() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink161()
}

func (c *current) onExternalLink157(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink157(stack["id"])
}

func (c *current) onExternalLink113() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink113()
}

func (c *current) onExternalLink165() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink165()
}

func (c *current) onExternalLink108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink108(stack["element"])
}

func (c *current) onExternalLink167() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink167()
}

func (c *current) onExternalLink19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink19(stack["elements"])
}

func (c *current) onExternalLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink6(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink195() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink195()
}

func (c *current) onExternalLink199() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink199()
}

func (c *current) onExternalLink206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink206()
}

func (c *current) onExternalLink210() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalLink210() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink210()
}

func (c *current) onExternalLink217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink217()
}

func (c *current) onExternalLink229() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink229()
}

func (c *current) onExternalLink231() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink231()
}

func (c *current) onExternalLink224(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink224(stack["start"])
}

func (c *current) onExternalLink213(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink213(stack["name"], stack["start"])
}

func (c *current) onExternalLink239() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink239()
}

func (c *current) onExternalLink251() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink251()
}

func (c *current) onExternalLink253() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink253()
}

func (c *current) onExternalLink246(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink246(stack["start"])
}

func (c *current) onExternalLink235(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink235(stack["name"], stack["start"])
}

func (c *current) onExternalLink261() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink261()
}

func (c *current) onExternalLink257(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink257(stack["name"])
}

func (c *current) onExternalLink271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink271()
}

func (c *current) onExternalLink267(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink267(stack["name"])
}

func (c *current) onExternalLink208(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink208(stack["element"])
}

func (c *current) onExternalLink279() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalLink279() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink279()
}

func (c *current) onExternalLink288() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink288()
}

func (c *current) onExternalLink292() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink292()
}

func (c *current) onExternalLink298() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink298()
}

func (c *current) onExternalLink307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink307()
}

func (c *current) onExternalLink303(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink303(stack["name"])
}

func (c *current) onExternalLink317() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink317()
}

func (c *current) onExternalLink313(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink313(stack["name"])
}

func (c *current) onExternalLink323() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink323()
}

func (c *current) onExternalLink284(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink284(stack["id"], stack["label"])
}

func (c *current) onExternalLink330() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink330()
}

func (c *current) onExternalLink326(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink326(stack["id"])
}

func (c *current) onExternalLink282() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink282()
}

func (c *current) onExternalLink334() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink334()
}

func (c *current) onExternalLink277(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink277(stack["element"])
}

func (c *current) onExternalLink336() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink336()
}

func (c *current) onExternalLink188(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink188(stack["elements"])
}

func (c *current) onExternalLink175(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink175(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink172(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes)

}

func (p *parser) callonExternalLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172(stack["url"], stack["attributes"])
}

func (c *current) onListElements11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements52() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements52()
}

func (c *current) onListElements56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements56()
}

func (c *current) onListElements49(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawline"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements69()
}

func (c *current) onListElements76() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements76()
}

func (c *current) onListElements79(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["depth"])
}

func (c *current) onListElements73(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73(stack["depth"])
}

func (c *current) onListElements81() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements81()
}

func (c *current) onListElements83(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements83(stack["prefix"])
}

func (c *current) onListElements66(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements66(stack["prefix"])
}

func (c *current) onListElements94() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96()
}

func (c *current) onListElements98() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements98()
}

func (c *current) onListElements100(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["style"])
}

func (c *current) onListElements88(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements88(stack["style"])
}

func (c *current) onListElements107() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements107()
}

func (c *current) onListElements111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements111()
}

func (c *current) onListElements104(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104(stack["rawline"])
}

func (c *current) onListElements63(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements63(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements125() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements125()
}

func (c *current) onListElements129(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements129(stack["ref"])
}

func (c *current) onListElements121(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements121(stack["ref"])
}

func (c *current) onListElements136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements136()
}

func (c *current) onListElements140() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements140()
}

func (c *current) onListElements133(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElements133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements133(stack["rawline"])
}

func (c *current) onListElements118(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"], stack["description"])
}

func (c *current) onListElements157() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements157()
}

func (c *current) onListElements160(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements160(stack["separator"])
}

func (c *current) onListElements154(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements154(stack["separator"])
}

func (c *current) onListElements163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements163()
}

func (c *current) onListElements150() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements150()
}

func (c *current) onListElements175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements175()
}

func (c *current) onListElements178(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements178(stack["separator"])
}

func (c *current) onListElements172(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements172(stack["separator"])
}

func (c *current) onListElements184() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements184()
}

func (c *current) onListElements187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements187()
}

func (c *current) onListElements201() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements201()
}

func (c *current) onListElements204() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements204()
}

func (c *current) onListElements195() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements195()
}

func (c *current) onListElements221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements221()
}

func (c *current) onListElements225() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements225()
}

func (c *current) onListElements215(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElements215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements215(stack["content"])
}

func (c *current) onListElements214(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonListElements214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements214(stack["content"])
}

func (c *current) onListElements241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements241()
}

func (c *current) onListElements244() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements244()
}

func (c *current) onListElements235() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements235()
}

func (c *current) onListElements255() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements255()
}

func (c *current) onListElements257() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements257()
}

func (c *current) onListElements266() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements266()
}

func (c *current) onListElements273() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements273()
}

func (c *current) onListElements276(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements276() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements276(stack["depth"])
}

func (c *current) onListElements270(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements270(stack["depth"])
}

func (c *current) onListElements277() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements277()
}

func (c *current) onListElements282() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements282()
}

func (c *current) onListElements286() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements286()
}

func (c *current) onListElements290() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements290()
}

func (c *current) onListElements295() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements295()
}

func (c *current) onListElements300(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements300(stack["prefix"])
}

func (c *current) onListElements263(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements263(stack["prefix"])
}

func (c *current) onListElements307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements307()
}

func (c *current) onListElements314() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements314()
}

func (c *current) onListElements317(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements317() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements317(stack["depth"])
}

func (c *current) onListElements311(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements311(stack["depth"])
}

func (c *current) onListElements319() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements319()
}

func (c *current) onListElements321(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements321(stack["prefix"])
}

func (c *current) onListElements304(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements304(stack["prefix"])
}

func (c *current) onListElements329() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements329()
}

func (c *current) onListElements333(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements333(stack["ref"])
}

func (c *current) onListElements325(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements325(stack["ref"])
}

func (c *current) onListElements345() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements345()
}

func (c *current) onListElements348(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements348() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements348(stack["separator"])
}

func (c *current) onListElements342(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements342(stack["separator"])
}

func (c *current) onListElements351() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements351()
}

func (c *current) onListElements338() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements338()
}

func (c *current) onListElements362() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements362()
}

func (c *current) onListElements365(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements365() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements365(stack["separator"])
}

func (c *current) onListElements359(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements359(stack["separator"])
}

func (c *current) onListElements377() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements377()
}

func (c *current) onListElements380() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements380()
}

func (c *current) onListElements373() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElements373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements373()
}

func (c *current) onListElements391() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements391()
}

func (c *current) onListElements394() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements394()
}

func (c *current) onListElements387() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElements387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements387()
}

func (c *current) onListElements405() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListElements405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements405()
}

func (c *current) onListElements409() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements409()
}

func (c *current) onListElements412() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements412()
}

func (c *current) onListElements401(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElements401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements401(stack["language"])
}

func (c *current) onListElements423() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements423()
}

func (c *current) onListElements426() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements426() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements426()
}

func (c *current) onListElements419() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElements419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements419()
}

func (c *current) onListElements437() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements437()
}

func (c *current) onListElements440() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements440()
}

func (c *current) onListElements433() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElements433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements433()
}

func (c *current) onListElements451() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements451()
}

func (c *current) onListElements454() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements454()
}

func (c *current) onListElements447() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElements447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements447()
}

func (c *current) onListElements465() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements465()
}

func (c *current) onListElements468() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements468()
}

func (c *current) onListElements461() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElements461() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements461()
}

func (c *current) onListElements479() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements479()
}

func (c *current) onListElements482() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements482()
}

func (c *current) onListElements475() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElements475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements475()
}

func (c *current) onListElements493() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements493()
}

func (c *current) onListElements496() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements496()
}

func (c *current) onListElements489() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElements489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements489()
}

func (c *current) onListElements367(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElements367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements367(stack["delimiter"])
}

func (c *current) onListElements504() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElements504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements504()
}

func (c *current) onListElements508() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements508()
}

func (c *current) onListElements232(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElements232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements232(stack["content"])
}

func (c *current) onListElements181(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElements181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements181(stack["content"])
}

func (c *current) onListElements517() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements517()
}

func (c *current) onListElements521() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements521()
}

func (c *current) onListElements525() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements525()
}

func (c *current) onListElements515(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElements515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements515(stack["content"])
}

func (c *current) onListElements147(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements147(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement17()
}

func (c *current) onExtraListElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement20()
}

func (c *current) onExtraListElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement11()
}

func (c *current) onExtraListElement34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement34()
}

func (c *current) onExtraListElement41() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement41()
}

func (c *current) onExtraListElement44(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement44(stack["depth"])
}

func (c *current) onExtraListElement38(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement38(stack["depth"])
}

func (c *current) onExtraListElement45() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement45()
}

func (c *current) onExtraListElement50() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement50()
}

func (c *current) onExtraListElement54() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement54()
}

func (c *current) onExtraListElement58() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement58()
}

func (c *current) onExtraListElement63() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement63()
}

func (c *current) onExtraListElement68(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement68(stack["prefix"])
}

func (c *current) onExtraListElement31(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement31(stack["prefix"])
}

func (c *current) onExtraListElement75() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement75()
}

func (c *current) onExtraListElement79() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement79()
}

func (c *current) onExtraListElement72(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement72(stack["rawline"])
}

func (c *current) onExtraListElement28(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement28(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement8(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement8(stack["element"])
}

func (c *current) onExtraListElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement98()
}

func (c *current) onExtraListElement105() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement105()
}

func (c *current) onExtraListElement108(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement108(stack["depth"])
}

func (c *current) onExtraListElement102(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement102(stack["depth"])
}

func (c *current) onExtraListElement109() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement109()
}

func (c *current) onExtraListElement114() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement118() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118()
}

func (c *current) onExtraListElement122() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement122()
}

func (c *current) onExtraListElement127() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement127()
}

func (c *current) onExtraListElement132(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement132(stack["prefix"])
}

func (c *current) onExtraListElement95(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement95(stack["prefix"])
}

func (c *current) onExtraListElement139() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement139()
}

func (c *current) onExtraListElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement143()
}

func (c *current) onExtraListElement136(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement136(stack["rawline"])
}

func (c *current) onExtraListElement92(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement92(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement86(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement86(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement159()
}

func (c *current) onExtraListElement162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement162()
}

func (c *current) onExtraListElement153() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement153()
}

func (c *current) onExtraListElement176() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement176()
}

func (c *current) onExtraListElement183() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement183()
}

func (c *current) onExtraListElement186(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement186() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement186(stack["depth"])
}

func (c *current) onExtraListElement180(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement180(stack["depth"])
}

func (c *current) onExtraListElement188() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement188()
}

func (c *current) onExtraListElement190(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement190(stack["prefix"])
}

func (c *current) onExtraListElement173(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement173(stack["prefix"])
}

func (c *current) onExtraListElement201() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement201()
}

func (c *current) onExtraListElement203() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement203()
}

func (c *current) onExtraListElement205() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement205()
}

func (c *current) onExtraListElement207(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement207(stack["style"])
}

func (c *current) onExtraListElement195(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement195(stack["style"])
}

func (c *current) onExtraListElement214() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement214()
}

func (c *current) onExtraListElement218() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement218()
}

func (c *current) onExtraListElement211(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement211(stack["rawline"])
}

func (c *current) onExtraListElement170(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement170(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement150(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement150(stack["element"])
}

func (c *current) onExtraListElement237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement237()
}

func (c *current) onExtraListElement244() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement244()
}

func (c *current) onExtraListElement247(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement247() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement247(stack["depth"])
}

func (c *current) onExtraListElement241(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement241(stack["depth"])
}

func (c *current) onExtraListElement249() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement249()
}

func (c *current) onExtraListElement251(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement251(stack["prefix"])
}

func (c *current) onExtraListElement234(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement234(stack["prefix"])
}

func (c *current) onExtraListElement262() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement262()
}

func (c *current) onExtraListElement264() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement264()
}

func (c *current) onExtraListElement266() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement266()
}

func (c *current) onExtraListElement268(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement268(stack["style"])
}

func (c *current) onExtraListElement256(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement256(stack["style"])
}

func (c *current) onExtraListElement275() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement275()
}

func (c *current) onExtraListElement279() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement279()
}

func (c *current) onExtraListElement272(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement272(stack["rawline"])
}

func (c *current) onExtraListElement231(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement231(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement225(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement225(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement295() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement295()
}

func (c *current) onExtraListElement298() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement298()
}

func (c *current) onExtraListElement289() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement289()
}

func (c *current) onExtraListElement313() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement313()
}

func (c *current) onExtraListElement317(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement317(stack["ref"])
}

func (c *current) onExtraListElement309(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement309(stack["ref"])
}

func (c *current) onExtraListElement324() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement324()
}

func (c *current) onExtraListElement328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement328()
}

func (c *current) onExtraListElement321(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement321(stack["rawline"])
}

func (c *current) onExtraListElement306(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement306(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement286(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement286(stack["element"])
}

func (c *current) onExtraListElement348() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement348()
}

func (c *current) onExtraListElement352(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement352(stack["ref"])
}

func (c *current) onExtraListElement344(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement344(stack["ref"])
}

func (c *current) onExtraListElement359() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement359()
}

func (c *current) onExtraListElement363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement363()
}

func (c *current) onExtraListElement356(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement356(stack["rawline"])
}

func (c *current) onExtraListElement341(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement341(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement335(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement335(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement380() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement380()
}

func (c *current) onExtraListElement383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement383()
}

func (c *current) onExtraListElement374() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement374()
}

func (c *current) onExtraListElement401() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement401()
}

func (c *current) onExtraListElement404(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement404() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404(stack["separator"])
}

func (c *current) onExtraListElement398(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement398(stack["separator"])
}

func (c *current) onExtraListElement407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407()
}

func (c *current) onExtraListElement394() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement394()
}

func (c *current) onExtraListElement419() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement419()
}

func (c *current) onExtraListElement422(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement422() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422(stack["separator"])
}

func (c *current) onExtraListElement416(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement416(stack["separator"])
}

func (c *current) onExtraListElement428() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428()
}

func (c *current) onExtraListElement431() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement445() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement445()
}

func (c *current) onExtraListElement448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement448()
}

func (c *current) onExtraListElement439() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement439()
}

func (c *current) onExtraListElement465() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement465()
}

func (c *current) onExtraListElement469() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement469()
}

func (c *current) onExtraListElement459(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement459(stack["content"])
}

func (c *current) onExtraListElement458(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement458(stack["content"])
}

func (c *current) onExtraListElement485() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement485()
}

func (c *current) onExtraListElement488() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement488()
}

func (c *current) onExtraListElement479() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement479()
}

func (c *current) onExtraListElement499() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement499()
}

func (c *current) onExtraListElement501() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement501()
}

func (c *current) onExtraListElement510() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement510()
}

func (c *current) onExtraListElement517() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement517()
}

func (c *current) onExtraListElement520(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement520() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement520(stack["depth"])
}

func (c *current) onExtraListElement514(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement514(stack["depth"])
}

func (c *current) onExtraListElement521() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement521()
}

func (c *current) onExtraListElement526() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement526()
}

func (c *current) onExtraListElement530() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement530()
}

func (c *current) onExtraListElement534() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement534()
}

func (c *current) onExtraListElement539() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement539()
}

func (c *current) onExtraListElement544(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement544(stack["prefix"])
}

func (c *current) onExtraListElement507(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement507(stack["prefix"])
}

func (c *current) onExtraListElement551() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement551()
}

func (c *current) onExtraListElement558() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement558()
}

func (c *current) onExtraListElement561(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement561() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement561(stack["depth"])
}

func (c *current) onExtraListElement555(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement555(stack["depth"])
}

func (c *current) onExtraListElement563() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement563()
}

func (c *current) onExtraListElement565(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement565(stack["prefix"])
}

func (c *current) onExtraListElement548(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement548(stack["prefix"])
}

func (c *current) onExtraListElement573() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement573()
}

func (c *current) onExtraListElement577(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement577(stack["ref"])
}

func (c *current) onExtraListElement569(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement569(stack["ref"])
}

func (c *current) onExtraListElement589() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement589()
}

func (c *current) onExtraListElement592(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement592() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592(stack["separator"])
}

func (c *current) onExtraListElement586(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement586(stack["separator"])
}

func (c *current) onExtraListElement595() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement595()
}

func (c *current) onExtraListElement582() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement582()
}

func (c *current) onExtraListElement606() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement606()
}

func (c *current) onExtraListElement609(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement609() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement609(stack["separator"])
}

func (c *current) onExtraListElement603(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement603() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement603(stack["separator"])
}

func (c *current) onExtraListElement621() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement621()
}

func (c *current) onExtraListElement624() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement624() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement624()
}

func (c *current) onExtraListElement617() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonExtraListElement617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement617()
}

func (c *current) onExtraListElement635() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement635() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement635()
}

func (c *current) onExtraListElement638() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement638()
}

func (c *current) onExtraListElement631() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonExtraListElement631() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement631()
}

func (c *current) onExtraListElement649() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExtraListElement649() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement649()
}

func (c *current) onExtraListElement653() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement653()
}

func (c *current) onExtraListElement656() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement656()
}

func (c *current) onExtraListElement645(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement645(stack["language"])
}

func (c *current) onExtraListElement667() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement667() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement667()
}

func (c *current) onExtraListElement670() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement670() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement670()
}

func (c *current) onExtraListElement663() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonExtraListElement663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement663()
}

func (c *current) onExtraListElement681() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement681()
}

func (c *current) onExtraListElement684() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement684() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement684()
}

func (c *current) onExtraListElement677() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonExtraListElement677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement677()
}

func (c *current) onExtraListElement695() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement695()
}

func (c *current) onExtraListElement698() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement698() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement698()
}

func (c *current) onExtraListElement691() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonExtraListElement691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement691()
}

func (c *current) onExtraListElement709() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement709()
}

func (c *current) onExtraListElement712() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement712()
}

func (c *current) onExtraListElement705() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonExtraListElement705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement705()
}

func (c *current) onExtraListElement723() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement723() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement723()
}

func (c *current) onExtraListElement726() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement726() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement726()
}

func (c *current) onExtraListElement719() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonExtraListElement719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement719()
}

func (c *current) onExtraListElement737() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement737() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement737()
}

func (c *current) onExtraListElement740() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement740()
}

func (c *current) onExtraListElement733() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonExtraListElement733() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement733()
}

func (c *current) onExtraListElement611(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement611(stack["delimiter"])
}

func (c *current) onExtraListElement748() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement748()
}

func (c *current) onExtraListElement752() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement752()
}

func (c *current) onExtraListElement476(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement476(stack["content"])
}

func (c *current) onExtraListElement425(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425(stack["content"])
}

func (c *current) onExtraListElement761() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement761()
}

func (c *current) onExtraListElement765() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement765() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement765()
}

func (c *current) onExtraListElement769() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement769()
}

func (c *current) onExtraListElement759(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement759(stack["content"])
}

func (c *current) onExtraListElement391(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement391(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement371(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement371(stack["element"])
}

func (c *current) onExtraListElement792() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement792()
}

func (c *current) onExtraListElement795(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement795() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement795(stack["separator"])
}

func (c *current) onExtraListElement789(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement789() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement789(stack["separator"])
}

func (c *current) onExtraListElement798() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement798() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement798()
}

func (c *current) onExtraListElement785() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement785()
}

func (c *current) onExtraListElement810() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement810() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement810()
}

func (c *current) onExtraListElement813(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement813() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement813(stack["separator"])
}

func (c *current) onExtraListElement807(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement807() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement807(stack["separator"])
}

func (c *current) onExtraListElement819() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement819() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement819()
}

func (c *current) onExtraListElement822() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement822()
}

func (c *current) onExtraListElement836() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement836() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement836()
}

func (c *current) onExtraListElement839() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement839()
}

func (c *current) onExtraListElement830() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement830()
}

func (c *current) onExtraListElement856() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement856()
}

func (c *current) onExtraListElement860() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement860() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement860()
}

func (c *current) onExtraListElement850(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement850() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement850(stack["content"])
}

func (c *current) onExtraListElement849(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement849(stack["content"])
}

func (c *current) onExtraListElement876() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement876()
}

func (c *current) onExtraListElement879() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement879() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement879()
}

func (c *current) onExtraListElement870() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement870()
}

func (c *current) onExtraListElement890() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement890()
}

func (c *current) onExtraListElement892() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement892() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement892()
}

func (c *current) onExtraListElement901() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement901() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement901()
}

func (c *current) onExtraListElement908() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement908() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement908()
}

func (c *current) onExtraListElement911(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement911() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement911(stack["depth"])
}

func (c *current) onExtraListElement905(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement905() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement905(stack["depth"])
}

func (c *current) onExtraListElement912() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement912()
}

func (c *current) onExtraListElement917() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement917() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement917()
}

func (c *current) onExtraListElement921() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement921() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement921()
}

func (c *current) onExtraListElement925() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement925() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement925()
}

func (c *current) onExtraListElement930() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement930() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement930()
}

func (c *current) onExtraListElement935(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement935() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement935(stack["prefix"])
}

func (c *current) onExtraListElement898(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement898() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement898(stack["prefix"])
}

func (c *current) onExtraListElement942() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement942() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement942()
}

func (c *current) onExtraListElement949() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement949() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement949()
}

func (c *current) onExtraListElement952(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement952() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement952(stack["depth"])
}

func (c *current) onExtraListElement946(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement946(stack["depth"])
}

func (c *current) onExtraListElement954() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement954() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement954()
}

func (c *current) onExtraListElement956(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement956() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement956(stack["prefix"])
}

func (c *current) onExtraListElement939(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement939() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement939(stack["prefix"])
}

func (c *current) onExtraListElement964() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement964() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement964()
}

func (c *current) onExtraListElement968(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement968() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement968(stack["ref"])
}

func (c *current) onExtraListElement960(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement960() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement960(stack["ref"])
}

func (c *current) onExtraListElement980() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement980()
}

func (c *current) onExtraListElement983(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement983() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement983(stack["separator"])
}

func (c *current) onExtraListElement977(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement977() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement977(stack["separator"])
}

func (c *current) onExtraListElement986() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement986() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement986()
}

func (c *current) onExtraListElement973() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement973() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement973()
}

func (c *current) onExtraListElement997() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement997() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement997()
}

func (c *current) onExtraListElement1000(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1000() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1000(stack["separator"])
}

func (c *current) onExtraListElement994(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement994() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement994(stack["separator"])
}

func (c *current) onExtraListElement1012() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1012()
}

func (c *current) onExtraListElement1015() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1015() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1015()
}

func (c *current) onExtraListElement1008() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonExtraListElement1008() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1008()
}

func (c *current) onExtraListElement1026() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1026()
}

func (c *current) onExtraListElement1029() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1029() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1029()
}

func (c *current) onExtraListElement1022() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonExtraListElement1022() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1022()
}

func (c *current) onExtraListElement1040() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1040() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1040()
}

func (c *current) onExtraListElement1044() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1044() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1044()
}

func (c *current) onExtraListElement1047() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1047() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1047()
}

func (c *current) onExtraListElement1036(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement1036() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1036(stack["language"])
}

func (c *current) onExtraListElement1058() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1058() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1058()
}

func (c *current) onExtraListElement1061() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1061() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1061()
}

func (c *current) onExtraListElement1054() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonExtraListElement1054() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1054()
}

func (c *current) onExtraListElement1072() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1072() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1072()
}

func (c *current) onExtraListElement1075() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1075() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1075()
}

func (c *current) onExtraListElement1068() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonExtraListElement1068() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1068()
}

func (c *current) onExtraListElement1086() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1086() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1086()
}

func (c *current) onExtraListElement1089() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1089() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1089()
}

func (c *current) onExtraListElement1082() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonExtraListElement1082() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1082()
}

func (c *current) onExtraListElement1100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1100()
}

func (c *current) onExtraListElement1103() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1103()
}

func (c *current) onExtraListElement1096() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonExtraListElement1096() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1096()
}

func (c *current) onExtraListElement1114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1114()
}

func (c *current) onExtraListElement1117() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1117()
}

func (c *current) onExtraListElement1110() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonExtraListElement1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1110()
}

func (c *current) onExtraListElement1128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1128()
}

func (c *current) onExtraListElement1131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1131()
}

func (c *current) onExtraListElement1124() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonExtraListElement1124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1124()
}

func (c *current) onExtraListElement1002(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1002() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1002(stack["delimiter"])
}

func (c *current) onExtraListElement1139() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1139()
}

func (c *current) onExtraListElement1143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1143()
}

func (c *current) onExtraListElement867(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement867() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement867(stack["content"])
}

func (c *current) onExtraListElement816(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement816(stack["content"])
}

func (c *current) onExtraListElement1152() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1152()
}

func (c *current) onExtraListElement1156() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement1156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1156()
}

func (c *current) onExtraListElement1160() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1160()
}

func (c *current) onExtraListElement1150(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement1150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1150(stack["content"])
}

func (c *current) onExtraListElement782(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement782(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement776(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement776() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement776(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1173()
}

func (c *current) onExtraListElement1177() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1177()
}

func (c *current) onExtraListElement1167(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1167(stack["content"])
}

func (c *current) onExtraListElement1193() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1193()
}

func (c *current) onExtraListElement1196() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1196()
}

func (c *current) onExtraListElement1187() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1187()
}

func (c *current) onExtraListElement1215() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1215()
}

func (c *current) onExtraListElement1213() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1213()
}

func (c *current) onExtraListElement1220(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonExtraListElement1220() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1220(stack["content"])
}

func (c *current) onExtraListElement1222() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1222()
}

func (c *current) onExtraListElement1210(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1210(stack["content"])
}

func (c *current) onExtraListElement1238() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1238()
}

func (c *current) onExtraListElement1242() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1242()
}

func (c *current) onExtraListElement1232(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1232(stack["content"])
}

func (c *current) onExtraListElement1252() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonExtraListElement1252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1252()
}

func (c *current) onExtraListElement1255(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonExtraListElement1255() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1255(stack["content"])
}

func (c *current) onExtraListElement1257() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1257()
}

func (c *current) onExtraListElement1249(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1249(stack["content"])
}

func (c *current) onExtraListElement1207(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonExtraListElement1207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1207(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExtraListElement1184(attributes, element interface{}) (interface{}, error) {
	if e, ok := element.(types.WithAttributes); ok {
		for _, a := range attributes.([]interface{}) {
			if a, ok := a.(types.Attributes); ok {
				e.AddAttributes(a)
			}
		}
	}
	// implicit attachment to list element
	// by wrapping into a ListElementContinuation
	return types.NewListElementContinuation(0, element)

}

func (p *parser) callonExtraListElement1184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1184(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1274() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1274()
}

func (c *current) onExtraListElement1278() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1278() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1278()
}

func (c *current) onExtraListElement1268(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1268(stack["content"])
}

func (c *current) onExtraListElement1267(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement1267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1267(stack["content"])
}

func (c *current) onExtraListElement1294() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1294()
}

func (c *current) onExtraListElement1297() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1297()
}

func (c *current) onExtraListElement1288() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1288()
}

func (c *current) onExtraListElement1308() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1308()
}

func (c *current) onExtraListElement1310() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1310()
}

func (c *current) onExtraListElement1319() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1319()
}

func (c *current) onExtraListElement1326() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1326()
}

func (c *current) onExtraListElement1329(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1329() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1329(stack["depth"])
}

func (c *current) onExtraListElement1323(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement1323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1323(stack["depth"])
}

func (c *current) onExtraListElement1330() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1330()
}

func (c *current) onExtraListElement1335() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement1335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1335()
}

func (c *current) onExtraListElement1339() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement1339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1339()
}

func (c *current) onExtraListElement1343() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement1343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1343()
}

func (c *current) onExtraListElement1348() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement1348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1348()
}

func (c *current) onExtraListElement1353(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1353(stack["prefix"])
}

func (c *current) onExtraListElement1316(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1316(stack["prefix"])
}

func (c *current) onExtraListElement1360() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1360()
}

func (c *current) onExtraListElement1367() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1367()
}

func (c *current) onExtraListElement1370(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1370() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1370(stack["depth"])
}

func (c *current) onExtraListElement1364(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement1364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1364(stack["depth"])
}

func (c *current) onExtraListElement1372() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement1372() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1372()
}

func (c *current) onExtraListElement1374(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1374(stack["prefix"])
}

func (c *current) onExtraListElement1357(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1357() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1357(stack["prefix"])
}

func (c *current) onExtraListElement1382() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement1382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1382()
}

func (c *current) onExtraListElement1386(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1386(stack["ref"])
}

func (c *current) onExtraListElement1378(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement1378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1378(stack["ref"])
}

func (c *current) onExtraListElement1398() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1398()
}

func (c *current) onExtraListElement1401(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1401() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1401(stack["separator"])
}

func (c *current) onExtraListElement1395(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1395(stack["separator"])
}

func (c *current) onExtraListElement1404() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1404()
}

func (c *current) onExtraListElement1391() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement1391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1391()
}

func (c *current) onExtraListElement1415() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1415()
}

func (c *current) onExtraListElement1418(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1418() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1418(stack["separator"])
}

func (c *current) onExtraListElement1412(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1412(stack["separator"])
}

func (c *current) onExtraListElement1430() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1430()
}

func (c *current) onExtraListElement1433() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1433()
}

func (c *current) onExtraListElement1426() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonExtraListElement1426() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1426()
}

func (c *current) onExtraListElement1444() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1444()
}

func (c *current) onExtraListElement1447() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1447()
}

func (c *current) onExtraListElement1440() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonExtraListElement1440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1440()
}

func (c *current) onExtraListElement1458() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1458()
}

func (c *current) onExtraListElement1462() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1462()
}

func (c *current) onExtraListElement1465() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1465()
}

func (c *current) onExtraListElement1454(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement1454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1454(stack["language"])
}

func (c *current) onExtraListElement1476() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1476()
}

func (c *current) onExtraListElement1479() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1479()
}

func (c *current) onExtraListElement1472() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonExtraListElement1472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1472()
}

func (c *current) onExtraListElement1490() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1490()
}

func (c *current) onExtraListElement1493() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1493() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1493()
}

func (c *current) onExtraListElement1486() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonExtraListElement1486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1486()
}

func (c *current) onExtraListElement1504() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1504() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1504()
}

func (c *current) onExtraListElement1507() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1507()
}

func (c *current) onExtraListElement1500() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonExtraListElement1500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1500()
}

func (c *current) onExtraListElement1518() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1518()
}

func (c *current) onExtraListElement1521() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1521()
}

func (c *current) onExtraListElement1514() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonExtraListElement1514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1514()
}

func (c *current) onExtraListElement1532() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1532()
}

func (c *current) onExtraListElement1535() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1535() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1535()
}

func (c *current) onExtraListElement1528() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonExtraListElement1528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1528()
}

func (c *current) onExtraListElement1546() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1546()
}

func (c *current) onExtraListElement1549() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1549()
}

func (c *current) onExtraListElement1542() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonExtraListElement1542() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1542()
}

func (c *current) onExtraListElement1420(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1420(stack["delimiter"])
}

func (c *current) onExtraListElement1557() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1557()
}

func (c *current) onExtraListElement1561() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1561()
}

func (c *current) onExtraListElement1285(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1285(stack["content"])
}

func (c *current) onExtraListElement1264(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1264(stack["element"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListElementContinuation7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation7()
}

func (c *current) onListElementContinuation9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation9()
}

func (c *current) onListElementContinuation16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation16()
}

func (c *current) onListElementContinuation18(offset interface{}) (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation18(stack["offset"])
}

func (c *current) onListElementContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListElementContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListElementContinuationElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement14()
}

func (c *current) onListElementContinuationElement21() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement21()
}

func (c *current) onListElementContinuationElement24(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement24(stack["depth"])
}

func (c *current) onListElementContinuationElement18(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement18(stack["depth"])
}

func (c *current) onListElementContinuationElement25() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement25()
}

func (c *current) onListElementContinuationElement30() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement30()
}

func (c *current) onListElementContinuationElement34() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement34()
}

func (c *current) onListElementContinuationElement38() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement38()
}

func (c *current) onListElementContinuationElement43() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement43()
}

func (c *current) onListElementContinuationElement48(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement48(stack["prefix"])
}

func (c *current) onListElementContinuationElement11(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement11(stack["prefix"])
}

func (c *current) onListElementContinuationElement55() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement55()
}

func (c *current) onListElementContinuationElement59() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement59()
}

func (c *current) onListElementContinuationElement52(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement52(stack["rawline"])
}

func (c *current) onListElementContinuationElement8(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElementContinuationElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement8(stack["prefix"], stack["content"])
}

func (c *current) onListElementContinuationElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement72()
}

func (c *current) onListElementContinuationElement79() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement79()
}

func (c *current) onListElementContinuationElement82(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement82(stack["depth"])
}

func (c *current) onListElementContinuationElement76(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement76(stack["depth"])
}

func (c *current) onListElementContinuationElement84() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement84()
}

func (c *current) onListElementContinuationElement86(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement86(stack["prefix"])
}

func (c *current) onListElementContinuationElement69(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement69(stack["prefix"])
}

func (c *current) onListElementContinuationElement97() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElementContinuationElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement97()
}

func (c *current) onListElementContinuationElement99() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement99()
}

func (c *current) onListElementContinuationElement101() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement101()
}

func (c *current) onListElementContinuationElement103(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement103(stack["style"])
}

func (c *current) onListElementContinuationElement91(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElementContinuationElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement91(stack["style"])
}

func (c *current) onListElementContinuationElement110() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement110()
}

func (c *current) onListElementContinuationElement114() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement114()
}

func (c *current) onListElementContinuationElement107(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement107(stack["rawline"])
}

func (c *current) onListElementContinuationElement66(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElementContinuationElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement66(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElementContinuationElement128() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement128()
}

func (c *current) onListElementContinuationElement132(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement132(stack["ref"])
}

func (c *current) onListElementContinuationElement124(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement124(stack["ref"])
}

func (c *current) onListElementContinuationElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement139()
}

func (c *current) onListElementContinuationElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement143()
}

func (c *current) onListElementContinuationElement136(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElementContinuationElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement136(stack["rawline"])
}

func (c *current) onListElementContinuationElement121(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElementContinuationElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement121(stack["ref"], stack["description"])
}

func (c *current) onListElementContinuationElement160() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement160()
}

func (c *current) onListElementContinuationElement163(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement163() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement163(stack["separator"])
}

func (c *current) onListElementContinuationElement157(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement157(stack["separator"])
}

func (c *current) onListElementContinuationElement166() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement166()
}

func (c *current) onListElementContinuationElement153() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElementContinuationElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement153()
}

func (c *current) onListElementContinuationElement178() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement178()
}

func (c *current) onListElementContinuationElement181(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement181(stack["separator"])
}

func (c *current) onListElementContinuationElement175(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement175(stack["separator"])
}

func (c *current) onListElementContinuationElement187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement187()
}

func (c *current) onListElementContinuationElement190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement190()
}

func (c *current) onListElementContinuationElement204() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement204()
}

func (c *current) onListElementContinuationElement207() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement207()
}

func (c *current) onListElementContinuationElement198() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement198()
}

func (c *current) onListElementContinuationElement224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement224()
}

func (c *current) onListElementContinuationElement228() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement228()
}

func (c *current) onListElementContinuationElement218(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement218(stack["content"])
}

func (c *current) onListElementContinuationElement217(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonListElementContinuationElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement217(stack["content"])
}

func (c *current) onListElementContinuationElement244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement244()
}

func (c *current) onListElementContinuationElement247() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement247()
}

func (c *current) onListElementContinuationElement238() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement238()
}

func (c *current) onListElementContinuationElement258() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement258()
}

func (c *current) onListElementContinuationElement260() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement260()
}

func (c *current) onListElementContinuationElement269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement269()
}

func (c *current) onListElementContinuationElement276() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement276()
}

func (c *current) onListElementContinuationElement279(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement279() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement279(stack["depth"])
}

func (c *current) onListElementContinuationElement273(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement273(stack["depth"])
}

func (c *current) onListElementContinuationElement280() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement280()
}

func (c *current) onListElementContinuationElement285() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement285()
}

func (c *current) onListElementContinuationElement289() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement289()
}

func (c *current) onListElementContinuationElement293() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement293()
}

func (c *current) onListElementContinuationElement298() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement298()
}

func (c *current) onListElementContinuationElement303(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement303(stack["prefix"])
}

func (c *current) onListElementContinuationElement266(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement266(stack["prefix"])
}

func (c *current) onListElementContinuationElement310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement310()
}

func (c *current) onListElementContinuationElement317() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement317()
}

func (c *current) onListElementContinuationElement320(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement320() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement320(stack["depth"])
}

func (c *current) onListElementContinuationElement314(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement314(stack["depth"])
}

func (c *current) onListElementContinuationElement322() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement322()
}

func (c *current) onListElementContinuationElement324(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement324(stack["prefix"])
}

func (c *current) onListElementContinuationElement307(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement307(stack["prefix"])
}

func (c *current) onListElementContinuationElement332() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement332()
}

func (c *current) onListElementContinuationElement336(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement336(stack["ref"])
}

func (c *current) onListElementContinuationElement328(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement328(stack["ref"])
}

func (c *current) onListElementContinuationElement348() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement348()
}

func (c *current) onListElementContinuationElement351(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement351() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement351(stack["separator"])
}

func (c *current) onListElementContinuationElement345(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement345(stack["separator"])
}

func (c *current) onListElementContinuationElement354() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement354()
}

func (c *current) onListElementContinuationElement341() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElementContinuationElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement341()
}

func (c *current) onListElementContinuationElement365() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement365()
}

func (c *current) onListElementContinuationElement368(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement368() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement368(stack["separator"])
}

func (c *current) onListElementContinuationElement362(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement362(stack["separator"])
}

func (c *current) onListElementContinuationElement380() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement380()
}

func (c *current) onListElementContinuationElement383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement383()
}

func (c *current) onListElementContinuationElement376() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement376()
}

func (c *current) onListElementContinuationElement394() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement394()
}

func (c *current) onListElementContinuationElement397() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement397() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement397()
}

func (c *current) onListElementContinuationElement390() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement390()
}

func (c *current) onListElementContinuationElement408() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement408()
}

func (c *current) onListElementContinuationElement412() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement412() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement412()
}

func (c *current) onListElementContinuationElement415() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement415()
}

func (c *current) onListElementContinuationElement404(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement404(stack["language"])
}

func (c *current) onListElementContinuationElement426() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement426() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement426()
}

func (c *current) onListElementContinuationElement429() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement429() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement429()
}

func (c *current) onListElementContinuationElement422() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement422()
}

func (c *current) onListElementContinuationElement440() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement440()
}

func (c *current) onListElementContinuationElement443() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement443()
}

func (c *current) onListElementContinuationElement436() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement436()
}

func (c *current) onListElementContinuationElement454() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement454()
}

func (c *current) onListElementContinuationElement457() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement457()
}

func (c *current) onListElementContinuationElement450() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement450()
}

func (c *current) onListElementContinuationElement468() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement468() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement468()
}

func (c *current) onListElementContinuationElement471() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement471()
}

func (c *current) onListElementContinuationElement464() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement464() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement464()
}

func (c *current) onListElementContinuationElement482() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement482()
}

func (c *current) onListElementContinuationElement485() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement485()
}

func (c *current) onListElementContinuationElement478() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement478()
}

func (c *current) onListElementContinuationElement496() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement496()
}

func (c *current) onListElementContinuationElement499() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement499()
}

func (c *current) onListElementContinuationElement492() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement492()
}

func (c *current) onListElementContinuationElement370(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElementContinuationElement370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement370(stack["delimiter"])
}

func (c *current) onListElementContinuationElement507() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElementContinuationElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement507()
}

func (c *current) onListElementContinuationElement511() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement511()
}

func (c *current) onListElementContinuationElement235(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement235(stack["content"])
}

func (c *current) onListElementContinuationElement184(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement184(stack["content"])
}

func (c *current) onListElementContinuationElement520() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement520()
}

func (c *current) onListElementContinuationElement524() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement524()
}

func (c *current) onListElementContinuationElement528() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement528()
}

func (c *current) onListElementContinuationElement518(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement518(stack["content"])
}

func (c *current) onListElementContinuationElement150(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElementContinuationElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement150(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElementContinuationElement546() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement546() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement546()
}

func (c *current) onListElementContinuationElement549() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement549() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement549()
}

func (c *current) onListElementContinuationElement540() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement540() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement540()
}

func (c *current) onListElementContinuationElement561() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement561()
}

func (c *current) onListElementContinuationElement568() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement568()
}

func (c *current) onListElementContinuationElement571() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement571()
}

func (c *current) onListElementContinuationElement557(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement557(stack["name"])
}

func (c *current) onListElementContinuationElement582() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement582()
}

func (c *current) onListElementContinuationElement589() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement589()
}

func (c *current) onListElementContinuationElement592() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement592()
}

func (c *current) onListElementContinuationElement578(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement578() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement578(stack["name"])
}

func (c *current) onListElementContinuationElement605() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement605() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement605()
}

func (c *current) onListElementContinuationElement608() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement608()
}

func (c *current) onListElementContinuationElement601() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement601()
}

func (c *current) onListElementContinuationElement625() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement625()
}

func (c *current) onListElementContinuationElement628() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement628()
}

func (c *current) onListElementContinuationElement621() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement621() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement621()
}

func (c *current) onListElementContinuationElement644() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement644()
}

func (c *current) onListElementContinuationElement648() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement648()
}

func (c *current) onListElementContinuationElement638(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement638(stack["content"])
}

func (c *current) onListElementContinuationElement617(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement617(stack["line"])
}

func (c *current) onListElementContinuationElement661() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement661()
}

func (c *current) onListElementContinuationElement664() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement664() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement664()
}

func (c *current) onListElementContinuationElement657() (interface{}, error) {
	return types.NewBlockDelimiter(types.Comment, string(c.text))
}

func (p *parser) callonListElementContinuationElement657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement657()
}

func (c *current) onListElementContinuationElement599(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement599() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement599(stack["content"])
}

func (c *current) onListElementContinuationElement679() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement679()
}

func (c *current) onListElementContinuationElement682() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement682()
}

func (c *current) onListElementContinuationElement675() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement675()
}

func (c *current) onListElementContinuationElement699() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement699() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement699()
}

func (c *current) onListElementContinuationElement702() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement702()
}

func (c *current) onListElementContinuationElement695() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement695()
}

func (c *current) onListElementContinuationElement718() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement718() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement718()
}

func (c *current) onListElementContinuationElement722() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement722() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement722()
}

func (c *current) onListElementContinuationElement712(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement712() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement712(stack["content"])
}

func (c *current) onListElementContinuationElement691(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement691(stack["line"])
}

func (c *current) onListElementContinuationElement735() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement735()
}

func (c *current) onListElementContinuationElement738() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement738() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement738()
}

func (c *current) onListElementContinuationElement731() (interface{}, error) {
	return types.NewBlockDelimiter(types.Example, string(c.text))
}

func (p *parser) callonListElementContinuationElement731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement731()
}

func (c *current) onListElementContinuationElement673(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement673(stack["content"])
}

func (c *current) onListElementContinuationElement754() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement754() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement754()
}

func (c *current) onListElementContinuationElement758() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement758() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement758()
}

func (c *current) onListElementContinuationElement761() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement761()
}

func (c *current) onListElementContinuationElement750(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement750() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement750(stack["language"])
}

func (c *current) onListElementContinuationElement778() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement778()
}

func (c *current) onListElementContinuationElement781() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement781()
}

func (c *current) onListElementContinuationElement774() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement774()
}

func (c *current) onListElementContinuationElement797() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement797() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement797()
}

func (c *current) onListElementContinuationElement801() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement801()
}

func (c *current) onListElementContinuationElement791(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement791(stack["content"])
}

func (c *current) onListElementContinuationElement770(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement770() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement770(stack["line"])
}

func (c *current) onListElementContinuationElement814() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement814() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement814()
}

func (c *current) onListElementContinuationElement817() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement817() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement817()
}

func (c *current) onListElementContinuationElement810() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement810() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement810()
}

func (c *current) onListElementContinuationElement747(delimiter, content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonListElementContinuationElement747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement747(stack["delimiter"], stack["content"])
}

func (c *current) onListElementContinuationElement832() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement832() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement832()
}

func (c *current) onListElementContinuationElement835() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement835() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement835()
}

func (c *current) onListElementContinuationElement828() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement828() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement828()
}

func (c *current) onListElementContinuationElement852() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement852()
}

func (c *current) onListElementContinuationElement855() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement855() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement855()
}

func (c *current) onListElementContinuationElement848() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement848()
}

func (c *current) onListElementContinuationElement871() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement871() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement871()
}

func (c *current) onListElementContinuationElement875() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement875()
}

func (c *current) onListElementContinuationElement865(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement865() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement865(stack["content"])
}

func (c *current) onListElementContinuationElement844(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement844(stack["line"])
}

func (c *current) onListElementContinuationElement888() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement888() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement888()
}

func (c *current) onListElementContinuationElement891() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement891() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement891()
}

func (c *current) onListElementContinuationElement884() (interface{}, error) {
	return types.NewBlockDelimiter(types.Fenced, string(c.text))
}

func (p *parser) callonListElementContinuationElement884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement884()
}

func (c *current) onListElementContinuationElement826(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement826(stack["content"])
}

func (c *current) onListElementContinuationElement906() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement906() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement906()
}

func (c *current) onListElementContinuationElement909() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement909()
}

func (c *current) onListElementContinuationElement902() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement902() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement902()
}

func (c *current) onListElementContinuationElement926() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement926() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement926()
}

func (c *current) onListElementContinuationElement929() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement929() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement929()
}

func (c *current) onListElementContinuationElement922() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement922()
}

func (c *current) onListElementContinuationElement945() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement945() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement945()
}

func (c *current) onListElementContinuationElement949() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement949() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement949()
}

func (c *current) onListElementContinuationElement939(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement939() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement939(stack["content"])
}

func (c *current) onListElementContinuationElement918(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement918() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement918(stack["line"])
}

func (c *current) onListElementContinuationElement962() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement962()
}

func (c *current) onListElementContinuationElement965() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement965() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement965()
}

func (c *current) onListElementContinuationElement958() (interface{}, error) {
	return types.NewBlockDelimiter(types.Listing, string(c.text))
}

func (p *parser) callonListElementContinuationElement958() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement958()
}

func (c *current) onListElementContinuationElement900(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement900(stack["content"])
}

func (c *current) onListElementContinuationElement980() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement980() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement980()
}

func (c *current) onListElementContinuationElement983() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement983() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement983()
}

func (c *current) onListElementContinuationElement976() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement976()
}

func (c *current) onListElementContinuationElement1000() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1000() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1000()
}

func (c *current) onListElementContinuationElement1003() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1003() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1003()
}

func (c *current) onListElementContinuationElement996() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement996()
}

func (c *current) onListElementContinuationElement1019() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1019() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1019()
}

func (c *current) onListElementContinuationElement1023() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1023() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1023()
}

func (c *current) onListElementContinuationElement1013(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1013(stack["content"])
}

func (c *current) onListElementContinuationElement992(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement992() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement992(stack["line"])
}

func (c *current) onListElementContinuationElement1036() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1036() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1036()
}

func (c *current) onListElementContinuationElement1039() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1039() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1039()
}

func (c *current) onListElementContinuationElement1032() (interface{}, error) {
	return types.NewBlockDelimiter(types.Literal, string(c.text))
}

func (p *parser) callonListElementContinuationElement1032() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1032()
}

func (c *current) onListElementContinuationElement974(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement974(stack["content"])
}

func (c *current) onListElementContinuationElement1060() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1060() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1060()
}

func (c *current) onListElementContinuationElement1063() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1063()
}

func (c *current) onListElementContinuationElement1054() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1054() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1054()
}

func (c *current) onListElementContinuationElement1072() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1072() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1072()
}

func (c *current) onListElementContinuationElement1076() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1076() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1076()
}

func (c *current) onListElementContinuationElement1051(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1051() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1051(stack["content"])
}

func (c *current) onListElementContinuationElement1095() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1095() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1095()
}

func (c *current) onListElementContinuationElement1098() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1098() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1098()
}

func (c *current) onListElementContinuationElement1089() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1089() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1089()
}

func (c *current) onListElementContinuationElement1107() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1107()
}

func (c *current) onListElementContinuationElement1111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1111()
}

func (c *current) onListElementContinuationElement1086(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1086() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1086(stack["content"])
}

func (c *current) onListElementContinuationElement1121() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1121()
}

func (c *current) onListElementContinuationElement1124(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1124() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1124(stack["content"])
}

func (c *current) onListElementContinuationElement1126() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1126()
}

func (c *current) onListElementContinuationElement1118(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1118(stack["content"])
}

func (c *current) onListElementContinuationElement1048(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1048() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1048(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1139()
}

func (c *current) onListElementContinuationElement1142() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1142()
}

func (c *current) onListElementContinuationElement1135() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement1135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1135()
}

func (c *current) onListElementContinuationElement1159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1159()
}

func (c *current) onListElementContinuationElement1162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1162()
}

func (c *current) onListElementContinuationElement1155() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement1155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1155()
}

func (c *current) onListElementContinuationElement1178() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1178()
}

func (c *current) onListElementContinuationElement1182() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1182()
}

func (c *current) onListElementContinuationElement1172(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1172(stack["content"])
}

func (c *current) onListElementContinuationElement1151(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1151(stack["line"])
}

func (c *current) onListElementContinuationElement1195() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1195()
}

func (c *current) onListElementContinuationElement1198() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1198()
}

func (c *current) onListElementContinuationElement1191() (interface{}, error) {
	return types.NewBlockDelimiter(types.Passthrough, string(c.text))
}

func (p *parser) callonListElementContinuationElement1191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1191()
}

func (c *current) onListElementContinuationElement1133(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1133(stack["content"])
}

func (c *current) onListElementContinuationElement1213() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1213()
}

func (c *current) onListElementContinuationElement1216() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1216()
}

func (c *current) onListElementContinuationElement1209() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement1209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1209()
}

func (c *current) onListElementContinuationElement1233() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1233()
}

func (c *current) onListElementContinuationElement1236() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1236()
}

func (c *current) onListElementContinuationElement1229() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement1229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1229()
}

func (c *current) onListElementContinuationElement1252() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1252()
}

func (c *current) onListElementContinuationElement1256() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1256()
}

func (c *current) onListElementContinuationElement1246(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1246(stack["content"])
}

func (c *current) onListElementContinuationElement1225(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1225(stack["line"])
}

func (c *current) onListElementContinuationElement1269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1269()
}

func (c *current) onListElementContinuationElement1272() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1272()
}

func (c *current) onListElementContinuationElement1265() (interface{}, error) {
	return types.NewBlockDelimiter(types.Quote, string(c.text))
}

func (p *parser) callonListElementContinuationElement1265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1265()
}

func (c *current) onListElementContinuationElement1207(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1207(stack["content"])
}

func (c *current) onListElementContinuationElement1287() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1287()
}

func (c *current) onListElementContinuationElement1290() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1290()
}

func (c *current) onListElementContinuationElement1283() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement1283() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1283()
}

func (c *current) onListElementContinuationElement1307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1307()
}

func (c *current) onListElementContinuationElement1310() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1310()
}

func (c *current) onListElementContinuationElement1303() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement1303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1303()
}

func (c *current) onListElementContinuationElement1326() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1326()
}

func (c *current) onListElementContinuationElement1330() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1330()
}

func (c *current) onListElementContinuationElement1320(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1320(stack["content"])
}

func (c *current) onListElementContinuationElement1299(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1299(stack["line"])
}

func (c *current) onListElementContinuationElement1343() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1343()
}

func (c *current) onListElementContinuationElement1346() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1346()
}

func (c *current) onListElementContinuationElement1339() (interface{}, error) {
	return types.NewBlockDelimiter(types.Sidebar, string(c.text))
}

func (p *parser) callonListElementContinuationElement1339() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1339()
}

func (c *current) onListElementContinuationElement1281(content interface{}) (interface{}, error) {
	c.unsetWithinDelimitedBlock()
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1281(stack["content"])
}

func (c *current) onListElementContinuationElement1366() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1366()
}

func (c *current) onListElementContinuationElement1369() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1369() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1369()
}

func (c *current) onListElementContinuationElement1377() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1377()
}

func (c *current) onListElementContinuationElement1355() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonListElementContinuationElement1355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1355()
}

func (c *current) onListElementContinuationElement1389() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1389()
}

func (c *current) onListElementContinuationElement1392() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1392() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1392()
}

func (c *current) onListElementContinuationElement1409() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1409()
}

func (c *current) onListElementContinuationElement1415() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1415()
}

func (c *current) onListElementContinuationElement1413(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1413() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1413(stack["content"])
}

func (c *current) onListElementContinuationElement1405(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1405(stack["content"])
}

func (c *current) onListElementContinuationElement1419() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1419()
}

func (c *current) onListElementContinuationElement1433() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1433()
}

func (c *current) onListElementContinuationElement1436() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1436() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1436()
}

func (c *current) onListElementContinuationElement1427() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1427()
}

func (c *current) onListElementContinuationElement1401(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1401(stack["cells"])
}

func (c *current) onListElementContinuationElement1453() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1453()
}

func (c *current) onListElementContinuationElement1456() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1456()
}

func (c *current) onListElementContinuationElement1477() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1477() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1477()
}

func (c *current) onListElementContinuationElement1480() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1480() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1480()
}

func (c *current) onListElementContinuationElement1496() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1496() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1496()
}

func (c *current) onListElementContinuationElement1499() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1499()
}

func (c *current) onListElementContinuationElement1490() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1490()
}

func (c *current) onListElementContinuationElement1508() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1508()
}

func (c *current) onListElementContinuationElement1514() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1514()
}

func (c *current) onListElementContinuationElement1512(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1512(stack["content"])
}

func (c *current) onListElementContinuationElement1470(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1470(stack["content"])
}

func (c *current) onListElementContinuationElement1518() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1518()
}

func (c *current) onListElementContinuationElement1467(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonListElementContinuationElement1467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1467(stack["cell"])
}

func (c *current) onListElementContinuationElement1533() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1533() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1533()
}

func (c *current) onListElementContinuationElement1536() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1536()
}

func (c *current) onListElementContinuationElement1527() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1527()
}

func (c *current) onListElementContinuationElement1548() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1548()
}

func (c *current) onListElementContinuationElement1551() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1551()
}

func (c *current) onListElementContinuationElement1446(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1446(stack["cells"])
}

func (c *current) onListElementContinuationElement1567() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1567()
}

func (c *current) onListElementContinuationElement1570() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1570()
}

func (c *current) onListElementContinuationElement1588() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1588() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1588()
}

func (c *current) onListElementContinuationElement1591() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1591() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1591()
}

func (c *current) onListElementContinuationElement1607() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1607()
}

func (c *current) onListElementContinuationElement1610() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1610() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1610()
}

func (c *current) onListElementContinuationElement1601() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1601()
}

func (c *current) onListElementContinuationElement1619() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1619()
}

func (c *current) onListElementContinuationElement1625() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1625() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1625()
}

func (c *current) onListElementContinuationElement1623(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1623() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1623(stack["content"])
}

func (c *current) onListElementContinuationElement1581(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1581(stack["content"])
}

func (c *current) onListElementContinuationElement1629() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1629()
}

func (c *current) onListElementContinuationElement1643() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1643() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1643()
}

func (c *current) onListElementContinuationElement1646() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1646() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1646()
}

func (c *current) onListElementContinuationElement1637() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1637() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1637()
}

func (c *current) onListElementContinuationElement1560(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1560(stack["cells"])
}

func (c *current) onListElementContinuationElement1657() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1657()
}

func (c *current) onListElementContinuationElement1660() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1660() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1660()
}

func (c *current) onListElementContinuationElement1385(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1385(stack["header"], stack["rows"])
}

func (c *current) onListElementContinuationElement1675() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1675()
}

func (c *current) onListElementContinuationElement1679() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1679() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1679()
}

func (c *current) onListElementContinuationElement1669(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1669(stack["content"])
}

func (c *current) onListElementContinuationElement1690() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonListElementContinuationElement1690() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1690()
}

func (c *current) onListElementContinuationElement1692() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonListElementContinuationElement1692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1692()
}

func (c *current) onListElementContinuationElement1694() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonListElementContinuationElement1694() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1694()
}

func (c *current) onListElementContinuationElement1696() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonListElementContinuationElement1696() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1696()
}

func (c *current) onListElementContinuationElement1698() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonListElementContinuationElement1698() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1698()
}

func (c *current) onListElementContinuationElement1705() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1705()
}

func (c *current) onListElementContinuationElement1708(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1708() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1708(stack["content"])
}

func (c *current) onListElementContinuationElement1710() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1710() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1710()
}

func (c *current) onListElementContinuationElement1702(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1702() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1702(stack["content"])
}

func (c *current) onListElementContinuationElement1725() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1725() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1725()
}

func (c *current) onListElementContinuationElement1727() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1727() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1727()
}

func (c *current) onListElementContinuationElement1740() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1740()
}

func (c *current) onListElementContinuationElement1744() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1744() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1744()
}

func (c *current) onListElementContinuationElement1734(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1734(stack["content"])
}

func (c *current) onListElementContinuationElement1754() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1754() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1754()
}

func (c *current) onListElementContinuationElement1757(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1757() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1757(stack["content"])
}

func (c *current) onListElementContinuationElement1759() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1759()
}

func (c *current) onListElementContinuationElement1751(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1751(stack["content"])
}

func (c *current) onListElementContinuationElement1719(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1719(stack["line"])
}

func (c *current) onListElementContinuationElement1686(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1686() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1686(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1774() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1774() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1774()
}

func (c *current) onListElementContinuationElement1772() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1772() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1772()
}

func (c *current) onListElementContinuationElement1779(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1779() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1779(stack["content"])
}

func (c *current) onListElementContinuationElement1781() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1781() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1781()
}

func (c *current) onListElementContinuationElement1769(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1769(stack["content"])
}

func (c *current) onListElementContinuationElement1797() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1797() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1797()
}

func (c *current) onListElementContinuationElement1801() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1801()
}

func (c *current) onListElementContinuationElement1791(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1791() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1791(stack["content"])
}

func (c *current) onListElementContinuationElement1811() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1811() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1811()
}

func (c *current) onListElementContinuationElement1814(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1814() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1814(stack["content"])
}

func (c *current) onListElementContinuationElement1816() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1816()
}

func (c *current) onListElementContinuationElement1808(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1808() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1808(stack["content"])
}

func (c *current) onListElementContinuationElement1766(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1766(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1826() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1826()
}

func (c *current) onListElementContinuationElement1830() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1830() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1830()
}

func (c *current) onListElementContinuationElement1823(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewParagraph(types.RawLine(content.(string)))

}

func (p *parser) callonListElementContinuationElement1823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1823(stack["content"])
}

func (c *current) onListElementContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("returning element '%s'\n", spew.Sdump(element))
	// }
	return element, nil

}

func (p *parser) callonListElementContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts), nil

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCallout11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onShortcutParagraph10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph10()
}

func (c *current) onShortcutParagraph17() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph17()
}

func (c *current) onShortcutParagraph20(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph20(stack["depth"])
}

func (c *current) onShortcutParagraph14(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonShortcutParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph14(stack["depth"])
}

func (c *current) onShortcutParagraph21() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonShortcutParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph21()
}

func (c *current) onShortcutParagraph26() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonShortcutParagraph26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph26()
}

func (c *current) onShortcutParagraph30() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonShortcutParagraph30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph30()
}

func (c *current) onShortcutParagraph34() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonShortcutParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph34()
}

func (c *current) onShortcutParagraph39() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonShortcutParagraph39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph39()
}

func (c *current) onShortcutParagraph44(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph44(stack["prefix"])
}

func (c *current) onShortcutParagraph7(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph7(stack["prefix"])
}

func (c *current) onShortcutParagraph52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph52()
}

func (c *current) onShortcutParagraph59() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph59()
}

func (c *current) onShortcutParagraph62(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph62(stack["depth"])
}

func (c *current) onShortcutParagraph56(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonShortcutParagraph56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph56(stack["depth"])
}

func (c *current) onShortcutParagraph64() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonShortcutParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph64()
}

func (c *current) onShortcutParagraph66(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph66(stack["prefix"])
}

func (c *current) onShortcutParagraph49(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph49(stack["prefix"])
}

func (c *current) onShortcutParagraph72() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonShortcutParagraph72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph72()
}

func (c *current) onShortcutParagraph74() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonShortcutParagraph74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph74()
}

func (c *current) onShortcutParagraph76() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonShortcutParagraph76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph76()
}

func (c *current) onShortcutParagraph78() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonShortcutParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph78()
}

func (c *current) onShortcutParagraph80() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonShortcutParagraph80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph80()
}

func (c *current) onShortcutParagraph86() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonShortcutParagraph86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph86()
}

func (c *current) onShortcutParagraph89(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonShortcutParagraph89() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph89(stack["content"])
}

func (c *current) onShortcutParagraph91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph91()
}

func (c *current) onShortcutParagraph83(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph83(stack["content"])
}

func (c *current) onShortcutParagraph98(firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonShortcutParagraph98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph98(stack["firstLine"])
}

func (c *current) onShortcutParagraph113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph113()
}

func (c *current) onShortcutParagraph116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph116()
}

func (c *current) onShortcutParagraph107() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonShortcutParagraph107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph107()
}

func (c *current) onShortcutParagraph129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph129()
}

func (c *current) onShortcutParagraph131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph131()
}

func (c *current) onShortcutParagraph144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph144()
}

func (c *current) onShortcutParagraph148() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph148()
}

func (c *current) onShortcutParagraph138(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonShortcutParagraph138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph138(stack["content"])
}

func (c *current) onShortcutParagraph158() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonShortcutParagraph158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph158()
}

func (c *current) onShortcutParagraph161(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonShortcutParagraph161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph161(stack["content"])
}

func (c *current) onShortcutParagraph163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph163()
}

func (c *current) onShortcutParagraph155(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph155(stack["content"])
}

func (c *current) onShortcutParagraph101(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph101(stack["line"])
}

func (c *current) onShortcutParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7()
}

func (c *current) onParagraph10(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonParagraph10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph10(stack["content"])
}

func (c *current) onParagraph12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph12()
}

func (c *current) onParagraph4(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph4(stack["content"])
}

func (c *current) onParagraph33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph33()
}

func (c *current) onParagraph36() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph36()
}

func (c *current) onParagraph27() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonParagraph27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph27()
}

func (c *current) onParagraph49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph49()
}

func (c *current) onParagraph51() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph51()
}

func (c *current) onParagraph64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph64()
}

func (c *current) onParagraph68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph68()
}

func (c *current) onParagraph58(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonParagraph58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph58(stack["content"])
}

func (c *current) onParagraph78() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph78()
}

func (c *current) onParagraph81(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonParagraph81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph81(stack["content"])
}

func (c *current) onParagraph83() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph83()
}

func (c *current) onParagraph75(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph75(stack["content"])
}

func (c *current) onParagraph21(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["line"])
}

func (c *current) onParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onQuotedText6() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedText6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText6()
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	log.Debugf("matched escaped quoted text")
	return append([]interface{}{attributes}, text.([]interface{})...), nil

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onQuotedText10(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText10(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement13()
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement16()
}

func (c *current) onDoubleQuoteBoldTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement20()
}

func (c *current) onDoubleQuoteBoldTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement26()
}

func (c *current) onDoubleQuoteBoldTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement33()
}

func (c *current) onDoubleQuoteBoldTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement40()
}

func (c *current) onDoubleQuoteBoldTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement52()
}

func (c *current) onDoubleQuoteBoldTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement54()
}

func (c *current) onDoubleQuoteBoldTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement62()
}

func (c *current) onDoubleQuoteBoldTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement74()
}

func (c *current) onDoubleQuoteBoldTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement76()
}

func (c *current) onDoubleQuoteBoldTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement84()
}

func (c *current) onDoubleQuoteBoldTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement94()
}

func (c *current) onDoubleQuoteBoldTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement103()
}

func (c *current) onDoubleQuoteBoldTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement112()
}

func (c *current) onDoubleQuoteBoldTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement116()
}

func (c *current) onDoubleQuoteBoldTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement122()
}

func (c *current) onDoubleQuoteBoldTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement131()
}

func (c *current) onDoubleQuoteBoldTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement141()
}

func (c *current) onDoubleQuoteBoldTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement147()
}

func (c *current) onDoubleQuoteBoldTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement154()
}

func (c *current) onDoubleQuoteBoldTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement106()
}

func (c *current) onDoubleQuoteBoldTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement158()
}

func (c *current) onDoubleQuoteBoldTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement164() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement164()
}

func (c *current) onDoubleQuoteBoldTextElement166() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteBoldTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement166()
}

func (c *current) onDoubleQuoteBoldTextElement168() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteBoldTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement168()
}

func (c *current) onDoubleQuoteBoldTextElement170() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteBoldTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement170()
}

func (c *current) onDoubleQuoteBoldTextElement172() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteBoldTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement172()
}

func (c *current) onDoubleQuoteBoldTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement160()
}

func (c *current) onDoubleQuoteBoldTextElement174() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteBoldTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement174()
}

func (c *current) onDoubleQuoteBoldTextElement176() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteBoldTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement176()
}

func (c *current) onDoubleQuoteBoldTextElement178() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteBoldTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement178()
}

func (c *current) onDoubleQuoteBoldTextElement180() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteBoldTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement180()
}

func (c *current) onDoubleQuoteBoldTextElement182() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteBoldTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement182()
}

func (c *current) onDoubleQuoteBoldTextElement184() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteBoldTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement184()
}

func (c *current) onDoubleQuoteBoldTextElement190() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonDoubleQuoteBoldTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement190()
}

func (c *current) onDoubleQuoteBoldTextElement202() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement202()
}

func (c *current) onDoubleQuoteBoldTextElement198(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement198(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement210() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement210()
}

func (c *current) onDoubleQuoteBoldTextElement207() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement207()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements7()
}

func (c *current) onSingleQuoteBoldTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement8()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement15()
}

func (c *current) onSingleQuoteBoldTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement21()
}

func (c *current) onSingleQuoteBoldTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteBoldTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement28()
}

func (c *current) onSingleQuoteBoldTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement35()
}

func (c *current) onSingleQuoteBoldTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement47()
}

func (c *current) onSingleQuoteBoldTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement49()
}

func (c *current) onSingleQuoteBoldTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement42(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement57()
}

func (c *current) onSingleQuoteBoldTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement69()
}

func (c *current) onSingleQuoteBoldTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement71()
}

func (c *current) onSingleQuoteBoldTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement64(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement79()
}

func (c *current) onSingleQuoteBoldTextElement75(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement75(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement89()
}

func (c *current) onSingleQuoteBoldTextElement85(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement85(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement26(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement98() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteBoldTextElement98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement98()
}

func (c *current) onSingleQuoteBoldTextElement107() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement107()
}

func (c *current) onSingleQuoteBoldTextElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement111()
}

func (c *current) onSingleQuoteBoldTextElement117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement117()
}

func (c *current) onSingleQuoteBoldTextElement126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement126()
}

func (c *current) onSingleQuoteBoldTextElement122(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement122(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement136()
}

func (c *current) onSingleQuoteBoldTextElement132(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement132(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement142() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement142()
}

func (c *current) onSingleQuoteBoldTextElement103(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement103(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement149() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement149()
}

func (c *current) onSingleQuoteBoldTextElement145(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement145(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement101()
}

func (c *current) onSingleQuoteBoldTextElement153() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement153()
}

func (c *current) onSingleQuoteBoldTextElement96(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement96(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement159() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement159()
}

func (c *current) onSingleQuoteBoldTextElement161() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteBoldTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement161()
}

func (c *current) onSingleQuoteBoldTextElement163() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteBoldTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement163()
}

func (c *current) onSingleQuoteBoldTextElement165() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteBoldTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement165()
}

func (c *current) onSingleQuoteBoldTextElement167() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteBoldTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement167()
}

func (c *current) onSingleQuoteBoldTextElement155() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement155()
}

func (c *current) onSingleQuoteBoldTextElement169() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteBoldTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement169()
}

func (c *current) onSingleQuoteBoldTextElement171() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteBoldTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement171()
}

func (c *current) onSingleQuoteBoldTextElement173() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteBoldTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement173()
}

func (c *current) onSingleQuoteBoldTextElement175() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteBoldTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement175()
}

func (c *current) onSingleQuoteBoldTextElement177() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteBoldTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement177()
}

func (c *current) onSingleQuoteBoldTextElement179() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteBoldTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement179()
}

func (c *current) onSingleQuoteBoldTextElement185() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonSingleQuoteBoldTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement185()
}

func (c *current) onSingleQuoteBoldTextElement197() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement197()
}

func (c *current) onSingleQuoteBoldTextElement193(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement193(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement205() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement205()
}

func (c *current) onSingleQuoteBoldTextElement202() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement202()
}

func (c *current) onQuotedTextInSingleQuoteBoldText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {

	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement13()
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement16()
}

func (c *current) onDoubleQuoteItalicTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement20()
}

func (c *current) onDoubleQuoteItalicTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement26()
}

func (c *current) onDoubleQuoteItalicTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement33()
}

func (c *current) onDoubleQuoteItalicTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement40()
}

func (c *current) onDoubleQuoteItalicTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement52()
}

func (c *current) onDoubleQuoteItalicTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement54()
}

func (c *current) onDoubleQuoteItalicTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement62()
}

func (c *current) onDoubleQuoteItalicTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement74()
}

func (c *current) onDoubleQuoteItalicTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement76()
}

func (c *current) onDoubleQuoteItalicTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement84()
}

func (c *current) onDoubleQuoteItalicTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement94()
}

func (c *current) onDoubleQuoteItalicTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement103()
}

func (c *current) onDoubleQuoteItalicTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement112()
}

func (c *current) onDoubleQuoteItalicTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement116()
}

func (c *current) onDoubleQuoteItalicTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement122()
}

func (c *current) onDoubleQuoteItalicTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement131()
}

func (c *current) onDoubleQuoteItalicTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement141()
}

func (c *current) onDoubleQuoteItalicTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement147()
}

func (c *current) onDoubleQuoteItalicTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement154()
}

func (c *current) onDoubleQuoteItalicTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement106()
}

func (c *current) onDoubleQuoteItalicTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement158()
}

func (c *current) onDoubleQuoteItalicTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement164() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement164()
}

func (c *current) onDoubleQuoteItalicTextElement166() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteItalicTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement166()
}

func (c *current) onDoubleQuoteItalicTextElement168() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteItalicTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement168()
}

func (c *current) onDoubleQuoteItalicTextElement170() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteItalicTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement170()
}

func (c *current) onDoubleQuoteItalicTextElement172() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteItalicTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement172()
}

func (c *current) onDoubleQuoteItalicTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement160()
}

func (c *current) onDoubleQuoteItalicTextElement174() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteItalicTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement174()
}

func (c *current) onDoubleQuoteItalicTextElement176() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteItalicTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement176()
}

func (c *current) onDoubleQuoteItalicTextElement178() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteItalicTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement178()
}

func (c *current) onDoubleQuoteItalicTextElement180() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteItalicTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement180()
}

func (c *current) onDoubleQuoteItalicTextElement182() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteItalicTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement182()
}

func (c *current) onDoubleQuoteItalicTextElement184() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteItalicTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement184()
}

func (c *current) onDoubleQuoteItalicTextElement190() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonDoubleQuoteItalicTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement190()
}

func (c *current) onDoubleQuoteItalicTextElement202() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement202()
}

func (c *current) onDoubleQuoteItalicTextElement198(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement198(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement210() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement210()
}

func (c *current) onDoubleQuoteItalicTextElement207() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement207()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText2(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText13(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements7()
}

func (c *current) onSingleQuoteItalicTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement8()
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement11()
}

func (c *current) onSingleQuoteItalicTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement15()
}

func (c *current) onSingleQuoteItalicTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement21()
}

func (c *current) onSingleQuoteItalicTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteItalicTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement28()
}

func (c *current) onSingleQuoteItalicTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement35()
}

func (c *current) onSingleQuoteItalicTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement47()
}

func (c *current) onSingleQuoteItalicTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement49()
}

func (c *current) onSingleQuoteItalicTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement42(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement57()
}

func (c *current) onSingleQuoteItalicTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement69()
}

func (c *current) onSingleQuoteItalicTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement71()
}

func (c *current) onSingleQuoteItalicTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement64(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement79()
}

func (c *current) onSingleQuoteItalicTextElement75(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement75(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement89()
}

func (c *current) onSingleQuoteItalicTextElement85(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement85(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement26(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement98() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteItalicTextElement98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement98()
}

func (c *current) onSingleQuoteItalicTextElement107() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement107()
}

func (c *current) onSingleQuoteItalicTextElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement111()
}

func (c *current) onSingleQuoteItalicTextElement117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement117()
}

func (c *current) onSingleQuoteItalicTextElement126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement126()
}

func (c *current) onSingleQuoteItalicTextElement122(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement122(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement136()
}

func (c *current) onSingleQuoteItalicTextElement132(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement132(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement142() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement142()
}

func (c *current) onSingleQuoteItalicTextElement103(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement103(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement149() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement149()
}

func (c *current) onSingleQuoteItalicTextElement145(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement145(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement101()
}

func (c *current) onSingleQuoteItalicTextElement153() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement153()
}

func (c *current) onSingleQuoteItalicTextElement96(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement96(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement159() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement159()
}

func (c *current) onSingleQuoteItalicTextElement161() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteItalicTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement161()
}

func (c *current) onSingleQuoteItalicTextElement163() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteItalicTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement163()
}

func (c *current) onSingleQuoteItalicTextElement165() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteItalicTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement165()
}

func (c *current) onSingleQuoteItalicTextElement167() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteItalicTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement167()
}

func (c *current) onSingleQuoteItalicTextElement155() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement155()
}

func (c *current) onSingleQuoteItalicTextElement169() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteItalicTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement169()
}

func (c *current) onSingleQuoteItalicTextElement171() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteItalicTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement171()
}

func (c *current) onSingleQuoteItalicTextElement173() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteItalicTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement173()
}

func (c *current) onSingleQuoteItalicTextElement175() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteItalicTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement175()
}

func (c *current) onSingleQuoteItalicTextElement177() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteItalicTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement177()
}

func (c *current) onSingleQuoteItalicTextElement179() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteItalicTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement179()
}

func (c *current) onSingleQuoteItalicTextElement185() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonSingleQuoteItalicTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement185()
}

func (c *current) onSingleQuoteItalicTextElement197() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement197()
}

func (c *current) onSingleQuoteItalicTextElement193(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement193(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement205() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement205()
}

func (c *current) onSingleQuoteItalicTextElement202() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement202()
}

func (c *current) onQuotedTextInSingleQuoteItalicText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteItalicText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement13()
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement16()
}

func (c *current) onDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement20()
}

func (c *current) onDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement26()
}

func (c *current) onDoubleQuoteMonospaceTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement33()
}

func (c *current) onDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement40()
}

func (c *current) onDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement52()
}

func (c *current) onDoubleQuoteMonospaceTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement54()
}

func (c *current) onDoubleQuoteMonospaceTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement62()
}

func (c *current) onDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement74()
}

func (c *current) onDoubleQuoteMonospaceTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement76()
}

func (c *current) onDoubleQuoteMonospaceTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement84()
}

func (c *current) onDoubleQuoteMonospaceTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement94()
}

func (c *current) onDoubleQuoteMonospaceTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement103()
}

func (c *current) onDoubleQuoteMonospaceTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement112()
}

func (c *current) onDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement116()
}

func (c *current) onDoubleQuoteMonospaceTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement122()
}

func (c *current) onDoubleQuoteMonospaceTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement131()
}

func (c *current) onDoubleQuoteMonospaceTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement141()
}

func (c *current) onDoubleQuoteMonospaceTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement147()
}

func (c *current) onDoubleQuoteMonospaceTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement154()
}

func (c *current) onDoubleQuoteMonospaceTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement106()
}

func (c *current) onDoubleQuoteMonospaceTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement158()
}

func (c *current) onDoubleQuoteMonospaceTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement164() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement164()
}

func (c *current) onDoubleQuoteMonospaceTextElement166() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement166()
}

func (c *current) onDoubleQuoteMonospaceTextElement168() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement168()
}

func (c *current) onDoubleQuoteMonospaceTextElement170() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement170()
}

func (c *current) onDoubleQuoteMonospaceTextElement172() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement172()
}

func (c *current) onDoubleQuoteMonospaceTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement160()
}

func (c *current) onDoubleQuoteMonospaceTextElement174() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement174()
}

func (c *current) onDoubleQuoteMonospaceTextElement176() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement176()
}

func (c *current) onDoubleQuoteMonospaceTextElement178() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement178()
}

func (c *current) onDoubleQuoteMonospaceTextElement180() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement180()
}

func (c *current) onDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement182()
}

func (c *current) onDoubleQuoteMonospaceTextElement184() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteMonospaceTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement184()
}

func (c *current) onDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement190()
}

func (c *current) onDoubleQuoteMonospaceTextElement203() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement203()
}

func (c *current) onDoubleQuoteMonospaceTextElement199(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement199(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement211() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement211()
}

func (c *current) onDoubleQuoteMonospaceTextElement208() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement208()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText2(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText13(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements7()
}

func (c *current) onSingleQuoteMonospaceTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement20() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement20()
}

func (c *current) onSingleQuoteMonospaceTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement24()
}

func (c *current) onSingleQuoteMonospaceTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement30()
}

func (c *current) onSingleQuoteMonospaceTextElement37() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement37()
}

func (c *current) onSingleQuoteMonospaceTextElement44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement44()
}

func (c *current) onSingleQuoteMonospaceTextElement56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement56()
}

func (c *current) onSingleQuoteMonospaceTextElement58() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement58()
}

func (c *current) onSingleQuoteMonospaceTextElement51(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement51(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement40(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement40(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement66()
}

func (c *current) onSingleQuoteMonospaceTextElement78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement78()
}

func (c *current) onSingleQuoteMonospaceTextElement80() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement80()
}

func (c *current) onSingleQuoteMonospaceTextElement73(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement73(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement62(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement62(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement88()
}

func (c *current) onSingleQuoteMonospaceTextElement84(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement84(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement98()
}

func (c *current) onSingleQuoteMonospaceTextElement94(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement94(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement35(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement107() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement107() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement107()
}

func (c *current) onSingleQuoteMonospaceTextElement116() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement116()
}

func (c *current) onSingleQuoteMonospaceTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement120()
}

func (c *current) onSingleQuoteMonospaceTextElement126() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement126()
}

func (c *current) onSingleQuoteMonospaceTextElement135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement135()
}

func (c *current) onSingleQuoteMonospaceTextElement131(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement131(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement145()
}

func (c *current) onSingleQuoteMonospaceTextElement141(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement141(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement151() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement151()
}

func (c *current) onSingleQuoteMonospaceTextElement112(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement112(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement158() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement158()
}

func (c *current) onSingleQuoteMonospaceTextElement154(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement154(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement110() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement110()
}

func (c *current) onSingleQuoteMonospaceTextElement162() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement162()
}

func (c *current) onSingleQuoteMonospaceTextElement105(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement105(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement168() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement168()
}

func (c *current) onSingleQuoteMonospaceTextElement170() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMonospaceTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement170()
}

func (c *current) onSingleQuoteMonospaceTextElement172() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMonospaceTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement172()
}

func (c *current) onSingleQuoteMonospaceTextElement174() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMonospaceTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement174()
}

func (c *current) onSingleQuoteMonospaceTextElement176() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMonospaceTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement176()
}

func (c *current) onSingleQuoteMonospaceTextElement164() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement164()
}

func (c *current) onSingleQuoteMonospaceTextElement178() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement178()
}

func (c *current) onSingleQuoteMonospaceTextElement180() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMonospaceTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement180()
}

func (c *current) onSingleQuoteMonospaceTextElement182() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement182()
}

func (c *current) onSingleQuoteMonospaceTextElement184() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMonospaceTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement184()
}

func (c *current) onSingleQuoteMonospaceTextElement186() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement186()
}

func (c *current) onSingleQuoteMonospaceTextElement188() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteMonospaceTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement188()
}

func (c *current) onSingleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonSingleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement194()
}

func (c *current) onSingleQuoteMonospaceTextElement207() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement207()
}

func (c *current) onSingleQuoteMonospaceTextElement203(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement203(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement216()
}

func (c *current) onSingleQuoteMonospaceTextElement211() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement211()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement13()
}

func (c *current) onDoubleQuoteMarkedTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement7()
}

func (c *current) onDoubleQuoteMarkedTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement16()
}

func (c *current) onDoubleQuoteMarkedTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement20()
}

func (c *current) onDoubleQuoteMarkedTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement26()
}

func (c *current) onDoubleQuoteMarkedTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement33()
}

func (c *current) onDoubleQuoteMarkedTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement40()
}

func (c *current) onDoubleQuoteMarkedTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement52()
}

func (c *current) onDoubleQuoteMarkedTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement54()
}

func (c *current) onDoubleQuoteMarkedTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement62()
}

func (c *current) onDoubleQuoteMarkedTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement74()
}

func (c *current) onDoubleQuoteMarkedTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement76()
}

func (c *current) onDoubleQuoteMarkedTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement84()
}

func (c *current) onDoubleQuoteMarkedTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement94()
}

func (c *current) onDoubleQuoteMarkedTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement103()
}

func (c *current) onDoubleQuoteMarkedTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement112()
}

func (c *current) onDoubleQuoteMarkedTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement116()
}

func (c *current) onDoubleQuoteMarkedTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement122()
}

func (c *current) onDoubleQuoteMarkedTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement131()
}

func (c *current) onDoubleQuoteMarkedTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement141()
}

func (c *current) onDoubleQuoteMarkedTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement147()
}

func (c *current) onDoubleQuoteMarkedTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement154()
}

func (c *current) onDoubleQuoteMarkedTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement106()
}

func (c *current) onDoubleQuoteMarkedTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement158()
}

func (c *current) onDoubleQuoteMarkedTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement164() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement164()
}

func (c *current) onDoubleQuoteMarkedTextElement166() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMarkedTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement166()
}

func (c *current) onDoubleQuoteMarkedTextElement168() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMarkedTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement168()
}

func (c *current) onDoubleQuoteMarkedTextElement170() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMarkedTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement170()
}

func (c *current) onDoubleQuoteMarkedTextElement172() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMarkedTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement172()
}

func (c *current) onDoubleQuoteMarkedTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement160()
}

func (c *current) onDoubleQuoteMarkedTextElement174() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonDoubleQuoteMarkedTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement174()
}

func (c *current) onDoubleQuoteMarkedTextElement176() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonDoubleQuoteMarkedTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement176()
}

func (c *current) onDoubleQuoteMarkedTextElement178() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonDoubleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement178()
}

func (c *current) onDoubleQuoteMarkedTextElement180() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonDoubleQuoteMarkedTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement180()
}

func (c *current) onDoubleQuoteMarkedTextElement182() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonDoubleQuoteMarkedTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement182()
}

func (c *current) onDoubleQuoteMarkedTextElement184() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteMarkedTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement184()
}

func (c *current) onDoubleQuoteMarkedTextElement190() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonDoubleQuoteMarkedTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement190()
}

func (c *current) onDoubleQuoteMarkedTextElement202() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement202()
}

func (c *current) onDoubleQuoteMarkedTextElement198(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement198(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement210() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement210()
}

func (c *current) onDoubleQuoteMarkedTextElement207() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement207()
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText2(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText13(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements7()
}

func (c *current) onSingleQuoteMarkedTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement8()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement15()
}

func (c *current) onSingleQuoteMarkedTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement21()
}

func (c *current) onSingleQuoteMarkedTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement28()
}

func (c *current) onSingleQuoteMarkedTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement35()
}

func (c *current) onSingleQuoteMarkedTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement47()
}

func (c *current) onSingleQuoteMarkedTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement49()
}

func (c *current) onSingleQuoteMarkedTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement42(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement57()
}

func (c *current) onSingleQuoteMarkedTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement69()
}

func (c *current) onSingleQuoteMarkedTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement71()
}

func (c *current) onSingleQuoteMarkedTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement64(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement79()
}

func (c *current) onSingleQuoteMarkedTextElement75(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement75(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement89()
}

func (c *current) onSingleQuoteMarkedTextElement85(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement85(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement26(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement98() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement98()
}

func (c *current) onSingleQuoteMarkedTextElement107() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement107()
}

func (c *current) onSingleQuoteMarkedTextElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement111()
}

func (c *current) onSingleQuoteMarkedTextElement117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement117()
}

func (c *current) onSingleQuoteMarkedTextElement126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement126()
}

func (c *current) onSingleQuoteMarkedTextElement122(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement122(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement136()
}

func (c *current) onSingleQuoteMarkedTextElement132(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement132(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement142() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement142()
}

func (c *current) onSingleQuoteMarkedTextElement103(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement103(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement149() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement149()
}

func (c *current) onSingleQuoteMarkedTextElement145(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement145(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement101()
}

func (c *current) onSingleQuoteMarkedTextElement153() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement153()
}

func (c *current) onSingleQuoteMarkedTextElement96(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement96(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement159() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement159()
}

func (c *current) onSingleQuoteMarkedTextElement161() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMarkedTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement161()
}

func (c *current) onSingleQuoteMarkedTextElement163() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMarkedTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement163()
}

func (c *current) onSingleQuoteMarkedTextElement165() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMarkedTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement165()
}

func (c *current) onSingleQuoteMarkedTextElement167() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMarkedTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement167()
}

func (c *current) onSingleQuoteMarkedTextElement155() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement155()
}

func (c *current) onSingleQuoteMarkedTextElement169() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuoteMarkedTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement169()
}

func (c *current) onSingleQuoteMarkedTextElement171() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuoteMarkedTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement171()
}

func (c *current) onSingleQuoteMarkedTextElement173() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuoteMarkedTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement173()
}

func (c *current) onSingleQuoteMarkedTextElement175() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuoteMarkedTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement175()
}

func (c *current) onSingleQuoteMarkedTextElement177() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuoteMarkedTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement177()
}

func (c *current) onSingleQuoteMarkedTextElement179() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteMarkedTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement179()
}

func (c *current) onSingleQuoteMarkedTextElement185() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonSingleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement185()
}

func (c *current) onSingleQuoteMarkedTextElement197() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement197()
}

func (c *current) onSingleQuoteMarkedTextElement193(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement193(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement205() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement205()
}

func (c *current) onSingleQuoteMarkedTextElement202() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement202()
}

func (c *current) onQuotedTextInSingleQuoteMarkedText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteMarkedText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))

}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement13()
}

func (c *current) onSingleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement7()
}

func (c *current) onSingleQuotedStringElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement17()
}

func (c *current) onSingleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement22()
}

func (c *current) onSingleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement28()
}

func (c *current) onSingleQuotedStringElement35() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuotedStringElement35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement35()
}

func (c *current) onSingleQuotedStringElement42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement42()
}

func (c *current) onSingleQuotedStringElement54() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement54()
}

func (c *current) onSingleQuotedStringElement56() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement56()
}

func (c *current) onSingleQuotedStringElement49(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement49(stack["start"])
}

func (c *current) onSingleQuotedStringElement38(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuotedStringElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement38(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement64()
}

func (c *current) onSingleQuotedStringElement76() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement76()
}

func (c *current) onSingleQuotedStringElement78() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement78()
}

func (c *current) onSingleQuotedStringElement71(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedStringElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement71(stack["start"])
}

func (c *current) onSingleQuotedStringElement60(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuotedStringElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement60(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedStringElement86() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement86()
}

func (c *current) onSingleQuotedStringElement82(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuotedStringElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement82(stack["name"])
}

func (c *current) onSingleQuotedStringElement96() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement96()
}

func (c *current) onSingleQuotedStringElement92(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedStringElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement92(stack["name"])
}

func (c *current) onSingleQuotedStringElement33(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement33(stack["element"])
}

func (c *current) onSingleQuotedStringElement105() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuotedStringElement105() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement105()
}

func (c *current) onSingleQuotedStringElement114() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement114()
}

func (c *current) onSingleQuotedStringElement118() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement118()
}

func (c *current) onSingleQuotedStringElement124() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement124()
}

func (c *current) onSingleQuotedStringElement133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement133()
}

func (c *current) onSingleQuotedStringElement129(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuotedStringElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement129(stack["name"])
}

func (c *current) onSingleQuotedStringElement143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement143()
}

func (c *current) onSingleQuotedStringElement139(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedStringElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement139(stack["name"])
}

func (c *current) onSingleQuotedStringElement149() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement149()
}

func (c *current) onSingleQuotedStringElement110(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuotedStringElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement110(stack["id"], stack["label"])
}

func (c *current) onSingleQuotedStringElement156() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement156()
}

func (c *current) onSingleQuotedStringElement152(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuotedStringElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement152(stack["id"])
}

func (c *current) onSingleQuotedStringElement108() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement108()
}

func (c *current) onSingleQuotedStringElement160() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement160()
}

func (c *current) onSingleQuotedStringElement103(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement103(stack["element"])
}

func (c *current) onSingleQuotedStringElement165() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonSingleQuotedStringElement165() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement165()
}

func (c *current) onSingleQuotedStringElement168() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedStringElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement168()
}

func (c *current) onSingleQuotedStringElement172() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuotedStringElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement172()
}

func (c *current) onSingleQuotedStringElement163() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSingleQuotedStringElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement163()
}

func (c *current) onSingleQuotedStringElement185() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuotedStringElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement185()
}

func (c *current) onSingleQuotedStringElement187() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuotedStringElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement187()
}

func (c *current) onSingleQuotedStringElement189() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuotedStringElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement189()
}

func (c *current) onSingleQuotedStringElement191() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuotedStringElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement191()
}

func (c *current) onSingleQuotedStringElement193() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuotedStringElement193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement193()
}

func (c *current) onSingleQuotedStringElement181() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuotedStringElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement181()
}

func (c *current) onSingleQuotedStringElement195() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSingleQuotedStringElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement195()
}

func (c *current) onSingleQuotedStringElement197() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSingleQuotedStringElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement197()
}

func (c *current) onSingleQuotedStringElement199() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSingleQuotedStringElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement199()
}

func (c *current) onSingleQuotedStringElement201() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSingleQuotedStringElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement201()
}

func (c *current) onSingleQuotedStringElement203() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSingleQuotedStringElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement203()
}

func (c *current) onSingleQuotedStringElement205() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuotedStringElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement205()
}

func (c *current) onSingleQuotedStringElement211() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonSingleQuotedStringElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement211()
}

func (c *current) onSingleQuotedStringElement220() (interface{}, error) {
	// '
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedStringElement220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement220()
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInSingleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInSingleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))

}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	c.resetSpaceSuffixTracking()
	return types.NewInlineElements(elements)

}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement13()
}

func (c *current) onDoubleQuotedStringElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement7()
}

func (c *current) onDoubleQuotedStringElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement17()
}

func (c *current) onDoubleQuotedStringElement22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement22()
}

func (c *current) onDoubleQuotedStringElement28() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement28()
}

func (c *current) onDoubleQuotedStringElement36() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonDoubleQuotedStringElement36() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement36()
}

func (c *current) onDoubleQuotedStringElement39() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement39()
}

func (c *current) onDoubleQuotedStringElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuotedStringElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement43()
}

func (c *current) onDoubleQuotedStringElement34() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonDoubleQuotedStringElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement34()
}

func (c *current) onDoubleQuotedStringElement54() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuotedStringElement54() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement54()
}

func (c *current) onDoubleQuotedStringElement61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement61()
}

func (c *current) onDoubleQuotedStringElement73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement73()
}

func (c *current) onDoubleQuotedStringElement75() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement75()
}

func (c *current) onDoubleQuotedStringElement68(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement68(stack["start"])
}

func (c *current) onDoubleQuotedStringElement57(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement57(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement83()
}

func (c *current) onDoubleQuotedStringElement95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement95()
}

func (c *current) onDoubleQuotedStringElement97() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement97()
}

func (c *current) onDoubleQuotedStringElement90(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedStringElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement90(stack["start"])
}

func (c *current) onDoubleQuotedStringElement79(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuotedStringElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement79(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedStringElement105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement105()
}

func (c *current) onDoubleQuotedStringElement101(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuotedStringElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement101(stack["name"])
}

func (c *current) onDoubleQuotedStringElement115() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement115()
}

func (c *current) onDoubleQuotedStringElement111(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement111(stack["name"])
}

func (c *current) onDoubleQuotedStringElement52(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement52(stack["element"])
}

func (c *current) onDoubleQuotedStringElement124() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuotedStringElement124() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement124()
}

func (c *current) onDoubleQuotedStringElement133() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement133()
}

func (c *current) onDoubleQuotedStringElement137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement137()
}

func (c *current) onDoubleQuotedStringElement143() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement143()
}

func (c *current) onDoubleQuotedStringElement152() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement152()
}

func (c *current) onDoubleQuotedStringElement148(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuotedStringElement148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement148(stack["name"])
}

func (c *current) onDoubleQuotedStringElement162() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement162()
}

func (c *current) onDoubleQuotedStringElement158(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement158(stack["name"])
}

func (c *current) onDoubleQuotedStringElement168() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement168()
}

func (c *current) onDoubleQuotedStringElement129(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuotedStringElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement129(stack["id"], stack["label"])
}

func (c *current) onDoubleQuotedStringElement175() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedStringElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement175()
}

func (c *current) onDoubleQuotedStringElement171(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuotedStringElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement171(stack["id"])
}

func (c *current) onDoubleQuotedStringElement127() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement127()
}

func (c *current) onDoubleQuotedStringElement179() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement179()
}

func (c *current) onDoubleQuotedStringElement122(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement122(stack["element"])
}

func (c *current) onDoubleQuotedStringElement183() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedStringElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement183()
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString10(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonQuotedTextInDoubleQuotedString10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString10(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuotedString1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuotedString1(stack["attributes"], stack["text"])
}

func (c *current) onSubstitutions17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions17()
}

func (c *current) onSubstitutions22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions22()
}

func (c *current) onSubstitutions12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions12()
}

func (c *current) onSubstitutions29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions29()
}

func (c *current) onSubstitutions31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions31()
}

func (c *current) onSubstitutions40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSubstitutions40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions40()
}

func (c *current) onSubstitutions36(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSubstitutions36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions36(stack["ref"])
}

func (c *current) onSubstitutions46() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonSubstitutions46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions46()
}

func (c *current) onSubstitutions49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions49()
}

func (c *current) onSubstitutions53() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions53()
}

func (c *current) onSubstitutions44() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSubstitutions44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions44()
}

func (c *current) onSubstitutions63() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSubstitutions63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions63()
}

func (c *current) onSubstitutions67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions67()
}

func (c *current) onSubstitutions69() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions69()
}

func (c *current) onSubstitutions60(char interface{}) (interface{}, error) {
	return char, nil
}

func (p *parser) callonSubstitutions60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions60(stack["char"])
}

func (c *current) onSubstitutions82() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSubstitutions82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions82()
}

func (c *current) onSubstitutions91() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSubstitutions91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions91()
}

func (c *current) onSubstitutions95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions95()
}

func (c *current) onSubstitutions101() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions101()
}

func (c *current) onSubstitutions110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions110()
}

func (c *current) onSubstitutions106(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSubstitutions106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions106(stack["name"])
}

func (c *current) onSubstitutions120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions120()
}

func (c *current) onSubstitutions116(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSubstitutions116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions116(stack["name"])
}

func (c *current) onSubstitutions126() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions126()
}

func (c *current) onSubstitutions87(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSubstitutions87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions87(stack["id"], stack["label"])
}

func (c *current) onSubstitutions133() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSubstitutions133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions133()
}

func (c *current) onSubstitutions129(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSubstitutions129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions129(stack["id"])
}

func (c *current) onSubstitutions85() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions85()
}

func (c *current) onSubstitutions137() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSubstitutions137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions137()
}

func (c *current) onSubstitutions80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions80(stack["element"])
}

func (c *current) onSubstitutions141() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSubstitutions141() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions141()
}

func (c *current) onSubstitutions148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions148()
}

func (c *current) onSubstitutions160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions160()
}

func (c *current) onSubstitutions162() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSubstitutions162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions162()
}

func (c *current) onSubstitutions155(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSubstitutions155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions155(stack["start"])
}

func (c *current) onSubstitutions144(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSubstitutions144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions144(stack["name"], stack["start"])
}

func (c *current) onSubstitutions170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions170()
}

func (c *current) onSubstitutions182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions182()
}

func (c *current) onSubstitutions184() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSubstitutions184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions184()
}

func (c *current) onSubstitutions177(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSubstitutions177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions177(stack["start"])
}

func (c *current) onSubstitutions166(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSubstitutions166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions166(stack["name"], stack["start"])
}

func (c *current) onSubstitutions192() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions192()
}

func (c *current) onSubstitutions188(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSubstitutions188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions188(stack["name"])
}

func (c *current) onSubstitutions202() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions202()
}

func (c *current) onSubstitutions198(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSubstitutions198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions198(stack["name"])
}

func (c *current) onSubstitutions139(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions139(stack["element"])
}

func (c *current) onSubstitutions210() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSubstitutions210() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions210()
}

func (c *current) onSubstitutions217() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSubstitutions217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions217()
}

func (c *current) onSubstitutions219() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSubstitutions219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions219()
}

func (c *current) onSubstitutions221() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSubstitutions221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions221()
}

func (c *current) onSubstitutions223() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSubstitutions223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions223()
}

func (c *current) onSubstitutions225() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSubstitutions225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions225()
}

func (c *current) onSubstitutions213() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSubstitutions213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions213()
}

func (c *current) onSubstitutions227() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonSubstitutions227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions227()
}

func (c *current) onSubstitutions229() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonSubstitutions229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions229()
}

func (c *current) onSubstitutions231() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonSubstitutions231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions231()
}

func (c *current) onSubstitutions233() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonSubstitutions233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions233()
}

func (c *current) onSubstitutions235() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonSubstitutions235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions235()
}

func (c *current) onSubstitutions237() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSubstitutions237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions237()
}

func (c *current) onSubstitutions243() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonSubstitutions243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions243()
}

func (c *current) onSubstitutions208(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions208(stack["element"])
}

func (c *current) onSubstitutions249() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions249()
}

func (c *current) onSubstitutions5(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonSubstitutions5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions5(stack["element"])
}

func (c *current) onSubstitutions1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSubstitutions1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onHeaderGroupElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement8()
}

func (c *current) onHeaderGroupElement17() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement17()
}

func (c *current) onHeaderGroupElement29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement29()
}

func (c *current) onHeaderGroupElement40() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement40()
}

func (c *current) onHeaderGroupElement47() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement47()
}

func (c *current) onHeaderGroupElement43(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement43(stack["ref"])
}

func (c *current) onHeaderGroupElement53() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonHeaderGroupElement53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement53()
}

func (c *current) onHeaderGroupElement60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement60()
}

func (c *current) onHeaderGroupElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement72()
}

func (c *current) onHeaderGroupElement74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement74()
}

func (c *current) onHeaderGroupElement67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement67(stack["start"])
}

func (c *current) onHeaderGroupElement56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonHeaderGroupElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement56(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement82()
}

func (c *current) onHeaderGroupElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement94()
}

func (c *current) onHeaderGroupElement96() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement96()
}

func (c *current) onHeaderGroupElement89(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement89(stack["start"])
}

func (c *current) onHeaderGroupElement78(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonHeaderGroupElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement78(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement104()
}

func (c *current) onHeaderGroupElement100(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement100(stack["name"])
}

func (c *current) onHeaderGroupElement114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement114()
}

func (c *current) onHeaderGroupElement110(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement110(stack["name"])
}

func (c *current) onHeaderGroupElement51(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement51(stack["element"])
}

func (c *current) onHeaderGroupElement120() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement120()
}

func (c *current) onHeaderGroupElement36(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonHeaderGroupElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement36(stack["elements"])
}

func (c *current) onHeaderGroupElement32(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonHeaderGroupElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement32(stack["id"])
}

func (c *current) onHeaderGroupElement124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement124()
}

func (c *current) onHeaderGroupElement26(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonHeaderGroupElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement26(stack["id"])
}

func (c *current) onHeaderGroupElement129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement129()
}

func (c *current) onHeaderGroupElement136() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonHeaderGroupElement136() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement136()
}

func (c *current) onHeaderGroupElement145() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement145()
}

func (c *current) onHeaderGroupElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement149()
}

func (c *current) onHeaderGroupElement155() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement155()
}

func (c *current) onHeaderGroupElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement164()
}

func (c *current) onHeaderGroupElement160(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement160(stack["name"])
}

func (c *current) onHeaderGroupElement174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement174()
}

func (c *current) onHeaderGroupElement170(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement170(stack["name"])
}

func (c *current) onHeaderGroupElement180() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement180()
}

func (c *current) onHeaderGroupElement141(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonHeaderGroupElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement141(stack["id"], stack["label"])
}

func (c *current) onHeaderGroupElement187() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement187()
}

func (c *current) onHeaderGroupElement183(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonHeaderGroupElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement183(stack["id"])
}

func (c *current) onHeaderGroupElement139() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement139()
}

func (c *current) onHeaderGroupElement191() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonHeaderGroupElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement191()
}

func (c *current) onHeaderGroupElement134(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement134(stack["element"])
}

func (c *current) onHeaderGroupElement196() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonHeaderGroupElement196() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement196()
}

func (c *current) onHeaderGroupElement203() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement203()
}

func (c *current) onHeaderGroupElement215() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement215()
}

func (c *current) onHeaderGroupElement217() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement217()
}

func (c *current) onHeaderGroupElement210(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement210(stack["start"])
}

func (c *current) onHeaderGroupElement199(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonHeaderGroupElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement199(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement225()
}

func (c *current) onHeaderGroupElement237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement237()
}

func (c *current) onHeaderGroupElement239() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement239()
}

func (c *current) onHeaderGroupElement232(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement232(stack["start"])
}

func (c *current) onHeaderGroupElement221(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonHeaderGroupElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement221(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement247()
}

func (c *current) onHeaderGroupElement243(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement243(stack["name"])
}

func (c *current) onHeaderGroupElement257() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement257()
}

func (c *current) onHeaderGroupElement253(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement253(stack["name"])
}

func (c *current) onHeaderGroupElement194(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement194(stack["element"])
}

func (c *current) onHeaderGroupElement267() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement267()
}

func (c *current) onHeaderGroupElement263(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement263(stack["ref"])
}

func (c *current) onHeaderGroupElement273() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonHeaderGroupElement273() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement273()
}

func (c *current) onHeaderGroupElement280() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonHeaderGroupElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement280()
}

func (c *current) onHeaderGroupElement282() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonHeaderGroupElement282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement282()
}

func (c *current) onHeaderGroupElement284() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonHeaderGroupElement284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement284()
}

func (c *current) onHeaderGroupElement286() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonHeaderGroupElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement286()
}

func (c *current) onHeaderGroupElement288() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonHeaderGroupElement288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement288()
}

func (c *current) onHeaderGroupElement276() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement276()
}

func (c *current) onHeaderGroupElement290() (interface{}, error) {
	return types.NewStringElement("\u2019")

}

func (p *parser) callonHeaderGroupElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement290()
}

func (c *current) onHeaderGroupElement292() (interface{}, error) {
	return types.NewStringElement("\u00a9")

}

func (p *parser) callonHeaderGroupElement292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement292()
}

func (c *current) onHeaderGroupElement294() (interface{}, error) {
	return types.NewStringElement("\u2122")

}

func (p *parser) callonHeaderGroupElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement294()
}

func (c *current) onHeaderGroupElement296() (interface{}, error) {
	return types.NewStringElement("\u00ae")

}

func (p *parser) callonHeaderGroupElement296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement296()
}

func (c *current) onHeaderGroupElement298() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")

}

func (p *parser) callonHeaderGroupElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement298()
}

func (c *current) onHeaderGroupElement300() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonHeaderGroupElement300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement300()
}

func (c *current) onHeaderGroupElement306() (interface{}, error) {
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `'`) + "\u2019") // convert quote

}

func (p *parser) callonHeaderGroupElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement306()
}

func (c *current) onHeaderGroupElement271(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement271(stack["element"])
}

func (c *current) onHeaderGroupElement316() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement316()
}

func (c *current) onHeaderGroupElement312(id interface{}) (interface{}, error) {
	//return types.NewStringElement("[[" + id.(string) + "]]")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement312() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement312(stack["id"])
}

func (c *current) onHeaderGroupElement324() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement324()
}

func (c *current) onHeaderGroupElement320(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonHeaderGroupElement320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement320(stack["id"])
}

func (c *current) onHeaderGroupElement329() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement329()
}

func (c *current) onHeaderGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement1(stack["element"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros), nil

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	//return types.NewStringElement("[[" + id.(string) + "]]")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro25() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro25()
}

func (c *current) onInlineMacro21(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonInlineMacro21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro21(stack["id"])
}

func (c *current) onInlineMacro37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro37()
}

func (c *current) onInlineMacro33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro33()
}

func (c *current) onInlineMacro44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro44()
}

func (c *current) onInlineMacro48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro48()
}

func (c *current) onInlineMacro55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro55()
}

func (c *current) onInlineMacro51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro51()
}

func (c *current) onInlineMacro41(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro41(stack["content"])
}

func (c *current) onInlineMacro62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro62()
}

func (c *current) onInlineMacro66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro66()
}

func (c *current) onInlineMacro73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro73()
}

func (c *current) onInlineMacro69() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro69()
}

func (c *current) onInlineMacro59(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro59(stack["content"])
}

func (c *current) onInlineMacro29(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro29(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs), nil

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote3() (bool, error) {
	return c.isSubstitutionEnabled(Quotes), nil

}

func (p *parser) callonQuote3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote3()
}

func (c *current) onQuote1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuote1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote1(stack["element"])
}

func (c *current) onTableColumnsAttribute15() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute15()
}

func (c *current) onTableColumnsAttribute12(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute12(stack["n"])
}

func (c *current) onTableColumnsAttribute25() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute25()
}

func (c *current) onTableColumnsAttribute27() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute27()
}

func (c *current) onTableColumnsAttribute29() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute29()
}

func (c *current) onTableColumnsAttribute34() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute34()
}

func (c *current) onTableColumnsAttribute36() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute36()
}

func (c *current) onTableColumnsAttribute38() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute38()
}

func (c *current) onTableColumnsAttribute43() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute43()
}

func (c *current) onTableColumnsAttribute49() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute49()
}

func (c *current) onTableColumnsAttribute53() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute53()
}

func (c *current) onTableColumnsAttribute58(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute58(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onFileLocation12() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12()
}

func (c *current) onFileLocation16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation16()
}

func (c *current) onFileLocation23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation23()
}

func (c *current) onFileLocation27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonFileLocation27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation27()
}

func (c *current) onFileLocation34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation34()
}

func (c *current) onFileLocation46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation46()
}

func (c *current) onFileLocation48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation48()
}

func (c *current) onFileLocation41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation41(stack["start"])
}

func (c *current) onFileLocation30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileLocation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation30(stack["name"], stack["start"])
}

func (c *current) onFileLocation56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation56()
}

func (c *current) onFileLocation68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation68()
}

func (c *current) onFileLocation70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation70()
}

func (c *current) onFileLocation63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation63(stack["start"])
}

func (c *current) onFileLocation52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileLocation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation52(stack["name"], stack["start"])
}

func (c *current) onFileLocation78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78()
}

func (c *current) onFileLocation74(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileLocation74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation74(stack["name"])
}

func (c *current) onFileLocation88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation88()
}

func (c *current) onFileLocation84(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileLocation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation84(stack["name"])
}

func (c *current) onFileLocation25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation25(stack["element"])
}

func (c *current) onFileLocation96() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonFileLocation96() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation96()
}

func (c *current) onFileLocation105() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation105()
}

func (c *current) onFileLocation109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation109()
}

func (c *current) onFileLocation115() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation115()
}

func (c *current) onFileLocation124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation124()
}

func (c *current) onFileLocation120(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileLocation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation120(stack["name"])
}

func (c *current) onFileLocation134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation134()
}

func (c *current) onFileLocation130(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileLocation130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation130(stack["name"])
}

func (c *current) onFileLocation140() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation140()
}

func (c *current) onFileLocation101(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileLocation101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation101(stack["id"], stack["label"])
}

func (c *current) onFileLocation147() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation147()
}

func (c *current) onFileLocation143(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileLocation143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation143(stack["id"])
}

func (c *current) onFileLocation99() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation99()
}

func (c *current) onFileLocation151() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileLocation151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation151()
}

func (c *current) onFileLocation94(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation94(stack["element"])
}

func (c *current) onFileLocation153() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation153()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation159() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation159()
}

func (c *current) onFileLocation155(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation155(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
