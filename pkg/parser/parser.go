// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 420},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 519},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 539},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 539},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 547},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 568},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 686},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 697},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 697},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 705},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 865},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 881},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 881},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 889},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 909},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1090},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1119},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1119},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1127},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1127},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1144},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1152},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1152},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1404},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1433},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1498},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1519},
						name: "SimpleRawParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1548},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1600},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1618},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1643},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1667},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1695},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1719},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1745},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1774},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1800},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1835},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1859},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1891},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1917},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 1954},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 1979},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2010},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 72, col: 1, offset: 2041},
			expr: &labeledExpr{
				pos:   position{line: 72, col: 47, offset: 2087},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 72, col: 54, offset: 2094},
					expr: &ruleRefExpr{
						pos:  position{line: 72, col: 55, offset: 2095},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 74, col: 1, offset: 2132},
			expr: &actionExpr{
				pos: position{line: 74, col: 38, offset: 2169},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 74, col: 38, offset: 2169},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 74, col: 38, offset: 2169},
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 39, offset: 2170},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 75, col: 5, offset: 2179},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 76, col: 9, offset: 2195},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 76, col: 9, offset: 2195},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2216},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2241},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2292},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2316},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2344},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2368},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2394},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2423},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2449},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2484},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2508},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2540},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2566},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2603},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 91, col: 11, offset: 2628},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 95, col: 1, offset: 2669},
			expr: &labeledExpr{
				pos:   position{line: 95, col: 23, offset: 2691},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 30, offset: 2698},
					expr: &ruleRefExpr{
						pos:  position{line: 95, col: 31, offset: 2699},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 97, col: 1, offset: 2720},
			expr: &actionExpr{
				pos: position{line: 97, col: 22, offset: 2741},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 97, col: 22, offset: 2741},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 97, col: 22, offset: 2741},
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 23, offset: 2742},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 98, col: 5, offset: 2751},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 98, col: 12, offset: 2758},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 98, col: 12, offset: 2758},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 98, col: 24, offset: 2770},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 105, col: 1, offset: 2919},
			expr: &ruleRefExpr{
				pos:  position{line: 105, col: 16, offset: 2934},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 107, col: 1, offset: 2952},
			expr: &actionExpr{
				pos: position{line: 107, col: 20, offset: 2971},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 107, col: 20, offset: 2971},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 107, col: 20, offset: 2971},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 41, offset: 2992},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 107, col: 49, offset: 3000},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 50, offset: 3001},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 75, offset: 3026},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 111, col: 1, offset: 3106},
			expr: &seqExpr{
				pos: position{line: 111, col: 26, offset: 3131},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 111, col: 26, offset: 3131},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 111, col: 32, offset: 3137},
						expr: &ruleRefExpr{
							pos:  position{line: 111, col: 32, offset: 3137},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 111, col: 39, offset: 3144},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 113, col: 1, offset: 3149},
			expr: &actionExpr{
				pos: position{line: 113, col: 27, offset: 3175},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 113, col: 27, offset: 3175},
					expr: &oneOrMoreExpr{
						pos: position{line: 113, col: 28, offset: 3176},
						expr: &seqExpr{
							pos: position{line: 113, col: 29, offset: 3177},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 113, col: 29, offset: 3177},
									expr: &ruleRefExpr{
										pos:  position{line: 113, col: 30, offset: 3178},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 113, col: 51, offset: 3199,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 120, col: 1, offset: 3365},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3383},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3383},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 120, col: 19, offset: 3383},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 120, col: 23, offset: 3387},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 23, offset: 3387},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 30, offset: 3394},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 37, offset: 3401},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 52, offset: 3416},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 120, col: 56, offset: 3420},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 56, offset: 3420},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 120, col: 74, offset: 3438},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 9, offset: 3450},
							expr: &choiceExpr{
								pos: position{line: 121, col: 10, offset: 3451},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 121, col: 10, offset: 3451},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 121, col: 10, offset: 3451},
												expr: &ruleRefExpr{
													pos:  position{line: 121, col: 10, offset: 3451},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 121, col: 17, offset: 3458},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 121, col: 37, offset: 3478},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 122, col: 9, offset: 3501},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 122, col: 18, offset: 3510},
								expr: &ruleRefExpr{
									pos:  position{line: 122, col: 18, offset: 3510},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 123, col: 9, offset: 3537},
							expr: &choiceExpr{
								pos: position{line: 123, col: 10, offset: 3538},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 123, col: 10, offset: 3538},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 123, col: 10, offset: 3538},
												expr: &ruleRefExpr{
													pos:  position{line: 123, col: 10, offset: 3538},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 123, col: 17, offset: 3545},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 123, col: 37, offset: 3565},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 124, col: 9, offset: 3588},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 124, col: 19, offset: 3598},
								expr: &ruleRefExpr{
									pos:  position{line: 124, col: 19, offset: 3598},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 128, col: 1, offset: 3699},
			expr: &choiceExpr{
				pos: position{line: 128, col: 20, offset: 3718},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 128, col: 20, offset: 3718},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 128, col: 48, offset: 3746},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 130, col: 1, offset: 3776},
			expr: &actionExpr{
				pos: position{line: 130, col: 30, offset: 3805},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 130, col: 30, offset: 3805},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 130, col: 30, offset: 3805},
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 30, offset: 3805},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 130, col: 37, offset: 3812},
							expr: &litMatcher{
								pos:        position{line: 130, col: 38, offset: 3813},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 130, col: 42, offset: 3817},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 130, col: 51, offset: 3826},
								expr: &ruleRefExpr{
									pos:  position{line: 130, col: 51, offset: 3826},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 68, offset: 3843},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 134, col: 1, offset: 3913},
			expr: &actionExpr{
				pos: position{line: 134, col: 33, offset: 3945},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 134, col: 33, offset: 3945},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 134, col: 33, offset: 3945},
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 33, offset: 3945},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 134, col: 40, offset: 3952},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 51, offset: 3963},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 134, col: 59, offset: 3971},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 134, col: 75, offset: 3987},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 138, col: 1, offset: 4066},
			expr: &actionExpr{
				pos: position{line: 138, col: 19, offset: 4084},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 138, col: 19, offset: 4084},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 19, offset: 4084},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 19, offset: 4084},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 138, col: 26, offset: 4091},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 36, offset: 4101},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 138, col: 56, offset: 4121},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 138, col: 62, offset: 4127},
								expr: &ruleRefExpr{
									pos:  position{line: 138, col: 63, offset: 4128},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 85, offset: 4150},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 85, offset: 4150},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 138, col: 92, offset: 4157},
							expr: &litMatcher{
								pos:        position{line: 138, col: 92, offset: 4157},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 97, offset: 4162},
							expr: &ruleRefExpr{
								pos:  position{line: 138, col: 97, offset: 4162},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 143, col: 1, offset: 4307},
			expr: &actionExpr{
				pos: position{line: 143, col: 23, offset: 4329},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 143, col: 23, offset: 4329},
					expr: &charClassMatcher{
						pos:        position{line: 143, col: 23, offset: 4329},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 147, col: 1, offset: 4376},
			expr: &actionExpr{
				pos: position{line: 147, col: 24, offset: 4399},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 147, col: 24, offset: 4399},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 147, col: 24, offset: 4399},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 147, col: 28, offset: 4403},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 147, col: 35, offset: 4410},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 147, col: 36, offset: 4411},
									expr: &charClassMatcher{
										pos:        position{line: 147, col: 36, offset: 4411},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 149, col: 4, offset: 4458},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 155, col: 1, offset: 4619},
			expr: &actionExpr{
				pos: position{line: 155, col: 21, offset: 4639},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 155, col: 21, offset: 4639},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 155, col: 21, offset: 4639},
							expr: &ruleRefExpr{
								pos:  position{line: 155, col: 21, offset: 4639},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 155, col: 28, offset: 4646},
							expr: &litMatcher{
								pos:        position{line: 155, col: 29, offset: 4647},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 155, col: 33, offset: 4651},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 156, col: 9, offset: 4670},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 156, col: 10, offset: 4671},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 156, col: 10, offset: 4671},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 156, col: 10, offset: 4671},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 156, col: 21, offset: 4682},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 156, col: 45, offset: 4706},
													expr: &litMatcher{
														pos:        position{line: 156, col: 45, offset: 4706},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 156, col: 50, offset: 4711},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 156, col: 58, offset: 4719},
														expr: &ruleRefExpr{
															pos:  position{line: 156, col: 59, offset: 4720},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 156, col: 82, offset: 4743},
													expr: &litMatcher{
														pos:        position{line: 156, col: 82, offset: 4743},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 156, col: 87, offset: 4748},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 156, col: 97, offset: 4758},
														expr: &ruleRefExpr{
															pos:  position{line: 156, col: 98, offset: 4759},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 158, col: 15, offset: 4876},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 158, col: 15, offset: 4876},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 158, col: 15, offset: 4876},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 158, col: 24, offset: 4885},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 158, col: 46, offset: 4907},
													expr: &litMatcher{
														pos:        position{line: 158, col: 46, offset: 4907},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 158, col: 51, offset: 4912},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 158, col: 61, offset: 4922},
														expr: &ruleRefExpr{
															pos:  position{line: 158, col: 62, offset: 4923},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 160, col: 13, offset: 5032},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 165, col: 1, offset: 5162},
			expr: &choiceExpr{
				pos: position{line: 165, col: 27, offset: 5188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 165, col: 27, offset: 5188},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 165, col: 27, offset: 5188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 165, col: 27, offset: 5188},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 165, col: 32, offset: 5193},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 165, col: 39, offset: 5200},
									expr: &charClassMatcher{
										pos:        position{line: 165, col: 39, offset: 5200},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 167, col: 5, offset: 5248},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 167, col: 5, offset: 5248},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 167, col: 5, offset: 5248},
									expr: &litMatcher{
										pos:        position{line: 167, col: 5, offset: 5248},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 11, offset: 5254},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 167, col: 18, offset: 5261},
									expr: &charClassMatcher{
										pos:        position{line: 167, col: 18, offset: 5261},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 167, col: 29, offset: 5272},
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 29, offset: 5272},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 167, col: 36, offset: 5279},
									expr: &litMatcher{
										pos:        position{line: 167, col: 37, offset: 5280},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 171, col: 1, offset: 5320},
			expr: &actionExpr{
				pos: position{line: 171, col: 25, offset: 5344},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 171, col: 25, offset: 5344},
					expr: &charClassMatcher{
						pos:        position{line: 171, col: 25, offset: 5344},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 175, col: 1, offset: 5390},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5416},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5416},
					expr: &charClassMatcher{
						pos:        position{line: 175, col: 27, offset: 5416},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 182, col: 1, offset: 5569},
			expr: &actionExpr{
				pos: position{line: 182, col: 25, offset: 5593},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 182, col: 25, offset: 5593},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 182, col: 25, offset: 5593},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 29, offset: 5597},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 182, col: 35, offset: 5603},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 182, col: 50, offset: 5618},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 9, offset: 5631},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 183, col: 15, offset: 5637},
								expr: &actionExpr{
									pos: position{line: 183, col: 16, offset: 5638},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 183, col: 17, offset: 5639},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 183, col: 17, offset: 5639},
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 17, offset: 5639},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 183, col: 24, offset: 5646},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 31, offset: 5653},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 185, col: 13, offset: 5727},
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 13, offset: 5727},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 185, col: 20, offset: 5734},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 192, col: 1, offset: 5974},
			expr: &actionExpr{
				pos: position{line: 192, col: 18, offset: 5991},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 192, col: 18, offset: 5991},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 192, col: 18, offset: 5991},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 192, col: 28, offset: 6001},
							expr: &charClassMatcher{
								pos:        position{line: 192, col: 29, offset: 6002},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 196, col: 1, offset: 6050},
			expr: &actionExpr{
				pos: position{line: 196, col: 30, offset: 6079},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 196, col: 30, offset: 6079},
					expr: &charClassMatcher{
						pos:        position{line: 196, col: 30, offset: 6079},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 200, col: 1, offset: 6124},
			expr: &choiceExpr{
				pos: position{line: 200, col: 19, offset: 6142},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 200, col: 19, offset: 6142},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 200, col: 19, offset: 6142},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 200, col: 19, offset: 6142},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 200, col: 24, offset: 6147},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 200, col: 30, offset: 6153},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 200, col: 45, offset: 6168},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 200, col: 49, offset: 6172},
									expr: &ruleRefExpr{
										pos:  position{line: 200, col: 49, offset: 6172},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 200, col: 56, offset: 6179},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 202, col: 5, offset: 6239},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 202, col: 5, offset: 6239},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 202, col: 5, offset: 6239},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 202, col: 9, offset: 6243},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 15, offset: 6249},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 202, col: 30, offset: 6264},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 202, col: 35, offset: 6269},
									expr: &ruleRefExpr{
										pos:  position{line: 202, col: 35, offset: 6269},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 202, col: 42, offset: 6276},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 206, col: 1, offset: 6335},
			expr: &choiceExpr{
				pos: position{line: 206, col: 26, offset: 6360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 26, offset: 6360},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 39, offset: 6373},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 208, col: 1, offset: 6382},
			expr: &actionExpr{
				pos: position{line: 208, col: 12, offset: 6393},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 208, col: 12, offset: 6393},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 208, col: 12, offset: 6393},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 16, offset: 6397},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 21, offset: 6402},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 208, col: 35, offset: 6416},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 212, col: 1, offset: 6482},
			expr: &choiceExpr{
				pos: position{line: 212, col: 15, offset: 6496},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 212, col: 15, offset: 6496},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 29, offset: 6510},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 43, offset: 6524},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 61, offset: 6542},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 80, offset: 6561},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 212, col: 98, offset: 6579},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 214, col: 1, offset: 6597},
			expr: &actionExpr{
				pos: position{line: 214, col: 16, offset: 6612},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 214, col: 16, offset: 6612},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 214, col: 16, offset: 6612},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 28, offset: 6624},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 33, offset: 6629},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 214, col: 47, offset: 6643},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 218, col: 1, offset: 6719},
			expr: &actionExpr{
				pos: position{line: 218, col: 16, offset: 6734},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 218, col: 16, offset: 6734},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 16, offset: 6734},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 29, offset: 6747},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 34, offset: 6752},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 48, offset: 6766},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 222, col: 1, offset: 6841},
			expr: &actionExpr{
				pos: position{line: 222, col: 20, offset: 6860},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 222, col: 20, offset: 6860},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 222, col: 20, offset: 6860},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 32, offset: 6872},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 37, offset: 6877},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 51, offset: 6891},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 222, col: 55, offset: 6895},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 222, col: 61, offset: 6901},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 70, offset: 6910},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 226, col: 1, offset: 6988},
			expr: &actionExpr{
				pos: position{line: 226, col: 21, offset: 7008},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 226, col: 21, offset: 7008},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 21, offset: 7008},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 34, offset: 7021},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 39, offset: 7026},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 53, offset: 7040},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 57, offset: 7044},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 226, col: 63, offset: 7050},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 72, offset: 7059},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 230, col: 1, offset: 7136},
			expr: &actionExpr{
				pos: position{line: 230, col: 20, offset: 7155},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 230, col: 20, offset: 7155},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 230, col: 20, offset: 7155},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 32, offset: 7167},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 37, offset: 7172},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 230, col: 51, offset: 7186},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 55, offset: 7190},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 230, col: 60, offset: 7195},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 230, col: 60, offset: 7195},
									expr: &charClassMatcher{
										pos:        position{line: 230, col: 60, offset: 7195},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 230, col: 108, offset: 7243},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 234, col: 1, offset: 7325},
			expr: &actionExpr{
				pos: position{line: 234, col: 21, offset: 7345},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 234, col: 21, offset: 7345},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 234, col: 21, offset: 7345},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 34, offset: 7358},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 39, offset: 7363},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 234, col: 53, offset: 7377},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 57, offset: 7381},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 234, col: 62, offset: 7386},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 234, col: 62, offset: 7386},
									expr: &charClassMatcher{
										pos:        position{line: 234, col: 62, offset: 7386},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 234, col: 110, offset: 7434},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 238, col: 1, offset: 7515},
			expr: &actionExpr{
				pos: position{line: 238, col: 15, offset: 7529},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 238, col: 15, offset: 7529},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 238, col: 15, offset: 7529},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 238, col: 21, offset: 7535},
								expr: &ruleRefExpr{
									pos:  position{line: 238, col: 22, offset: 7536},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 238, col: 41, offset: 7555},
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 41, offset: 7555},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 242, col: 1, offset: 7625},
			expr: &actionExpr{
				pos: position{line: 242, col: 21, offset: 7645},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 242, col: 21, offset: 7645},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 242, col: 21, offset: 7645},
							expr: &choiceExpr{
								pos: position{line: 242, col: 23, offset: 7647},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 242, col: 23, offset: 7647},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 242, col: 29, offset: 7653},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 243, col: 5, offset: 7730},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 243, col: 11, offset: 7736},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 243, col: 11, offset: 7736},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 9, offset: 7757},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 245, col: 9, offset: 7781},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 9, offset: 7818},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 247, col: 9, offset: 7846},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 248, col: 9, offset: 7874},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 249, col: 9, offset: 7901},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 250, col: 9, offset: 7928},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 251, col: 9, offset: 7965},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 252, col: 9, offset: 8001},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 256, col: 1, offset: 8104},
			expr: &actionExpr{
				pos: position{line: 256, col: 14, offset: 8117},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 256, col: 14, offset: 8117},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 256, col: 14, offset: 8117},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 256, col: 19, offset: 8122},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 23, offset: 8126},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 256, col: 27, offset: 8130},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 256, col: 32, offset: 8135},
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 32, offset: 8135},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 39, offset: 8142},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 260, col: 1, offset: 8194},
			expr: &actionExpr{
				pos: position{line: 260, col: 20, offset: 8213},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 260, col: 20, offset: 8213},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 20, offset: 8213},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 25, offset: 8218},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 29, offset: 8222},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 33, offset: 8226},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 38, offset: 8231},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 38, offset: 8231},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 266, col: 1, offset: 8508},
			expr: &actionExpr{
				pos: position{line: 266, col: 17, offset: 8524},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 266, col: 17, offset: 8524},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 17, offset: 8524},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 21, offset: 8528},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 28, offset: 8535},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 49, offset: 8556},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 49, offset: 8556},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 56, offset: 8563},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 270, col: 1, offset: 8621},
			expr: &actionExpr{
				pos: position{line: 270, col: 24, offset: 8644},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 270, col: 24, offset: 8644},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 270, col: 24, offset: 8644},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 32, offset: 8652},
							expr: &charClassMatcher{
								pos:        position{line: 270, col: 32, offset: 8652},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 276, col: 1, offset: 8906},
			expr: &actionExpr{
				pos: position{line: 276, col: 31, offset: 8936},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 276, col: 31, offset: 8936},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 31, offset: 8936},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 35, offset: 8940},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 276, col: 42, offset: 8947},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 276, col: 42, offset: 8947},
										expr: &ruleRefExpr{
											pos:  position{line: 276, col: 42, offset: 8947},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 276, col: 57, offset: 8962},
										expr: &ruleRefExpr{
											pos:  position{line: 276, col: 57, offset: 8962},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 69, offset: 8974},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 73, offset: 8978},
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 73, offset: 8978},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 80, offset: 8985},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 280, col: 1, offset: 9039},
			expr: &choiceExpr{
				pos: position{line: 280, col: 15, offset: 9053},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 280, col: 15, offset: 9053},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 31, offset: 9069},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 280, col: 46, offset: 9084},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 284, col: 1, offset: 9312},
			expr: &actionExpr{
				pos: position{line: 284, col: 18, offset: 9329},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 284, col: 18, offset: 9329},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 18, offset: 9329},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 284, col: 22, offset: 9333},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 284, col: 29, offset: 9340},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 284, col: 29, offset: 9340},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 29, offset: 9340},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 284, col: 45, offset: 9356},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 45, offset: 9356},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 284, col: 60, offset: 9371},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 60, offset: 9371},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 284, col: 82, offset: 9393},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 82, offset: 9393},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 284, col: 104, offset: 9415},
										expr: &ruleRefExpr{
											pos:  position{line: 284, col: 104, offset: 9415},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 116, offset: 9427},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 120, offset: 9431},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 288, col: 1, offset: 9485},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9503},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 288, col: 19, offset: 9503},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 288, col: 25, offset: 9509},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 292, col: 1, offset: 9579},
			expr: &actionExpr{
				pos: position{line: 292, col: 25, offset: 9603},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 292, col: 25, offset: 9603},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 25, offset: 9603},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 25, offset: 9603},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 292, col: 32, offset: 9610},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 292, col: 36, offset: 9614},
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 36, offset: 9614},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 292, col: 43, offset: 9621},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 292, col: 49, offset: 9627},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 49, offset: 9627},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 299, col: 1, offset: 9777},
			expr: &actionExpr{
				pos: position{line: 299, col: 25, offset: 9801},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 299, col: 25, offset: 9801},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 25, offset: 9801},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 25, offset: 9801},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 299, col: 32, offset: 9808},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 36, offset: 9812},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 36, offset: 9812},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 299, col: 43, offset: 9819},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 299, col: 49, offset: 9825},
								expr: &ruleRefExpr{
									pos:  position{line: 299, col: 49, offset: 9825},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 306, col: 1, offset: 9975},
			expr: &actionExpr{
				pos: position{line: 306, col: 21, offset: 9995},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 306, col: 21, offset: 9995},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 306, col: 21, offset: 9995},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 33, offset: 10007},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 33, offset: 10007},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 40, offset: 10014},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 310, col: 1, offset: 10066},
			expr: &actionExpr{
				pos: position{line: 310, col: 30, offset: 10095},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 310, col: 30, offset: 10095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 310, col: 30, offset: 10095},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 310, col: 39, offset: 10104},
							expr: &ruleRefExpr{
								pos:  position{line: 310, col: 39, offset: 10104},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 310, col: 46, offset: 10111},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 315, col: 1, offset: 10252},
			expr: &actionExpr{
				pos: position{line: 315, col: 30, offset: 10281},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 315, col: 30, offset: 10281},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 30, offset: 10281},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 34, offset: 10285},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 37, offset: 10288},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 53, offset: 10304},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 315, col: 57, offset: 10308},
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 57, offset: 10308},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 64, offset: 10315},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 320, col: 1, offset: 10470},
			expr: &actionExpr{
				pos: position{line: 320, col: 21, offset: 10490},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 320, col: 21, offset: 10490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 320, col: 21, offset: 10490},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10505},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 321, col: 14, offset: 10514},
								expr: &actionExpr{
									pos: position{line: 321, col: 15, offset: 10515},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 321, col: 15, offset: 10515},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 321, col: 15, offset: 10515},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 321, col: 19, offset: 10519},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 321, col: 24, offset: 10524},
													expr: &ruleRefExpr{
														pos:  position{line: 321, col: 25, offset: 10525},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 10580},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 322, col: 12, offset: 10587},
								expr: &actionExpr{
									pos: position{line: 322, col: 13, offset: 10588},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 322, col: 13, offset: 10588},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 322, col: 13, offset: 10588},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 322, col: 17, offset: 10592},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 322, col: 22, offset: 10597},
													expr: &ruleRefExpr{
														pos:  position{line: 322, col: 23, offset: 10598},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 5, offset: 10645},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 323, col: 9, offset: 10649},
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 9, offset: 10649},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 16, offset: 10656},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 328, col: 1, offset: 10807},
			expr: &actionExpr{
				pos: position{line: 328, col: 19, offset: 10825},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 328, col: 19, offset: 10825},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 328, col: 19, offset: 10825},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 328, col: 23, offset: 10829},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 328, col: 34, offset: 10840},
								expr: &ruleRefExpr{
									pos:  position{line: 328, col: 35, offset: 10841},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 54, offset: 10860},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 328, col: 58, offset: 10864},
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 58, offset: 10864},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 328, col: 65, offset: 10871},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 332, col: 1, offset: 10943},
			expr: &choiceExpr{
				pos: position{line: 332, col: 21, offset: 10963},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 332, col: 21, offset: 10963},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 332, col: 49, offset: 10991},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 334, col: 1, offset: 11021},
			expr: &actionExpr{
				pos: position{line: 334, col: 30, offset: 11050},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 334, col: 30, offset: 11050},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 334, col: 30, offset: 11050},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 35, offset: 11055},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 334, col: 49, offset: 11069},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 334, col: 53, offset: 11073},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 334, col: 59, offset: 11079},
								expr: &ruleRefExpr{
									pos:  position{line: 334, col: 60, offset: 11080},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 334, col: 77, offset: 11097},
							expr: &litMatcher{
								pos:        position{line: 334, col: 77, offset: 11097},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 334, col: 82, offset: 11102},
							expr: &ruleRefExpr{
								pos:  position{line: 334, col: 82, offset: 11102},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 338, col: 1, offset: 11201},
			expr: &actionExpr{
				pos: position{line: 338, col: 33, offset: 11233},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 338, col: 33, offset: 11233},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 33, offset: 11233},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 38, offset: 11238},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 338, col: 52, offset: 11252},
							expr: &litMatcher{
								pos:        position{line: 338, col: 52, offset: 11252},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 338, col: 57, offset: 11257},
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 57, offset: 11257},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 342, col: 1, offset: 11345},
			expr: &actionExpr{
				pos: position{line: 342, col: 17, offset: 11361},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 342, col: 17, offset: 11361},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 342, col: 17, offset: 11361},
							expr: &litMatcher{
								pos:        position{line: 342, col: 18, offset: 11362},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 342, col: 26, offset: 11370},
							expr: &litMatcher{
								pos:        position{line: 342, col: 27, offset: 11371},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 342, col: 35, offset: 11379},
							expr: &litMatcher{
								pos:        position{line: 342, col: 36, offset: 11380},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 342, col: 46, offset: 11390},
							expr: &oneOrMoreExpr{
								pos: position{line: 342, col: 48, offset: 11392},
								expr: &ruleRefExpr{
									pos:  position{line: 342, col: 48, offset: 11392},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 56, offset: 11400},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 342, col: 61, offset: 11405},
								expr: &charClassMatcher{
									pos:        position{line: 342, col: 61, offset: 11405},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 75, offset: 11419},
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11419},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 346, col: 1, offset: 11462},
			expr: &actionExpr{
				pos: position{line: 346, col: 19, offset: 11480},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 346, col: 19, offset: 11480},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 346, col: 26, offset: 11487},
						expr: &charClassMatcher{
							pos:        position{line: 346, col: 26, offset: 11487},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 350, col: 1, offset: 11538},
			expr: &actionExpr{
				pos: position{line: 350, col: 29, offset: 11566},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 350, col: 29, offset: 11566},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 350, col: 29, offset: 11566},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 350, col: 36, offset: 11573},
								expr: &charClassMatcher{
									pos:        position{line: 350, col: 36, offset: 11573},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 350, col: 50, offset: 11587},
							expr: &litMatcher{
								pos:        position{line: 350, col: 51, offset: 11588},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 354, col: 1, offset: 11754},
			expr: &actionExpr{
				pos: position{line: 354, col: 20, offset: 11773},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 20, offset: 11773},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 20, offset: 11773},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 354, col: 29, offset: 11782},
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 29, offset: 11782},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 354, col: 36, offset: 11789},
							expr: &litMatcher{
								pos:        position{line: 354, col: 36, offset: 11789},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 41, offset: 11794},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 48, offset: 11801},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 49, offset: 11802},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 354, col: 66, offset: 11819},
							expr: &litMatcher{
								pos:        position{line: 354, col: 66, offset: 11819},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 354, col: 71, offset: 11824},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 354, col: 77, offset: 11830},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 78, offset: 11831},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 95, offset: 11848},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 354, col: 99, offset: 11852},
							expr: &ruleRefExpr{
								pos:  position{line: 354, col: 99, offset: 11852},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 354, col: 106, offset: 11859},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 358, col: 1, offset: 11928},
			expr: &actionExpr{
				pos: position{line: 358, col: 20, offset: 11947},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 358, col: 20, offset: 11947},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 20, offset: 11947},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 358, col: 29, offset: 11956},
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 29, offset: 11956},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 358, col: 36, offset: 11963},
							expr: &litMatcher{
								pos:        position{line: 358, col: 36, offset: 11963},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 41, offset: 11968},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 358, col: 48, offset: 11975},
								expr: &ruleRefExpr{
									pos:  position{line: 358, col: 49, offset: 11976},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 358, col: 66, offset: 11993},
							expr: &litMatcher{
								pos:        position{line: 358, col: 66, offset: 11993},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 358, col: 71, offset: 11998},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 358, col: 77, offset: 12004},
								expr: &ruleRefExpr{
									pos:  position{line: 358, col: 78, offset: 12005},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 358, col: 95, offset: 12022},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 358, col: 99, offset: 12026},
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 99, offset: 12026},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 358, col: 106, offset: 12033},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 362, col: 1, offset: 12120},
			expr: &actionExpr{
				pos: position{line: 362, col: 19, offset: 12138},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 362, col: 20, offset: 12139},
					expr: &charClassMatcher{
						pos:        position{line: 362, col: 20, offset: 12139},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 366, col: 1, offset: 12188},
			expr: &actionExpr{
				pos: position{line: 366, col: 20, offset: 12207},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 366, col: 20, offset: 12207},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 366, col: 20, offset: 12207},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 24, offset: 12211},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 366, col: 31, offset: 12218},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 366, col: 31, offset: 12218},
										expr: &ruleRefExpr{
											pos:  position{line: 366, col: 31, offset: 12218},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 366, col: 51, offset: 12238},
										expr: &ruleRefExpr{
											pos:  position{line: 366, col: 51, offset: 12238},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 366, col: 66, offset: 12253},
										expr: &ruleRefExpr{
											pos:  position{line: 366, col: 66, offset: 12253},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 366, col: 78, offset: 12265},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 370, col: 1, offset: 12319},
			expr: &actionExpr{
				pos: position{line: 370, col: 23, offset: 12341},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 370, col: 23, offset: 12341},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 370, col: 28, offset: 12346},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 374, col: 1, offset: 12414},
			expr: &actionExpr{
				pos: position{line: 374, col: 25, offset: 12438},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 374, col: 25, offset: 12438},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 374, col: 25, offset: 12438},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 374, col: 36, offset: 12449},
								expr: &ruleRefExpr{
									pos:  position{line: 374, col: 37, offset: 12450},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 374, col: 56, offset: 12469},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 56, offset: 12469},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 67, offset: 12480},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 378, col: 1, offset: 12588},
			expr: &choiceExpr{
				pos: position{line: 378, col: 18, offset: 12605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 378, col: 18, offset: 12605},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 36, offset: 12623},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 378, col: 58, offset: 12645},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 380, col: 1, offset: 12664},
			expr: &actionExpr{
				pos: position{line: 380, col: 24, offset: 12687},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 380, col: 24, offset: 12687},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 380, col: 24, offset: 12687},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 28, offset: 12691},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 35, offset: 12698},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 380, col: 50, offset: 12713},
							expr: &charClassMatcher{
								pos:        position{line: 380, col: 51, offset: 12714},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 384, col: 1, offset: 12783},
			expr: &actionExpr{
				pos: position{line: 384, col: 20, offset: 12802},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 384, col: 20, offset: 12802},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 384, col: 20, offset: 12802},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 384, col: 24, offset: 12806},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 384, col: 27, offset: 12809},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 384, col: 42, offset: 12824},
							expr: &charClassMatcher{
								pos:        position{line: 384, col: 43, offset: 12825},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 388, col: 1, offset: 12886},
			expr: &actionExpr{
				pos: position{line: 388, col: 22, offset: 12907},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 388, col: 22, offset: 12907},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 388, col: 22, offset: 12907},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 388, col: 26, offset: 12911},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 31, offset: 12916},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 388, col: 46, offset: 12931},
							expr: &charClassMatcher{
								pos:        position{line: 388, col: 47, offset: 12932},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 393, col: 1, offset: 13041},
			expr: &actionExpr{
				pos: position{line: 393, col: 20, offset: 13060},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 393, col: 20, offset: 13060},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 393, col: 20, offset: 13060},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 26, offset: 13066},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 393, col: 41, offset: 13081},
							expr: &charClassMatcher{
								pos:        position{line: 393, col: 42, offset: 13082},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 397, col: 1, offset: 13127},
			expr: &choiceExpr{
				pos: position{line: 397, col: 14, offset: 13140},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 397, col: 14, offset: 13140},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 397, col: 26, offset: 13152},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 397, col: 38, offset: 13164},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 397, col: 50, offset: 13176},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 399, col: 1, offset: 13190},
			expr: &actionExpr{
				pos: position{line: 399, col: 15, offset: 13204},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 399, col: 15, offset: 13204},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 399, col: 21, offset: 13210},
						expr: &ruleRefExpr{
							pos:  position{line: 399, col: 21, offset: 13210},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 403, col: 1, offset: 13275},
			expr: &actionExpr{
				pos: position{line: 403, col: 18, offset: 13292},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 403, col: 18, offset: 13292},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 403, col: 18, offset: 13292},
							expr: &litMatcher{
								pos:        position{line: 403, col: 18, offset: 13292},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 403, col: 23, offset: 13297},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 23, offset: 13297},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13304},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 32, offset: 13306},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 403, col: 45, offset: 13319},
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 45, offset: 13319},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 52, offset: 13326},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 403, col: 56, offset: 13330},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 403, col: 59, offset: 13333},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 403, col: 59, offset: 13333},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 71, offset: 13345},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 83, offset: 13357},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 408, col: 1, offset: 13546},
			expr: &actionExpr{
				pos: position{line: 408, col: 14, offset: 13559},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 408, col: 14, offset: 13559},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 408, col: 14, offset: 13559},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 14, offset: 13559},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 408, col: 21, offset: 13566},
							expr: &charClassMatcher{
								pos:        position{line: 408, col: 22, offset: 13567},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 414, col: 1, offset: 13703},
			expr: &actionExpr{
				pos: position{line: 414, col: 14, offset: 13716},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 414, col: 14, offset: 13716},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 414, col: 14, offset: 13716},
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 14, offset: 13716},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 21, offset: 13723},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 414, col: 25, offset: 13727},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 29, offset: 13731},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 414, col: 41, offset: 13743},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 414, col: 45, offset: 13747},
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 45, offset: 13747},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 414, col: 52, offset: 13754},
							expr: &charClassMatcher{
								pos:        position{line: 414, col: 53, offset: 13755},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 416, col: 1, offset: 13782},
			expr: &actionExpr{
				pos: position{line: 416, col: 16, offset: 13797},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 416, col: 16, offset: 13797},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 416, col: 20, offset: 13801},
						expr: &choiceExpr{
							pos: position{line: 416, col: 22, offset: 13803},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 416, col: 22, offset: 13803},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 416, col: 37, offset: 13818},
									expr: &charClassMatcher{
										pos:        position{line: 416, col: 37, offset: 13818},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 416, col: 51, offset: 13832},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 418, col: 1, offset: 13872},
			expr: &actionExpr{
				pos: position{line: 418, col: 17, offset: 13888},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 418, col: 17, offset: 13888},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 421, col: 1, offset: 13948},
			expr: &actionExpr{
				pos: position{line: 421, col: 14, offset: 13961},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 421, col: 14, offset: 13961},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 421, col: 14, offset: 13961},
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 14, offset: 13961},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 421, col: 21, offset: 13968},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 25, offset: 13972},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 29, offset: 13976},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 421, col: 41, offset: 13988},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 421, col: 45, offset: 13992},
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 45, offset: 13992},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 423, col: 1, offset: 14020},
			expr: &actionExpr{
				pos: position{line: 423, col: 16, offset: 14035},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 423, col: 16, offset: 14035},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 423, col: 20, offset: 14039},
						expr: &choiceExpr{
							pos: position{line: 423, col: 22, offset: 14041},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 423, col: 22, offset: 14041},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 423, col: 37, offset: 14056},
									expr: &charClassMatcher{
										pos:        position{line: 423, col: 37, offset: 14056},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 423, col: 51, offset: 14070},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 425, col: 1, offset: 14110},
			expr: &actionExpr{
				pos: position{line: 425, col: 17, offset: 14126},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 425, col: 17, offset: 14126},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 428, col: 1, offset: 14217},
			expr: &actionExpr{
				pos: position{line: 428, col: 17, offset: 14233},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 428, col: 17, offset: 14233},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 428, col: 17, offset: 14233},
							expr: &charClassMatcher{
								pos:        position{line: 428, col: 17, offset: 14233},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 428, col: 30, offset: 14246},
							expr: &charClassMatcher{
								pos:        position{line: 428, col: 31, offset: 14247},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 431, col: 1, offset: 14358},
			expr: &actionExpr{
				pos: position{line: 431, col: 19, offset: 14376},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 431, col: 19, offset: 14376},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 431, col: 19, offset: 14376},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 19, offset: 14376},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 431, col: 31, offset: 14388},
							expr: &charClassMatcher{
								pos:        position{line: 431, col: 32, offset: 14389},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 433, col: 1, offset: 14446},
			expr: &choiceExpr{
				pos: position{line: 433, col: 19, offset: 14464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 433, col: 19, offset: 14464},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 433, col: 41, offset: 14486},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 433, col: 65, offset: 14510},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 437, col: 1, offset: 14708},
			expr: &actionExpr{
				pos: position{line: 437, col: 24, offset: 14731},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 437, col: 24, offset: 14731},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 437, col: 24, offset: 14731},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 45, offset: 14752},
							expr: &choiceExpr{
								pos: position{line: 437, col: 46, offset: 14753},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 437, col: 46, offset: 14753},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 437, col: 68, offset: 14775},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 437, col: 68, offset: 14775},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 437, col: 73, offset: 14780},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 441, col: 1, offset: 14838},
			expr: &actionExpr{
				pos: position{line: 441, col: 13, offset: 14850},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 441, col: 13, offset: 14850},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 441, col: 13, offset: 14850},
							expr: &seqExpr{
								pos: position{line: 441, col: 15, offset: 14852},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 441, col: 15, offset: 14852},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 441, col: 19, offset: 14856},
										expr: &ruleRefExpr{
											pos:  position{line: 441, col: 19, offset: 14856},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 29, offset: 14866},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 33, offset: 14870},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 46, offset: 14883},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 46, offset: 14883},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 441, col: 53, offset: 14890},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 57, offset: 14894},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 57, offset: 14894},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 64, offset: 14901},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 70, offset: 14907},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 85, offset: 14922},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 85, offset: 14922},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 446, col: 1, offset: 15112},
			expr: &actionExpr{
				pos: position{line: 446, col: 17, offset: 15128},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 446, col: 17, offset: 15128},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 446, col: 17, offset: 15128},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 446, col: 26, offset: 15137},
							expr: &charClassMatcher{
								pos:        position{line: 446, col: 26, offset: 15137},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 450, col: 1, offset: 15185},
			expr: &choiceExpr{
				pos: position{line: 450, col: 19, offset: 15203},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 450, col: 19, offset: 15203},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 35, offset: 15219},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 59, offset: 15243},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 450, col: 83, offset: 15267},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 452, col: 1, offset: 15283},
			expr: &actionExpr{
				pos: position{line: 452, col: 19, offset: 15301},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 452, col: 19, offset: 15301},
					expr: &charClassMatcher{
						pos:        position{line: 452, col: 19, offset: 15301},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 456, col: 1, offset: 15354},
			expr: &actionExpr{
				pos: position{line: 456, col: 26, offset: 15379},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 456, col: 26, offset: 15379},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 456, col: 26, offset: 15379},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 456, col: 30, offset: 15383},
							expr: &charClassMatcher{
								pos:        position{line: 456, col: 30, offset: 15383},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 456, col: 40, offset: 15393},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 460, col: 1, offset: 15450},
			expr: &actionExpr{
				pos: position{line: 460, col: 26, offset: 15475},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 460, col: 26, offset: 15475},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 460, col: 26, offset: 15475},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 460, col: 31, offset: 15480},
							expr: &charClassMatcher{
								pos:        position{line: 460, col: 31, offset: 15480},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 460, col: 41, offset: 15490},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 466, col: 1, offset: 15745},
			expr: &actionExpr{
				pos: position{line: 466, col: 18, offset: 15762},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 466, col: 18, offset: 15762},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 474, col: 1, offset: 15968},
			expr: &choiceExpr{
				pos: position{line: 474, col: 17, offset: 15984},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 474, col: 17, offset: 15984},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 474, col: 38, offset: 16005},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 476, col: 1, offset: 16025},
			expr: &actionExpr{
				pos: position{line: 476, col: 23, offset: 16047},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 476, col: 23, offset: 16047},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 476, col: 23, offset: 16047},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 476, col: 46, offset: 16070},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 55, offset: 16079},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 476, col: 82, offset: 16106},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 480, col: 1, offset: 16210},
			expr: &actionExpr{
				pos: position{line: 480, col: 31, offset: 16240},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 480, col: 31, offset: 16240},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 480, col: 41, offset: 16250},
						expr: &ruleRefExpr{
							pos:  position{line: 480, col: 41, offset: 16250},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 484, col: 1, offset: 16328},
			expr: &seqExpr{
				pos: position{line: 484, col: 27, offset: 16354},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 484, col: 27, offset: 16354},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 484, col: 32, offset: 16359},
						expr: &charClassMatcher{
							pos:        position{line: 484, col: 33, offset: 16360},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 486, col: 1, offset: 16371},
			expr: &litMatcher{
				pos:        position{line: 486, col: 25, offset: 16395},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 489, col: 1, offset: 16483},
			expr: &actionExpr{
				pos: position{line: 489, col: 30, offset: 16512},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 489, col: 30, offset: 16512},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 490, col: 9, offset: 16530},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 490, col: 9, offset: 16530},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 490, col: 9, offset: 16530},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 490, col: 19, offset: 16540},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 20, offset: 16541},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 491, col: 11, offset: 16597},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 491, col: 11, offset: 16597},
										expr: &ruleRefExpr{
											pos:  position{line: 491, col: 11, offset: 16597},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 491, col: 18, offset: 16604},
										expr: &ruleRefExpr{
											pos:  position{line: 491, col: 19, offset: 16605},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 492, col: 11, offset: 16636},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 492, col: 11, offset: 16636},
										expr: &litMatcher{
											pos:        position{line: 492, col: 12, offset: 16637},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 492, col: 16, offset: 16641},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 16689},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 16710},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16732},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 16757},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16846},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16861},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 16893},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 16912},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16933},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 16954},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 503, col: 11, offset: 16978},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 504, col: 11, offset: 17004},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 504, col: 11, offset: 17004},
										expr: &litMatcher{
											pos:        position{line: 504, col: 12, offset: 17005},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 504, col: 17, offset: 17010},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17034},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17063},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 507, col: 11, offset: 17091},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 508, col: 11, offset: 17118},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 512, col: 1, offset: 17184},
			expr: &choiceExpr{
				pos: position{line: 512, col: 41, offset: 17224},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 512, col: 41, offset: 17224},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 512, col: 55, offset: 17238},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 512, col: 55, offset: 17238},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 512, col: 55, offset: 17238},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 512, col: 59, offset: 17242},
									expr: &litMatcher{
										pos:        position{line: 512, col: 60, offset: 17243},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 516, col: 1, offset: 17302},
			expr: &actionExpr{
				pos: position{line: 516, col: 23, offset: 17324},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 516, col: 23, offset: 17324},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 516, col: 23, offset: 17324},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 516, col: 46, offset: 17347},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 516, col: 55, offset: 17356},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 516, col: 82, offset: 17383},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 520, col: 1, offset: 17487},
			expr: &actionExpr{
				pos: position{line: 520, col: 31, offset: 17517},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 520, col: 31, offset: 17517},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 520, col: 41, offset: 17527},
						expr: &ruleRefExpr{
							pos:  position{line: 520, col: 41, offset: 17527},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 525, col: 1, offset: 17687},
			expr: &actionExpr{
				pos: position{line: 525, col: 30, offset: 17716},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 525, col: 30, offset: 17716},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 526, col: 9, offset: 17734},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 526, col: 9, offset: 17734},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 526, col: 9, offset: 17734},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 526, col: 19, offset: 17744},
										expr: &ruleRefExpr{
											pos:  position{line: 526, col: 20, offset: 17745},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 527, col: 11, offset: 17801},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 527, col: 11, offset: 17801},
										expr: &ruleRefExpr{
											pos:  position{line: 527, col: 11, offset: 17801},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 527, col: 18, offset: 17808},
										expr: &ruleRefExpr{
											pos:  position{line: 527, col: 19, offset: 17809},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 528, col: 11, offset: 17840},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 17861},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 17883},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 17908},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 17997},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 18014},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 18041},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 11, offset: 18056},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 11, offset: 18088},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 537, col: 11, offset: 18107},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 538, col: 11, offset: 18128},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 539, col: 11, offset: 18149},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 540, col: 11, offset: 18173},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 541, col: 11, offset: 18199},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 541, col: 11, offset: 18199},
										expr: &litMatcher{
											pos:        position{line: 541, col: 12, offset: 18200},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 18, offset: 18206},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 542, col: 11, offset: 18230},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 543, col: 11, offset: 18259},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 544, col: 11, offset: 18287},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 548, col: 1, offset: 18361},
			expr: &seqExpr{
				pos: position{line: 548, col: 27, offset: 18387},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 548, col: 27, offset: 18387},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 548, col: 33, offset: 18393},
						expr: &charClassMatcher{
							pos:        position{line: 548, col: 34, offset: 18394},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 550, col: 1, offset: 18405},
			expr: &litMatcher{
				pos:        position{line: 550, col: 25, offset: 18429},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 552, col: 1, offset: 18436},
			expr: &actionExpr{
				pos: position{line: 552, col: 41, offset: 18476},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 552, col: 42, offset: 18477},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 552, col: 42, offset: 18477},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 552, col: 56, offset: 18491},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 552, col: 56, offset: 18491},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 552, col: 60, offset: 18495},
									expr: &litMatcher{
										pos:        position{line: 552, col: 61, offset: 18496},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 559, col: 1, offset: 18661},
			expr: &actionExpr{
				pos: position{line: 559, col: 12, offset: 18672},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 559, col: 12, offset: 18672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 559, col: 12, offset: 18672},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 559, col: 23, offset: 18683},
								expr: &ruleRefExpr{
									pos:  position{line: 559, col: 24, offset: 18684},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 560, col: 5, offset: 18701},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 560, col: 12, offset: 18708},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 560, col: 12, offset: 18708},
									expr: &litMatcher{
										pos:        position{line: 560, col: 13, offset: 18709},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 564, col: 5, offset: 18800},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 568, col: 5, offset: 18952},
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 5, offset: 18952},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 12, offset: 18959},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 568, col: 19, offset: 18966},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 568, col: 34, offset: 18981},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 568, col: 38, offset: 18985},
								expr: &ruleRefExpr{
									pos:  position{line: 568, col: 38, offset: 18985},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 568, col: 56, offset: 19003},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 572, col: 1, offset: 19109},
			expr: &actionExpr{
				pos: position{line: 572, col: 18, offset: 19126},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 572, col: 18, offset: 19126},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 572, col: 27, offset: 19135},
						expr: &seqExpr{
							pos: position{line: 572, col: 28, offset: 19136},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 572, col: 28, offset: 19136},
									expr: &ruleRefExpr{
										pos:  position{line: 572, col: 29, offset: 19137},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 572, col: 37, offset: 19145},
									expr: &ruleRefExpr{
										pos:  position{line: 572, col: 38, offset: 19146},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 572, col: 54, offset: 19162},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 576, col: 1, offset: 19283},
			expr: &actionExpr{
				pos: position{line: 576, col: 17, offset: 19299},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 576, col: 17, offset: 19299},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 576, col: 26, offset: 19308},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 576, col: 26, offset: 19308},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 577, col: 11, offset: 19323},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 578, col: 11, offset: 19368},
								expr: &ruleRefExpr{
									pos:  position{line: 578, col: 11, offset: 19368},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 19386},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 11, offset: 19455},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 19544},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 19565},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 19587},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 19602},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 19627},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 19650},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 19671},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 19698},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 589, col: 11, offset: 19715},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 19747},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 591, col: 11, offset: 19775},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 598, col: 1, offset: 19926},
			expr: &seqExpr{
				pos: position{line: 598, col: 31, offset: 19956},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 598, col: 31, offset: 19956},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 598, col: 41, offset: 19966},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 603, col: 1, offset: 20077},
			expr: &actionExpr{
				pos: position{line: 603, col: 19, offset: 20095},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 603, col: 19, offset: 20095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 19, offset: 20095},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 25, offset: 20101},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 603, col: 40, offset: 20116},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 45, offset: 20121},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 52, offset: 20128},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 68, offset: 20144},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 75, offset: 20151},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 607, col: 1, offset: 20266},
			expr: &actionExpr{
				pos: position{line: 607, col: 20, offset: 20285},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 607, col: 20, offset: 20285},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 607, col: 20, offset: 20285},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 26, offset: 20291},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 607, col: 41, offset: 20306},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 607, col: 45, offset: 20310},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 52, offset: 20317},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 68, offset: 20333},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 75, offset: 20340},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 611, col: 1, offset: 20456},
			expr: &actionExpr{
				pos: position{line: 611, col: 18, offset: 20473},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 611, col: 19, offset: 20474},
					expr: &charClassMatcher{
						pos:        position{line: 611, col: 19, offset: 20474},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 615, col: 1, offset: 20523},
			expr: &actionExpr{
				pos: position{line: 615, col: 19, offset: 20541},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 615, col: 19, offset: 20541},
					expr: &charClassMatcher{
						pos:        position{line: 615, col: 19, offset: 20541},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 619, col: 1, offset: 20589},
			expr: &actionExpr{
				pos: position{line: 619, col: 24, offset: 20612},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 619, col: 24, offset: 20612},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 619, col: 24, offset: 20612},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 619, col: 28, offset: 20616},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 619, col: 34, offset: 20622},
								expr: &ruleRefExpr{
									pos:  position{line: 619, col: 35, offset: 20623},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 619, col: 54, offset: 20642},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 626, col: 1, offset: 20824},
			expr: &actionExpr{
				pos: position{line: 626, col: 18, offset: 20841},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 626, col: 18, offset: 20841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 626, col: 18, offset: 20841},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 626, col: 24, offset: 20847},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 626, col: 24, offset: 20847},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 626, col: 24, offset: 20847},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 626, col: 36, offset: 20859},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 626, col: 42, offset: 20865},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 626, col: 56, offset: 20879},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 626, col: 74, offset: 20897},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 628, col: 8, offset: 21044},
							expr: &ruleRefExpr{
								pos:  position{line: 628, col: 8, offset: 21044},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 628, col: 15, offset: 21051},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 632, col: 1, offset: 21103},
			expr: &actionExpr{
				pos: position{line: 632, col: 26, offset: 21128},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 632, col: 26, offset: 21128},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 632, col: 26, offset: 21128},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 632, col: 30, offset: 21132},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 632, col: 36, offset: 21138},
								expr: &choiceExpr{
									pos: position{line: 632, col: 37, offset: 21139},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 632, col: 37, offset: 21139},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 632, col: 59, offset: 21161},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 632, col: 80, offset: 21182},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 632, col: 99, offset: 21201},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 636, col: 1, offset: 21273},
			expr: &actionExpr{
				pos: position{line: 636, col: 24, offset: 21296},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 636, col: 24, offset: 21296},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 636, col: 24, offset: 21296},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 636, col: 33, offset: 21305},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 40, offset: 21312},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 636, col: 66, offset: 21338},
							expr: &litMatcher{
								pos:        position{line: 636, col: 66, offset: 21338},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 640, col: 1, offset: 21397},
			expr: &actionExpr{
				pos: position{line: 640, col: 29, offset: 21425},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 640, col: 29, offset: 21425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 29, offset: 21425},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 640, col: 36, offset: 21432},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 640, col: 36, offset: 21432},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 21549},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 21585},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 643, col: 11, offset: 21611},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 644, col: 11, offset: 21643},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 645, col: 11, offset: 21675},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 646, col: 11, offset: 21702},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 646, col: 31, offset: 21722},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 31, offset: 21722},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 646, col: 39, offset: 21730},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 646, col: 39, offset: 21730},
									expr: &litMatcher{
										pos:        position{line: 646, col: 40, offset: 21731},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 646, col: 46, offset: 21737},
									expr: &litMatcher{
										pos:        position{line: 646, col: 47, offset: 21738},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 650, col: 1, offset: 21770},
			expr: &actionExpr{
				pos: position{line: 650, col: 23, offset: 21792},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 650, col: 23, offset: 21792},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 650, col: 23, offset: 21792},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 650, col: 30, offset: 21799},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 650, col: 30, offset: 21799},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 650, col: 47, offset: 21816},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 651, col: 5, offset: 21838},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 651, col: 12, offset: 21845},
								expr: &actionExpr{
									pos: position{line: 651, col: 13, offset: 21846},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 651, col: 13, offset: 21846},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 651, col: 13, offset: 21846},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 651, col: 17, offset: 21850},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 651, col: 24, offset: 21857},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 651, col: 24, offset: 21857},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 651, col: 41, offset: 21874},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 657, col: 1, offset: 22012},
			expr: &actionExpr{
				pos: position{line: 657, col: 29, offset: 22040},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 657, col: 29, offset: 22040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 657, col: 29, offset: 22040},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 657, col: 34, offset: 22045},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 657, col: 41, offset: 22052},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 657, col: 41, offset: 22052},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 657, col: 58, offset: 22069},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 22091},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 658, col: 12, offset: 22098},
								expr: &actionExpr{
									pos: position{line: 658, col: 13, offset: 22099},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 658, col: 13, offset: 22099},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 658, col: 13, offset: 22099},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 658, col: 17, offset: 22103},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 658, col: 24, offset: 22110},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 658, col: 24, offset: 22110},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 658, col: 41, offset: 22127},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 660, col: 9, offset: 22180},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 664, col: 1, offset: 22270},
			expr: &actionExpr{
				pos: position{line: 664, col: 19, offset: 22288},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 664, col: 19, offset: 22288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 664, col: 19, offset: 22288},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 26, offset: 22295},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 664, col: 34, offset: 22303},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 39, offset: 22308},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 44, offset: 22313},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 668, col: 1, offset: 22401},
			expr: &actionExpr{
				pos: position{line: 668, col: 25, offset: 22425},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 668, col: 25, offset: 22425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 668, col: 25, offset: 22425},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 30, offset: 22430},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 37, offset: 22437},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 668, col: 45, offset: 22445},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 50, offset: 22450},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 668, col: 55, offset: 22455},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 668, col: 63, offset: 22463},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 672, col: 1, offset: 22548},
			expr: &actionExpr{
				pos: position{line: 672, col: 20, offset: 22567},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 672, col: 20, offset: 22567},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 672, col: 32, offset: 22579},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 676, col: 1, offset: 22674},
			expr: &actionExpr{
				pos: position{line: 676, col: 26, offset: 22699},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 676, col: 26, offset: 22699},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 676, col: 26, offset: 22699},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 676, col: 31, offset: 22704},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 43, offset: 22716},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 676, col: 51, offset: 22724},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 680, col: 1, offset: 22816},
			expr: &actionExpr{
				pos: position{line: 680, col: 23, offset: 22838},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 680, col: 23, offset: 22838},
					expr: &charClassMatcher{
						pos:        position{line: 680, col: 23, offset: 22838},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 684, col: 1, offset: 22883},
			expr: &actionExpr{
				pos: position{line: 684, col: 23, offset: 22905},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 684, col: 23, offset: 22905},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 684, col: 24, offset: 22906},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 684, col: 24, offset: 22906},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 684, col: 34, offset: 22916},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 42, offset: 22924},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 48, offset: 22930},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 684, col: 73, offset: 22955},
							expr: &litMatcher{
								pos:        position{line: 684, col: 73, offset: 22955},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 688, col: 1, offset: 23104},
			expr: &actionExpr{
				pos: position{line: 688, col: 28, offset: 23131},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 688, col: 28, offset: 23131},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 28, offset: 23131},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 35, offset: 23138},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 688, col: 54, offset: 23157},
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 54, offset: 23157},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 688, col: 62, offset: 23165},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 688, col: 62, offset: 23165},
									expr: &litMatcher{
										pos:        position{line: 688, col: 63, offset: 23166},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 688, col: 69, offset: 23172},
									expr: &litMatcher{
										pos:        position{line: 688, col: 70, offset: 23173},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 692, col: 1, offset: 23205},
			expr: &actionExpr{
				pos: position{line: 692, col: 22, offset: 23226},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 692, col: 22, offset: 23226},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 692, col: 22, offset: 23226},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 692, col: 29, offset: 23233},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 5, offset: 23247},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 693, col: 12, offset: 23254},
								expr: &actionExpr{
									pos: position{line: 693, col: 13, offset: 23255},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 693, col: 13, offset: 23255},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 693, col: 13, offset: 23255},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 693, col: 17, offset: 23259},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 693, col: 24, offset: 23266},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 699, col: 1, offset: 23397},
			expr: &choiceExpr{
				pos: position{line: 699, col: 13, offset: 23409},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 699, col: 13, offset: 23409},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 699, col: 13, offset: 23409},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 699, col: 18, offset: 23414},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 699, col: 18, offset: 23414},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 699, col: 30, offset: 23426},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 701, col: 5, offset: 23494},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 701, col: 5, offset: 23494},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 701, col: 5, offset: 23494},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 9, offset: 23498},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 701, col: 14, offset: 23503},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 701, col: 14, offset: 23503},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 701, col: 26, offset: 23515},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 705, col: 1, offset: 23583},
			expr: &actionExpr{
				pos: position{line: 705, col: 16, offset: 23598},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 705, col: 16, offset: 23598},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 705, col: 16, offset: 23598},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 705, col: 23, offset: 23605},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 705, col: 23, offset: 23605},
									expr: &litMatcher{
										pos:        position{line: 705, col: 24, offset: 23606},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 708, col: 5, offset: 23660},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 716, col: 1, offset: 23840},
			expr: &actionExpr{
				pos: position{line: 716, col: 21, offset: 23860},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 716, col: 21, offset: 23860},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 716, col: 21, offset: 23860},
							expr: &ruleRefExpr{
								pos:  position{line: 716, col: 22, offset: 23861},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 716, col: 26, offset: 23865},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 716, col: 35, offset: 23874},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 716, col: 35, offset: 23874},
									expr: &charClassMatcher{
										pos:        position{line: 716, col: 35, offset: 23874},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 718, col: 12, offset: 23936},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 723, col: 1, offset: 24083},
			expr: &zeroOrMoreExpr{
				pos: position{line: 723, col: 19, offset: 24101},
				expr: &choiceExpr{
					pos: position{line: 723, col: 20, offset: 24102},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 723, col: 20, offset: 24102},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 723, col: 36, offset: 24118},
							name: "SingleLineComment",
						},
						&ruleRefExpr{
							pos:  position{line: 723, col: 56, offset: 24138},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 729, col: 1, offset: 24285},
			expr: &actionExpr{
				pos: position{line: 729, col: 21, offset: 24305},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 729, col: 21, offset: 24305},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 729, col: 21, offset: 24305},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 729, col: 29, offset: 24313},
								expr: &choiceExpr{
									pos: position{line: 729, col: 30, offset: 24314},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 729, col: 30, offset: 24314},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 729, col: 53, offset: 24337},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 729, col: 74, offset: 24358},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 729, col: 74, offset: 24358,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 107, offset: 24391},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 733, col: 1, offset: 24462},
			expr: &actionExpr{
				pos: position{line: 733, col: 25, offset: 24486},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 733, col: 25, offset: 24486},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 733, col: 25, offset: 24486},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 33, offset: 24494},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 733, col: 38, offset: 24499},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 38, offset: 24499},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 733, col: 78, offset: 24539},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 737, col: 1, offset: 24604},
			expr: &actionExpr{
				pos: position{line: 737, col: 23, offset: 24626},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 737, col: 23, offset: 24626},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 737, col: 23, offset: 24626},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 737, col: 31, offset: 24634},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 737, col: 36, offset: 24639},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 737, col: 36, offset: 24639},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 737, col: 76, offset: 24679},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 744, col: 1, offset: 24843},
			expr: &choiceExpr{
				pos: position{line: 744, col: 18, offset: 24860},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 744, col: 18, offset: 24860},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 744, col: 18, offset: 24860},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 27, offset: 24869},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 9, offset: 24926},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 746, col: 9, offset: 24926},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 746, col: 15, offset: 24932},
								expr: &ruleRefExpr{
									pos:  position{line: 746, col: 16, offset: 24933},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 750, col: 1, offset: 25025},
			expr: &actionExpr{
				pos: position{line: 750, col: 22, offset: 25046},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 750, col: 22, offset: 25046},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 750, col: 22, offset: 25046},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 23, offset: 25047},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 751, col: 5, offset: 25055},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 6, offset: 25056},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 752, col: 5, offset: 25071},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 6, offset: 25072},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 753, col: 5, offset: 25094},
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 6, offset: 25095},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 754, col: 5, offset: 25121},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 6, offset: 25122},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 755, col: 5, offset: 25150},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 6, offset: 25151},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 756, col: 5, offset: 25177},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 6, offset: 25178},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 757, col: 5, offset: 25203},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 6, offset: 25204},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 758, col: 5, offset: 25225},
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 6, offset: 25226},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 759, col: 5, offset: 25245},
							expr: &ruleRefExpr{
								pos:  position{line: 759, col: 6, offset: 25246},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 760, col: 5, offset: 25273},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 760, col: 11, offset: 25279},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 760, col: 11, offset: 25279},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 760, col: 20, offset: 25288},
										expr: &ruleRefExpr{
											pos:  position{line: 760, col: 21, offset: 25289},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 762, col: 12, offset: 25388},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 766, col: 1, offset: 25427},
			expr: &seqExpr{
				pos: position{line: 766, col: 25, offset: 25451},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 766, col: 25, offset: 25451},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 766, col: 29, offset: 25455},
						expr: &ruleRefExpr{
							pos:  position{line: 766, col: 29, offset: 25455},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 766, col: 36, offset: 25462},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 768, col: 1, offset: 25534},
			expr: &actionExpr{
				pos: position{line: 768, col: 29, offset: 25562},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 768, col: 29, offset: 25562},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 768, col: 29, offset: 25562},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 768, col: 50, offset: 25583},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 58, offset: 25591},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 772, col: 1, offset: 25697},
			expr: &actionExpr{
				pos: position{line: 772, col: 29, offset: 25725},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 772, col: 29, offset: 25725},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 772, col: 29, offset: 25725},
							expr: &ruleRefExpr{
								pos:  position{line: 772, col: 30, offset: 25726},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 773, col: 5, offset: 25735},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 773, col: 14, offset: 25744},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 773, col: 14, offset: 25744},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 25769},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 25793},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 25814},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 25842},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 25866},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 25893},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 25922},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 25987},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 26038},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 26062},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 11, offset: 26094},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 11, offset: 26120},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 11, offset: 26157},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 788, col: 11, offset: 26182},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 795, col: 1, offset: 26348},
			expr: &actionExpr{
				pos: position{line: 795, col: 20, offset: 26367},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 795, col: 20, offset: 26367},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 795, col: 20, offset: 26367},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 795, col: 26, offset: 26373},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 27, offset: 26374},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 40, offset: 26387},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 48, offset: 26395},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 71, offset: 26418},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 80, offset: 26427},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 799, col: 1, offset: 26562},
			expr: &actionExpr{
				pos: position{line: 800, col: 5, offset: 26592},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 800, col: 5, offset: 26592},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 800, col: 5, offset: 26592},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 5, offset: 26592},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 800, col: 12, offset: 26599},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 802, col: 9, offset: 26662},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 802, col: 9, offset: 26662},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 802, col: 9, offset: 26662},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 802, col: 9, offset: 26662},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 802, col: 16, offset: 26669},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 802, col: 16, offset: 26669},
															expr: &litMatcher{
																pos:        position{line: 802, col: 17, offset: 26670},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 806, col: 9, offset: 26770},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 825, col: 11, offset: 27487},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 825, col: 11, offset: 27487},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 825, col: 11, offset: 27487},
													expr: &charClassMatcher{
														pos:        position{line: 825, col: 12, offset: 27488},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 825, col: 20, offset: 27496},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 827, col: 13, offset: 27607},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 827, col: 13, offset: 27607},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 827, col: 14, offset: 27608},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 827, col: 21, offset: 27615},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 829, col: 13, offset: 27729},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 829, col: 13, offset: 27729},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 829, col: 14, offset: 27730},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 829, col: 21, offset: 27737},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 831, col: 13, offset: 27851},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 831, col: 13, offset: 27851},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 831, col: 13, offset: 27851},
													expr: &charClassMatcher{
														pos:        position{line: 831, col: 14, offset: 27852},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 831, col: 22, offset: 27860},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 833, col: 13, offset: 27974},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 833, col: 13, offset: 27974},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 833, col: 13, offset: 27974},
													expr: &charClassMatcher{
														pos:        position{line: 833, col: 14, offset: 27975},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 833, col: 22, offset: 27983},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 835, col: 12, offset: 28096},
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 12, offset: 28096},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 839, col: 1, offset: 28131},
			expr: &actionExpr{
				pos: position{line: 839, col: 27, offset: 28157},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 839, col: 27, offset: 28157},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 839, col: 37, offset: 28167},
						expr: &ruleRefExpr{
							pos:  position{line: 839, col: 37, offset: 28167},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 846, col: 1, offset: 28367},
			expr: &actionExpr{
				pos: position{line: 846, col: 22, offset: 28388},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 846, col: 22, offset: 28388},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 846, col: 22, offset: 28388},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 846, col: 28, offset: 28394},
								expr: &ruleRefExpr{
									pos:  position{line: 846, col: 29, offset: 28395},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 42, offset: 28408},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 50, offset: 28416},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 75, offset: 28441},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 846, col: 86, offset: 28452},
								expr: &ruleRefExpr{
									pos:  position{line: 846, col: 87, offset: 28453},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 846, col: 117, offset: 28483},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 126, offset: 28492},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 850, col: 1, offset: 28645},
			expr: &actionExpr{
				pos: position{line: 851, col: 5, offset: 28677},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 851, col: 5, offset: 28677},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 851, col: 5, offset: 28677},
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 5, offset: 28677},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 851, col: 12, offset: 28684},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 851, col: 20, offset: 28692},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 853, col: 9, offset: 28749},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 853, col: 9, offset: 28749},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 853, col: 9, offset: 28749},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 853, col: 16, offset: 28756},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 853, col: 16, offset: 28756},
															expr: &litMatcher{
																pos:        position{line: 853, col: 17, offset: 28757},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 857, col: 9, offset: 28857},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 874, col: 14, offset: 29564},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 874, col: 21, offset: 29571},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 874, col: 22, offset: 29572},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 876, col: 13, offset: 29658},
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 13, offset: 29658},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 880, col: 1, offset: 29694},
			expr: &actionExpr{
				pos: position{line: 880, col: 32, offset: 29725},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 880, col: 32, offset: 29725},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 880, col: 32, offset: 29725},
							expr: &litMatcher{
								pos:        position{line: 880, col: 33, offset: 29726},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 880, col: 37, offset: 29730},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 881, col: 7, offset: 29744},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 881, col: 7, offset: 29744},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 881, col: 7, offset: 29744},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 882, col: 7, offset: 29789},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 882, col: 7, offset: 29789},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 883, col: 7, offset: 29832},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 883, col: 7, offset: 29832},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 884, col: 7, offset: 29874},
							expr: &ruleRefExpr{
								pos:  position{line: 884, col: 7, offset: 29874},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 888, col: 1, offset: 29916},
			expr: &actionExpr{
				pos: position{line: 888, col: 29, offset: 29944},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 888, col: 29, offset: 29944},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 888, col: 39, offset: 29954},
						expr: &ruleRefExpr{
							pos:  position{line: 888, col: 39, offset: 29954},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 895, col: 1, offset: 30270},
			expr: &actionExpr{
				pos: position{line: 895, col: 20, offset: 30289},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 895, col: 20, offset: 30289},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 895, col: 20, offset: 30289},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 895, col: 26, offset: 30295},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 27, offset: 30296},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 40, offset: 30309},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 46, offset: 30315},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 75, offset: 30344},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 86, offset: 30355},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 112, offset: 30381},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 895, col: 124, offset: 30393},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 125, offset: 30394},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 899, col: 1, offset: 30535},
			expr: &seqExpr{
				pos: position{line: 899, col: 26, offset: 30560},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 899, col: 26, offset: 30560},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 54, offset: 30588},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 901, col: 1, offset: 30614},
			expr: &choiceExpr{
				pos: position{line: 901, col: 33, offset: 30646},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 901, col: 33, offset: 30646},
						expr: &charClassMatcher{
							pos:        position{line: 901, col: 33, offset: 30646},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 901, col: 45, offset: 30658},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 901, col: 45, offset: 30658},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 901, col: 49, offset: 30662},
								expr: &litMatcher{
									pos:        position{line: 901, col: 50, offset: 30663},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 902, col: 1, offset: 30667},
			expr: &actionExpr{
				pos: position{line: 902, col: 32, offset: 30698},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 902, col: 32, offset: 30698},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 902, col: 42, offset: 30708},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 902, col: 42, offset: 30708},
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 42, offset: 30708},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 908, col: 1, offset: 30863},
			expr: &actionExpr{
				pos: position{line: 908, col: 24, offset: 30886},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 908, col: 24, offset: 30886},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 908, col: 33, offset: 30895},
						expr: &seqExpr{
							pos: position{line: 908, col: 34, offset: 30896},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 908, col: 34, offset: 30896},
									expr: &ruleRefExpr{
										pos:  position{line: 908, col: 35, offset: 30897},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 908, col: 43, offset: 30905},
									expr: &litMatcher{
										pos:        position{line: 908, col: 44, offset: 30906},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 908, col: 49, offset: 30911},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 912, col: 1, offset: 31038},
			expr: &actionExpr{
				pos: position{line: 912, col: 31, offset: 31068},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 912, col: 31, offset: 31068},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 912, col: 40, offset: 31077},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 912, col: 40, offset: 31077},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 913, col: 11, offset: 31092},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 914, col: 11, offset: 31141},
								expr: &ruleRefExpr{
									pos:  position{line: 914, col: 11, offset: 31141},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 31159},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 916, col: 11, offset: 31184},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 31213},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 31233},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 919, col: 11, offset: 31322},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 920, col: 11, offset: 31343},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 921, col: 11, offset: 31366},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 922, col: 11, offset: 31381},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 31406},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 924, col: 11, offset: 31429},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 31450},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 926, col: 11, offset: 31477},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 31494},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 928, col: 11, offset: 31526},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 11, offset: 31554},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 933, col: 1, offset: 31593},
			expr: &actionExpr{
				pos: position{line: 934, col: 5, offset: 31626},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 934, col: 5, offset: 31626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 934, col: 5, offset: 31626},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 934, col: 16, offset: 31637},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 934, col: 16, offset: 31637},
									expr: &litMatcher{
										pos:        position{line: 934, col: 17, offset: 31638},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 937, col: 5, offset: 31696},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 941, col: 6, offset: 31872},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 941, col: 6, offset: 31872},
									expr: &choiceExpr{
										pos: position{line: 941, col: 7, offset: 31873},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 941, col: 7, offset: 31873},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 941, col: 15, offset: 31881},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 27, offset: 31893},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 945, col: 1, offset: 31933},
			expr: &actionExpr{
				pos: position{line: 945, col: 31, offset: 31963},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 945, col: 31, offset: 31963},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 945, col: 40, offset: 31972},
						expr: &ruleRefExpr{
							pos:  position{line: 945, col: 41, offset: 31973},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 952, col: 1, offset: 32164},
			expr: &choiceExpr{
				pos: position{line: 952, col: 19, offset: 32182},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 952, col: 19, offset: 32182},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 952, col: 19, offset: 32182},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 954, col: 9, offset: 32228},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 954, col: 9, offset: 32228},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 956, col: 9, offset: 32276},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 956, col: 9, offset: 32276},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 958, col: 9, offset: 32334},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 958, col: 9, offset: 32334},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 960, col: 9, offset: 32388},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 960, col: 9, offset: 32388},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 971, col: 1, offset: 32704},
			expr: &choiceExpr{
				pos: position{line: 973, col: 5, offset: 32754},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 973, col: 5, offset: 32754},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 973, col: 5, offset: 32754},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 973, col: 5, offset: 32754},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 973, col: 16, offset: 32765},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 17, offset: 32766},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 973, col: 30, offset: 32779},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 973, col: 33, offset: 32782},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 973, col: 49, offset: 32798},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 973, col: 54, offset: 32803},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 973, col: 60, offset: 32809},
										expr: &choiceExpr{
											pos: position{line: 973, col: 61, offset: 32810},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 973, col: 61, offset: 32810},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 973, col: 81, offset: 32830},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 977, col: 5, offset: 33013},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 977, col: 5, offset: 33013},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 977, col: 5, offset: 33013},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 977, col: 16, offset: 33024},
										expr: &ruleRefExpr{
											pos:  position{line: 977, col: 17, offset: 33025},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 977, col: 30, offset: 33038},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 977, col: 35, offset: 33043},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 44, offset: 33052},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 981, col: 5, offset: 33242},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 981, col: 5, offset: 33242},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 981, col: 5, offset: 33242},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 981, col: 16, offset: 33253},
										expr: &ruleRefExpr{
											pos:  position{line: 981, col: 17, offset: 33254},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 981, col: 30, offset: 33267},
									run: (*parser).callonRawParagraph28,
								},
								&notExpr{
									pos: position{line: 988, col: 7, offset: 33546},
									expr: &ruleRefExpr{
										pos:  position{line: 988, col: 8, offset: 33547},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 988, col: 23, offset: 33562},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 988, col: 31, offset: 33570},
										expr: &ruleRefExpr{
											pos:  position{line: 988, col: 32, offset: 33571},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 33754},
						run: (*parser).callonRawParagraph34,
						expr: &seqExpr{
							pos: position{line: 992, col: 5, offset: 33754},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 992, col: 5, offset: 33754},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 992, col: 16, offset: 33765},
										expr: &ruleRefExpr{
											pos:  position{line: 992, col: 17, offset: 33766},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 992, col: 30, offset: 33779},
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 31, offset: 33780},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 992, col: 46, offset: 33795},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 992, col: 52, offset: 33801},
										expr: &choiceExpr{
											pos: position{line: 992, col: 53, offset: 33802},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 992, col: 53, offset: 33802},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 992, col: 73, offset: 33822},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 996, col: 1, offset: 33920},
			expr: &oneOrMoreExpr{
				pos: position{line: 996, col: 33, offset: 33952},
				expr: &actionExpr{
					pos: position{line: 996, col: 34, offset: 33953},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 996, col: 34, offset: 33953},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 996, col: 34, offset: 33953},
								expr: &ruleRefExpr{
									pos:  position{line: 996, col: 35, offset: 33954},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 996, col: 45, offset: 33964},
								expr: &litMatcher{
									pos:        position{line: 996, col: 45, offset: 33964},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 996, col: 51, offset: 33970},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 996, col: 60, offset: 33979},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 1000, col: 1, offset: 34112},
			expr: &actionExpr{
				pos: position{line: 1001, col: 5, offset: 34137},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 5, offset: 34137},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1001, col: 5, offset: 34137},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1001, col: 14, offset: 34146},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1001, col: 39, offset: 34171},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 1001, col: 43, offset: 34175},
							run: (*parser).callonRawParagraphLine6,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 1011, col: 1, offset: 34410},
			expr: &actionExpr{
				pos: position{line: 1011, col: 28, offset: 34437},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1011, col: 28, offset: 34437},
					expr: &charClassMatcher{
						pos:        position{line: 1011, col: 28, offset: 34437},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 1016, col: 1, offset: 34554},
			expr: &actionExpr{
				pos: position{line: 1016, col: 23, offset: 34576},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 1016, col: 23, offset: 34576},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1016, col: 23, offset: 34576},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1016, col: 34, offset: 34587},
								expr: &ruleRefExpr{
									pos:  position{line: 1016, col: 35, offset: 34588},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1017, col: 5, offset: 34606},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 5, offset: 34892},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 16, offset: 34903},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1026, col: 5, offset: 34929},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1026, col: 16, offset: 34940},
								expr: &choiceExpr{
									pos: position{line: 1026, col: 17, offset: 34941},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1026, col: 17, offset: 34941},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1026, col: 37, offset: 34961},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1030, col: 1, offset: 35093},
			expr: &actionExpr{
				pos: position{line: 1031, col: 5, offset: 35123},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 5, offset: 35123},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1031, col: 5, offset: 35123},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1031, col: 14, offset: 35132},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1031, col: 14, offset: 35132},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1031, col: 14, offset: 35132},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1031, col: 23, offset: 35141},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1031, col: 28, offset: 35146},
											expr: &charClassMatcher{
												pos:        position{line: 1031, col: 28, offset: 35146},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1031, col: 68, offset: 35186},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1037, col: 1, offset: 35394},
			expr: &choiceExpr{
				pos: position{line: 1039, col: 5, offset: 35441},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1039, col: 5, offset: 35441},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 1039, col: 5, offset: 35441},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1039, col: 5, offset: 35441},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1039, col: 16, offset: 35452},
										expr: &ruleRefExpr{
											pos:  position{line: 1039, col: 17, offset: 35453},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1039, col: 30, offset: 35466},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1039, col: 33, offset: 35469},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1039, col: 49, offset: 35485},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1039, col: 54, offset: 35490},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1039, col: 60, offset: 35496},
										expr: &ruleRefExpr{
											pos:  position{line: 1039, col: 61, offset: 35497},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1043, col: 5, offset: 35683},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 1043, col: 5, offset: 35683},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1043, col: 5, offset: 35683},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1043, col: 16, offset: 35694},
										expr: &ruleRefExpr{
											pos:  position{line: 1043, col: 17, offset: 35695},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1043, col: 30, offset: 35708},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 1050, col: 7, offset: 35987},
									expr: &ruleRefExpr{
										pos:  position{line: 1050, col: 8, offset: 35988},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1050, col: 23, offset: 36003},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1050, col: 31, offset: 36011},
										expr: &ruleRefExpr{
											pos:  position{line: 1050, col: 32, offset: 36012},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 5, offset: 36192},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 1054, col: 5, offset: 36192},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1054, col: 5, offset: 36192},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1054, col: 16, offset: 36203},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 17, offset: 36204},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 1054, col: 30, offset: 36217},
									expr: &ruleRefExpr{
										pos:  position{line: 1054, col: 31, offset: 36218},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1054, col: 46, offset: 36233},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1054, col: 52, offset: 36239},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 53, offset: 36240},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 1058, col: 1, offset: 36335},
			expr: &ruleRefExpr{
				pos:  position{line: 1058, col: 18, offset: 36352},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1060, col: 1, offset: 36368},
			expr: &actionExpr{
				pos: position{line: 1060, col: 34, offset: 36401},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1060, col: 34, offset: 36401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1060, col: 34, offset: 36401},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1060, col: 40, offset: 36407},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1060, col: 48, offset: 36415},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1060, col: 49, offset: 36416},
									expr: &charClassMatcher{
										pos:        position{line: 1060, col: 49, offset: 36416},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 8, offset: 36466},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1067, col: 1, offset: 36515},
			expr: &oneOrMoreExpr{
				pos: position{line: 1067, col: 36, offset: 36550},
				expr: &actionExpr{
					pos: position{line: 1067, col: 37, offset: 36551},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1067, col: 37, offset: 36551},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1067, col: 37, offset: 36551},
								expr: &ruleRefExpr{
									pos:  position{line: 1067, col: 38, offset: 36552},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1067, col: 48, offset: 36562},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1067, col: 57, offset: 36571},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1076, col: 1, offset: 36906},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 5, offset: 36965},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 36965},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 36965},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1078, col: 5, offset: 36965},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1078, col: 16, offset: 36976},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 17, offset: 36977},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 30, offset: 36990},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 33, offset: 36993},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 49, offset: 37009},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 54, offset: 37014},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 61, offset: 37021},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1082, col: 5, offset: 37224},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1082, col: 5, offset: 37224},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1082, col: 5, offset: 37224},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1082, col: 16, offset: 37235},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 17, offset: 37236},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1082, col: 30, offset: 37249},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1082, col: 37, offset: 37256},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1086, col: 1, offset: 37360},
			expr: &actionExpr{
				pos: position{line: 1086, col: 31, offset: 37390},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1086, col: 31, offset: 37390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1086, col: 31, offset: 37390},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1086, col: 42, offset: 37401},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1086, col: 65, offset: 37424},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1086, col: 76, offset: 37435},
								expr: &seqExpr{
									pos: position{line: 1086, col: 77, offset: 37436},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1086, col: 77, offset: 37436},
											expr: &ruleRefExpr{
												pos:  position{line: 1086, col: 78, offset: 37437},
												name: "ListItemContinuation",
											},
										},
										&choiceExpr{
											pos: position{line: 1086, col: 100, offset: 37459},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1086, col: 100, offset: 37459},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 1086, col: 120, offset: 37479},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1094, col: 1, offset: 37697},
			expr: &actionExpr{
				pos: position{line: 1095, col: 5, offset: 37723},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1095, col: 5, offset: 37723},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 37723},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1095, col: 16, offset: 37734},
								expr: &ruleRefExpr{
									pos:  position{line: 1095, col: 17, offset: 37735},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1096, col: 5, offset: 37752},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 5, offset: 37957},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1103, col: 11, offset: 37963},
								expr: &ruleRefExpr{
									pos:  position{line: 1103, col: 12, offset: 37964},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1111, col: 1, offset: 38170},
			expr: &actionExpr{
				pos: position{line: 1111, col: 19, offset: 38188},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1111, col: 19, offset: 38188},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1111, col: 19, offset: 38188},
							expr: &ruleRefExpr{
								pos:  position{line: 1111, col: 20, offset: 38189},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 5, offset: 38203},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1112, col: 15, offset: 38213},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1112, col: 15, offset: 38213},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1112, col: 15, offset: 38213},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1112, col: 24, offset: 38222},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1114, col: 9, offset: 38314},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1114, col: 9, offset: 38314},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1114, col: 9, offset: 38314},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1114, col: 18, offset: 38323},
														expr: &ruleRefExpr{
															pos:  position{line: 1114, col: 19, offset: 38324},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1114, col: 35, offset: 38340},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1120, col: 1, offset: 38457},
			expr: &actionExpr{
				pos: position{line: 1121, col: 5, offset: 38480},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1121, col: 5, offset: 38480},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1121, col: 14, offset: 38489},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1121, col: 14, offset: 38489},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1122, col: 11, offset: 38540},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1123, col: 11, offset: 38585},
								expr: &ruleRefExpr{
									pos:  position{line: 1123, col: 11, offset: 38585},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1124, col: 11, offset: 38603},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1124, col: 11, offset: 38603},
										expr: &ruleRefExpr{
											pos:  position{line: 1124, col: 12, offset: 38604},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1125, col: 13, offset: 38622},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1125, col: 13, offset: 38622},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 15, offset: 38649},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1127, col: 15, offset: 38674},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1128, col: 15, offset: 38699},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1129, col: 15, offset: 38726},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1130, col: 15, offset: 38746},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1131, col: 15, offset: 38839},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 15, offset: 38869},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 15, offset: 38899},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1134, col: 15, offset: 38930},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1135, col: 15, offset: 38951},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1136, col: 15, offset: 38982},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1137, col: 15, offset: 39019},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1138, col: 15, offset: 39049},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1139, col: 15, offset: 39082},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1140, col: 15, offset: 39106},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1141, col: 15, offset: 39138},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1148, col: 1, offset: 39361},
			expr: &actionExpr{
				pos: position{line: 1148, col: 14, offset: 39374},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1148, col: 14, offset: 39374},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1148, col: 14, offset: 39374},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1148, col: 20, offset: 39380},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1148, col: 24, offset: 39384},
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 24, offset: 39384},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1148, col: 31, offset: 39391},
							expr: &ruleRefExpr{
								pos:  position{line: 1148, col: 32, offset: 39392},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1155, col: 1, offset: 39676},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 15, offset: 39690},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1155, col: 15, offset: 39690},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 41, offset: 39716},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 65, offset: 39740},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1157, col: 1, offset: 39759},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 32, offset: 39790},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1157, col: 32, offset: 39790},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1157, col: 32, offset: 39790},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1157, col: 36, offset: 39794},
								expr: &litMatcher{
									pos:        position{line: 1157, col: 37, offset: 39795},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1157, col: 43, offset: 39801},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1157, col: 43, offset: 39801},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1157, col: 47, offset: 39805},
								expr: &litMatcher{
									pos:        position{line: 1157, col: 48, offset: 39806},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1157, col: 54, offset: 39812},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1157, col: 54, offset: 39812},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1157, col: 58, offset: 39816},
								expr: &litMatcher{
									pos:        position{line: 1157, col: 59, offset: 39817},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1157, col: 65, offset: 39823},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1157, col: 65, offset: 39823},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1157, col: 69, offset: 39827},
								expr: &litMatcher{
									pos:        position{line: 1157, col: 70, offset: 39828},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1159, col: 1, offset: 39833},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 34, offset: 39866},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1159, col: 34, offset: 39866},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1159, col: 41, offset: 39873},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1159, col: 48, offset: 39880},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1159, col: 55, offset: 39887},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1159, col: 62, offset: 39894},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1159, col: 68, offset: 39900},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1161, col: 1, offset: 39905},
			expr: &actionExpr{
				pos: position{line: 1161, col: 26, offset: 39930},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1161, col: 26, offset: 39930},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1161, col: 32, offset: 39936},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1161, col: 32, offset: 39936},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 15, offset: 39971},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 15, offset: 40007},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1164, col: 15, offset: 40043},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1165, col: 15, offset: 40083},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1166, col: 15, offset: 40112},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1167, col: 15, offset: 40143},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1171, col: 1, offset: 40297},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 28, offset: 40324},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 28, offset: 40324},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 15, offset: 40358},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 15, offset: 40394},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 15, offset: 40430},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1176, col: 1, offset: 40456},
			expr: &choiceExpr{
				pos: position{line: 1176, col: 22, offset: 40477},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1176, col: 22, offset: 40477},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 15, offset: 40508},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 15, offset: 40540},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 15, offset: 40572},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 15, offset: 40608},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 15, offset: 40644},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1183, col: 1, offset: 40668},
			expr: &choiceExpr{
				pos: position{line: 1183, col: 33, offset: 40700},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1183, col: 33, offset: 40700},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1183, col: 39, offset: 40706},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1183, col: 39, offset: 40706},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1187, col: 1, offset: 40839},
			expr: &actionExpr{
				pos: position{line: 1187, col: 25, offset: 40863},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1187, col: 25, offset: 40863},
					expr: &litMatcher{
						pos:        position{line: 1187, col: 25, offset: 40863},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1191, col: 1, offset: 40904},
			expr: &actionExpr{
				pos: position{line: 1191, col: 25, offset: 40928},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 25, offset: 40928},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1191, col: 25, offset: 40928},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1191, col: 30, offset: 40933},
							expr: &litMatcher{
								pos:        position{line: 1191, col: 30, offset: 40933},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1199, col: 1, offset: 41030},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 13, offset: 41042},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 13, offset: 41042},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 35, offset: 41064},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1201, col: 1, offset: 41131},
			expr: &actionExpr{
				pos: position{line: 1201, col: 24, offset: 41154},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 24, offset: 41154},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1201, col: 24, offset: 41154},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1201, col: 30, offset: 41160},
								expr: &ruleRefExpr{
									pos:  position{line: 1201, col: 31, offset: 41161},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1201, col: 49, offset: 41179},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 54, offset: 41184},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 64, offset: 41194},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1201, col: 93, offset: 41223},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1205, col: 1, offset: 41310},
			expr: &seqExpr{
				pos: position{line: 1205, col: 32, offset: 41341},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1205, col: 32, offset: 41341},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1205, col: 59, offset: 41368},
						expr: &seqExpr{
							pos: position{line: 1205, col: 60, offset: 41369},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1205, col: 60, offset: 41369},
									expr: &litMatcher{
										pos:        position{line: 1205, col: 62, offset: 41371},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1205, col: 69, offset: 41378},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1205, col: 69, offset: 41378},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1205, col: 77, offset: 41386},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1207, col: 1, offset: 41451},
			expr: &choiceExpr{
				pos: position{line: 1207, col: 31, offset: 41481},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1207, col: 31, offset: 41481},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1208, col: 11, offset: 41496},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1208, col: 11, offset: 41496},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1208, col: 19, offset: 41504},
								expr: &ruleRefExpr{
									pos:  position{line: 1208, col: 20, offset: 41505},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 41523},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 41553},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 41576},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 41597},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 41618},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 41642},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 41666},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 41692},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 41781},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 41808},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 41825},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 41846},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 41868},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 41883},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 41915},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 41943},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1227, col: 1, offset: 41982},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 5, offset: 42026},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1228, col: 5, offset: 42026},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1229, col: 7, offset: 42123},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1229, col: 7, offset: 42123},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1229, col: 7, offset: 42123},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1229, col: 12, offset: 42128},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1233, col: 1, offset: 42291},
			expr: &choiceExpr{
				pos: position{line: 1233, col: 24, offset: 42314},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1233, col: 24, offset: 42314},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1233, col: 24, offset: 42314},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1233, col: 24, offset: 42314},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1233, col: 30, offset: 42320},
										expr: &ruleRefExpr{
											pos:  position{line: 1233, col: 31, offset: 42321},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1233, col: 51, offset: 42341},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1233, col: 51, offset: 42341},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1233, col: 55, offset: 42345},
											expr: &litMatcher{
												pos:        position{line: 1233, col: 56, offset: 42346},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1233, col: 61, offset: 42351},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1233, col: 71, offset: 42361},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1233, col: 100, offset: 42390},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1233, col: 104, offset: 42394},
									expr: &notExpr{
										pos: position{line: 1233, col: 106, offset: 42396},
										expr: &ruleRefExpr{
											pos:  position{line: 1233, col: 107, offset: 42397},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1235, col: 5, offset: 42591},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1235, col: 5, offset: 42591},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1235, col: 5, offset: 42591},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1235, col: 11, offset: 42597},
										expr: &ruleRefExpr{
											pos:  position{line: 1235, col: 12, offset: 42598},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1235, col: 30, offset: 42616},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1235, col: 34, offset: 42620},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1235, col: 44, offset: 42630},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1235, col: 44, offset: 42630},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1235, col: 48, offset: 42634},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1235, col: 77, offset: 42663},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1239, col: 1, offset: 42869},
			expr: &seqExpr{
				pos: position{line: 1239, col: 32, offset: 42900},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1239, col: 32, offset: 42900},
						expr: &ruleRefExpr{
							pos:  position{line: 1239, col: 33, offset: 42901},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1239, col: 39, offset: 42907},
						expr: &ruleRefExpr{
							pos:  position{line: 1239, col: 39, offset: 42907},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1241, col: 1, offset: 42936},
			expr: &choiceExpr{
				pos: position{line: 1241, col: 31, offset: 42966},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1241, col: 31, offset: 42966},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1242, col: 11, offset: 42981},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1242, col: 11, offset: 42981},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1242, col: 19, offset: 42989},
								expr: &ruleRefExpr{
									pos:  position{line: 1242, col: 20, offset: 42990},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 43008},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 43038},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1245, col: 11, offset: 43061},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1245, col: 11, offset: 43061},
								expr: &ruleRefExpr{
									pos:  position{line: 1245, col: 11, offset: 43061},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1245, col: 18, offset: 43068},
								expr: &seqExpr{
									pos: position{line: 1245, col: 19, offset: 43069},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1245, col: 19, offset: 43069},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1245, col: 23, offset: 43073},
											expr: &litMatcher{
												pos:        position{line: 1245, col: 24, offset: 43074},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 43090},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 43111},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 43132},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 43156},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 43180},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 43206},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 43295},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 43322},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 43339},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 43360},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 43383},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 43400},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 43432},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 43460},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1261, col: 1, offset: 43498},
			expr: &choiceExpr{
				pos: position{line: 1262, col: 5, offset: 43542},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1262, col: 5, offset: 43542},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1263, col: 7, offset: 43639},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1263, col: 7, offset: 43639},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1263, col: 7, offset: 43639},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1263, col: 11, offset: 43643},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1267, col: 1, offset: 43806},
			expr: &choiceExpr{
				pos: position{line: 1268, col: 5, offset: 43830},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1268, col: 5, offset: 43830},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1268, col: 5, offset: 43830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1268, col: 5, offset: 43830},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1268, col: 18, offset: 43843},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 40, offset: 43865},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1268, col: 45, offset: 43870},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1268, col: 55, offset: 43880},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1268, col: 84, offset: 43909},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1270, col: 9, offset: 44066},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1270, col: 9, offset: 44066},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1270, col: 9, offset: 44066},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1270, col: 22, offset: 44079},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1270, col: 44, offset: 44101},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1270, col: 49, offset: 44106},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1270, col: 59, offset: 44116},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1270, col: 88, offset: 44145},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1273, col: 9, offset: 44345},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1273, col: 9, offset: 44345},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1273, col: 9, offset: 44345},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 22, offset: 44358},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 44, offset: 44380},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1273, col: 48, offset: 44384},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1273, col: 58, offset: 44394},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1273, col: 87, offset: 44423},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1281, col: 1, offset: 44631},
			expr: &choiceExpr{
				pos: position{line: 1281, col: 15, offset: 44645},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1281, col: 15, offset: 44645},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1281, col: 39, offset: 44669},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1283, col: 1, offset: 44692},
			expr: &actionExpr{
				pos: position{line: 1283, col: 26, offset: 44717},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1283, col: 26, offset: 44717},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1283, col: 26, offset: 44717},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1283, col: 32, offset: 44723},
								expr: &ruleRefExpr{
									pos:  position{line: 1283, col: 33, offset: 44724},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1283, col: 51, offset: 44742},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1283, col: 56, offset: 44747},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1283, col: 66, offset: 44757},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1283, col: 97, offset: 44788},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1287, col: 1, offset: 44922},
			expr: &seqExpr{
				pos: position{line: 1287, col: 34, offset: 44955},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1287, col: 34, offset: 44955},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1287, col: 63, offset: 44984},
						expr: &seqExpr{
							pos: position{line: 1287, col: 64, offset: 44985},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1287, col: 64, offset: 44985},
									expr: &litMatcher{
										pos:        position{line: 1287, col: 66, offset: 44987},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1287, col: 73, offset: 44994},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1287, col: 73, offset: 44994},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1287, col: 81, offset: 45002},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1289, col: 1, offset: 45069},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 33, offset: 45101},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 33, offset: 45101},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1290, col: 11, offset: 45116},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1290, col: 11, offset: 45116},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1290, col: 19, offset: 45124},
								expr: &ruleRefExpr{
									pos:  position{line: 1290, col: 20, offset: 45125},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 45143},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 45175},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 45198},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 45217},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 45238},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 45262},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 45286},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 45312},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 45401},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 45428},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 45445},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 45466},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 45489},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 45505},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 45533},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1307, col: 1, offset: 45573},
			expr: &choiceExpr{
				pos: position{line: 1308, col: 5, offset: 45619},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1308, col: 5, offset: 45619},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1309, col: 7, offset: 45718},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1309, col: 7, offset: 45718},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1309, col: 7, offset: 45718},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1309, col: 12, offset: 45723},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1313, col: 1, offset: 45888},
			expr: &choiceExpr{
				pos: position{line: 1313, col: 26, offset: 45913},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1313, col: 26, offset: 45913},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1313, col: 26, offset: 45913},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1313, col: 26, offset: 45913},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1313, col: 32, offset: 45919},
										expr: &ruleRefExpr{
											pos:  position{line: 1313, col: 33, offset: 45920},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1313, col: 52, offset: 45939},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1313, col: 52, offset: 45939},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1313, col: 56, offset: 45943},
											expr: &litMatcher{
												pos:        position{line: 1313, col: 57, offset: 45944},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1313, col: 62, offset: 45949},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1313, col: 72, offset: 45959},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1313, col: 103, offset: 45990},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1315, col: 5, offset: 46180},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1315, col: 5, offset: 46180},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1315, col: 5, offset: 46180},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1315, col: 11, offset: 46186},
										expr: &ruleRefExpr{
											pos:  position{line: 1315, col: 12, offset: 46187},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1315, col: 30, offset: 46205},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1315, col: 34, offset: 46209},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1315, col: 44, offset: 46219},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1315, col: 44, offset: 46219},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1315, col: 48, offset: 46223},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1315, col: 79, offset: 46254},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1319, col: 1, offset: 46464},
			expr: &seqExpr{
				pos: position{line: 1319, col: 34, offset: 46497},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1319, col: 34, offset: 46497},
						expr: &ruleRefExpr{
							pos:  position{line: 1319, col: 35, offset: 46498},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1319, col: 41, offset: 46504},
						expr: &ruleRefExpr{
							pos:  position{line: 1319, col: 41, offset: 46504},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1321, col: 1, offset: 46535},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 33, offset: 46567},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1321, col: 33, offset: 46567},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1322, col: 11, offset: 46582},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1322, col: 11, offset: 46582},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1322, col: 19, offset: 46590},
								expr: &ruleRefExpr{
									pos:  position{line: 1322, col: 20, offset: 46591},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 46609},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 46641},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1325, col: 11, offset: 46664},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1325, col: 11, offset: 46664},
								expr: &ruleRefExpr{
									pos:  position{line: 1325, col: 11, offset: 46664},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1325, col: 18, offset: 46671},
								expr: &seqExpr{
									pos: position{line: 1325, col: 19, offset: 46672},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1325, col: 19, offset: 46672},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1325, col: 23, offset: 46676},
											expr: &litMatcher{
												pos:        position{line: 1325, col: 24, offset: 46677},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 46693},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 46712},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 46733},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 46757},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 46781},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 46807},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 46896},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 46923},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 46940},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 46961},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 46984},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 47001},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 47033},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 47061},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1341, col: 1, offset: 47101},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 5, offset: 47147},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1342, col: 5, offset: 47147},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1343, col: 7, offset: 47246},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1343, col: 7, offset: 47246},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1343, col: 7, offset: 47246},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1343, col: 11, offset: 47250},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1347, col: 1, offset: 47416},
			expr: &choiceExpr{
				pos: position{line: 1348, col: 5, offset: 47442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1348, col: 5, offset: 47442},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1348, col: 5, offset: 47442},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1348, col: 5, offset: 47442},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1348, col: 18, offset: 47455},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1348, col: 40, offset: 47477},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1348, col: 45, offset: 47482},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1348, col: 55, offset: 47492},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1348, col: 86, offset: 47523},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1350, col: 9, offset: 47680},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1350, col: 9, offset: 47680},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1350, col: 9, offset: 47680},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1350, col: 22, offset: 47693},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 44, offset: 47715},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1350, col: 49, offset: 47720},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1350, col: 59, offset: 47730},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1350, col: 90, offset: 47761},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1353, col: 9, offset: 47961},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1353, col: 9, offset: 47961},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1353, col: 9, offset: 47961},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 22, offset: 47974},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 44, offset: 47996},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1353, col: 48, offset: 48000},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1353, col: 58, offset: 48010},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1353, col: 89, offset: 48041},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1360, col: 1, offset: 48251},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 18, offset: 48268},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1360, col: 18, offset: 48268},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 45, offset: 48295},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1362, col: 1, offset: 48321},
			expr: &actionExpr{
				pos: position{line: 1362, col: 29, offset: 48349},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1362, col: 29, offset: 48349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1362, col: 29, offset: 48349},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1362, col: 35, offset: 48355},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 36, offset: 48356},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1362, col: 54, offset: 48374},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 59, offset: 48379},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 69, offset: 48389},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1362, col: 103, offset: 48423},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1366, col: 1, offset: 48560},
			expr: &seqExpr{
				pos: position{line: 1366, col: 37, offset: 48596},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1366, col: 37, offset: 48596},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1366, col: 69, offset: 48628},
						expr: &seqExpr{
							pos: position{line: 1366, col: 70, offset: 48629},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1366, col: 70, offset: 48629},
									expr: &litMatcher{
										pos:        position{line: 1366, col: 72, offset: 48631},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1366, col: 79, offset: 48638},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1366, col: 79, offset: 48638},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1366, col: 87, offset: 48646},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1368, col: 1, offset: 48715},
			expr: &choiceExpr{
				pos: position{line: 1368, col: 36, offset: 48750},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1368, col: 36, offset: 48750},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1369, col: 11, offset: 48765},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1369, col: 11, offset: 48765},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1369, col: 19, offset: 48773},
								expr: &ruleRefExpr{
									pos:  position{line: 1369, col: 20, offset: 48774},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 48792},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 48815},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 48904},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 48921},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 48948},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 48983},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 49002},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 49023},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 49044},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 49068},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 49094},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1381, col: 11, offset: 49115},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1382, col: 11, offset: 49137},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1383, col: 11, offset: 49152},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1384, col: 11, offset: 49180},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1386, col: 1, offset: 49223},
			expr: &choiceExpr{
				pos: position{line: 1387, col: 5, offset: 49272},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1387, col: 5, offset: 49272},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1388, col: 7, offset: 49374},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1388, col: 7, offset: 49374},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1388, col: 7, offset: 49374},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1388, col: 12, offset: 49379},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1392, col: 1, offset: 49547},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 29, offset: 49575},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1392, col: 29, offset: 49575},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1392, col: 29, offset: 49575},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1392, col: 29, offset: 49575},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1392, col: 35, offset: 49581},
										expr: &ruleRefExpr{
											pos:  position{line: 1392, col: 36, offset: 49582},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1392, col: 55, offset: 49601},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1392, col: 55, offset: 49601},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1392, col: 59, offset: 49605},
											expr: &litMatcher{
												pos:        position{line: 1392, col: 60, offset: 49606},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1392, col: 65, offset: 49611},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1392, col: 75, offset: 49621},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1392, col: 109, offset: 49655},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1394, col: 5, offset: 49848},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1394, col: 5, offset: 49848},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1394, col: 5, offset: 49848},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1394, col: 11, offset: 49854},
										expr: &ruleRefExpr{
											pos:  position{line: 1394, col: 12, offset: 49855},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1394, col: 30, offset: 49873},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1394, col: 34, offset: 49877},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1394, col: 44, offset: 49887},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1394, col: 44, offset: 49887},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1394, col: 48, offset: 49891},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1394, col: 82, offset: 49925},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1398, col: 1, offset: 50139},
			expr: &seqExpr{
				pos: position{line: 1398, col: 37, offset: 50175},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1398, col: 37, offset: 50175},
						expr: &ruleRefExpr{
							pos:  position{line: 1398, col: 38, offset: 50176},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1398, col: 44, offset: 50182},
						expr: &ruleRefExpr{
							pos:  position{line: 1398, col: 44, offset: 50182},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1400, col: 1, offset: 50216},
			expr: &choiceExpr{
				pos: position{line: 1400, col: 37, offset: 50252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1400, col: 37, offset: 50252},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1401, col: 11, offset: 50267},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1401, col: 11, offset: 50267},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1401, col: 19, offset: 50275},
								expr: &ruleRefExpr{
									pos:  position{line: 1401, col: 20, offset: 50276},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 11, offset: 50294},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 11, offset: 50329},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1404, col: 11, offset: 50352},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1404, col: 11, offset: 50352},
								expr: &ruleRefExpr{
									pos:  position{line: 1404, col: 11, offset: 50352},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1404, col: 18, offset: 50359},
								expr: &seqExpr{
									pos: position{line: 1404, col: 19, offset: 50360},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1404, col: 19, offset: 50360},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1404, col: 23, offset: 50364},
											expr: &litMatcher{
												pos:        position{line: 1404, col: 24, offset: 50365},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 11, offset: 50493},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 11, offset: 50512},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 11, offset: 50533},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 11, offset: 50554},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 50578},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 11, offset: 50604},
						name: "InlinePassthrough",
					},
					&seqExpr{
						pos: position{line: 1411, col: 11, offset: 50693},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1411, col: 11, offset: 50693},
								expr: &litMatcher{
									pos:        position{line: 1411, col: 12, offset: 50694},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1411, col: 16, offset: 50698},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 11, offset: 50715},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 11, offset: 50742},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 11, offset: 50763},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1415, col: 11, offset: 50786},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1416, col: 11, offset: 50802},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 11, offset: 50834},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1418, col: 11, offset: 50862},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1420, col: 1, offset: 50905},
			expr: &choiceExpr{
				pos: position{line: 1421, col: 5, offset: 50954},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1421, col: 5, offset: 50954},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1422, col: 7, offset: 51056},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1422, col: 7, offset: 51056},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1422, col: 7, offset: 51056},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1422, col: 11, offset: 51060},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1426, col: 1, offset: 51229},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 5, offset: 51258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1427, col: 5, offset: 51258},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1427, col: 5, offset: 51258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1427, col: 5, offset: 51258},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1427, col: 18, offset: 51271},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1427, col: 40, offset: 51293},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 45, offset: 51298},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1427, col: 55, offset: 51308},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1427, col: 89, offset: 51342},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 9, offset: 51499},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1429, col: 9, offset: 51499},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1429, col: 9, offset: 51499},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 22, offset: 51512},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1429, col: 44, offset: 51534},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1429, col: 49, offset: 51539},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1429, col: 59, offset: 51549},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1429, col: 93, offset: 51583},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1432, col: 9, offset: 51783},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1432, col: 9, offset: 51783},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1432, col: 9, offset: 51783},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1432, col: 22, offset: 51796},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1432, col: 44, offset: 51818},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1432, col: 48, offset: 51822},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1432, col: 58, offset: 51832},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1432, col: 92, offset: 51866},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1440, col: 1, offset: 52074},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 15, offset: 52088},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1440, col: 15, offset: 52088},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 39, offset: 52112},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1442, col: 1, offset: 52135},
			expr: &actionExpr{
				pos: position{line: 1442, col: 26, offset: 52160},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 26, offset: 52160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1442, col: 26, offset: 52160},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1442, col: 32, offset: 52166},
								expr: &ruleRefExpr{
									pos:  position{line: 1442, col: 33, offset: 52167},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1442, col: 51, offset: 52185},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 56, offset: 52190},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 66, offset: 52200},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1442, col: 97, offset: 52231},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1446, col: 1, offset: 52365},
			expr: &seqExpr{
				pos: position{line: 1446, col: 34, offset: 52398},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1446, col: 34, offset: 52398},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1446, col: 63, offset: 52427},
						expr: &seqExpr{
							pos: position{line: 1446, col: 64, offset: 52428},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1446, col: 64, offset: 52428},
									expr: &litMatcher{
										pos:        position{line: 1446, col: 66, offset: 52430},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1446, col: 73, offset: 52437},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1446, col: 73, offset: 52437},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1446, col: 81, offset: 52445},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1448, col: 1, offset: 52512},
			expr: &choiceExpr{
				pos: position{line: 1448, col: 33, offset: 52544},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1448, col: 33, offset: 52544},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 11, offset: 52559},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1450, col: 11, offset: 52591},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1450, col: 11, offset: 52591},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1450, col: 19, offset: 52599},
								expr: &ruleRefExpr{
									pos:  position{line: 1450, col: 20, offset: 52600},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1451, col: 11, offset: 52618},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 11, offset: 52641},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1453, col: 11, offset: 52660},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 11, offset: 52681},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1455, col: 11, offset: 52705},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 11, offset: 52729},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1457, col: 11, offset: 52755},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 11, offset: 52844},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1459, col: 11, offset: 52861},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 11, offset: 52888},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1461, col: 11, offset: 52909},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1462, col: 11, offset: 52931},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 11, offset: 52946},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1464, col: 11, offset: 52974},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1466, col: 1, offset: 53014},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 5, offset: 53060},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1467, col: 5, offset: 53060},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1468, col: 7, offset: 53159},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1468, col: 7, offset: 53159},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1468, col: 7, offset: 53159},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1468, col: 12, offset: 53164},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1472, col: 1, offset: 53329},
			expr: &choiceExpr{
				pos: position{line: 1472, col: 26, offset: 53354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1472, col: 26, offset: 53354},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1472, col: 26, offset: 53354},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1472, col: 26, offset: 53354},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1472, col: 32, offset: 53360},
										expr: &ruleRefExpr{
											pos:  position{line: 1472, col: 33, offset: 53361},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1472, col: 52, offset: 53380},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1472, col: 52, offset: 53380},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1472, col: 56, offset: 53384},
											expr: &litMatcher{
												pos:        position{line: 1472, col: 57, offset: 53385},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1472, col: 62, offset: 53390},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1472, col: 72, offset: 53400},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1472, col: 103, offset: 53431},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1474, col: 5, offset: 53621},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1474, col: 5, offset: 53621},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1474, col: 5, offset: 53621},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1474, col: 11, offset: 53627},
										expr: &ruleRefExpr{
											pos:  position{line: 1474, col: 12, offset: 53628},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1474, col: 30, offset: 53646},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1474, col: 34, offset: 53650},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1474, col: 44, offset: 53660},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1474, col: 44, offset: 53660},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1474, col: 48, offset: 53664},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1474, col: 79, offset: 53695},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1478, col: 1, offset: 53904},
			expr: &seqExpr{
				pos: position{line: 1478, col: 34, offset: 53937},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1478, col: 34, offset: 53937},
						expr: &ruleRefExpr{
							pos:  position{line: 1478, col: 35, offset: 53938},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1478, col: 41, offset: 53944},
						expr: &ruleRefExpr{
							pos:  position{line: 1478, col: 41, offset: 53944},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1480, col: 1, offset: 53975},
			expr: &choiceExpr{
				pos: position{line: 1480, col: 33, offset: 54007},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1480, col: 33, offset: 54007},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 11, offset: 54022},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1482, col: 11, offset: 54054},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1482, col: 11, offset: 54054},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1482, col: 19, offset: 54062},
								expr: &ruleRefExpr{
									pos:  position{line: 1482, col: 20, offset: 54063},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 11, offset: 54081},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1484, col: 11, offset: 54104},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1484, col: 11, offset: 54104},
								expr: &ruleRefExpr{
									pos:  position{line: 1484, col: 11, offset: 54104},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1484, col: 18, offset: 54111},
								expr: &seqExpr{
									pos: position{line: 1484, col: 19, offset: 54112},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1484, col: 19, offset: 54112},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1484, col: 23, offset: 54116},
											expr: &litMatcher{
												pos:        position{line: 1484, col: 24, offset: 54117},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 11, offset: 54133},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1486, col: 11, offset: 54152},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1487, col: 11, offset: 54173},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1488, col: 11, offset: 54197},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1489, col: 11, offset: 54221},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1490, col: 11, offset: 54247},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1491, col: 11, offset: 54264},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1492, col: 11, offset: 54353},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1493, col: 11, offset: 54380},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1494, col: 11, offset: 54401},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1495, col: 11, offset: 54423},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1496, col: 11, offset: 54438},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1497, col: 11, offset: 54470},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1498, col: 11, offset: 54498},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1500, col: 1, offset: 54538},
			expr: &choiceExpr{
				pos: position{line: 1501, col: 5, offset: 54584},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1501, col: 5, offset: 54584},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1502, col: 7, offset: 54681},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1502, col: 7, offset: 54681},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1502, col: 7, offset: 54681},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1502, col: 11, offset: 54685},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1506, col: 1, offset: 54848},
			expr: &choiceExpr{
				pos: position{line: 1507, col: 5, offset: 54873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1507, col: 5, offset: 54873},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1507, col: 5, offset: 54873},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1507, col: 5, offset: 54873},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1507, col: 18, offset: 54886},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1507, col: 40, offset: 54908},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1507, col: 45, offset: 54913},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1507, col: 55, offset: 54923},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1507, col: 86, offset: 54954},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1509, col: 9, offset: 55111},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1509, col: 9, offset: 55111},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1509, col: 9, offset: 55111},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1509, col: 22, offset: 55124},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1509, col: 44, offset: 55146},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1509, col: 49, offset: 55151},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1509, col: 59, offset: 55161},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1509, col: 90, offset: 55192},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1512, col: 9, offset: 55392},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1512, col: 9, offset: 55392},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1512, col: 9, offset: 55392},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1512, col: 22, offset: 55405},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1512, col: 44, offset: 55427},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1512, col: 48, offset: 55431},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1512, col: 58, offset: 55441},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1512, col: 89, offset: 55472},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1517, col: 1, offset: 55622},
			expr: &actionExpr{
				pos: position{line: 1517, col: 18, offset: 55639},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 18, offset: 55639},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1517, col: 18, offset: 55639},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1517, col: 24, offset: 55645},
								expr: &ruleRefExpr{
									pos:  position{line: 1517, col: 25, offset: 55646},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1517, col: 43, offset: 55664},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 47, offset: 55668},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 56, offset: 55677},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1517, col: 78, offset: 55699},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1521, col: 1, offset: 55795},
			expr: &choiceExpr{
				pos: position{line: 1521, col: 25, offset: 55819},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1521, col: 25, offset: 55819},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1521, col: 38, offset: 55832},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1523, col: 1, offset: 55851},
			expr: &actionExpr{
				pos: position{line: 1523, col: 21, offset: 55871},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1523, col: 21, offset: 55871},
					expr: &charClassMatcher{
						pos:        position{line: 1523, col: 21, offset: 55871},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1527, col: 1, offset: 55948},
			expr: &actionExpr{
				pos: position{line: 1527, col: 25, offset: 55972},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1527, col: 25, offset: 55972},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1527, col: 25, offset: 55972},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1527, col: 38, offset: 55985},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1527, col: 60, offset: 56007},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1527, col: 64, offset: 56011},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1527, col: 73, offset: 56020},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1527, col: 95, offset: 56042},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1531, col: 1, offset: 56171},
			expr: &actionExpr{
				pos: position{line: 1531, col: 20, offset: 56190},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1531, col: 20, offset: 56190},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1531, col: 20, offset: 56190},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1531, col: 26, offset: 56196},
								expr: &ruleRefExpr{
									pos:  position{line: 1531, col: 27, offset: 56197},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1531, col: 45, offset: 56215},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 49, offset: 56219},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1531, col: 58, offset: 56228},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1531, col: 82, offset: 56252},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1535, col: 1, offset: 56350},
			expr: &choiceExpr{
				pos: position{line: 1535, col: 27, offset: 56376},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1535, col: 27, offset: 56376},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1535, col: 40, offset: 56389},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1537, col: 1, offset: 56410},
			expr: &actionExpr{
				pos: position{line: 1537, col: 23, offset: 56432},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1537, col: 23, offset: 56432},
					expr: &charClassMatcher{
						pos:        position{line: 1537, col: 23, offset: 56432},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1541, col: 1, offset: 56509},
			expr: &actionExpr{
				pos: position{line: 1541, col: 27, offset: 56535},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1541, col: 27, offset: 56535},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1541, col: 27, offset: 56535},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1541, col: 40, offset: 56548},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1541, col: 62, offset: 56570},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1541, col: 66, offset: 56574},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1541, col: 75, offset: 56583},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1541, col: 99, offset: 56607},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1548, col: 1, offset: 56849},
			expr: &choiceExpr{
				pos: position{line: 1548, col: 22, offset: 56870},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1548, col: 22, offset: 56870},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1548, col: 46, offset: 56894},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1548, col: 70, offset: 56918},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1550, col: 1, offset: 56936},
			expr: &litMatcher{
				pos:        position{line: 1550, col: 32, offset: 56967},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1552, col: 1, offset: 56972},
			expr: &actionExpr{
				pos: position{line: 1552, col: 26, offset: 56997},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1552, col: 26, offset: 56997},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1552, col: 26, offset: 56997},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1552, col: 54, offset: 57025},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 63, offset: 57034},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1552, col: 93, offset: 57064},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1552, col: 121, offset: 57092},
							expr: &ruleRefExpr{
								pos:  position{line: 1552, col: 122, offset: 57093},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1556, col: 1, offset: 57198},
			expr: &choiceExpr{
				pos: position{line: 1556, col: 33, offset: 57230},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1556, col: 34, offset: 57231},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1556, col: 34, offset: 57231},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1556, col: 35, offset: 57232},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1556, col: 35, offset: 57232},
											expr: &ruleRefExpr{
												pos:  position{line: 1556, col: 36, offset: 57233},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1556, col: 64, offset: 57261},
											expr: &ruleRefExpr{
												pos:  position{line: 1556, col: 65, offset: 57262},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1556, col: 71, offset: 57268},
											expr: &ruleRefExpr{
												pos:  position{line: 1556, col: 72, offset: 57269},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1556, col: 80, offset: 57277,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1556, col: 83, offset: 57280},
									expr: &seqExpr{
										pos: position{line: 1556, col: 84, offset: 57281},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1556, col: 84, offset: 57281},
												expr: &seqExpr{
													pos: position{line: 1556, col: 86, offset: 57283},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1556, col: 86, offset: 57283},
															expr: &ruleRefExpr{
																pos:  position{line: 1556, col: 86, offset: 57283},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1556, col: 93, offset: 57290},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1556, col: 122, offset: 57319},
												expr: &ruleRefExpr{
													pos:  position{line: 1556, col: 123, offset: 57320},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1556, col: 151, offset: 57348},
												expr: &ruleRefExpr{
													pos:  position{line: 1556, col: 152, offset: 57349},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1556, col: 160, offset: 57357,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1558, col: 7, offset: 57499},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1558, col: 8, offset: 57500},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1558, col: 8, offset: 57500},
									expr: &ruleRefExpr{
										pos:  position{line: 1558, col: 9, offset: 57501},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1558, col: 15, offset: 57507},
									expr: &ruleRefExpr{
										pos:  position{line: 1558, col: 16, offset: 57508},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1558, col: 24, offset: 57516},
									expr: &ruleRefExpr{
										pos:  position{line: 1558, col: 25, offset: 57517},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1558, col: 53, offset: 57545,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1562, col: 1, offset: 57627},
			expr: &litMatcher{
				pos:        position{line: 1562, col: 32, offset: 57658},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1564, col: 1, offset: 57665},
			expr: &actionExpr{
				pos: position{line: 1564, col: 26, offset: 57690},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1564, col: 26, offset: 57690},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1564, col: 26, offset: 57690},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1564, col: 54, offset: 57718},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 63, offset: 57727},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1564, col: 93, offset: 57757},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1564, col: 121, offset: 57785},
							expr: &ruleRefExpr{
								pos:  position{line: 1564, col: 122, offset: 57786},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1568, col: 1, offset: 57891},
			expr: &choiceExpr{
				pos: position{line: 1568, col: 33, offset: 57923},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1568, col: 34, offset: 57924},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1568, col: 34, offset: 57924},
							expr: &seqExpr{
								pos: position{line: 1568, col: 35, offset: 57925},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1568, col: 35, offset: 57925},
										expr: &ruleRefExpr{
											pos:  position{line: 1568, col: 36, offset: 57926},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1568, col: 64, offset: 57954,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1570, col: 7, offset: 58119},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1570, col: 7, offset: 58119},
							expr: &seqExpr{
								pos: position{line: 1570, col: 8, offset: 58120},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1570, col: 8, offset: 58120},
										expr: &ruleRefExpr{
											pos:  position{line: 1570, col: 9, offset: 58121},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1570, col: 15, offset: 58127},
										expr: &ruleRefExpr{
											pos:  position{line: 1570, col: 16, offset: 58128},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1570, col: 24, offset: 58136},
										expr: &ruleRefExpr{
											pos:  position{line: 1570, col: 25, offset: 58137},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1570, col: 53, offset: 58165,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1574, col: 1, offset: 58248},
			expr: &choiceExpr{
				pos: position{line: 1574, col: 21, offset: 58268},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1574, col: 21, offset: 58268},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1574, col: 21, offset: 58268},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1574, col: 21, offset: 58268},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1574, col: 30, offset: 58277},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1574, col: 38, offset: 58285},
										expr: &ruleRefExpr{
											pos:  position{line: 1574, col: 39, offset: 58286},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1574, col: 67, offset: 58314},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1576, col: 5, offset: 58410},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1576, col: 5, offset: 58410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1576, col: 5, offset: 58410},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1576, col: 15, offset: 58420},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1576, col: 23, offset: 58428},
										expr: &choiceExpr{
											pos: position{line: 1576, col: 24, offset: 58429},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1576, col: 24, offset: 58429},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1576, col: 37, offset: 58442},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1576, col: 65, offset: 58470},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1580, col: 1, offset: 58566},
			expr: &actionExpr{
				pos: position{line: 1580, col: 30, offset: 58595},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1580, col: 30, offset: 58595},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1587, col: 1, offset: 58768},
			expr: &choiceExpr{
				pos: position{line: 1587, col: 19, offset: 58786},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1587, col: 19, offset: 58786},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1587, col: 44, offset: 58811},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1589, col: 1, offset: 58836},
			expr: &choiceExpr{
				pos: position{line: 1589, col: 27, offset: 58862},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1589, col: 27, offset: 58862},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1589, col: 27, offset: 58862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1589, col: 27, offset: 58862},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1589, col: 32, offset: 58867},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1589, col: 36, offset: 58871},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1589, col: 40, offset: 58875},
									expr: &ruleRefExpr{
										pos:  position{line: 1589, col: 40, offset: 58875},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1589, col: 47, offset: 58882},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1589, col: 51, offset: 58886},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1589, col: 58, offset: 58893},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1589, col: 79, offset: 58914},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1591, col: 5, offset: 58997},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1591, col: 5, offset: 58997},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1591, col: 5, offset: 58997},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1591, col: 10, offset: 59002},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 14, offset: 59006},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1591, col: 18, offset: 59010},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1595, col: 1, offset: 59082},
			expr: &actionExpr{
				pos: position{line: 1595, col: 27, offset: 59108},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 27, offset: 59108},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1595, col: 27, offset: 59108},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 35, offset: 59116},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 40, offset: 59121},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 54, offset: 59135},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 72, offset: 59153},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1599, col: 1, offset: 59276},
			expr: &ruleRefExpr{
				pos:  position{line: 1599, col: 24, offset: 59299},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1604, col: 1, offset: 59421},
			expr: &choiceExpr{
				pos: position{line: 1604, col: 9, offset: 59429},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1604, col: 9, offset: 59429},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 24, offset: 59444},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1607, col: 1, offset: 59525},
			expr: &actionExpr{
				pos: position{line: 1607, col: 17, offset: 59541},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 17, offset: 59541},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1607, col: 17, offset: 59541},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 25, offset: 59549},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 30, offset: 59554},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 40, offset: 59564},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 58, offset: 59582},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1611, col: 1, offset: 59693},
			expr: &actionExpr{
				pos: position{line: 1611, col: 17, offset: 59709},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 17, offset: 59709},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1611, col: 17, offset: 59709},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1611, col: 22, offset: 59714},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 42, offset: 59734},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1611, col: 59, offset: 59751},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 60, offset: 59752},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1615, col: 1, offset: 59845},
			expr: &actionExpr{
				pos: position{line: 1615, col: 19, offset: 59863},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1615, col: 19, offset: 59863},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1615, col: 19, offset: 59863},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 23, offset: 59867},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1615, col: 33, offset: 59877},
								expr: &ruleRefExpr{
									pos:  position{line: 1615, col: 34, offset: 59878},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1616, col: 5, offset: 59910},
							expr: &ruleRefExpr{
								pos:  position{line: 1616, col: 5, offset: 59910},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1616, col: 12, offset: 59917},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1616, col: 23, offset: 59928},
								expr: &ruleRefExpr{
									pos:  position{line: 1616, col: 24, offset: 59929},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1616, col: 43, offset: 59948},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1620, col: 1, offset: 60065},
			expr: &actionExpr{
				pos: position{line: 1620, col: 30, offset: 60094},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1620, col: 30, offset: 60094},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1622, col: 5, offset: 60145},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1622, col: 6, offset: 60146},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1622, col: 6, offset: 60146},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1622, col: 6, offset: 60146},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1622, col: 11, offset: 60151},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1622, col: 20, offset: 60160},
												expr: &choiceExpr{
													pos: position{line: 1622, col: 21, offset: 60161},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1622, col: 21, offset: 60161},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1622, col: 36, offset: 60176},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1622, col: 49, offset: 60189},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1622, col: 71, offset: 60211},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1622, col: 76, offset: 60216},
											expr: &notExpr{
												pos: position{line: 1622, col: 78, offset: 60218},
												expr: &litMatcher{
													pos:        position{line: 1622, col: 79, offset: 60219},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1622, col: 84, offset: 60224},
											expr: &litMatcher{
												pos:        position{line: 1622, col: 84, offset: 60224},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1626, col: 6, offset: 60351},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1626, col: 6, offset: 60351},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1626, col: 6, offset: 60351},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1626, col: 15, offset: 60360},
												expr: &choiceExpr{
													pos: position{line: 1626, col: 16, offset: 60361},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1626, col: 16, offset: 60361},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1626, col: 31, offset: 60376},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1626, col: 44, offset: 60389},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1626, col: 68, offset: 60413},
											expr: &notExpr{
												pos: position{line: 1626, col: 70, offset: 60415},
												expr: &litMatcher{
													pos:        position{line: 1626, col: 71, offset: 60416},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1626, col: 76, offset: 60421},
											expr: &litMatcher{
												pos:        position{line: 1626, col: 76, offset: 60421},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1632, col: 1, offset: 60535},
			expr: &actionExpr{
				pos: position{line: 1632, col: 18, offset: 60552},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1632, col: 18, offset: 60552},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1636, col: 1, offset: 60638},
			expr: &actionExpr{
				pos: position{line: 1636, col: 24, offset: 60661},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1636, col: 24, offset: 60661},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1640, col: 1, offset: 60754},
			expr: &actionExpr{
				pos: position{line: 1640, col: 26, offset: 60779},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1640, col: 26, offset: 60779},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1645, col: 1, offset: 60935},
			expr: &actionExpr{
				pos: position{line: 1646, col: 5, offset: 60954},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1646, col: 5, offset: 60954},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1646, col: 5, offset: 60954},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1646, col: 14, offset: 60963},
								expr: &choiceExpr{
									pos: position{line: 1646, col: 15, offset: 60964},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1646, col: 15, offset: 60964},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1647, col: 11, offset: 60979},
											name: "SpecialCharacter",
										},
										&oneOrMoreExpr{
											pos: position{line: 1648, col: 11, offset: 61006},
											expr: &ruleRefExpr{
												pos:  position{line: 1648, col: 11, offset: 61006},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1649, col: 11, offset: 61024},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1650, col: 11, offset: 61048},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1651, col: 11, offset: 61070},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1652, col: 11, offset: 61098},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1653, col: 11, offset: 61116},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1653, col: 21, offset: 61126},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1657, col: 1, offset: 61196},
			expr: &choiceExpr{
				pos: position{line: 1657, col: 17, offset: 61212},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1657, col: 17, offset: 61212},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1657, col: 40, offset: 61235},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1660, col: 1, offset: 61363},
			expr: &actionExpr{
				pos: position{line: 1660, col: 25, offset: 61387},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1660, col: 25, offset: 61387},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1660, col: 25, offset: 61387},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 33, offset: 61395},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1660, col: 38, offset: 61400},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1660, col: 38, offset: 61400},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1660, col: 57, offset: 61419},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1660, col: 79, offset: 61441},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1660, col: 97, offset: 61459},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1664, col: 1, offset: 61570},
			expr: &actionExpr{
				pos: position{line: 1664, col: 25, offset: 61594},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 25, offset: 61594},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1664, col: 25, offset: 61594},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 30, offset: 61599},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 48, offset: 61617},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1664, col: 65, offset: 61634},
								expr: &ruleRefExpr{
									pos:  position{line: 1664, col: 66, offset: 61635},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1671, col: 1, offset: 61830},
			expr: &actionExpr{
				pos: position{line: 1671, col: 15, offset: 61844},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1671, col: 15, offset: 61844},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1671, col: 15, offset: 61844},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1671, col: 26, offset: 61855},
								expr: &ruleRefExpr{
									pos:  position{line: 1671, col: 27, offset: 61856},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1671, col: 45, offset: 61874},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1671, col: 55, offset: 61884},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1671, col: 61, offset: 61890},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1671, col: 71, offset: 61900},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1671, col: 84, offset: 61913},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1671, col: 102, offset: 61931},
							expr: &ruleRefExpr{
								pos:  position{line: 1671, col: 102, offset: 61931},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1671, col: 109, offset: 61938},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1675, col: 1, offset: 62045},
			expr: &actionExpr{
				pos: position{line: 1675, col: 16, offset: 62060},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1675, col: 16, offset: 62060},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1675, col: 16, offset: 62060},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1675, col: 25, offset: 62069},
							expr: &litMatcher{
								pos:        position{line: 1675, col: 26, offset: 62070},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1675, col: 30, offset: 62074},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 36, offset: 62080},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1675, col: 46, offset: 62090},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 59, offset: 62103},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1679, col: 1, offset: 62213},
			expr: &actionExpr{
				pos: position{line: 1679, col: 21, offset: 62233},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1679, col: 21, offset: 62233},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1679, col: 21, offset: 62233},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1679, col: 25, offset: 62237},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1679, col: 29, offset: 62241},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1679, col: 44, offset: 62256},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1679, col: 46, offset: 62258},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1679, col: 57, offset: 62269},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1679, col: 59, offset: 62271},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1679, col: 71, offset: 62283},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1679, col: 74, offset: 62286},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1679, col: 85, offset: 62297},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1683, col: 1, offset: 62359},
			expr: &choiceExpr{
				pos: position{line: 1683, col: 20, offset: 62378},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1683, col: 20, offset: 62378},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1683, col: 36, offset: 62394},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1683, col: 51, offset: 62409},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1685, col: 1, offset: 62420},
			expr: &actionExpr{
				pos: position{line: 1685, col: 18, offset: 62437},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1685, col: 18, offset: 62437},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1685, col: 18, offset: 62437},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1685, col: 22, offset: 62441},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1685, col: 29, offset: 62448},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1685, col: 29, offset: 62448},
										expr: &ruleRefExpr{
											pos:  position{line: 1685, col: 29, offset: 62448},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1685, col: 43, offset: 62462},
										expr: &ruleRefExpr{
											pos:  position{line: 1685, col: 43, offset: 62462},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1685, col: 58, offset: 62477},
										expr: &ruleRefExpr{
											pos:  position{line: 1685, col: 58, offset: 62477},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1685, col: 74, offset: 62493},
										expr: &ruleRefExpr{
											pos:  position{line: 1685, col: 74, offset: 62493},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1685, col: 91, offset: 62510},
										expr: &ruleRefExpr{
											pos:  position{line: 1685, col: 91, offset: 62510},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1685, col: 103, offset: 62522},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1685, col: 107, offset: 62526},
							expr: &ruleRefExpr{
								pos:  position{line: 1685, col: 107, offset: 62526},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1685, col: 114, offset: 62533},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1689, col: 1, offset: 62587},
			expr: &actionExpr{
				pos: position{line: 1689, col: 19, offset: 62605},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1689, col: 19, offset: 62605},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1689, col: 25, offset: 62611},
						expr: &ruleRefExpr{
							pos:  position{line: 1689, col: 25, offset: 62611},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1693, col: 1, offset: 62690},
			expr: &actionExpr{
				pos: position{line: 1693, col: 15, offset: 62704},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1693, col: 15, offset: 62704},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1693, col: 15, offset: 62704},
							expr: &litMatcher{
								pos:        position{line: 1693, col: 15, offset: 62704},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1693, col: 20, offset: 62709},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1693, col: 26, offset: 62715},
								expr: &ruleRefExpr{
									pos:  position{line: 1693, col: 26, offset: 62715},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1697, col: 1, offset: 62791},
			expr: &actionExpr{
				pos: position{line: 1697, col: 16, offset: 62806},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1697, col: 16, offset: 62806},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1697, col: 16, offset: 62806},
							expr: &litMatcher{
								pos:        position{line: 1697, col: 16, offset: 62806},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1697, col: 21, offset: 62811},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1697, col: 27, offset: 62817},
								expr: &ruleRefExpr{
									pos:  position{line: 1697, col: 27, offset: 62817},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1701, col: 1, offset: 62899},
			expr: &actionExpr{
				pos: position{line: 1701, col: 17, offset: 62915},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1701, col: 17, offset: 62915},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1701, col: 17, offset: 62915},
							expr: &ruleRefExpr{
								pos:  position{line: 1701, col: 17, offset: 62915},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1701, col: 24, offset: 62922},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1701, col: 30, offset: 62928},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1701, col: 46, offset: 62944},
							expr: &ruleRefExpr{
								pos:  position{line: 1701, col: 46, offset: 62944},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1705, col: 1, offset: 63029},
			expr: &actionExpr{
				pos: position{line: 1705, col: 19, offset: 63047},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1705, col: 19, offset: 63047},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1705, col: 19, offset: 63047},
							expr: &ruleRefExpr{
								pos:  position{line: 1705, col: 19, offset: 63047},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1705, col: 26, offset: 63054},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1705, col: 30, offset: 63058},
							expr: &ruleRefExpr{
								pos:  position{line: 1705, col: 30, offset: 63058},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1705, col: 37, offset: 63065},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1705, col: 43, offset: 63071},
								expr: &ruleRefExpr{
									pos:  position{line: 1705, col: 43, offset: 63071},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1712, col: 1, offset: 63215},
			expr: &actionExpr{
				pos: position{line: 1712, col: 20, offset: 63234},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1712, col: 20, offset: 63234},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1712, col: 20, offset: 63234},
							expr: &ruleRefExpr{
								pos:  position{line: 1712, col: 20, offset: 63234},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1712, col: 27, offset: 63241},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1712, col: 31, offset: 63245},
							expr: &ruleRefExpr{
								pos:  position{line: 1712, col: 31, offset: 63245},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1712, col: 38, offset: 63252},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1712, col: 44, offset: 63258},
								expr: &ruleRefExpr{
									pos:  position{line: 1712, col: 44, offset: 63258},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1723, col: 1, offset: 63601},
			expr: &actionExpr{
				pos: position{line: 1723, col: 15, offset: 63615},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1723, col: 15, offset: 63615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1723, col: 15, offset: 63615},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 23, offset: 63623},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1723, col: 29, offset: 63629},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1723, col: 29, offset: 63629},
									expr: &charClassMatcher{
										pos:        position{line: 1723, col: 29, offset: 63629},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1723, col: 73, offset: 63673},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1723, col: 80, offset: 63680},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1727, col: 1, offset: 63762},
			expr: &actionExpr{
				pos: position{line: 1727, col: 14, offset: 63775},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1727, col: 14, offset: 63775},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1727, col: 14, offset: 63775},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1727, col: 18, offset: 63779},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1727, col: 23, offset: 63784},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1727, col: 32, offset: 63793},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1727, col: 35, offset: 63796},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1727, col: 46, offset: 63807},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1731, col: 1, offset: 63864},
			expr: &actionExpr{
				pos: position{line: 1731, col: 13, offset: 63876},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1731, col: 13, offset: 63876},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1731, col: 19, offset: 63882},
						expr: &ruleRefExpr{
							pos:  position{line: 1731, col: 19, offset: 63882},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1738, col: 1, offset: 64158},
			expr: &choiceExpr{
				pos: position{line: 1738, col: 19, offset: 64176},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1738, col: 19, offset: 64176},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1738, col: 19, offset: 64176},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1738, col: 19, offset: 64176},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1738, col: 32, offset: 64189},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1738, col: 41, offset: 64198},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1738, col: 58, offset: 64215},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1740, col: 5, offset: 64283},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1740, col: 5, offset: 64283},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1740, col: 5, offset: 64283},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1740, col: 17, offset: 64295},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1740, col: 22, offset: 64300},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1740, col: 35, offset: 64313},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1740, col: 39, offset: 64317},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1740, col: 47, offset: 64325},
										expr: &ruleRefExpr{
											pos:  position{line: 1740, col: 48, offset: 64326},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1740, col: 66, offset: 64344},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1744, col: 1, offset: 64405},
			expr: &ruleRefExpr{
				pos:  position{line: 1744, col: 16, offset: 64420},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1746, col: 1, offset: 64431},
			expr: &actionExpr{
				pos: position{line: 1746, col: 20, offset: 64450},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1746, col: 20, offset: 64450},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1746, col: 29, offset: 64459},
						expr: &seqExpr{
							pos: position{line: 1746, col: 30, offset: 64460},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1746, col: 30, offset: 64460},
									expr: &litMatcher{
										pos:        position{line: 1746, col: 31, offset: 64461},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1746, col: 35, offset: 64465},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1753, col: 1, offset: 64789},
			expr: &actionExpr{
				pos: position{line: 1753, col: 19, offset: 64807},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1753, col: 19, offset: 64807},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1753, col: 19, offset: 64807},
							expr: &ruleRefExpr{
								pos:  position{line: 1753, col: 20, offset: 64808},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1754, col: 5, offset: 64896},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1754, col: 12, offset: 64903},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1754, col: 12, offset: 64903},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1755, col: 11, offset: 64926},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1756, col: 11, offset: 64950},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1757, col: 11, offset: 64974},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1758, col: 11, offset: 64995},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1759, col: 11, offset: 65018},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1760, col: 11, offset: 65046},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1761, col: 11, offset: 65073},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1762, col: 11, offset: 65089},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1766, col: 1, offset: 65130},
			expr: &choiceExpr{
				pos: position{line: 1766, col: 19, offset: 65148},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1766, col: 19, offset: 65148},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1766, col: 19, offset: 65148},
								expr: &ruleRefExpr{
									pos:  position{line: 1766, col: 21, offset: 65150},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1766, col: 31, offset: 65160},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1767, col: 19, offset: 65231},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1768, col: 19, offset: 65271},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1769, col: 19, offset: 65312},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1770, col: 19, offset: 65353},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1771, col: 19, offset: 65394},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1772, col: 19, offset: 65432},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1773, col: 19, offset: 65472},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1775, col: 1, offset: 65499},
			expr: &choiceExpr{
				pos: position{line: 1775, col: 26, offset: 65524},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1775, col: 26, offset: 65524},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1775, col: 42, offset: 65540},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1777, col: 1, offset: 65549},
			expr: &actionExpr{
				pos: position{line: 1777, col: 12, offset: 65560},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1777, col: 12, offset: 65560},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1777, col: 12, offset: 65560},
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 13, offset: 65561},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1777, col: 17, offset: 65565},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1777, col: 26, offset: 65574},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1777, col: 42, offset: 65590},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1781, col: 1, offset: 65670},
			expr: &actionExpr{
				pos: position{line: 1781, col: 19, offset: 65688},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1781, col: 19, offset: 65688},
					expr: &charClassMatcher{
						pos:        position{line: 1781, col: 19, offset: 65688},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1785, col: 1, offset: 65735},
			expr: &actionExpr{
				pos: position{line: 1785, col: 20, offset: 65754},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1785, col: 20, offset: 65754},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1785, col: 20, offset: 65754},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1785, col: 25, offset: 65759},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1785, col: 48, offset: 65782},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1785, col: 61, offset: 65795},
								expr: &ruleRefExpr{
									pos:  position{line: 1785, col: 61, offset: 65795},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1789, col: 1, offset: 65892},
			expr: &actionExpr{
				pos: position{line: 1789, col: 26, offset: 65917},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1789, col: 26, offset: 65917},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1789, col: 26, offset: 65917},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1789, col: 30, offset: 65921},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1789, col: 35, offset: 65926},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1789, col: 35, offset: 65926},
									expr: &charClassMatcher{
										pos:        position{line: 1789, col: 35, offset: 65926},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1789, col: 83, offset: 65974},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1789, col: 87, offset: 65978},
							expr: &ruleRefExpr{
								pos:  position{line: 1789, col: 87, offset: 65978},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1796, col: 1, offset: 66205},
			expr: &seqExpr{
				pos: position{line: 1796, col: 25, offset: 66229},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1796, col: 25, offset: 66229},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1796, col: 31, offset: 66235},
						expr: &ruleRefExpr{
							pos:  position{line: 1796, col: 31, offset: 66235},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1796, col: 38, offset: 66242},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1798, col: 1, offset: 66302},
			expr: &seqExpr{
				pos: position{line: 1798, col: 30, offset: 66331},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1798, col: 30, offset: 66331},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1798, col: 36, offset: 66337},
						expr: &ruleRefExpr{
							pos:  position{line: 1798, col: 36, offset: 66337},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1798, col: 43, offset: 66344},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1800, col: 1, offset: 66349},
			expr: &choiceExpr{
				pos: position{line: 1800, col: 28, offset: 66376},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1800, col: 29, offset: 66377},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1800, col: 29, offset: 66377},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1800, col: 35, offset: 66383},
								expr: &ruleRefExpr{
									pos:  position{line: 1800, col: 35, offset: 66383},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1800, col: 42, offset: 66390},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1800, col: 49, offset: 66397},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1802, col: 1, offset: 66402},
			expr: &actionExpr{
				pos: position{line: 1802, col: 16, offset: 66417},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1802, col: 16, offset: 66417},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1802, col: 16, offset: 66417},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1802, col: 27, offset: 66428},
								expr: &ruleRefExpr{
									pos:  position{line: 1802, col: 28, offset: 66429},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1802, col: 41, offset: 66442},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1802, col: 67, offset: 66468},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 76, offset: 66477},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1802, col: 99, offset: 66500},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1806, col: 1, offset: 66615},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1806, col: 26, offset: 66640},
				expr: &actionExpr{
					pos: position{line: 1806, col: 27, offset: 66641},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1806, col: 27, offset: 66641},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1806, col: 27, offset: 66641},
								expr: &ruleRefExpr{
									pos:  position{line: 1806, col: 28, offset: 66642},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1806, col: 52, offset: 66666},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1806, col: 58, offset: 66672},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1813, col: 1, offset: 67012},
			expr: &seqExpr{
				pos: position{line: 1813, col: 26, offset: 67037},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1813, col: 26, offset: 67037},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1813, col: 33, offset: 67044},
						expr: &ruleRefExpr{
							pos:  position{line: 1813, col: 33, offset: 67044},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 40, offset: 67051},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1815, col: 1, offset: 67056},
			expr: &seqExpr{
				pos: position{line: 1815, col: 31, offset: 67086},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1815, col: 31, offset: 67086},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1815, col: 38, offset: 67093},
						expr: &ruleRefExpr{
							pos:  position{line: 1815, col: 38, offset: 67093},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 45, offset: 67100},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1817, col: 1, offset: 67105},
			expr: &choiceExpr{
				pos: position{line: 1817, col: 29, offset: 67133},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1817, col: 30, offset: 67134},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1817, col: 30, offset: 67134},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1817, col: 37, offset: 67141},
								expr: &ruleRefExpr{
									pos:  position{line: 1817, col: 37, offset: 67141},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1817, col: 44, offset: 67148},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 51, offset: 67155},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1819, col: 1, offset: 67160},
			expr: &actionExpr{
				pos: position{line: 1819, col: 17, offset: 67176},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1819, col: 17, offset: 67176},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1819, col: 17, offset: 67176},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1819, col: 28, offset: 67187},
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 29, offset: 67188},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1819, col: 42, offset: 67201},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1819, col: 69, offset: 67228},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1819, col: 78, offset: 67237},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1819, col: 102, offset: 67261},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1823, col: 1, offset: 67378},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1823, col: 27, offset: 67404},
				expr: &actionExpr{
					pos: position{line: 1823, col: 28, offset: 67405},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1823, col: 28, offset: 67405},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1823, col: 28, offset: 67405},
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 29, offset: 67406},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1823, col: 54, offset: 67431},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1823, col: 60, offset: 67437},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1830, col: 1, offset: 67777},
			expr: &seqExpr{
				pos: position{line: 1830, col: 26, offset: 67802},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1830, col: 26, offset: 67802},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1830, col: 33, offset: 67809},
						expr: &ruleRefExpr{
							pos:  position{line: 1830, col: 33, offset: 67809},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 40, offset: 67816},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1832, col: 1, offset: 67821},
			expr: &seqExpr{
				pos: position{line: 1832, col: 31, offset: 67851},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1832, col: 31, offset: 67851},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1832, col: 38, offset: 67858},
						expr: &ruleRefExpr{
							pos:  position{line: 1832, col: 38, offset: 67858},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1832, col: 45, offset: 67865},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1834, col: 1, offset: 67870},
			expr: &choiceExpr{
				pos: position{line: 1834, col: 29, offset: 67898},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1834, col: 30, offset: 67899},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1834, col: 30, offset: 67899},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1834, col: 37, offset: 67906},
								expr: &ruleRefExpr{
									pos:  position{line: 1834, col: 37, offset: 67906},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1834, col: 44, offset: 67913},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 51, offset: 67920},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1836, col: 1, offset: 67925},
			expr: &actionExpr{
				pos: position{line: 1836, col: 17, offset: 67941},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1836, col: 17, offset: 67941},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1836, col: 17, offset: 67941},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1836, col: 28, offset: 67952},
								expr: &ruleRefExpr{
									pos:  position{line: 1836, col: 29, offset: 67953},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1836, col: 42, offset: 67966},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1836, col: 69, offset: 67993},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1836, col: 78, offset: 68002},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1836, col: 102, offset: 68026},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1840, col: 1, offset: 68143},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1840, col: 27, offset: 68169},
				expr: &actionExpr{
					pos: position{line: 1840, col: 28, offset: 68170},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1840, col: 28, offset: 68170},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1840, col: 28, offset: 68170},
								expr: &ruleRefExpr{
									pos:  position{line: 1840, col: 29, offset: 68171},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1840, col: 54, offset: 68196},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1840, col: 60, offset: 68202},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1847, col: 1, offset: 68540},
			expr: &seqExpr{
				pos: position{line: 1847, col: 24, offset: 68563},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1847, col: 24, offset: 68563},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1847, col: 31, offset: 68570},
						expr: &ruleRefExpr{
							pos:  position{line: 1847, col: 31, offset: 68570},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1847, col: 38, offset: 68577},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1849, col: 1, offset: 68607},
			expr: &seqExpr{
				pos: position{line: 1849, col: 29, offset: 68635},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1849, col: 29, offset: 68635},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1849, col: 36, offset: 68642},
						expr: &ruleRefExpr{
							pos:  position{line: 1849, col: 36, offset: 68642},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1849, col: 43, offset: 68649},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1851, col: 1, offset: 68679},
			expr: &choiceExpr{
				pos: position{line: 1851, col: 27, offset: 68705},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1851, col: 28, offset: 68706},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1851, col: 28, offset: 68706},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1851, col: 35, offset: 68713},
								expr: &ruleRefExpr{
									pos:  position{line: 1851, col: 35, offset: 68713},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1851, col: 42, offset: 68720},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1851, col: 49, offset: 68727},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1853, col: 1, offset: 68757},
			expr: &actionExpr{
				pos: position{line: 1853, col: 15, offset: 68771},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1853, col: 15, offset: 68771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1853, col: 15, offset: 68771},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1853, col: 26, offset: 68782},
								expr: &ruleRefExpr{
									pos:  position{line: 1853, col: 27, offset: 68783},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1853, col: 40, offset: 68796},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1853, col: 65, offset: 68821},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1853, col: 74, offset: 68830},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1853, col: 101, offset: 68857},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1857, col: 1, offset: 68970},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1857, col: 30, offset: 68999},
				expr: &actionExpr{
					pos: position{line: 1857, col: 31, offset: 69000},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1857, col: 31, offset: 69000},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1857, col: 31, offset: 69000},
								expr: &ruleRefExpr{
									pos:  position{line: 1857, col: 32, offset: 69001},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1857, col: 55, offset: 69024},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1857, col: 61, offset: 69030},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1864, col: 1, offset: 69370},
			expr: &seqExpr{
				pos: position{line: 1864, col: 26, offset: 69395},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1864, col: 26, offset: 69395},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1864, col: 33, offset: 69402},
						expr: &ruleRefExpr{
							pos:  position{line: 1864, col: 33, offset: 69402},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1864, col: 40, offset: 69409},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1866, col: 1, offset: 69414},
			expr: &seqExpr{
				pos: position{line: 1866, col: 31, offset: 69444},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1866, col: 31, offset: 69444},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1866, col: 38, offset: 69451},
						expr: &ruleRefExpr{
							pos:  position{line: 1866, col: 38, offset: 69451},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1866, col: 45, offset: 69458},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1868, col: 1, offset: 69463},
			expr: &choiceExpr{
				pos: position{line: 1868, col: 29, offset: 69491},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1868, col: 30, offset: 69492},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1868, col: 30, offset: 69492},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1868, col: 37, offset: 69499},
								expr: &ruleRefExpr{
									pos:  position{line: 1868, col: 37, offset: 69499},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1868, col: 44, offset: 69506},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1868, col: 51, offset: 69513},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1870, col: 1, offset: 69518},
			expr: &actionExpr{
				pos: position{line: 1870, col: 17, offset: 69534},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1870, col: 17, offset: 69534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1870, col: 17, offset: 69534},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1870, col: 28, offset: 69545},
								expr: &ruleRefExpr{
									pos:  position{line: 1870, col: 29, offset: 69546},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1870, col: 42, offset: 69559},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1870, col: 69, offset: 69586},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1870, col: 78, offset: 69595},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1870, col: 102, offset: 69619},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1874, col: 1, offset: 69736},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1874, col: 27, offset: 69762},
				expr: &actionExpr{
					pos: position{line: 1874, col: 28, offset: 69763},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1874, col: 28, offset: 69763},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1874, col: 28, offset: 69763},
								expr: &ruleRefExpr{
									pos:  position{line: 1874, col: 29, offset: 69764},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1874, col: 54, offset: 69789},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1874, col: 60, offset: 69795},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1881, col: 1, offset: 70139},
			expr: &seqExpr{
				pos: position{line: 1881, col: 30, offset: 70168},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1881, col: 30, offset: 70168},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1881, col: 37, offset: 70175},
						expr: &ruleRefExpr{
							pos:  position{line: 1881, col: 37, offset: 70175},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1881, col: 44, offset: 70182},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1883, col: 1, offset: 70187},
			expr: &seqExpr{
				pos: position{line: 1883, col: 35, offset: 70221},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1883, col: 35, offset: 70221},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1883, col: 42, offset: 70228},
						expr: &ruleRefExpr{
							pos:  position{line: 1883, col: 42, offset: 70228},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1883, col: 49, offset: 70235},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1885, col: 1, offset: 70240},
			expr: &choiceExpr{
				pos: position{line: 1885, col: 33, offset: 70272},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1885, col: 34, offset: 70273},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1885, col: 34, offset: 70273},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1885, col: 41, offset: 70280},
								expr: &ruleRefExpr{
									pos:  position{line: 1885, col: 41, offset: 70280},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1885, col: 48, offset: 70287},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1885, col: 55, offset: 70294},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1887, col: 1, offset: 70299},
			expr: &actionExpr{
				pos: position{line: 1887, col: 21, offset: 70319},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1887, col: 21, offset: 70319},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1887, col: 21, offset: 70319},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1887, col: 32, offset: 70330},
								expr: &ruleRefExpr{
									pos:  position{line: 1887, col: 33, offset: 70331},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1887, col: 46, offset: 70344},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1887, col: 77, offset: 70375},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1887, col: 86, offset: 70384},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1887, col: 114, offset: 70412},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1891, col: 1, offset: 70537},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1891, col: 31, offset: 70567},
				expr: &actionExpr{
					pos: position{line: 1891, col: 32, offset: 70568},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1891, col: 32, offset: 70568},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1891, col: 32, offset: 70568},
								expr: &ruleRefExpr{
									pos:  position{line: 1891, col: 33, offset: 70569},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1891, col: 62, offset: 70598},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1891, col: 68, offset: 70604},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1896, col: 1, offset: 70766},
			expr: &actionExpr{
				pos: position{line: 1896, col: 18, offset: 70783},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1896, col: 18, offset: 70783},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1896, col: 19, offset: 70784},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1896, col: 19, offset: 70784},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1896, col: 27, offset: 70792},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1896, col: 37, offset: 70802},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1896, col: 45, offset: 70810},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1896, col: 55, offset: 70820},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1896, col: 63, offset: 70828},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1896, col: 72, offset: 70837},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalParagraphContentSubstitution",
			pos:  position{line: 1906, col: 1, offset: 71219},
			expr: &oneOrMoreExpr{
				pos: position{line: 1907, col: 5, offset: 71264},
				expr: &choiceExpr{
					pos: position{line: 1907, col: 9, offset: 71268},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1907, col: 9, offset: 71268},
							name: "SingleLineComment",
						},
						&seqExpr{
							pos: position{line: 1908, col: 13, offset: 71300},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1908, col: 13, offset: 71300},
									expr: &choiceExpr{
										pos: position{line: 1908, col: 14, offset: 71301},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1908, col: 14, offset: 71301},
												name: "InlineWord",
											},
											&ruleRefExpr{
												pos:  position{line: 1909, col: 15, offset: 71356},
												name: "LineBreak",
											},
											&oneOrMoreExpr{
												pos: position{line: 1910, col: 15, offset: 71405},
												expr: &ruleRefExpr{
													pos:  position{line: 1910, col: 15, offset: 71405},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1911, col: 15, offset: 71427},
												name: "Quotes",
											},
											&ruleRefExpr{
												pos:  position{line: 1912, col: 15, offset: 71448},
												name: "InlineMacros",
											},
											&ruleRefExpr{
												pos:  position{line: 1913, col: 15, offset: 71475},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1914, col: 15, offset: 71496},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1915, col: 15, offset: 71527},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1916, col: 15, offset: 71555},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1917, col: 15, offset: 71587},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1918, col: 15, offset: 71623},
												name: "AnyChar",
											},
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 1919, col: 16, offset: 71646},
									expr: &ruleRefExpr{
										pos:  position{line: 1919, col: 16, offset: 71646},
										name: "Newline",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quotes",
			pos:  position{line: 1922, col: 1, offset: 71664},
			expr: &ruleRefExpr{
				pos:  position{line: 1922, col: 11, offset: 71674},
				name: "QuotedText",
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1924, col: 1, offset: 71686},
			expr: &choiceExpr{
				pos: position{line: 1924, col: 17, offset: 71702},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1924, col: 17, offset: 71702},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1925, col: 19, offset: 71731},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1926, col: 19, offset: 71762},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1927, col: 19, offset: 71786},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1928, col: 19, offset: 71823},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1929, col: 19, offset: 71857},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1930, col: 19, offset: 71891},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1931, col: 19, offset: 71926},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1932, col: 19, offset: 71960},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1933, col: 19, offset: 71997},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ReplacementsSubstitution",
			pos:  position{line: 1935, col: 1, offset: 72020},
			expr: &seqExpr{
				pos: position{line: 1935, col: 29, offset: 72048},
				exprs: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 1935, col: 29, offset: 72048},
						expr: &choiceExpr{
							pos: position{line: 1935, col: 30, offset: 72049},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1935, col: 30, offset: 72049},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1936, col: 15, offset: 72071},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1937, col: 15, offset: 72126},
									expr: &ruleRefExpr{
										pos:  position{line: 1937, col: 15, offset: 72126},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1938, col: 15, offset: 72148},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1939, col: 15, offset: 72170},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1939, col: 25, offset: 72180},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NormalBlockContentSubstitution",
			pos:  position{line: 1942, col: 1, offset: 72232},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1942, col: 35, offset: 72266},
				expr: &ruleRefExpr{
					pos:  position{line: 1942, col: 35, offset: 72266},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1944, col: 1, offset: 72287},
			expr: &actionExpr{
				pos: position{line: 1945, col: 5, offset: 72314},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1945, col: 5, offset: 72314},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1945, col: 5, offset: 72314},
							expr: &ruleRefExpr{
								pos:  position{line: 1945, col: 6, offset: 72315},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1945, col: 10, offset: 72319},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1945, col: 19, offset: 72328},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1945, col: 19, offset: 72328},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1946, col: 15, offset: 72353},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1947, col: 15, offset: 72381},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1948, col: 15, offset: 72406},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1949, col: 15, offset: 72434},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1950, col: 15, offset: 72465},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1951, col: 15, offset: 72498},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1952, col: 15, offset: 72529},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1953, col: 15, offset: 72568},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1954, col: 15, offset: 72597},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1955, col: 15, offset: 72625},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1956, col: 15, offset: 72661},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1957, col: 15, offset: 72691},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1958, col: 15, offset: 72732},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1959, col: 15, offset: 72767},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimContentSubstitution",
			pos:  position{line: 1963, col: 1, offset: 72816},
			expr: &ruleRefExpr{
				pos:  position{line: 1963, col: 32, offset: 72847},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1965, col: 1, offset: 72861},
			expr: &actionExpr{
				pos: position{line: 1965, col: 17, offset: 72877},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1965, col: 17, offset: 72877},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1965, col: 17, offset: 72877},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1965, col: 26, offset: 72886},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1965, col: 47, offset: 72907},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1965, col: 56, offset: 72916},
								expr: &ruleRefExpr{
									pos:  position{line: 1965, col: 57, offset: 72917},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1965, col: 68, offset: 72928},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1969, col: 1, offset: 72998},
			expr: &actionExpr{
				pos: position{line: 1969, col: 24, offset: 73021},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1969, col: 24, offset: 73021},
					expr: &seqExpr{
						pos: position{line: 1969, col: 25, offset: 73022},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1969, col: 25, offset: 73022},
								expr: &ruleRefExpr{
									pos:  position{line: 1969, col: 26, offset: 73023},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1969, col: 36, offset: 73033},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1969, col: 36, offset: 73033},
										expr: &ruleRefExpr{
											pos:  position{line: 1969, col: 36, offset: 73033},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1969, col: 45, offset: 73042},
										expr: &charClassMatcher{
											pos:        position{line: 1969, col: 45, offset: 73042},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1973, col: 1, offset: 73092},
			expr: &oneOrMoreExpr{
				pos: position{line: 1973, col: 13, offset: 73104},
				expr: &ruleRefExpr{
					pos:  position{line: 1973, col: 13, offset: 73104},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1975, col: 1, offset: 73114},
			expr: &actionExpr{
				pos: position{line: 1975, col: 12, offset: 73125},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1975, col: 12, offset: 73125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1975, col: 12, offset: 73125},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1975, col: 16, offset: 73129},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1975, col: 21, offset: 73134},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1975, col: 21, offset: 73134},
									expr: &charClassMatcher{
										pos:        position{line: 1975, col: 21, offset: 73134},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1975, col: 69, offset: 73182},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1975, col: 73, offset: 73186},
							expr: &ruleRefExpr{
								pos:  position{line: 1975, col: 73, offset: 73186},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1975, col: 80, offset: 73193},
							expr: &choiceExpr{
								pos: position{line: 1975, col: 82, offset: 73195},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1975, col: 82, offset: 73195},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1975, col: 88, offset: 73201},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextSubstitution",
			pos:  position{line: 1980, col: 1, offset: 73303},
			expr: &actionExpr{
				pos: position{line: 1981, col: 5, offset: 73334},
				run: (*parser).callonQuotedTextSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1981, col: 5, offset: 73334},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1981, col: 14, offset: 73343},
						expr: &choiceExpr{
							pos: position{line: 1981, col: 15, offset: 73344},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1981, col: 15, offset: 73344},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1982, col: 11, offset: 73395},
									expr: &ruleRefExpr{
										pos:  position{line: 1982, col: 11, offset: 73395},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1983, col: 11, offset: 73413},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1984, col: 11, offset: 73435},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1985, col: 11, offset: 73453},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacrosSubstitution",
			pos:  position{line: 1990, col: 1, offset: 73594},
			expr: &actionExpr{
				pos: position{line: 1991, col: 5, offset: 73627},
				run: (*parser).callonInlineMacrosSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 1991, col: 5, offset: 73627},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1991, col: 14, offset: 73636},
						expr: &choiceExpr{
							pos: position{line: 1991, col: 15, offset: 73637},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1991, col: 15, offset: 73637},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1992, col: 11, offset: 73688},
									expr: &ruleRefExpr{
										pos:  position{line: 1992, col: 11, offset: 73688},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1993, col: 11, offset: 73706},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1994, col: 11, offset: 73729},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1995, col: 11, offset: 73747},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributesSubstitution",
			pos:  position{line: 2000, col: 1, offset: 73892},
			expr: &actionExpr{
				pos: position{line: 2001, col: 5, offset: 73923},
				run: (*parser).callonAttributesSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 2001, col: 5, offset: 73923},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2001, col: 14, offset: 73932},
						expr: &choiceExpr{
							pos: position{line: 2001, col: 15, offset: 73933},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2001, col: 15, offset: 73933},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 2002, col: 11, offset: 73984},
									expr: &ruleRefExpr{
										pos:  position{line: 2002, col: 11, offset: 73984},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2003, col: 11, offset: 74002},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 2004, col: 11, offset: 74034},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2005, col: 11, offset: 74052},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharactersSubstitution",
			pos:  position{line: 2009, col: 1, offset: 74143},
			expr: &actionExpr{
				pos: position{line: 2010, col: 5, offset: 74181},
				run: (*parser).callonSpecialCharactersSubstitution1,
				expr: &labeledExpr{
					pos:   position{line: 2010, col: 5, offset: 74181},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2010, col: 14, offset: 74190},
						expr: &choiceExpr{
							pos: position{line: 2010, col: 15, offset: 74191},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2010, col: 15, offset: 74191},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2011, col: 11, offset: 74218},
									name: "Word",
								},
								&oneOrMoreExpr{
									pos: position{line: 2012, col: 11, offset: 74233},
									expr: &ruleRefExpr{
										pos:  position{line: 2012, col: 11, offset: 74233},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2013, col: 11, offset: 74250},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 2014, col: 11, offset: 74268},
									name: "Newline",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NoneSubstitution",
			pos:  position{line: 2019, col: 1, offset: 74407},
			expr: &oneOrMoreExpr{
				pos: position{line: 2019, col: 21, offset: 74427},
				expr: &actionExpr{
					pos: position{line: 2020, col: 6, offset: 74434},
					run: (*parser).callonNoneSubstitution2,
					expr: &seqExpr{
						pos: position{line: 2020, col: 6, offset: 74434},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 2020, col: 6, offset: 74434},
								expr: &charClassMatcher{
									pos:        position{line: 2020, col: 6, offset: 74434},
									val:        "[^\\r\\n]",
									chars:      []rune{'\r', '\n'},
									ignoreCase: false,
									inverted:   true,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2020, col: 15, offset: 74443},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContentSubstitution",
			pos:  position{line: 2025, col: 1, offset: 74590},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2025, col: 34, offset: 74623},
				expr: &ruleRefExpr{
					pos:  position{line: 2025, col: 34, offset: 74623},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 2027, col: 1, offset: 74643},
			expr: &actionExpr{
				pos: position{line: 2027, col: 22, offset: 74664},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 2027, col: 22, offset: 74664},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2027, col: 22, offset: 74664},
							expr: &ruleRefExpr{
								pos:  position{line: 2027, col: 23, offset: 74665},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 2027, col: 27, offset: 74669},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2027, col: 36, offset: 74678},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2027, col: 36, offset: 74678},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 2027, col: 48, offset: 74690},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 2031, col: 1, offset: 74740},
			expr: &actionExpr{
				pos: position{line: 2031, col: 24, offset: 74763},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 2031, col: 24, offset: 74763},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2031, col: 30, offset: 74769},
						expr: &ruleRefExpr{
							pos:  position{line: 2031, col: 31, offset: 74770},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 2035, col: 1, offset: 74860},
			expr: &actionExpr{
				pos: position{line: 2035, col: 28, offset: 74887},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2035, col: 28, offset: 74887},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2035, col: 28, offset: 74887},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2035, col: 37, offset: 74896},
								expr: &ruleRefExpr{
									pos:  position{line: 2035, col: 38, offset: 74897},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2035, col: 54, offset: 74913},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 2042, col: 1, offset: 75155},
			expr: &actionExpr{
				pos: position{line: 2042, col: 10, offset: 75164},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 2042, col: 10, offset: 75164},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2042, col: 10, offset: 75164},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 2042, col: 16, offset: 75170},
								expr: &zeroOrMoreExpr{
									pos: position{line: 2042, col: 17, offset: 75171},
									expr: &ruleRefExpr{
										pos:  position{line: 2042, col: 17, offset: 75171},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2042, col: 31, offset: 75185},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2043, col: 5, offset: 75204},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 2043, col: 12, offset: 75211},
								expr: &ruleRefExpr{
									pos:  position{line: 2043, col: 13, offset: 75212},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2044, col: 5, offset: 75234},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2044, col: 11, offset: 75240},
								expr: &ruleRefExpr{
									pos:  position{line: 2044, col: 12, offset: 75241},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 2045, col: 6, offset: 75258},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2045, col: 6, offset: 75258},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 2045, col: 23, offset: 75275},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 2049, col: 1, offset: 75385},
			expr: &seqExpr{
				pos: position{line: 2049, col: 23, offset: 75407},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2049, col: 23, offset: 75407},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2049, col: 27, offset: 75411},
						expr: &ruleRefExpr{
							pos:  position{line: 2049, col: 27, offset: 75411},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 2051, col: 1, offset: 75419},
			expr: &seqExpr{
				pos: position{line: 2051, col: 19, offset: 75437},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2051, col: 19, offset: 75437},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2051, col: 26, offset: 75444},
						expr: &ruleRefExpr{
							pos:  position{line: 2051, col: 26, offset: 75444},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2051, col: 33, offset: 75451},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 2054, col: 1, offset: 75519},
			expr: &actionExpr{
				pos: position{line: 2054, col: 20, offset: 75538},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 2054, col: 20, offset: 75538},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2054, col: 20, offset: 75538},
							expr: &ruleRefExpr{
								pos:  position{line: 2054, col: 21, offset: 75539},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2054, col: 36, offset: 75554},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2054, col: 42, offset: 75560},
								expr: &ruleRefExpr{
									pos:  position{line: 2054, col: 43, offset: 75561},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2054, col: 55, offset: 75573},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 2054, col: 59, offset: 75577},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 2058, col: 1, offset: 75645},
			expr: &actionExpr{
				pos: position{line: 2058, col: 14, offset: 75658},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 2058, col: 14, offset: 75658},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2058, col: 14, offset: 75658},
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 15, offset: 75659},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 2058, col: 30, offset: 75674},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 2058, col: 36, offset: 75680},
								expr: &ruleRefExpr{
									pos:  position{line: 2058, col: 37, offset: 75681},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2058, col: 49, offset: 75693},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2058, col: 53, offset: 75697},
							expr: &ruleRefExpr{
								pos:  position{line: 2058, col: 53, offset: 75697},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 2062, col: 1, offset: 75766},
			expr: &actionExpr{
				pos: position{line: 2062, col: 14, offset: 75779},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 2062, col: 14, offset: 75779},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2062, col: 14, offset: 75779},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 2062, col: 33, offset: 75798},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2062, col: 42, offset: 75807},
								expr: &seqExpr{
									pos: position{line: 2062, col: 43, offset: 75808},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2062, col: 43, offset: 75808},
											expr: &ruleRefExpr{
												pos:  position{line: 2062, col: 44, offset: 75809},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 2062, col: 63, offset: 75828},
											expr: &ruleRefExpr{
												pos:  position{line: 2062, col: 64, offset: 75829},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2062, col: 68, offset: 75833},
											expr: &ruleRefExpr{
												pos:  position{line: 2062, col: 68, offset: 75833},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2062, col: 75, offset: 75840},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2062, col: 89, offset: 75854},
											expr: &ruleRefExpr{
												pos:  position{line: 2062, col: 89, offset: 75854},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 2069, col: 1, offset: 76103},
			expr: &seqExpr{
				pos: position{line: 2069, col: 26, offset: 76128},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2069, col: 26, offset: 76128},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2069, col: 33, offset: 76135},
						expr: &ruleRefExpr{
							pos:  position{line: 2069, col: 33, offset: 76135},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2069, col: 40, offset: 76142},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 2071, col: 1, offset: 76147},
			expr: &seqExpr{
				pos: position{line: 2071, col: 31, offset: 76177},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 2071, col: 31, offset: 76177},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 2071, col: 38, offset: 76184},
						expr: &ruleRefExpr{
							pos:  position{line: 2071, col: 38, offset: 76184},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2071, col: 45, offset: 76191},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 2073, col: 1, offset: 76196},
			expr: &choiceExpr{
				pos: position{line: 2073, col: 29, offset: 76224},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 2073, col: 30, offset: 76225},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 2073, col: 30, offset: 76225},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 2073, col: 37, offset: 76232},
								expr: &ruleRefExpr{
									pos:  position{line: 2073, col: 37, offset: 76232},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 2073, col: 44, offset: 76239},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2073, col: 51, offset: 76246},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 2075, col: 1, offset: 76251},
			expr: &actionExpr{
				pos: position{line: 2075, col: 17, offset: 76267},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 2075, col: 17, offset: 76267},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2075, col: 17, offset: 76267},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 2075, col: 44, offset: 76294},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2075, col: 53, offset: 76303},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2075, col: 78, offset: 76328},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 2079, col: 1, offset: 76438},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2079, col: 27, offset: 76464},
				expr: &actionExpr{
					pos: position{line: 2079, col: 28, offset: 76465},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 2079, col: 28, offset: 76465},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 2079, col: 28, offset: 76465},
								expr: &ruleRefExpr{
									pos:  position{line: 2079, col: 29, offset: 76466},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 2079, col: 54, offset: 76491},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 2079, col: 60, offset: 76497},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 2083, col: 1, offset: 76641},
			expr: &actionExpr{
				pos: position{line: 2083, col: 22, offset: 76662},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 2083, col: 22, offset: 76662},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2083, col: 22, offset: 76662},
							expr: &ruleRefExpr{
								pos:  position{line: 2083, col: 23, offset: 76663},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 2083, col: 45, offset: 76685},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 2083, col: 50, offset: 76690},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 2083, col: 59, offset: 76699},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2083, col: 85, offset: 76725},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2087, col: 1, offset: 76790},
			expr: &actionExpr{
				pos: position{line: 2087, col: 29, offset: 76818},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2087, col: 29, offset: 76818},
					expr: &charClassMatcher{
						pos:        position{line: 2087, col: 29, offset: 76818},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2095, col: 1, offset: 77131},
			expr: &choiceExpr{
				pos: position{line: 2095, col: 17, offset: 77147},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2095, col: 17, offset: 77147},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2095, col: 49, offset: 77179},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2095, col: 78, offset: 77208},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2097, col: 1, offset: 77244},
			expr: &litMatcher{
				pos:        position{line: 2097, col: 26, offset: 77269},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2100, col: 1, offset: 77341},
			expr: &actionExpr{
				pos: position{line: 2100, col: 31, offset: 77371},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2100, col: 31, offset: 77371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2100, col: 31, offset: 77371},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2100, col: 42, offset: 77382},
								expr: &ruleRefExpr{
									pos:  position{line: 2100, col: 43, offset: 77383},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2100, col: 56, offset: 77396},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2100, col: 63, offset: 77403},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2105, col: 1, offset: 77633},
			expr: &actionExpr{
				pos: position{line: 2106, col: 5, offset: 77673},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2106, col: 5, offset: 77673},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2106, col: 5, offset: 77673},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2106, col: 16, offset: 77684},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2106, col: 16, offset: 77684},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2106, col: 16, offset: 77684},
											expr: &ruleRefExpr{
												pos:  position{line: 2106, col: 16, offset: 77684},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2106, col: 23, offset: 77691},
											expr: &charClassMatcher{
												pos:        position{line: 2106, col: 23, offset: 77691},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2108, col: 8, offset: 77744},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2109, col: 5, offset: 77807},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2109, col: 16, offset: 77818},
								expr: &actionExpr{
									pos: position{line: 2110, col: 9, offset: 77828},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2110, col: 9, offset: 77828},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2110, col: 9, offset: 77828},
												expr: &ruleRefExpr{
													pos:  position{line: 2110, col: 10, offset: 77829},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2111, col: 9, offset: 77848},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2111, col: 20, offset: 77859},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2111, col: 20, offset: 77859},
														expr: &charClassMatcher{
															pos:        position{line: 2111, col: 20, offset: 77859},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2113, col: 12, offset: 77920},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2120, col: 1, offset: 78150},
			expr: &actionExpr{
				pos: position{line: 2120, col: 39, offset: 78188},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2120, col: 39, offset: 78188},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2120, col: 39, offset: 78188},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2120, col: 50, offset: 78199},
								expr: &ruleRefExpr{
									pos:  position{line: 2120, col: 51, offset: 78200},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2121, col: 9, offset: 78221},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2121, col: 31, offset: 78243},
							expr: &ruleRefExpr{
								pos:  position{line: 2121, col: 31, offset: 78243},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2121, col: 38, offset: 78250},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2121, col: 46, offset: 78258},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2121, col: 53, offset: 78265},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2121, col: 95, offset: 78307},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2121, col: 96, offset: 78308},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2121, col: 96, offset: 78308},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2121, col: 118, offset: 78330},
											expr: &ruleRefExpr{
												pos:  position{line: 2121, col: 118, offset: 78330},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2121, col: 125, offset: 78337},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2121, col: 132, offset: 78344},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2126, col: 1, offset: 78503},
			expr: &actionExpr{
				pos: position{line: 2126, col: 44, offset: 78546},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2126, col: 44, offset: 78546},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2126, col: 50, offset: 78552},
						expr: &ruleRefExpr{
							pos:  position{line: 2126, col: 51, offset: 78553},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2130, col: 1, offset: 78637},
			expr: &actionExpr{
				pos: position{line: 2131, col: 5, offset: 78692},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2131, col: 5, offset: 78692},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2131, col: 5, offset: 78692},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2131, col: 11, offset: 78698},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2131, col: 11, offset: 78698},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2131, col: 11, offset: 78698},
											expr: &ruleRefExpr{
												pos:  position{line: 2131, col: 12, offset: 78699},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2131, col: 34, offset: 78721},
											expr: &charClassMatcher{
												pos:        position{line: 2131, col: 34, offset: 78721},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2133, col: 8, offset: 78774},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2138, col: 1, offset: 78900},
			expr: &actionExpr{
				pos: position{line: 2139, col: 5, offset: 78938},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2139, col: 5, offset: 78938},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2139, col: 5, offset: 78938},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2139, col: 16, offset: 78949},
								expr: &ruleRefExpr{
									pos:  position{line: 2139, col: 17, offset: 78950},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2140, col: 5, offset: 78967},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2147, col: 5, offset: 79174},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2147, col: 12, offset: 79181},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2151, col: 1, offset: 79331},
			expr: &actionExpr{
				pos: position{line: 2151, col: 16, offset: 79346},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2151, col: 16, offset: 79346},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2156, col: 1, offset: 79429},
			expr: &actionExpr{
				pos: position{line: 2156, col: 39, offset: 79467},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2156, col: 39, offset: 79467},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2156, col: 45, offset: 79473},
						expr: &ruleRefExpr{
							pos:  position{line: 2156, col: 46, offset: 79474},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2160, col: 1, offset: 79554},
			expr: &actionExpr{
				pos: position{line: 2160, col: 38, offset: 79591},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2160, col: 38, offset: 79591},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2160, col: 38, offset: 79591},
							expr: &ruleRefExpr{
								pos:  position{line: 2160, col: 39, offset: 79592},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2160, col: 49, offset: 79602},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2160, col: 58, offset: 79611},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2160, col: 58, offset: 79611},
									expr: &charClassMatcher{
										pos:        position{line: 2160, col: 58, offset: 79611},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2162, col: 4, offset: 79656},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2169, col: 1, offset: 79842},
			expr: &actionExpr{
				pos: position{line: 2169, col: 14, offset: 79855},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2169, col: 14, offset: 79855},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2169, col: 14, offset: 79855},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2169, col: 19, offset: 79860},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2169, col: 25, offset: 79866},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2169, col: 43, offset: 79884},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2173, col: 1, offset: 79949},
			expr: &actionExpr{
				pos: position{line: 2173, col: 21, offset: 79969},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2173, col: 21, offset: 79969},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2173, col: 30, offset: 79978},
						expr: &choiceExpr{
							pos: position{line: 2173, col: 31, offset: 79979},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2173, col: 31, offset: 79979},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2173, col: 38, offset: 79986},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2173, col: 53, offset: 80001},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2173, col: 66, offset: 80014},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2173, col: 74, offset: 80022},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 2173, col: 93, offset: 80041},
									run: (*parser).callonIndexTermContent10,
									expr: &seqExpr{
										pos: position{line: 2173, col: 94, offset: 80042},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2173, col: 94, offset: 80042},
												expr: &litMatcher{
													pos:        position{line: 2173, col: 95, offset: 80043},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2173, col: 100, offset: 80048,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2179, col: 1, offset: 80154},
			expr: &actionExpr{
				pos: position{line: 2179, col: 23, offset: 80176},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2179, col: 23, offset: 80176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2179, col: 23, offset: 80176},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2179, col: 29, offset: 80182},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2179, col: 36, offset: 80189},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2180, col: 5, offset: 80221},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2180, col: 11, offset: 80227},
								expr: &actionExpr{
									pos: position{line: 2180, col: 12, offset: 80228},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2180, col: 12, offset: 80228},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2180, col: 12, offset: 80228},
												expr: &ruleRefExpr{
													pos:  position{line: 2180, col: 12, offset: 80228},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2180, col: 19, offset: 80235},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2180, col: 23, offset: 80239},
												expr: &ruleRefExpr{
													pos:  position{line: 2180, col: 23, offset: 80239},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2180, col: 30, offset: 80246},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2180, col: 39, offset: 80255},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2181, col: 5, offset: 80313},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2181, col: 11, offset: 80319},
								expr: &actionExpr{
									pos: position{line: 2181, col: 12, offset: 80320},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2181, col: 12, offset: 80320},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2181, col: 12, offset: 80320},
												expr: &ruleRefExpr{
													pos:  position{line: 2181, col: 12, offset: 80320},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2181, col: 19, offset: 80327},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2181, col: 23, offset: 80331},
												expr: &ruleRefExpr{
													pos:  position{line: 2181, col: 23, offset: 80331},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2181, col: 30, offset: 80338},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2181, col: 39, offset: 80347},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2182, col: 5, offset: 80405},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2186, col: 1, offset: 80484},
			expr: &actionExpr{
				pos: position{line: 2186, col: 30, offset: 80513},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2186, col: 30, offset: 80513},
					expr: &choiceExpr{
						pos: position{line: 2186, col: 31, offset: 80514},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2186, col: 31, offset: 80514},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2186, col: 42, offset: 80525},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2193, col: 1, offset: 80674},
			expr: &actionExpr{
				pos: position{line: 2193, col: 14, offset: 80687},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2193, col: 14, offset: 80687},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2193, col: 14, offset: 80687},
							expr: &ruleRefExpr{
								pos:  position{line: 2193, col: 15, offset: 80688},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2193, col: 19, offset: 80692},
							expr: &ruleRefExpr{
								pos:  position{line: 2193, col: 19, offset: 80692},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2193, col: 26, offset: 80699},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2201, col: 1, offset: 80844},
			expr: &choiceExpr{
				pos: position{line: 2201, col: 11, offset: 80854},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2201, col: 11, offset: 80854},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2201, col: 24, offset: 80867},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2201, col: 36, offset: 80879},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2201, col: 48, offset: 80891},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2201, col: 61, offset: 80904},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2203, col: 1, offset: 80914},
			expr: &actionExpr{
				pos: position{line: 2203, col: 15, offset: 80928},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2203, col: 15, offset: 80928},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2206, col: 1, offset: 80981},
			expr: &actionExpr{
				pos: position{line: 2206, col: 14, offset: 80994},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2206, col: 14, offset: 80994},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2209, col: 1, offset: 81048},
			expr: &actionExpr{
				pos: position{line: 2209, col: 14, offset: 81061},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2209, col: 14, offset: 81061},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2212, col: 1, offset: 81116},
			expr: &actionExpr{
				pos: position{line: 2212, col: 15, offset: 81130},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2212, col: 15, offset: 81130},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2215, col: 1, offset: 81184},
			expr: &actionExpr{
				pos: position{line: 2215, col: 13, offset: 81196},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2215, col: 13, offset: 81196},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2223, col: 1, offset: 81473},
			expr: &actionExpr{
				pos: position{line: 2223, col: 22, offset: 81494},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2223, col: 22, offset: 81494},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2223, col: 22, offset: 81494},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2223, col: 31, offset: 81503},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2223, col: 35, offset: 81507},
							expr: &charClassMatcher{
								pos:        position{line: 2223, col: 36, offset: 81508},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2232, col: 1, offset: 81870},
			expr: &actionExpr{
				pos: position{line: 2232, col: 21, offset: 81890},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 2232, col: 22, offset: 81891},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 2232, col: 22, offset: 81891},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 2232, col: 28, offset: 81897},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 2232, col: 34, offset: 81903},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&litMatcher{
							pos:        position{line: 2232, col: 40, offset: 81909},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2239, col: 1, offset: 82201},
			expr: &charClassMatcher{
				pos:        position{line: 2239, col: 13, offset: 82213},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2241, col: 1, offset: 82223},
			expr: &choiceExpr{
				pos: position{line: 2241, col: 16, offset: 82238},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2241, col: 16, offset: 82238},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2241, col: 22, offset: 82244},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2241, col: 28, offset: 82250},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2241, col: 34, offset: 82256},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2241, col: 40, offset: 82262},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2241, col: 46, offset: 82268},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2243, col: 1, offset: 82274},
			expr: &actionExpr{
				pos: position{line: 2243, col: 14, offset: 82287},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2243, col: 14, offset: 82287},
					expr: &charClassMatcher{
						pos:        position{line: 2243, col: 14, offset: 82287},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2247, col: 1, offset: 82333},
			expr: &choiceExpr{
				pos: position{line: 2251, col: 5, offset: 82660},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2251, col: 5, offset: 82660},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2251, col: 5, offset: 82660},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2251, col: 5, offset: 82660},
									expr: &charClassMatcher{
										pos:        position{line: 2251, col: 5, offset: 82660},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2251, col: 15, offset: 82670},
									expr: &choiceExpr{
										pos: position{line: 2251, col: 17, offset: 82672},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2251, col: 17, offset: 82672},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2251, col: 30, offset: 82685},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2253, col: 9, offset: 82755},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2253, col: 9, offset: 82755},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2253, col: 9, offset: 82755},
									expr: &charClassMatcher{
										pos:        position{line: 2253, col: 9, offset: 82755},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2253, col: 19, offset: 82765},
									expr: &seqExpr{
										pos: position{line: 2253, col: 20, offset: 82766},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2253, col: 20, offset: 82766},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2253, col: 27, offset: 82773},
												expr: &charClassMatcher{
													pos:        position{line: 2253, col: 27, offset: 82773},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2257, col: 1, offset: 82849},
			expr: &choiceExpr{
				pos: position{line: 2258, col: 5, offset: 82930},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2258, col: 5, offset: 82930},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2258, col: 5, offset: 82930},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2258, col: 5, offset: 82930},
									expr: &charClassMatcher{
										pos:        position{line: 2258, col: 5, offset: 82930},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2258, col: 19, offset: 82944},
									expr: &choiceExpr{
										pos: position{line: 2258, col: 21, offset: 82946},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2258, col: 21, offset: 82946},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2258, col: 31, offset: 82956},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2260, col: 9, offset: 83025},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2263, col: 1, offset: 83125},
			expr: &actionExpr{
				pos: position{line: 2263, col: 12, offset: 83136},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2263, col: 12, offset: 83136},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2267, col: 1, offset: 83201},
			expr: &actionExpr{
				pos: position{line: 2267, col: 17, offset: 83217},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2267, col: 17, offset: 83217},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2267, col: 22, offset: 83222},
						expr: &choiceExpr{
							pos: position{line: 2267, col: 23, offset: 83223},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2267, col: 23, offset: 83223},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2267, col: 34, offset: 83234},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2271, col: 1, offset: 83318},
			expr: &actionExpr{
				pos: position{line: 2271, col: 25, offset: 83342},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2271, col: 25, offset: 83342},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2271, col: 30, offset: 83347},
						expr: &charClassMatcher{
							pos:        position{line: 2271, col: 31, offset: 83348},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2275, col: 1, offset: 83420},
			expr: &actionExpr{
				pos: position{line: 2275, col: 13, offset: 83432},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2275, col: 13, offset: 83432},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2275, col: 13, offset: 83432},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2275, col: 20, offset: 83439},
								expr: &ruleRefExpr{
									pos:  position{line: 2275, col: 21, offset: 83440},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2275, col: 34, offset: 83453},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2275, col: 39, offset: 83458},
								expr: &choiceExpr{
									pos: position{line: 2275, col: 40, offset: 83459},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2275, col: 40, offset: 83459},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2275, col: 51, offset: 83470},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2279, col: 1, offset: 83558},
			expr: &actionExpr{
				pos: position{line: 2279, col: 23, offset: 83580},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2279, col: 23, offset: 83580},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2279, col: 23, offset: 83580},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2279, col: 31, offset: 83588},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2279, col: 43, offset: 83600},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2279, col: 48, offset: 83605},
								expr: &choiceExpr{
									pos: position{line: 2279, col: 49, offset: 83606},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2279, col: 49, offset: 83606},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2279, col: 60, offset: 83617},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2283, col: 1, offset: 83705},
			expr: &oneOrMoreExpr{
				pos: position{line: 2283, col: 13, offset: 83717},
				expr: &charClassMatcher{
					pos:        position{line: 2283, col: 14, offset: 83718},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2285, col: 1, offset: 83852},
			expr: &actionExpr{
				pos: position{line: 2285, col: 21, offset: 83872},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2285, col: 21, offset: 83872},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2285, col: 21, offset: 83872},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2285, col: 29, offset: 83880},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2285, col: 41, offset: 83892},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2285, col: 47, offset: 83898},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2290, col: 1, offset: 84146},
			expr: &oneOrMoreExpr{
				pos: position{line: 2290, col: 22, offset: 84167},
				expr: &charClassMatcher{
					pos:        position{line: 2290, col: 23, offset: 84168},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2292, col: 1, offset: 84300},
			expr: &actionExpr{
				pos: position{line: 2292, col: 9, offset: 84308},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2292, col: 9, offset: 84308},
					expr: &charClassMatcher{
						pos:        position{line: 2292, col: 9, offset: 84308},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2296, col: 1, offset: 84356},
			expr: &choiceExpr{
				pos: position{line: 2296, col: 15, offset: 84370},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2296, col: 15, offset: 84370},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2296, col: 27, offset: 84382},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2296, col: 40, offset: 84395},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2296, col: 51, offset: 84406},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2296, col: 62, offset: 84417},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2298, col: 1, offset: 84428},
			expr: &actionExpr{
				pos: position{line: 2298, col: 7, offset: 84434},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2298, col: 7, offset: 84434},
					expr: &charClassMatcher{
						pos:        position{line: 2298, col: 7, offset: 84434},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2302, col: 1, offset: 84559},
			expr: &actionExpr{
				pos: position{line: 2302, col: 10, offset: 84568},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2302, col: 10, offset: 84568},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2306, col: 1, offset: 84610},
			expr: &actionExpr{
				pos: position{line: 2306, col: 11, offset: 84620},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2306, col: 11, offset: 84620},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2306, col: 11, offset: 84620},
							expr: &litMatcher{
								pos:        position{line: 2306, col: 11, offset: 84620},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2306, col: 16, offset: 84625},
							expr: &ruleRefExpr{
								pos:  position{line: 2306, col: 16, offset: 84625},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2310, col: 1, offset: 84677},
			expr: &choiceExpr{
				pos: position{line: 2310, col: 10, offset: 84686},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2310, col: 10, offset: 84686},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2310, col: 16, offset: 84692},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2310, col: 16, offset: 84692},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2314, col: 1, offset: 84733},
			expr: &choiceExpr{
				pos: position{line: 2314, col: 12, offset: 84744},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2314, col: 12, offset: 84744},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2314, col: 21, offset: 84753},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2314, col: 28, offset: 84760},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2316, col: 1, offset: 84766},
			expr: &notExpr{
				pos: position{line: 2316, col: 8, offset: 84773},
				expr: &anyMatcher{
					line: 2316, col: 9, offset: 84774,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2318, col: 1, offset: 84777},
			expr: &choiceExpr{
				pos: position{line: 2318, col: 8, offset: 84784},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2318, col: 8, offset: 84784},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2318, col: 18, offset: 84794},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph34(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph34(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine6(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine6(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onQuotedTextSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonQuotedTextSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextSubstitution1(stack["elements"])
}

func (c *current) onInlineMacrosSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineMacrosSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacrosSubstitution1(stack["elements"])
}

func (c *current) onAttributesSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonAttributesSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributesSubstitution1(stack["elements"])
}

func (c *current) onSpecialCharactersSubstitution1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonSpecialCharactersSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharactersSubstitution1(stack["elements"])
}

func (c *current) onNoneSubstitution2() (interface{}, error) {
	// just text
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubstitution2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubstitution2()
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent10()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter1() (interface{}, error) {
	// "+" is parsed here for the sake of HTML output compatibility with Asciidoctor which replaces it with the `&#43;` entity
	return types.NewSpecialCharacter(string(c.text))
}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
