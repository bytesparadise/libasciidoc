// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 332},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 352},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 352},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 365},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 365},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 379},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 387},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 411},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 491},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 511},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 511},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 511},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 519},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 540},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 640},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 656},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 656},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 656},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 664},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 684},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 867},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 893},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 893},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 901},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 901},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 918},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 926},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 926},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1175},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1201},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1266},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1292},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1344},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1362},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1387},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1411},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1465},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1487},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1514},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1543},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1569},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1604},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1628},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1660},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1686},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1723},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1748},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 62, col: 1, offset: 1759},
			expr: &labeledExpr{
				pos:   position{line: 62, col: 47, offset: 1805},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 62, col: 54, offset: 1812},
					expr: &ruleRefExpr{
						pos:  position{line: 62, col: 55, offset: 1813},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1850},
			expr: &actionExpr{
				pos: position{line: 64, col: 38, offset: 1887},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 64, col: 38, offset: 1887},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 64, col: 38, offset: 1887},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 39, offset: 1888},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1897},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 65, col: 12, offset: 1904},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 65, col: 12, offset: 1904},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1929},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1981},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2005},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2030},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2052},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2079},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2108},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2135},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2170},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2194},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2226},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2252},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2289},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2314},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 83, col: 1, offset: 2352},
			expr: &labeledExpr{
				pos:   position{line: 83, col: 23, offset: 2374},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 83, col: 30, offset: 2381},
					expr: &ruleRefExpr{
						pos:  position{line: 83, col: 31, offset: 2382},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 85, col: 1, offset: 2403},
			expr: &actionExpr{
				pos: position{line: 85, col: 22, offset: 2424},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 85, col: 22, offset: 2424},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 85, col: 22, offset: 2424},
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 23, offset: 2425},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 2434},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 86, col: 12, offset: 2441},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 86, col: 12, offset: 2441},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 24, offset: 2453},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 93, col: 1, offset: 2599},
			expr: &ruleRefExpr{
				pos:  position{line: 93, col: 16, offset: 2614},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 95, col: 1, offset: 2632},
			expr: &actionExpr{
				pos: position{line: 95, col: 20, offset: 2651},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 95, col: 20, offset: 2651},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 95, col: 20, offset: 2651},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 41, offset: 2672},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 49, offset: 2680},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 50, offset: 2681},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 75, offset: 2706},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 99, col: 1, offset: 2786},
			expr: &seqExpr{
				pos: position{line: 99, col: 26, offset: 2811},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 99, col: 26, offset: 2811},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 99, col: 32, offset: 2817},
						expr: &ruleRefExpr{
							pos:  position{line: 99, col: 32, offset: 2817},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 39, offset: 2824},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 101, col: 1, offset: 2829},
			expr: &actionExpr{
				pos: position{line: 101, col: 27, offset: 2855},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 101, col: 27, offset: 2855},
					expr: &oneOrMoreExpr{
						pos: position{line: 101, col: 28, offset: 2856},
						expr: &seqExpr{
							pos: position{line: 101, col: 29, offset: 2857},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 29, offset: 2857},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 30, offset: 2858},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 101, col: 51, offset: 2879,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 108, col: 1, offset: 3045},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3063},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3063},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 108, col: 19, offset: 3063},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 108, col: 23, offset: 3067},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 23, offset: 3067},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 30, offset: 3074},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 37, offset: 3081},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 52, offset: 3096},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 108, col: 56, offset: 3100},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 56, offset: 3100},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 74, offset: 3118},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 9, offset: 3130},
							expr: &choiceExpr{
								pos: position{line: 109, col: 10, offset: 3131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 109, col: 10, offset: 3131},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 30, offset: 3151},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 9, offset: 3174},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 18, offset: 3183},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 18, offset: 3183},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 9, offset: 3210},
							expr: &choiceExpr{
								pos: position{line: 111, col: 10, offset: 3211},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 111, col: 10, offset: 3211},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 30, offset: 3231},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 9, offset: 3254},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 112, col: 19, offset: 3264},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 19, offset: 3264},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 116, col: 1, offset: 3365},
			expr: &choiceExpr{
				pos: position{line: 116, col: 20, offset: 3384},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 20, offset: 3384},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 116, col: 48, offset: 3412},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 118, col: 1, offset: 3442},
			expr: &actionExpr{
				pos: position{line: 118, col: 30, offset: 3471},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 30, offset: 3471},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 30, offset: 3471},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 30, offset: 3471},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 118, col: 37, offset: 3478},
							expr: &litMatcher{
								pos:        position{line: 118, col: 38, offset: 3479},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 42, offset: 3483},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 118, col: 51, offset: 3492},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 51, offset: 3492},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 68, offset: 3509},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 122, col: 1, offset: 3579},
			expr: &actionExpr{
				pos: position{line: 122, col: 33, offset: 3611},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 33, offset: 3611},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 33, offset: 3611},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 33, offset: 3611},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 40, offset: 3618},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 51, offset: 3629},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 59, offset: 3637},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 75, offset: 3653},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 126, col: 1, offset: 3732},
			expr: &actionExpr{
				pos: position{line: 126, col: 19, offset: 3750},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 126, col: 19, offset: 3750},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 19, offset: 3750},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 19, offset: 3750},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 26, offset: 3757},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 36, offset: 3767},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 56, offset: 3787},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 62, offset: 3793},
								expr: &ruleRefExpr{
									pos:  position{line: 126, col: 63, offset: 3794},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 85, offset: 3816},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 85, offset: 3816},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 126, col: 92, offset: 3823},
							expr: &litMatcher{
								pos:        position{line: 126, col: 92, offset: 3823},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 97, offset: 3828},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 97, offset: 3828},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 131, col: 1, offset: 3973},
			expr: &actionExpr{
				pos: position{line: 131, col: 23, offset: 3995},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 131, col: 23, offset: 3995},
					expr: &charClassMatcher{
						pos:        position{line: 131, col: 23, offset: 3995},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 135, col: 1, offset: 4042},
			expr: &actionExpr{
				pos: position{line: 135, col: 24, offset: 4065},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 135, col: 24, offset: 4065},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 135, col: 24, offset: 4065},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 28, offset: 4069},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 135, col: 35, offset: 4076},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 135, col: 36, offset: 4077},
									expr: &charClassMatcher{
										pos:        position{line: 135, col: 36, offset: 4077},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 137, col: 4, offset: 4124},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 143, col: 1, offset: 4285},
			expr: &actionExpr{
				pos: position{line: 143, col: 21, offset: 4305},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 143, col: 21, offset: 4305},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 21, offset: 4305},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 21, offset: 4305},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 143, col: 28, offset: 4312},
							expr: &litMatcher{
								pos:        position{line: 143, col: 29, offset: 4313},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 33, offset: 4317},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 144, col: 9, offset: 4336},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 144, col: 10, offset: 4337},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 144, col: 10, offset: 4337},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 144, col: 10, offset: 4337},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 144, col: 21, offset: 4348},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 45, offset: 4372},
													expr: &litMatcher{
														pos:        position{line: 144, col: 45, offset: 4372},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 50, offset: 4377},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 58, offset: 4385},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 59, offset: 4386},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 82, offset: 4409},
													expr: &litMatcher{
														pos:        position{line: 144, col: 82, offset: 4409},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 87, offset: 4414},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 97, offset: 4424},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 98, offset: 4425},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 146, col: 15, offset: 4542},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 146, col: 15, offset: 4542},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 146, col: 15, offset: 4542},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 146, col: 24, offset: 4551},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 146, col: 46, offset: 4573},
													expr: &litMatcher{
														pos:        position{line: 146, col: 46, offset: 4573},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 146, col: 51, offset: 4578},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 146, col: 61, offset: 4588},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 62, offset: 4589},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 13, offset: 4698},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 153, col: 1, offset: 4828},
			expr: &choiceExpr{
				pos: position{line: 153, col: 27, offset: 4854},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 27, offset: 4854},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 153, col: 27, offset: 4854},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 27, offset: 4854},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 4859},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 153, col: 39, offset: 4866},
									expr: &charClassMatcher{
										pos:        position{line: 153, col: 39, offset: 4866},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 155, col: 5, offset: 4914},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 155, col: 5, offset: 4914},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 155, col: 5, offset: 4914},
									expr: &litMatcher{
										pos:        position{line: 155, col: 5, offset: 4914},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 155, col: 11, offset: 4920},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 4927},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 4927},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 155, col: 29, offset: 4938},
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 29, offset: 4938},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 155, col: 36, offset: 4945},
									expr: &litMatcher{
										pos:        position{line: 155, col: 37, offset: 4946},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 159, col: 1, offset: 4986},
			expr: &actionExpr{
				pos: position{line: 159, col: 25, offset: 5010},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 25, offset: 5010},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 25, offset: 5010},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 163, col: 1, offset: 5056},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5082},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5082},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 27, offset: 5082},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 170, col: 1, offset: 5235},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5259},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 170, col: 25, offset: 5259},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 170, col: 25, offset: 5259},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 29, offset: 5263},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 35, offset: 5269},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 170, col: 50, offset: 5284},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 9, offset: 5297},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 15, offset: 5303},
								expr: &actionExpr{
									pos: position{line: 171, col: 16, offset: 5304},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 171, col: 17, offset: 5305},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 171, col: 17, offset: 5305},
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 17, offset: 5305},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 171, col: 24, offset: 5312},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 31, offset: 5319},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 173, col: 13, offset: 5393},
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 13, offset: 5393},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 20, offset: 5400},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 180, col: 1, offset: 5640},
			expr: &actionExpr{
				pos: position{line: 180, col: 18, offset: 5657},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 180, col: 18, offset: 5657},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 180, col: 18, offset: 5657},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 180, col: 28, offset: 5667},
							expr: &charClassMatcher{
								pos:        position{line: 180, col: 29, offset: 5668},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 184, col: 1, offset: 5716},
			expr: &actionExpr{
				pos: position{line: 184, col: 30, offset: 5745},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 184, col: 30, offset: 5745},
					expr: &charClassMatcher{
						pos:        position{line: 184, col: 30, offset: 5745},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 188, col: 1, offset: 5790},
			expr: &choiceExpr{
				pos: position{line: 188, col: 19, offset: 5808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 19, offset: 5808},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 188, col: 19, offset: 5808},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 188, col: 19, offset: 5808},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 24, offset: 5813},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 30, offset: 5819},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 188, col: 45, offset: 5834},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 188, col: 49, offset: 5838},
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 49, offset: 5838},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 56, offset: 5845},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5905},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 5905},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 190, col: 5, offset: 5905},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 190, col: 9, offset: 5909},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 15, offset: 5915},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 190, col: 30, offset: 5930},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 190, col: 35, offset: 5935},
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 35, offset: 5935},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 190, col: 42, offset: 5942},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 194, col: 1, offset: 6001},
			expr: &actionExpr{
				pos: position{line: 194, col: 26, offset: 6026},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 194, col: 26, offset: 6026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 26, offset: 6026},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 30, offset: 6030},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 36, offset: 6036},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 51, offset: 6051},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 198, col: 1, offset: 6117},
			expr: &actionExpr{
				pos: position{line: 198, col: 15, offset: 6131},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 198, col: 15, offset: 6131},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 198, col: 15, offset: 6131},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 198, col: 21, offset: 6137},
								expr: &ruleRefExpr{
									pos:  position{line: 198, col: 22, offset: 6138},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 198, col: 41, offset: 6157},
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 41, offset: 6157},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 202, col: 1, offset: 6227},
			expr: &actionExpr{
				pos: position{line: 202, col: 21, offset: 6247},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 202, col: 21, offset: 6247},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 202, col: 21, offset: 6247},
							expr: &choiceExpr{
								pos: position{line: 202, col: 23, offset: 6249},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 202, col: 23, offset: 6249},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 202, col: 29, offset: 6255},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 202, col: 35, offset: 6261},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 203, col: 5, offset: 6337},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 203, col: 11, offset: 6343},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 203, col: 11, offset: 6343},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6364},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6388},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6411},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6439},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6467},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6494},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6521},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6558},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6586},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6623},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 218, col: 1, offset: 6806},
			expr: &choiceExpr{
				pos: position{line: 218, col: 24, offset: 6829},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 218, col: 24, offset: 6829},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 218, col: 42, offset: 6847},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 220, col: 1, offset: 6864},
			expr: &choiceExpr{
				pos: position{line: 220, col: 14, offset: 6877},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 220, col: 14, offset: 6877},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 220, col: 14, offset: 6877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 220, col: 14, offset: 6877},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 220, col: 19, offset: 6882},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 23, offset: 6886},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 220, col: 27, offset: 6890},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 220, col: 32, offset: 6895},
									expr: &ruleRefExpr{
										pos:  position{line: 220, col: 32, offset: 6895},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 220, col: 39, offset: 6902},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 222, col: 5, offset: 6955},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 222, col: 5, offset: 6955},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 222, col: 5, offset: 6955},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 222, col: 10, offset: 6960},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 14, offset: 6964},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 222, col: 18, offset: 6968},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 222, col: 23, offset: 6973},
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 23, offset: 6973},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 30, offset: 6980},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 226, col: 1, offset: 7032},
			expr: &actionExpr{
				pos: position{line: 226, col: 20, offset: 7051},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 226, col: 20, offset: 7051},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 226, col: 20, offset: 7051},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 226, col: 25, offset: 7056},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 29, offset: 7060},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 226, col: 33, offset: 7064},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 226, col: 38, offset: 7069},
							expr: &ruleRefExpr{
								pos:  position{line: 226, col: 38, offset: 7069},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 232, col: 1, offset: 7346},
			expr: &actionExpr{
				pos: position{line: 232, col: 17, offset: 7362},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 232, col: 17, offset: 7362},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 17, offset: 7362},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 21, offset: 7366},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 28, offset: 7373},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 49, offset: 7394},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 236, col: 1, offset: 7452},
			expr: &actionExpr{
				pos: position{line: 236, col: 24, offset: 7475},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 236, col: 24, offset: 7475},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 236, col: 24, offset: 7475},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 236, col: 32, offset: 7483},
							expr: &charClassMatcher{
								pos:        position{line: 236, col: 32, offset: 7483},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 242, col: 1, offset: 7710},
			expr: &actionExpr{
				pos: position{line: 242, col: 16, offset: 7725},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 242, col: 16, offset: 7725},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 242, col: 16, offset: 7725},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 21, offset: 7730},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 242, col: 27, offset: 7736},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 242, col: 27, offset: 7736},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 242, col: 27, offset: 7736},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 242, col: 36, offset: 7745},
											expr: &charClassMatcher{
												pos:        position{line: 242, col: 36, offset: 7745},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 4, offset: 7792},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 8, offset: 7796},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 8, offset: 7796},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 15, offset: 7803},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 248, col: 1, offset: 7859},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 7879},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 7879},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 21, offset: 7879},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 33, offset: 7891},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 33, offset: 7891},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 248, col: 40, offset: 7898},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 252, col: 1, offset: 7950},
			expr: &actionExpr{
				pos: position{line: 252, col: 30, offset: 7979},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 252, col: 30, offset: 7979},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 252, col: 30, offset: 7979},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 39, offset: 7988},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 39, offset: 7988},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 46, offset: 7995},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 257, col: 1, offset: 8136},
			expr: &actionExpr{
				pos: position{line: 257, col: 30, offset: 8165},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 257, col: 30, offset: 8165},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 30, offset: 8165},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 257, col: 34, offset: 8169},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 37, offset: 8172},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 53, offset: 8188},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 57, offset: 8192},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 57, offset: 8192},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 64, offset: 8199},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 262, col: 1, offset: 8354},
			expr: &actionExpr{
				pos: position{line: 262, col: 21, offset: 8374},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 262, col: 21, offset: 8374},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 21, offset: 8374},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 263, col: 5, offset: 8389},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 263, col: 14, offset: 8398},
								expr: &actionExpr{
									pos: position{line: 263, col: 15, offset: 8399},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 263, col: 15, offset: 8399},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 263, col: 15, offset: 8399},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 263, col: 19, offset: 8403},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 263, col: 24, offset: 8408},
													expr: &ruleRefExpr{
														pos:  position{line: 263, col: 25, offset: 8409},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8464},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 264, col: 12, offset: 8471},
								expr: &actionExpr{
									pos: position{line: 264, col: 13, offset: 8472},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 264, col: 13, offset: 8472},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 264, col: 13, offset: 8472},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 17, offset: 8476},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 264, col: 22, offset: 8481},
													expr: &ruleRefExpr{
														pos:  position{line: 264, col: 23, offset: 8482},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 265, col: 5, offset: 8529},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 9, offset: 8533},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 9, offset: 8533},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 16, offset: 8540},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 270, col: 1, offset: 8691},
			expr: &actionExpr{
				pos: position{line: 270, col: 19, offset: 8709},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 270, col: 19, offset: 8709},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 19, offset: 8709},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 23, offset: 8713},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 270, col: 34, offset: 8724},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 35, offset: 8725},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 54, offset: 8744},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 58, offset: 8748},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 58, offset: 8748},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 65, offset: 8755},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 274, col: 1, offset: 8827},
			expr: &choiceExpr{
				pos: position{line: 274, col: 21, offset: 8847},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 274, col: 21, offset: 8847},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 49, offset: 8875},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 276, col: 1, offset: 8905},
			expr: &actionExpr{
				pos: position{line: 276, col: 30, offset: 8934},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 30, offset: 8934},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 276, col: 30, offset: 8934},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 35, offset: 8939},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 276, col: 49, offset: 8953},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 276, col: 53, offset: 8957},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 276, col: 59, offset: 8963},
								expr: &ruleRefExpr{
									pos:  position{line: 276, col: 60, offset: 8964},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 276, col: 77, offset: 8981},
							expr: &litMatcher{
								pos:        position{line: 276, col: 77, offset: 8981},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 82, offset: 8986},
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 82, offset: 8986},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 280, col: 1, offset: 9085},
			expr: &actionExpr{
				pos: position{line: 280, col: 33, offset: 9117},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 280, col: 33, offset: 9117},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 280, col: 33, offset: 9117},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 38, offset: 9122},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 52, offset: 9136},
							expr: &litMatcher{
								pos:        position{line: 280, col: 52, offset: 9136},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 280, col: 57, offset: 9141},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 57, offset: 9141},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 284, col: 1, offset: 9229},
			expr: &actionExpr{
				pos: position{line: 284, col: 17, offset: 9245},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 284, col: 17, offset: 9245},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 284, col: 17, offset: 9245},
							expr: &litMatcher{
								pos:        position{line: 284, col: 18, offset: 9246},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 26, offset: 9254},
							expr: &litMatcher{
								pos:        position{line: 284, col: 27, offset: 9255},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 35, offset: 9263},
							expr: &litMatcher{
								pos:        position{line: 284, col: 36, offset: 9264},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 284, col: 46, offset: 9274},
							expr: &oneOrMoreExpr{
								pos: position{line: 284, col: 48, offset: 9276},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 48, offset: 9276},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 56, offset: 9284},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 284, col: 61, offset: 9289},
								expr: &charClassMatcher{
									pos:        position{line: 284, col: 61, offset: 9289},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 75, offset: 9303},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 75, offset: 9303},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 288, col: 1, offset: 9346},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9364},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 288, col: 19, offset: 9364},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 288, col: 26, offset: 9371},
						expr: &charClassMatcher{
							pos:        position{line: 288, col: 26, offset: 9371},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 292, col: 1, offset: 9422},
			expr: &actionExpr{
				pos: position{line: 292, col: 29, offset: 9450},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 292, col: 29, offset: 9450},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 292, col: 29, offset: 9450},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 292, col: 36, offset: 9457},
								expr: &charClassMatcher{
									pos:        position{line: 292, col: 36, offset: 9457},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 292, col: 50, offset: 9471},
							expr: &litMatcher{
								pos:        position{line: 292, col: 51, offset: 9472},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 296, col: 1, offset: 9638},
			expr: &actionExpr{
				pos: position{line: 296, col: 21, offset: 9658},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 296, col: 21, offset: 9658},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 296, col: 21, offset: 9658},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 296, col: 36, offset: 9673},
							expr: &ruleRefExpr{
								pos:  position{line: 296, col: 36, offset: 9673},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 296, col: 43, offset: 9680},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 300, col: 1, offset: 9746},
			expr: &actionExpr{
				pos: position{line: 300, col: 20, offset: 9765},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 300, col: 20, offset: 9765},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 300, col: 20, offset: 9765},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 29, offset: 9774},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 29, offset: 9774},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 300, col: 36, offset: 9781},
							expr: &litMatcher{
								pos:        position{line: 300, col: 36, offset: 9781},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 41, offset: 9786},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 48, offset: 9793},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 49, offset: 9794},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 300, col: 66, offset: 9811},
							expr: &litMatcher{
								pos:        position{line: 300, col: 66, offset: 9811},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 71, offset: 9816},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 77, offset: 9822},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 78, offset: 9823},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 300, col: 95, offset: 9840},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 99, offset: 9844},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 99, offset: 9844},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 300, col: 106, offset: 9851},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 304, col: 1, offset: 9920},
			expr: &actionExpr{
				pos: position{line: 304, col: 20, offset: 9939},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 304, col: 20, offset: 9939},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 304, col: 20, offset: 9939},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 29, offset: 9948},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 29, offset: 9948},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 304, col: 36, offset: 9955},
							expr: &litMatcher{
								pos:        position{line: 304, col: 36, offset: 9955},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 41, offset: 9960},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 48, offset: 9967},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 49, offset: 9968},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 304, col: 66, offset: 9985},
							expr: &litMatcher{
								pos:        position{line: 304, col: 66, offset: 9985},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 304, col: 71, offset: 9990},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 304, col: 77, offset: 9996},
								expr: &ruleRefExpr{
									pos:  position{line: 304, col: 78, offset: 9997},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 304, col: 95, offset: 10014},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 304, col: 99, offset: 10018},
							expr: &ruleRefExpr{
								pos:  position{line: 304, col: 99, offset: 10018},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 304, col: 106, offset: 10025},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 308, col: 1, offset: 10112},
			expr: &actionExpr{
				pos: position{line: 308, col: 19, offset: 10130},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 308, col: 20, offset: 10131},
					expr: &charClassMatcher{
						pos:        position{line: 308, col: 20, offset: 10131},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 312, col: 1, offset: 10180},
			expr: &actionExpr{
				pos: position{line: 312, col: 21, offset: 10200},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 312, col: 21, offset: 10200},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 312, col: 21, offset: 10200},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 312, col: 25, offset: 10204},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 312, col: 31, offset: 10210},
								expr: &ruleRefExpr{
									pos:  position{line: 312, col: 32, offset: 10211},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 312, col: 51, offset: 10230},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 325, col: 1, offset: 10698},
			expr: &actionExpr{
				pos: position{line: 325, col: 20, offset: 10717},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 325, col: 20, offset: 10717},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 325, col: 27, offset: 10724},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 325, col: 27, offset: 10724},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 44, offset: 10741},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 332, col: 1, offset: 11003},
			expr: &actionExpr{
				pos: position{line: 332, col: 19, offset: 11021},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 332, col: 19, offset: 11021},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 332, col: 19, offset: 11021},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 332, col: 23, offset: 11025},
							label: "role",
							expr: &zeroOrOneExpr{
								pos: position{line: 332, col: 28, offset: 11030},
								expr: &ruleRefExpr{
									pos:  position{line: 332, col: 28, offset: 11030},
									name: "QuotedTextRoleWord",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 332, col: 48, offset: 11050},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 337, col: 1, offset: 11172},
			expr: &actionExpr{
				pos: position{line: 337, col: 23, offset: 11194},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &seqExpr{
					pos: position{line: 337, col: 23, offset: 11194},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 337, col: 23, offset: 11194},
							expr: &charClassMatcher{
								pos:        position{line: 337, col: 24, offset: 11195},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 29, offset: 11200},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 337, col: 35, offset: 11206},
								run: (*parser).callonQuotedTextRoleWord6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 337, col: 35, offset: 11206},
									expr: &charClassMatcher{
										pos:        position{line: 337, col: 35, offset: 11206},
										val:        "[^\\]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 346, col: 1, offset: 11513},
			expr: &actionExpr{
				pos: position{line: 346, col: 24, offset: 11536},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 346, col: 24, offset: 11536},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 24, offset: 11536},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 28, offset: 11540},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 346, col: 34, offset: 11546},
								expr: &choiceExpr{
									pos: position{line: 346, col: 36, offset: 11548},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 346, col: 36, offset: 11548},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 346, col: 58, offset: 11570},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 346, col: 79, offset: 11591},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 350, col: 1, offset: 11622},
			expr: &actionExpr{
				pos: position{line: 350, col: 24, offset: 11645},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 350, col: 24, offset: 11645},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 24, offset: 11645},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 28, offset: 11649},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 350, col: 34, offset: 11655},
								run: (*parser).callonQuotedTextShortRole5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 34, offset: 11655},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 34, offset: 11655},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 356, col: 1, offset: 11762},
			expr: &actionExpr{
				pos: position{line: 356, col: 22, offset: 11783},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 356, col: 22, offset: 11783},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 22, offset: 11783},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 26, offset: 11787},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 356, col: 30, offset: 11791},
								run: (*parser).callonQuotedTextShortID5,
								expr: &oneOrMoreExpr{
									pos: position{line: 356, col: 30, offset: 11791},
									expr: &charClassMatcher{
										pos:        position{line: 356, col: 30, offset: 11791},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 365, col: 1, offset: 11996},
			expr: &actionExpr{
				pos: position{line: 365, col: 12, offset: 12007},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 365, col: 12, offset: 12007},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 12, offset: 12007},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 365, col: 23, offset: 12018},
								expr: &ruleRefExpr{
									pos:  position{line: 365, col: 24, offset: 12019},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 366, col: 5, offset: 12036},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 366, col: 12, offset: 12043},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 366, col: 12, offset: 12043},
									expr: &litMatcher{
										pos:        position{line: 366, col: 13, offset: 12044},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 370, col: 5, offset: 12135},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 374, col: 5, offset: 12287},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 5, offset: 12287},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 374, col: 12, offset: 12294},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 19, offset: 12301},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 374, col: 34, offset: 12316},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 374, col: 38, offset: 12320},
								expr: &ruleRefExpr{
									pos:  position{line: 374, col: 38, offset: 12320},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 56, offset: 12338},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 378, col: 1, offset: 12444},
			expr: &actionExpr{
				pos: position{line: 378, col: 18, offset: 12461},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 378, col: 18, offset: 12461},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 378, col: 27, offset: 12470},
						expr: &seqExpr{
							pos: position{line: 378, col: 28, offset: 12471},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 378, col: 28, offset: 12471},
									expr: &ruleRefExpr{
										pos:  position{line: 378, col: 29, offset: 12472},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 378, col: 37, offset: 12480},
									expr: &ruleRefExpr{
										pos:  position{line: 378, col: 38, offset: 12481},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 378, col: 54, offset: 12497},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 382, col: 1, offset: 12618},
			expr: &actionExpr{
				pos: position{line: 382, col: 17, offset: 12634},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 382, col: 17, offset: 12634},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 382, col: 26, offset: 12643},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 382, col: 26, offset: 12643},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 383, col: 11, offset: 12658},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 384, col: 11, offset: 12703},
								expr: &ruleRefExpr{
									pos:  position{line: 384, col: 11, offset: 12703},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 385, col: 11, offset: 12721},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 386, col: 11, offset: 12746},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 387, col: 11, offset: 12774},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 388, col: 11, offset: 12797},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 389, col: 11, offset: 12812},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 11, offset: 12837},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 12858},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 392, col: 11, offset: 12890},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 399, col: 1, offset: 13041},
			expr: &seqExpr{
				pos: position{line: 399, col: 31, offset: 13071},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 399, col: 31, offset: 13071},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 399, col: 41, offset: 13081},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 404, col: 1, offset: 13192},
			expr: &actionExpr{
				pos: position{line: 404, col: 19, offset: 13210},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 404, col: 19, offset: 13210},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 404, col: 19, offset: 13210},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 25, offset: 13216},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 404, col: 40, offset: 13231},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 404, col: 45, offset: 13236},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 52, offset: 13243},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 68, offset: 13259},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 75, offset: 13266},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 408, col: 1, offset: 13381},
			expr: &actionExpr{
				pos: position{line: 408, col: 20, offset: 13400},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 408, col: 20, offset: 13400},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 408, col: 20, offset: 13400},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 26, offset: 13406},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 408, col: 41, offset: 13421},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 408, col: 45, offset: 13425},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 52, offset: 13432},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 408, col: 68, offset: 13448},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 408, col: 75, offset: 13455},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 412, col: 1, offset: 13571},
			expr: &actionExpr{
				pos: position{line: 412, col: 18, offset: 13588},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 412, col: 19, offset: 13589},
					expr: &charClassMatcher{
						pos:        position{line: 412, col: 19, offset: 13589},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 416, col: 1, offset: 13638},
			expr: &actionExpr{
				pos: position{line: 416, col: 19, offset: 13656},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 416, col: 19, offset: 13656},
					expr: &charClassMatcher{
						pos:        position{line: 416, col: 19, offset: 13656},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 420, col: 1, offset: 13704},
			expr: &actionExpr{
				pos: position{line: 420, col: 24, offset: 13727},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 420, col: 24, offset: 13727},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 420, col: 24, offset: 13727},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 420, col: 28, offset: 13731},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 420, col: 34, offset: 13737},
								expr: &ruleRefExpr{
									pos:  position{line: 420, col: 35, offset: 13738},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 54, offset: 13757},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 427, col: 1, offset: 13939},
			expr: &actionExpr{
				pos: position{line: 427, col: 18, offset: 13956},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 427, col: 18, offset: 13956},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 18, offset: 13956},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 427, col: 24, offset: 13962},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 427, col: 24, offset: 13962},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 427, col: 24, offset: 13962},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 427, col: 36, offset: 13974},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 427, col: 42, offset: 13980},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 427, col: 56, offset: 13994},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 427, col: 74, offset: 14012},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 429, col: 8, offset: 14159},
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 8, offset: 14159},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 429, col: 15, offset: 14166},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 433, col: 1, offset: 14218},
			expr: &actionExpr{
				pos: position{line: 433, col: 26, offset: 14243},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 433, col: 26, offset: 14243},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 433, col: 26, offset: 14243},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 433, col: 30, offset: 14247},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 433, col: 36, offset: 14253},
								expr: &choiceExpr{
									pos: position{line: 433, col: 37, offset: 14254},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 433, col: 37, offset: 14254},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 433, col: 59, offset: 14276},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 433, col: 80, offset: 14297},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 433, col: 99, offset: 14316},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 437, col: 1, offset: 14388},
			expr: &actionExpr{
				pos: position{line: 437, col: 24, offset: 14411},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 437, col: 24, offset: 14411},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 437, col: 24, offset: 14411},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 33, offset: 14420},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 40, offset: 14427},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 437, col: 66, offset: 14453},
							expr: &litMatcher{
								pos:        position{line: 437, col: 66, offset: 14453},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 441, col: 1, offset: 14512},
			expr: &actionExpr{
				pos: position{line: 441, col: 29, offset: 14540},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 441, col: 29, offset: 14540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 29, offset: 14540},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 441, col: 36, offset: 14547},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 441, col: 36, offset: 14547},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 442, col: 11, offset: 14664},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 443, col: 11, offset: 14700},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 444, col: 11, offset: 14726},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 445, col: 11, offset: 14758},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 446, col: 11, offset: 14790},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 447, col: 11, offset: 14817},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 447, col: 31, offset: 14837},
							expr: &ruleRefExpr{
								pos:  position{line: 447, col: 31, offset: 14837},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 447, col: 39, offset: 14845},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 447, col: 39, offset: 14845},
									expr: &litMatcher{
										pos:        position{line: 447, col: 40, offset: 14846},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 447, col: 46, offset: 14852},
									expr: &litMatcher{
										pos:        position{line: 447, col: 47, offset: 14853},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 451, col: 1, offset: 14885},
			expr: &actionExpr{
				pos: position{line: 451, col: 23, offset: 14907},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 451, col: 23, offset: 14907},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 23, offset: 14907},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 451, col: 30, offset: 14914},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 451, col: 30, offset: 14914},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 451, col: 47, offset: 14931},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 14953},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 452, col: 12, offset: 14960},
								expr: &actionExpr{
									pos: position{line: 452, col: 13, offset: 14961},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 452, col: 13, offset: 14961},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 452, col: 13, offset: 14961},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 452, col: 17, offset: 14965},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 452, col: 24, offset: 14972},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 452, col: 24, offset: 14972},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 452, col: 41, offset: 14989},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 458, col: 1, offset: 15127},
			expr: &actionExpr{
				pos: position{line: 458, col: 29, offset: 15155},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 458, col: 29, offset: 15155},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 458, col: 29, offset: 15155},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 458, col: 34, offset: 15160},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 458, col: 41, offset: 15167},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 458, col: 41, offset: 15167},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 458, col: 58, offset: 15184},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 459, col: 5, offset: 15206},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 459, col: 12, offset: 15213},
								expr: &actionExpr{
									pos: position{line: 459, col: 13, offset: 15214},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 459, col: 13, offset: 15214},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 459, col: 13, offset: 15214},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 459, col: 17, offset: 15218},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 459, col: 24, offset: 15225},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 459, col: 24, offset: 15225},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 459, col: 41, offset: 15242},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 461, col: 9, offset: 15295},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 465, col: 1, offset: 15385},
			expr: &actionExpr{
				pos: position{line: 465, col: 19, offset: 15403},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 465, col: 19, offset: 15403},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 465, col: 19, offset: 15403},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 26, offset: 15410},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 465, col: 34, offset: 15418},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 465, col: 39, offset: 15423},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 465, col: 44, offset: 15428},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 469, col: 1, offset: 15516},
			expr: &actionExpr{
				pos: position{line: 469, col: 25, offset: 15540},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 469, col: 25, offset: 15540},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 469, col: 25, offset: 15540},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 30, offset: 15545},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 37, offset: 15552},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 469, col: 45, offset: 15560},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 469, col: 50, offset: 15565},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 55, offset: 15570},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 469, col: 63, offset: 15578},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 473, col: 1, offset: 15663},
			expr: &actionExpr{
				pos: position{line: 473, col: 20, offset: 15682},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 473, col: 20, offset: 15682},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 473, col: 32, offset: 15694},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 477, col: 1, offset: 15789},
			expr: &actionExpr{
				pos: position{line: 477, col: 26, offset: 15814},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 477, col: 26, offset: 15814},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 477, col: 26, offset: 15814},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 477, col: 31, offset: 15819},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 477, col: 43, offset: 15831},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 477, col: 51, offset: 15839},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 481, col: 1, offset: 15931},
			expr: &actionExpr{
				pos: position{line: 481, col: 23, offset: 15953},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 481, col: 23, offset: 15953},
					expr: &charClassMatcher{
						pos:        position{line: 481, col: 23, offset: 15953},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 485, col: 1, offset: 15998},
			expr: &actionExpr{
				pos: position{line: 485, col: 23, offset: 16020},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 485, col: 23, offset: 16020},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 485, col: 24, offset: 16021},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 485, col: 24, offset: 16021},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 485, col: 34, offset: 16031},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 485, col: 42, offset: 16039},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 48, offset: 16045},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 485, col: 73, offset: 16070},
							expr: &litMatcher{
								pos:        position{line: 485, col: 73, offset: 16070},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 489, col: 1, offset: 16219},
			expr: &actionExpr{
				pos: position{line: 489, col: 28, offset: 16246},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 489, col: 28, offset: 16246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 489, col: 28, offset: 16246},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 35, offset: 16253},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 489, col: 54, offset: 16272},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 54, offset: 16272},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 489, col: 62, offset: 16280},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 489, col: 62, offset: 16280},
									expr: &litMatcher{
										pos:        position{line: 489, col: 63, offset: 16281},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 489, col: 69, offset: 16287},
									expr: &litMatcher{
										pos:        position{line: 489, col: 70, offset: 16288},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 493, col: 1, offset: 16320},
			expr: &actionExpr{
				pos: position{line: 493, col: 22, offset: 16341},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 493, col: 22, offset: 16341},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 493, col: 22, offset: 16341},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 29, offset: 16348},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 5, offset: 16362},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 494, col: 12, offset: 16369},
								expr: &actionExpr{
									pos: position{line: 494, col: 13, offset: 16370},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 494, col: 13, offset: 16370},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 494, col: 13, offset: 16370},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 494, col: 17, offset: 16374},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 494, col: 24, offset: 16381},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 500, col: 1, offset: 16512},
			expr: &choiceExpr{
				pos: position{line: 500, col: 13, offset: 16524},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 500, col: 13, offset: 16524},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 500, col: 13, offset: 16524},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 500, col: 18, offset: 16529},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 500, col: 18, offset: 16529},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 500, col: 30, offset: 16541},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 502, col: 5, offset: 16609},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 502, col: 5, offset: 16609},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 502, col: 5, offset: 16609},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 502, col: 9, offset: 16613},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 502, col: 14, offset: 16618},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 502, col: 14, offset: 16618},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 502, col: 26, offset: 16630},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 506, col: 1, offset: 16698},
			expr: &actionExpr{
				pos: position{line: 506, col: 16, offset: 16713},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 506, col: 16, offset: 16713},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 506, col: 16, offset: 16713},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 506, col: 23, offset: 16720},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 506, col: 23, offset: 16720},
									expr: &litMatcher{
										pos:        position{line: 506, col: 24, offset: 16721},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 509, col: 5, offset: 16775},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 517, col: 1, offset: 17017},
			expr: &zeroOrMoreExpr{
				pos: position{line: 517, col: 24, offset: 17040},
				expr: &choiceExpr{
					pos: position{line: 517, col: 25, offset: 17041},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 517, col: 25, offset: 17041},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 517, col: 41, offset: 17057},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 519, col: 1, offset: 17077},
			expr: &actionExpr{
				pos: position{line: 519, col: 21, offset: 17097},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 519, col: 21, offset: 17097},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 519, col: 21, offset: 17097},
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 22, offset: 17098},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 519, col: 26, offset: 17102},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 519, col: 35, offset: 17111},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 519, col: 35, offset: 17111},
									expr: &charClassMatcher{
										pos:        position{line: 519, col: 35, offset: 17111},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 521, col: 12, offset: 17173},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 528, col: 1, offset: 17372},
			expr: &actionExpr{
				pos: position{line: 528, col: 21, offset: 17392},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 528, col: 21, offset: 17392},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 528, col: 21, offset: 17392},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 528, col: 29, offset: 17400},
								expr: &choiceExpr{
									pos: position{line: 528, col: 30, offset: 17401},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 528, col: 30, offset: 17401},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 528, col: 53, offset: 17424},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 528, col: 74, offset: 17445},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 528, col: 74, offset: 17445,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 528, col: 107, offset: 17478},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 532, col: 1, offset: 17549},
			expr: &actionExpr{
				pos: position{line: 532, col: 25, offset: 17573},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 532, col: 25, offset: 17573},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 532, col: 25, offset: 17573},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 532, col: 33, offset: 17581},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 532, col: 38, offset: 17586},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 38, offset: 17586},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 532, col: 78, offset: 17626},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 536, col: 1, offset: 17691},
			expr: &actionExpr{
				pos: position{line: 536, col: 23, offset: 17713},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 536, col: 23, offset: 17713},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 536, col: 23, offset: 17713},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 536, col: 31, offset: 17721},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 536, col: 36, offset: 17726},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 536, col: 36, offset: 17726},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 536, col: 76, offset: 17766},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 543, col: 1, offset: 17930},
			expr: &choiceExpr{
				pos: position{line: 543, col: 18, offset: 17947},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 543, col: 18, offset: 17947},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 543, col: 18, offset: 17947},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 27, offset: 17956},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 545, col: 9, offset: 18013},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 545, col: 9, offset: 18013},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 545, col: 15, offset: 18019},
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 16, offset: 18020},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 549, col: 1, offset: 18112},
			expr: &actionExpr{
				pos: position{line: 549, col: 22, offset: 18133},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 549, col: 22, offset: 18133},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 549, col: 22, offset: 18133},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 23, offset: 18134},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 550, col: 5, offset: 18142},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 6, offset: 18143},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 551, col: 5, offset: 18158},
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 6, offset: 18159},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 552, col: 5, offset: 18181},
							expr: &ruleRefExpr{
								pos:  position{line: 552, col: 6, offset: 18182},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 553, col: 5, offset: 18208},
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 6, offset: 18209},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 554, col: 5, offset: 18237},
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 6, offset: 18238},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 555, col: 5, offset: 18264},
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 6, offset: 18265},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 556, col: 5, offset: 18290},
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 6, offset: 18291},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 557, col: 5, offset: 18312},
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 6, offset: 18313},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 558, col: 5, offset: 18332},
							expr: &ruleRefExpr{
								pos:  position{line: 558, col: 6, offset: 18333},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 5, offset: 18360},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 559, col: 11, offset: 18366},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 559, col: 11, offset: 18366},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 559, col: 20, offset: 18375},
										expr: &ruleRefExpr{
											pos:  position{line: 559, col: 21, offset: 18376},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 561, col: 12, offset: 18475},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 565, col: 1, offset: 18514},
			expr: &seqExpr{
				pos: position{line: 565, col: 25, offset: 18538},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 565, col: 25, offset: 18538},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 565, col: 29, offset: 18542},
						expr: &ruleRefExpr{
							pos:  position{line: 565, col: 29, offset: 18542},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 565, col: 36, offset: 18549},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 567, col: 1, offset: 18621},
			expr: &actionExpr{
				pos: position{line: 567, col: 29, offset: 18649},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 567, col: 29, offset: 18649},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 567, col: 29, offset: 18649},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 567, col: 50, offset: 18670},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 58, offset: 18678},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 571, col: 1, offset: 18784},
			expr: &actionExpr{
				pos: position{line: 571, col: 29, offset: 18812},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 571, col: 29, offset: 18812},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 571, col: 29, offset: 18812},
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 30, offset: 18813},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 572, col: 5, offset: 18822},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 572, col: 14, offset: 18831},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 572, col: 14, offset: 18831},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 573, col: 11, offset: 18856},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 574, col: 11, offset: 18880},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 575, col: 11, offset: 18934},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 576, col: 11, offset: 18956},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 577, col: 11, offset: 18983},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 578, col: 11, offset: 19012},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 580, col: 11, offset: 19077},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 581, col: 11, offset: 19128},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 582, col: 11, offset: 19152},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 583, col: 11, offset: 19184},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 584, col: 11, offset: 19210},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 585, col: 11, offset: 19247},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 11, offset: 19272},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 593, col: 1, offset: 19435},
			expr: &actionExpr{
				pos: position{line: 593, col: 20, offset: 19454},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 593, col: 20, offset: 19454},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 593, col: 20, offset: 19454},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 593, col: 31, offset: 19465},
								expr: &ruleRefExpr{
									pos:  position{line: 593, col: 32, offset: 19466},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 45, offset: 19479},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 53, offset: 19487},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 76, offset: 19510},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 85, offset: 19519},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 597, col: 1, offset: 19659},
			expr: &actionExpr{
				pos: position{line: 598, col: 5, offset: 19689},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 598, col: 5, offset: 19689},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 598, col: 5, offset: 19689},
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 5, offset: 19689},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 12, offset: 19696},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 600, col: 9, offset: 19759},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 600, col: 9, offset: 19759},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 600, col: 9, offset: 19759},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 600, col: 9, offset: 19759},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 600, col: 16, offset: 19766},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 600, col: 16, offset: 19766},
															expr: &litMatcher{
																pos:        position{line: 600, col: 17, offset: 19767},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 604, col: 9, offset: 19867},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 623, col: 11, offset: 20584},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 623, col: 11, offset: 20584},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 623, col: 11, offset: 20584},
													expr: &charClassMatcher{
														pos:        position{line: 623, col: 12, offset: 20585},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 623, col: 20, offset: 20593},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 625, col: 13, offset: 20704},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 625, col: 13, offset: 20704},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 625, col: 14, offset: 20705},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 625, col: 21, offset: 20712},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 627, col: 13, offset: 20826},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 627, col: 13, offset: 20826},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 627, col: 14, offset: 20827},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 627, col: 21, offset: 20834},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 629, col: 13, offset: 20948},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 629, col: 13, offset: 20948},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 629, col: 13, offset: 20948},
													expr: &charClassMatcher{
														pos:        position{line: 629, col: 14, offset: 20949},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 629, col: 22, offset: 20957},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 631, col: 13, offset: 21071},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 631, col: 13, offset: 21071},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 631, col: 13, offset: 21071},
													expr: &charClassMatcher{
														pos:        position{line: 631, col: 14, offset: 21072},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 631, col: 22, offset: 21080},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 633, col: 12, offset: 21193},
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 12, offset: 21193},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 637, col: 1, offset: 21228},
			expr: &actionExpr{
				pos: position{line: 637, col: 27, offset: 21254},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 637, col: 27, offset: 21254},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 637, col: 37, offset: 21264},
						expr: &ruleRefExpr{
							pos:  position{line: 637, col: 37, offset: 21264},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 644, col: 1, offset: 21464},
			expr: &actionExpr{
				pos: position{line: 644, col: 22, offset: 21485},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 644, col: 22, offset: 21485},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 644, col: 22, offset: 21485},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 33, offset: 21496},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 34, offset: 21497},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 47, offset: 21510},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 55, offset: 21518},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 80, offset: 21543},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 91, offset: 21554},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 92, offset: 21555},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 644, col: 122, offset: 21585},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 131, offset: 21594},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 648, col: 1, offset: 21752},
			expr: &actionExpr{
				pos: position{line: 649, col: 5, offset: 21784},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 649, col: 5, offset: 21784},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 649, col: 5, offset: 21784},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 5, offset: 21784},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 649, col: 12, offset: 21791},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 649, col: 20, offset: 21799},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 651, col: 9, offset: 21856},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 651, col: 9, offset: 21856},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 651, col: 9, offset: 21856},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 651, col: 16, offset: 21863},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 651, col: 16, offset: 21863},
															expr: &litMatcher{
																pos:        position{line: 651, col: 17, offset: 21864},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 655, col: 9, offset: 21964},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 672, col: 14, offset: 22671},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 672, col: 21, offset: 22678},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 672, col: 22, offset: 22679},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 674, col: 13, offset: 22765},
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 13, offset: 22765},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 678, col: 1, offset: 22801},
			expr: &actionExpr{
				pos: position{line: 678, col: 32, offset: 22832},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 678, col: 32, offset: 22832},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 678, col: 32, offset: 22832},
							expr: &litMatcher{
								pos:        position{line: 678, col: 33, offset: 22833},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 678, col: 37, offset: 22837},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 679, col: 7, offset: 22851},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 679, col: 7, offset: 22851},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 679, col: 7, offset: 22851},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 680, col: 7, offset: 22896},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 680, col: 7, offset: 22896},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 681, col: 7, offset: 22939},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 681, col: 7, offset: 22939},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 682, col: 7, offset: 22981},
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 7, offset: 22981},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 686, col: 1, offset: 23023},
			expr: &actionExpr{
				pos: position{line: 686, col: 29, offset: 23051},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 686, col: 29, offset: 23051},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 686, col: 39, offset: 23061},
						expr: &ruleRefExpr{
							pos:  position{line: 686, col: 39, offset: 23061},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 693, col: 1, offset: 23377},
			expr: &actionExpr{
				pos: position{line: 693, col: 20, offset: 23396},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 693, col: 20, offset: 23396},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 693, col: 20, offset: 23396},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 693, col: 31, offset: 23407},
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 32, offset: 23408},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 45, offset: 23421},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 51, offset: 23427},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 80, offset: 23456},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 91, offset: 23467},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 117, offset: 23493},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 693, col: 129, offset: 23505},
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 130, offset: 23506},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 697, col: 1, offset: 23652},
			expr: &seqExpr{
				pos: position{line: 697, col: 26, offset: 23677},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 697, col: 26, offset: 23677},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 697, col: 54, offset: 23705},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 699, col: 1, offset: 23731},
			expr: &actionExpr{
				pos: position{line: 699, col: 32, offset: 23762},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 699, col: 32, offset: 23762},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 699, col: 41, offset: 23771},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 699, col: 41, offset: 23771},
							expr: &charClassMatcher{
								pos:        position{line: 699, col: 41, offset: 23771},
								val:        "[^:\\r\\n]",
								chars:      []rune{':', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 705, col: 1, offset: 23905},
			expr: &actionExpr{
				pos: position{line: 705, col: 24, offset: 23928},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 705, col: 24, offset: 23928},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 705, col: 33, offset: 23937},
						expr: &seqExpr{
							pos: position{line: 705, col: 34, offset: 23938},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 705, col: 34, offset: 23938},
									expr: &ruleRefExpr{
										pos:  position{line: 705, col: 35, offset: 23939},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 705, col: 43, offset: 23947},
									expr: &litMatcher{
										pos:        position{line: 705, col: 44, offset: 23948},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 705, col: 49, offset: 23953},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 709, col: 1, offset: 24080},
			expr: &actionExpr{
				pos: position{line: 709, col: 31, offset: 24110},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 709, col: 31, offset: 24110},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 709, col: 40, offset: 24119},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 709, col: 40, offset: 24119},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 710, col: 11, offset: 24134},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 711, col: 11, offset: 24183},
								expr: &ruleRefExpr{
									pos:  position{line: 711, col: 11, offset: 24183},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 712, col: 11, offset: 24201},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 713, col: 11, offset: 24226},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 714, col: 11, offset: 24255},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 715, col: 11, offset: 24275},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 716, col: 11, offset: 24303},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 717, col: 11, offset: 24326},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 718, col: 11, offset: 24341},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 719, col: 11, offset: 24366},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 720, col: 11, offset: 24387},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 721, col: 11, offset: 24419},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 725, col: 1, offset: 24458},
			expr: &actionExpr{
				pos: position{line: 726, col: 5, offset: 24491},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 726, col: 5, offset: 24491},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 726, col: 5, offset: 24491},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 726, col: 16, offset: 24502},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 726, col: 16, offset: 24502},
									expr: &litMatcher{
										pos:        position{line: 726, col: 17, offset: 24503},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 729, col: 5, offset: 24561},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 733, col: 6, offset: 24737},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 733, col: 6, offset: 24737},
									expr: &choiceExpr{
										pos: position{line: 733, col: 7, offset: 24738},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 733, col: 7, offset: 24738},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 733, col: 15, offset: 24746},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 733, col: 27, offset: 24758},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 737, col: 1, offset: 24798},
			expr: &actionExpr{
				pos: position{line: 737, col: 31, offset: 24828},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 737, col: 31, offset: 24828},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 737, col: 40, offset: 24837},
						expr: &ruleRefExpr{
							pos:  position{line: 737, col: 41, offset: 24838},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 744, col: 1, offset: 25029},
			expr: &choiceExpr{
				pos: position{line: 744, col: 19, offset: 25047},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 744, col: 19, offset: 25047},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 744, col: 19, offset: 25047},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 746, col: 9, offset: 25093},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 746, col: 9, offset: 25093},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 748, col: 9, offset: 25141},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 748, col: 9, offset: 25141},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 750, col: 9, offset: 25199},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 750, col: 9, offset: 25199},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 752, col: 9, offset: 25253},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 752, col: 9, offset: 25253},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 761, col: 1, offset: 25560},
			expr: &choiceExpr{
				pos: position{line: 763, col: 5, offset: 25607},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 25607},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 25607},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 763, col: 5, offset: 25607},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 763, col: 16, offset: 25618},
										expr: &ruleRefExpr{
											pos:  position{line: 763, col: 17, offset: 25619},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 763, col: 30, offset: 25632},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 33, offset: 25635},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 763, col: 49, offset: 25651},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 763, col: 54, offset: 25656},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 763, col: 60, offset: 25662},
										expr: &ruleRefExpr{
											pos:  position{line: 763, col: 61, offset: 25663},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 25844},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 767, col: 5, offset: 25844},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 767, col: 5, offset: 25844},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 767, col: 16, offset: 25855},
										expr: &ruleRefExpr{
											pos:  position{line: 767, col: 17, offset: 25856},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 767, col: 30, offset: 25869},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 767, col: 35, offset: 25874},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 44, offset: 25883},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 771, col: 5, offset: 26078},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 771, col: 5, offset: 26078},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 771, col: 5, offset: 26078},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 771, col: 16, offset: 26089},
										expr: &ruleRefExpr{
											pos:  position{line: 771, col: 17, offset: 26090},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 771, col: 30, offset: 26103},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 778, col: 7, offset: 26382},
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 8, offset: 26383},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 778, col: 23, offset: 26398},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 778, col: 32, offset: 26407},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 782, col: 5, offset: 26604},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 782, col: 5, offset: 26604},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 782, col: 5, offset: 26604},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 782, col: 16, offset: 26615},
										expr: &ruleRefExpr{
											pos:  position{line: 782, col: 17, offset: 26616},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 782, col: 30, offset: 26629},
									expr: &ruleRefExpr{
										pos:  position{line: 782, col: 31, offset: 26630},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 782, col: 46, offset: 26645},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 782, col: 52, offset: 26651},
										expr: &ruleRefExpr{
											pos:  position{line: 782, col: 53, offset: 26652},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 786, col: 1, offset: 26748},
			expr: &oneOrMoreExpr{
				pos: position{line: 786, col: 38, offset: 26785},
				expr: &actionExpr{
					pos: position{line: 786, col: 39, offset: 26786},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 786, col: 39, offset: 26786},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 786, col: 39, offset: 26786},
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 40, offset: 26787},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 786, col: 50, offset: 26797},
								expr: &litMatcher{
									pos:        position{line: 786, col: 50, offset: 26797},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 786, col: 56, offset: 26803},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 786, col: 65, offset: 26812},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 790, col: 1, offset: 26953},
			expr: &actionExpr{
				pos: position{line: 790, col: 34, offset: 26986},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 790, col: 34, offset: 26986},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 790, col: 34, offset: 26986},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 790, col: 40, offset: 26992},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 790, col: 48, offset: 27000},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 790, col: 49, offset: 27001},
									expr: &charClassMatcher{
										pos:        position{line: 790, col: 49, offset: 27001},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 792, col: 8, offset: 27051},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 796, col: 1, offset: 27083},
			expr: &oneOrMoreExpr{
				pos: position{line: 796, col: 36, offset: 27118},
				expr: &actionExpr{
					pos: position{line: 796, col: 37, offset: 27119},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 796, col: 37, offset: 27119},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 796, col: 37, offset: 27119},
								expr: &ruleRefExpr{
									pos:  position{line: 796, col: 38, offset: 27120},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 796, col: 48, offset: 27130},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 796, col: 57, offset: 27139},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 801, col: 1, offset: 27352},
			expr: &actionExpr{
				pos: position{line: 801, col: 20, offset: 27371},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 801, col: 20, offset: 27371},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 801, col: 20, offset: 27371},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 801, col: 31, offset: 27382},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 32, offset: 27383},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 802, col: 5, offset: 27401},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 810, col: 5, offset: 27687},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 810, col: 16, offset: 27698},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 811, col: 5, offset: 27721},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 811, col: 16, offset: 27732},
								expr: &ruleRefExpr{
									pos:  position{line: 811, col: 17, offset: 27733},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 815, col: 1, offset: 27867},
			expr: &actionExpr{
				pos: position{line: 816, col: 5, offset: 27894},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 816, col: 5, offset: 27894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 816, col: 5, offset: 27894},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 816, col: 15, offset: 27904},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 816, col: 15, offset: 27904},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 816, col: 20, offset: 27909},
										expr: &ruleRefExpr{
											pos:  position{line: 816, col: 20, offset: 27909},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 816, col: 36, offset: 27925},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 820, col: 1, offset: 27996},
			expr: &actionExpr{
				pos: position{line: 820, col: 23, offset: 28018},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 820, col: 23, offset: 28018},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 820, col: 33, offset: 28028},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 825, col: 1, offset: 28148},
			expr: &choiceExpr{
				pos: position{line: 827, col: 5, offset: 28204},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 827, col: 5, offset: 28204},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 827, col: 5, offset: 28204},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 827, col: 5, offset: 28204},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 827, col: 16, offset: 28215},
										expr: &ruleRefExpr{
											pos:  position{line: 827, col: 17, offset: 28216},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 827, col: 30, offset: 28229},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 827, col: 33, offset: 28232},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 827, col: 49, offset: 28248},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 827, col: 54, offset: 28253},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 827, col: 61, offset: 28260},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 831, col: 5, offset: 28460},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 831, col: 5, offset: 28460},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 831, col: 5, offset: 28460},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 831, col: 16, offset: 28471},
										expr: &ruleRefExpr{
											pos:  position{line: 831, col: 17, offset: 28472},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 831, col: 30, offset: 28485},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 831, col: 37, offset: 28492},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 835, col: 1, offset: 28593},
			expr: &actionExpr{
				pos: position{line: 835, col: 28, offset: 28620},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 835, col: 28, offset: 28620},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 835, col: 28, offset: 28620},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 39, offset: 28631},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 59, offset: 28651},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 835, col: 70, offset: 28662},
								expr: &seqExpr{
									pos: position{line: 835, col: 71, offset: 28663},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 835, col: 71, offset: 28663},
											expr: &ruleRefExpr{
												pos:  position{line: 835, col: 72, offset: 28664},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 835, col: 93, offset: 28685},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 839, col: 1, offset: 28791},
			expr: &choiceExpr{
				pos: position{line: 841, col: 5, offset: 28843},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 841, col: 5, offset: 28843},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 841, col: 5, offset: 28843},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 841, col: 5, offset: 28843},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 841, col: 16, offset: 28854},
										expr: &ruleRefExpr{
											pos:  position{line: 841, col: 17, offset: 28855},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 842, col: 5, offset: 28872},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 849, col: 5, offset: 29077},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 849, col: 8, offset: 29080},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 849, col: 24, offset: 29096},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 849, col: 29, offset: 29101},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 849, col: 35, offset: 29107},
										expr: &ruleRefExpr{
											pos:  position{line: 849, col: 36, offset: 29108},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 29300},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 853, col: 5, offset: 29300},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 853, col: 5, offset: 29300},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 853, col: 16, offset: 29311},
										expr: &ruleRefExpr{
											pos:  position{line: 853, col: 17, offset: 29312},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 854, col: 5, offset: 29329},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 861, col: 5, offset: 29534},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 861, col: 11, offset: 29540},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 12, offset: 29541},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 865, col: 1, offset: 29642},
			expr: &actionExpr{
				pos: position{line: 865, col: 19, offset: 29660},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 865, col: 19, offset: 29660},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 865, col: 19, offset: 29660},
							expr: &ruleRefExpr{
								pos:  position{line: 865, col: 20, offset: 29661},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 866, col: 5, offset: 29675},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 866, col: 15, offset: 29685},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 866, col: 15, offset: 29685},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 866, col: 15, offset: 29685},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 866, col: 24, offset: 29694},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 868, col: 9, offset: 29786},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 868, col: 9, offset: 29786},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 868, col: 9, offset: 29786},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 868, col: 18, offset: 29795},
														expr: &ruleRefExpr{
															pos:  position{line: 868, col: 19, offset: 29796},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 868, col: 35, offset: 29812},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 874, col: 1, offset: 29929},
			expr: &actionExpr{
				pos: position{line: 875, col: 5, offset: 29952},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 875, col: 5, offset: 29952},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 875, col: 14, offset: 29961},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 875, col: 14, offset: 29961},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 876, col: 11, offset: 30012},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 877, col: 11, offset: 30057},
								expr: &ruleRefExpr{
									pos:  position{line: 877, col: 11, offset: 30057},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 878, col: 11, offset: 30075},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 878, col: 11, offset: 30075},
										expr: &ruleRefExpr{
											pos:  position{line: 878, col: 12, offset: 30076},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 879, col: 13, offset: 30095},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 879, col: 13, offset: 30095},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 880, col: 15, offset: 30121},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 881, col: 15, offset: 30148},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 882, col: 15, offset: 30168},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 883, col: 15, offset: 30201},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 884, col: 15, offset: 30231},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 885, col: 15, offset: 30261},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 886, col: 15, offset: 30292},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 887, col: 15, offset: 30329},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 888, col: 15, offset: 30359},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 889, col: 15, offset: 30392},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 890, col: 15, offset: 30416},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 897, col: 1, offset: 30639},
			expr: &actionExpr{
				pos: position{line: 897, col: 14, offset: 30652},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 897, col: 14, offset: 30652},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 897, col: 14, offset: 30652},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 897, col: 20, offset: 30658},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 897, col: 24, offset: 30662},
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 24, offset: 30662},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 897, col: 31, offset: 30669},
							expr: &ruleRefExpr{
								pos:  position{line: 897, col: 32, offset: 30670},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 904, col: 1, offset: 30954},
			expr: &choiceExpr{
				pos: position{line: 904, col: 15, offset: 30968},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 904, col: 15, offset: 30968},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 904, col: 41, offset: 30994},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 904, col: 65, offset: 31018},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 906, col: 1, offset: 31037},
			expr: &choiceExpr{
				pos: position{line: 906, col: 32, offset: 31068},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 906, col: 32, offset: 31068},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 906, col: 32, offset: 31068},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 906, col: 36, offset: 31072},
								expr: &litMatcher{
									pos:        position{line: 906, col: 37, offset: 31073},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 906, col: 43, offset: 31079},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 906, col: 43, offset: 31079},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 906, col: 47, offset: 31083},
								expr: &litMatcher{
									pos:        position{line: 906, col: 48, offset: 31084},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 906, col: 54, offset: 31090},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 906, col: 54, offset: 31090},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 906, col: 58, offset: 31094},
								expr: &litMatcher{
									pos:        position{line: 906, col: 59, offset: 31095},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 908, col: 1, offset: 31101},
			expr: &choiceExpr{
				pos: position{line: 908, col: 34, offset: 31134},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 908, col: 34, offset: 31134},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 41, offset: 31141},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 48, offset: 31148},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 55, offset: 31155},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 908, col: 61, offset: 31161},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 910, col: 1, offset: 31166},
			expr: &actionExpr{
				pos: position{line: 910, col: 26, offset: 31191},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 910, col: 26, offset: 31191},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 910, col: 32, offset: 31197},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 910, col: 32, offset: 31197},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 911, col: 15, offset: 31232},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 912, col: 15, offset: 31269},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 913, col: 15, offset: 31309},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 914, col: 15, offset: 31338},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 15, offset: 31369},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 919, col: 1, offset: 31523},
			expr: &choiceExpr{
				pos: position{line: 919, col: 28, offset: 31550},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 919, col: 28, offset: 31550},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 920, col: 15, offset: 31584},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 921, col: 15, offset: 31620},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 923, col: 1, offset: 31646},
			expr: &choiceExpr{
				pos: position{line: 923, col: 22, offset: 31667},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 923, col: 22, offset: 31667},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 15, offset: 31698},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 15, offset: 31731},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 15, offset: 31767},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 927, col: 15, offset: 31803},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 929, col: 1, offset: 31827},
			expr: &choiceExpr{
				pos: position{line: 929, col: 33, offset: 31859},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 929, col: 33, offset: 31859},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 929, col: 39, offset: 31865},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 929, col: 39, offset: 31865},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 933, col: 1, offset: 31998},
			expr: &actionExpr{
				pos: position{line: 933, col: 25, offset: 32022},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 933, col: 25, offset: 32022},
					expr: &litMatcher{
						pos:        position{line: 933, col: 25, offset: 32022},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 937, col: 1, offset: 32063},
			expr: &actionExpr{
				pos: position{line: 937, col: 25, offset: 32087},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 937, col: 25, offset: 32087},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 937, col: 25, offset: 32087},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 937, col: 30, offset: 32092},
							expr: &litMatcher{
								pos:        position{line: 937, col: 30, offset: 32092},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 945, col: 1, offset: 32189},
			expr: &choiceExpr{
				pos: position{line: 945, col: 13, offset: 32201},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 945, col: 13, offset: 32201},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 945, col: 35, offset: 32223},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 947, col: 1, offset: 32290},
			expr: &actionExpr{
				pos: position{line: 947, col: 24, offset: 32313},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 947, col: 24, offset: 32313},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 947, col: 24, offset: 32313},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 947, col: 30, offset: 32319},
								expr: &ruleRefExpr{
									pos:  position{line: 947, col: 31, offset: 32320},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 947, col: 49, offset: 32338},
							expr: &litMatcher{
								pos:        position{line: 947, col: 50, offset: 32339},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 947, col: 55, offset: 32344},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 947, col: 60, offset: 32349},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 947, col: 70, offset: 32359},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 947, col: 99, offset: 32388},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 951, col: 1, offset: 32475},
			expr: &seqExpr{
				pos: position{line: 951, col: 32, offset: 32506},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 951, col: 32, offset: 32506},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 951, col: 59, offset: 32533},
						expr: &seqExpr{
							pos: position{line: 951, col: 60, offset: 32534},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 951, col: 60, offset: 32534},
									expr: &litMatcher{
										pos:        position{line: 951, col: 62, offset: 32536},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 951, col: 69, offset: 32543},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 951, col: 69, offset: 32543},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 951, col: 77, offset: 32551},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 953, col: 1, offset: 32616},
			expr: &choiceExpr{
				pos: position{line: 953, col: 31, offset: 32646},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 953, col: 31, offset: 32646},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 954, col: 11, offset: 32662},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 955, col: 11, offset: 32693},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 956, col: 11, offset: 32715},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 11, offset: 32739},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 958, col: 11, offset: 32763},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 959, col: 11, offset: 32789},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 960, col: 11, offset: 32812},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 961, col: 11, offset: 32828},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 962, col: 11, offset: 32857},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 963, col: 11, offset: 32889},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 964, col: 11, offset: 32932},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 967, col: 1, offset: 32971},
			expr: &actionExpr{
				pos: position{line: 967, col: 37, offset: 33007},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 967, col: 37, offset: 33007},
					expr: &seqExpr{
						pos: position{line: 967, col: 38, offset: 33008},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 967, col: 38, offset: 33008},
								expr: &litMatcher{
									pos:        position{line: 967, col: 39, offset: 33009},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 967, col: 44, offset: 33014},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 971, col: 1, offset: 33085},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 33130},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 972, col: 5, offset: 33130},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 973, col: 7, offset: 33227},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 973, col: 7, offset: 33227},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 973, col: 7, offset: 33227},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 973, col: 12, offset: 33232},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 977, col: 1, offset: 33395},
			expr: &choiceExpr{
				pos: position{line: 977, col: 24, offset: 33418},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 977, col: 24, offset: 33418},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 977, col: 24, offset: 33418},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 977, col: 24, offset: 33418},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 977, col: 30, offset: 33424},
										expr: &ruleRefExpr{
											pos:  position{line: 977, col: 31, offset: 33425},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 977, col: 50, offset: 33444},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 977, col: 50, offset: 33444},
											expr: &litMatcher{
												pos:        position{line: 977, col: 51, offset: 33445},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 977, col: 55, offset: 33449},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 977, col: 59, offset: 33453},
											expr: &litMatcher{
												pos:        position{line: 977, col: 60, offset: 33454},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 977, col: 65, offset: 33459},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 977, col: 75, offset: 33469},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 977, col: 104, offset: 33498},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 977, col: 108, offset: 33502},
									expr: &notExpr{
										pos: position{line: 977, col: 110, offset: 33504},
										expr: &ruleRefExpr{
											pos:  position{line: 977, col: 111, offset: 33505},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 979, col: 5, offset: 33699},
						run: (*parser).callonSingleQuoteBoldText19,
						expr: &seqExpr{
							pos: position{line: 979, col: 5, offset: 33699},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 979, col: 5, offset: 33699},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 979, col: 11, offset: 33705},
										expr: &ruleRefExpr{
											pos:  position{line: 979, col: 12, offset: 33706},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 979, col: 30, offset: 33724},
									expr: &litMatcher{
										pos:        position{line: 979, col: 31, offset: 33725},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 36, offset: 33730},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 979, col: 40, offset: 33734},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 979, col: 50, offset: 33744},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 979, col: 50, offset: 33744},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 54, offset: 33748},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 979, col: 83, offset: 33777},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 983, col: 1, offset: 33983},
			expr: &seqExpr{
				pos: position{line: 983, col: 32, offset: 34014},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 983, col: 32, offset: 34014},
						expr: &ruleRefExpr{
							pos:  position{line: 983, col: 33, offset: 34015},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 983, col: 39, offset: 34021},
						expr: &ruleRefExpr{
							pos:  position{line: 983, col: 39, offset: 34021},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 985, col: 1, offset: 34050},
			expr: &choiceExpr{
				pos: position{line: 985, col: 31, offset: 34080},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 985, col: 31, offset: 34080},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 986, col: 11, offset: 34096},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 987, col: 11, offset: 34126},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 987, col: 11, offset: 34126},
								expr: &ruleRefExpr{
									pos:  position{line: 987, col: 11, offset: 34126},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 987, col: 18, offset: 34133},
								expr: &seqExpr{
									pos: position{line: 987, col: 19, offset: 34134},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 987, col: 19, offset: 34134},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 987, col: 23, offset: 34138},
											expr: &litMatcher{
												pos:        position{line: 987, col: 24, offset: 34139},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 988, col: 11, offset: 34155},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 989, col: 11, offset: 34177},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 990, col: 11, offset: 34201},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 991, col: 11, offset: 34225},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 11, offset: 34251},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 11, offset: 34274},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 11, offset: 34291},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 11, offset: 34320},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 996, col: 11, offset: 34352},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 11, offset: 34395},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 999, col: 1, offset: 34433},
			expr: &actionExpr{
				pos: position{line: 999, col: 37, offset: 34469},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 999, col: 37, offset: 34469},
					expr: &charClassMatcher{
						pos:        position{line: 999, col: 37, offset: 34469},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1003, col: 1, offset: 34695},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 5, offset: 34740},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1004, col: 5, offset: 34740},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1005, col: 7, offset: 34837},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1005, col: 7, offset: 34837},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1005, col: 7, offset: 34837},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1005, col: 11, offset: 34841},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1009, col: 1, offset: 35004},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 5, offset: 35028},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1010, col: 5, offset: 35028},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1010, col: 5, offset: 35028},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1010, col: 5, offset: 35028},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 18, offset: 35041},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 40, offset: 35063},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 45, offset: 35068},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1010, col: 55, offset: 35078},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 84, offset: 35107},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 9, offset: 35264},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1012, col: 9, offset: 35264},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1012, col: 9, offset: 35264},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 22, offset: 35277},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 44, offset: 35299},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 49, offset: 35304},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1012, col: 59, offset: 35314},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 88, offset: 35343},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 9, offset: 35543},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1015, col: 9, offset: 35543},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1015, col: 9, offset: 35543},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 22, offset: 35556},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1015, col: 44, offset: 35578},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1015, col: 48, offset: 35582},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1015, col: 58, offset: 35592},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1015, col: 87, offset: 35621},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1023, col: 1, offset: 35829},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 15, offset: 35843},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1023, col: 15, offset: 35843},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 39, offset: 35867},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1025, col: 1, offset: 35890},
			expr: &actionExpr{
				pos: position{line: 1025, col: 26, offset: 35915},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 26, offset: 35915},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1025, col: 26, offset: 35915},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1025, col: 32, offset: 35921},
								expr: &ruleRefExpr{
									pos:  position{line: 1025, col: 33, offset: 35922},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1025, col: 51, offset: 35940},
							expr: &litMatcher{
								pos:        position{line: 1025, col: 52, offset: 35941},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 57, offset: 35946},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 62, offset: 35951},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 72, offset: 35961},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 103, offset: 35992},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1029, col: 1, offset: 36126},
			expr: &seqExpr{
				pos: position{line: 1029, col: 34, offset: 36159},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1029, col: 34, offset: 36159},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1029, col: 63, offset: 36188},
						expr: &seqExpr{
							pos: position{line: 1029, col: 64, offset: 36189},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1029, col: 64, offset: 36189},
									expr: &litMatcher{
										pos:        position{line: 1029, col: 66, offset: 36191},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1029, col: 73, offset: 36198},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1029, col: 73, offset: 36198},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1029, col: 81, offset: 36206},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1031, col: 1, offset: 36273},
			expr: &choiceExpr{
				pos: position{line: 1031, col: 33, offset: 36305},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1031, col: 33, offset: 36305},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 11, offset: 36321},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 11, offset: 36354},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 11, offset: 36374},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1035, col: 11, offset: 36398},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1036, col: 11, offset: 36422},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1037, col: 11, offset: 36448},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 11, offset: 36471},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 11, offset: 36487},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1040, col: 11, offset: 36516},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1041, col: 11, offset: 36561},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1043, col: 1, offset: 36601},
			expr: &actionExpr{
				pos: position{line: 1043, col: 39, offset: 36639},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1043, col: 39, offset: 36639},
					expr: &seqExpr{
						pos: position{line: 1043, col: 40, offset: 36640},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1043, col: 40, offset: 36640},
								expr: &litMatcher{
									pos:        position{line: 1043, col: 41, offset: 36641},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1043, col: 46, offset: 36646},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1047, col: 1, offset: 36717},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 5, offset: 36764},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1048, col: 5, offset: 36764},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1049, col: 7, offset: 36863},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1049, col: 7, offset: 36863},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1049, col: 7, offset: 36863},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1049, col: 12, offset: 36868},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1053, col: 1, offset: 37033},
			expr: &choiceExpr{
				pos: position{line: 1053, col: 26, offset: 37058},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1053, col: 26, offset: 37058},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1053, col: 26, offset: 37058},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1053, col: 26, offset: 37058},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1053, col: 32, offset: 37064},
										expr: &ruleRefExpr{
											pos:  position{line: 1053, col: 33, offset: 37065},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1053, col: 52, offset: 37084},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1053, col: 52, offset: 37084},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 53, offset: 37085},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1053, col: 57, offset: 37089},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1053, col: 61, offset: 37093},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 62, offset: 37094},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1053, col: 67, offset: 37099},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1053, col: 77, offset: 37109},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1053, col: 108, offset: 37140},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1055, col: 5, offset: 37330},
						run: (*parser).callonSingleQuoteItalicText16,
						expr: &seqExpr{
							pos: position{line: 1055, col: 5, offset: 37330},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1055, col: 5, offset: 37330},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1055, col: 11, offset: 37336},
										expr: &ruleRefExpr{
											pos:  position{line: 1055, col: 12, offset: 37337},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1055, col: 30, offset: 37355},
									expr: &litMatcher{
										pos:        position{line: 1055, col: 31, offset: 37356},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1055, col: 36, offset: 37361},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1055, col: 40, offset: 37365},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1055, col: 50, offset: 37375},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1055, col: 50, offset: 37375},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1055, col: 54, offset: 37379},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1055, col: 85, offset: 37410},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1059, col: 1, offset: 37620},
			expr: &seqExpr{
				pos: position{line: 1059, col: 34, offset: 37653},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1059, col: 34, offset: 37653},
						expr: &ruleRefExpr{
							pos:  position{line: 1059, col: 35, offset: 37654},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1059, col: 41, offset: 37660},
						expr: &ruleRefExpr{
							pos:  position{line: 1059, col: 41, offset: 37660},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1061, col: 1, offset: 37691},
			expr: &choiceExpr{
				pos: position{line: 1061, col: 33, offset: 37723},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1061, col: 33, offset: 37723},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 37739},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 1063, col: 11, offset: 37771},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1063, col: 11, offset: 37771},
								expr: &ruleRefExpr{
									pos:  position{line: 1063, col: 11, offset: 37771},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1063, col: 18, offset: 37778},
								expr: &seqExpr{
									pos: position{line: 1063, col: 19, offset: 37779},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1063, col: 19, offset: 37779},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1063, col: 23, offset: 37783},
											expr: &litMatcher{
												pos:        position{line: 1063, col: 24, offset: 37784},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 37800},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 37820},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 11, offset: 37844},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 37868},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 11, offset: 37894},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 11, offset: 37917},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 37934},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1071, col: 11, offset: 37963},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 11, offset: 37995},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 11, offset: 38040},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1075, col: 1, offset: 38080},
			expr: &actionExpr{
				pos: position{line: 1075, col: 39, offset: 38118},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1075, col: 39, offset: 38118},
					expr: &charClassMatcher{
						pos:        position{line: 1075, col: 39, offset: 38118},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1079, col: 1, offset: 38344},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 38391},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1080, col: 5, offset: 38391},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1081, col: 7, offset: 38490},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1081, col: 7, offset: 38490},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 7, offset: 38490},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1081, col: 11, offset: 38494},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1085, col: 1, offset: 38660},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 5, offset: 38686},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1086, col: 5, offset: 38686},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1086, col: 5, offset: 38686},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1086, col: 5, offset: 38686},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 18, offset: 38699},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 40, offset: 38721},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 45, offset: 38726},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1086, col: 55, offset: 38736},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 86, offset: 38767},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 9, offset: 38924},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1088, col: 9, offset: 38924},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1088, col: 9, offset: 38924},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 22, offset: 38937},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1088, col: 44, offset: 38959},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 49, offset: 38964},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1088, col: 59, offset: 38974},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1088, col: 90, offset: 39005},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1091, col: 9, offset: 39205},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1091, col: 9, offset: 39205},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1091, col: 9, offset: 39205},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 22, offset: 39218},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1091, col: 44, offset: 39240},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 48, offset: 39244},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1091, col: 58, offset: 39254},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1091, col: 89, offset: 39285},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1098, col: 1, offset: 39495},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 18, offset: 39512},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1098, col: 18, offset: 39512},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 45, offset: 39539},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1100, col: 1, offset: 39565},
			expr: &actionExpr{
				pos: position{line: 1100, col: 29, offset: 39593},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1100, col: 29, offset: 39593},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1100, col: 29, offset: 39593},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1100, col: 35, offset: 39599},
								expr: &ruleRefExpr{
									pos:  position{line: 1100, col: 36, offset: 39600},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1100, col: 54, offset: 39618},
							expr: &litMatcher{
								pos:        position{line: 1100, col: 55, offset: 39619},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1100, col: 60, offset: 39624},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1100, col: 65, offset: 39629},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1100, col: 75, offset: 39639},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1100, col: 109, offset: 39673},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1104, col: 1, offset: 39810},
			expr: &seqExpr{
				pos: position{line: 1104, col: 37, offset: 39846},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1104, col: 37, offset: 39846},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1104, col: 69, offset: 39878},
						expr: &seqExpr{
							pos: position{line: 1104, col: 70, offset: 39879},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1104, col: 70, offset: 39879},
									expr: &litMatcher{
										pos:        position{line: 1104, col: 72, offset: 39881},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1104, col: 79, offset: 39888},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1104, col: 79, offset: 39888},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1104, col: 87, offset: 39896},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1106, col: 1, offset: 39965},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 36, offset: 40000},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1106, col: 36, offset: 40000},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 11, offset: 40016},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1108, col: 11, offset: 40052},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 11, offset: 40071},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 11, offset: 40093},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 11, offset: 40117},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 11, offset: 40143},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 11, offset: 40166},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 11, offset: 40182},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 11, offset: 40211},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1116, col: 11, offset: 40259},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1118, col: 1, offset: 40302},
			expr: &actionExpr{
				pos: position{line: 1118, col: 42, offset: 40343},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1118, col: 42, offset: 40343},
					expr: &seqExpr{
						pos: position{line: 1118, col: 43, offset: 40344},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1118, col: 43, offset: 40344},
								expr: &litMatcher{
									pos:        position{line: 1118, col: 44, offset: 40345},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1118, col: 49, offset: 40350},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1122, col: 1, offset: 40421},
			expr: &choiceExpr{
				pos: position{line: 1123, col: 5, offset: 40471},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1123, col: 5, offset: 40471},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1124, col: 7, offset: 40573},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1124, col: 7, offset: 40573},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1124, col: 7, offset: 40573},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1124, col: 12, offset: 40578},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1128, col: 1, offset: 40746},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 29, offset: 40774},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1128, col: 29, offset: 40774},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1128, col: 29, offset: 40774},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1128, col: 29, offset: 40774},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1128, col: 35, offset: 40780},
										expr: &ruleRefExpr{
											pos:  position{line: 1128, col: 36, offset: 40781},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1128, col: 55, offset: 40800},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1128, col: 55, offset: 40800},
											expr: &litMatcher{
												pos:        position{line: 1128, col: 56, offset: 40801},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1128, col: 60, offset: 40805},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1128, col: 64, offset: 40809},
											expr: &litMatcher{
												pos:        position{line: 1128, col: 65, offset: 40810},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1128, col: 70, offset: 40815},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1128, col: 80, offset: 40825},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1128, col: 114, offset: 40859},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 41052},
						run: (*parser).callonSingleQuoteMonospaceText16,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 41052},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1130, col: 5, offset: 41052},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1130, col: 11, offset: 41058},
										expr: &ruleRefExpr{
											pos:  position{line: 1130, col: 12, offset: 41059},
											name: "QuotedTextAttrs",
										},
									},
								},
								&notExpr{
									pos: position{line: 1130, col: 30, offset: 41077},
									expr: &litMatcher{
										pos:        position{line: 1130, col: 31, offset: 41078},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1130, col: 36, offset: 41083},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1130, col: 40, offset: 41087},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1130, col: 50, offset: 41097},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1130, col: 50, offset: 41097},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1130, col: 54, offset: 41101},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1130, col: 88, offset: 41135},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1134, col: 1, offset: 41351},
			expr: &seqExpr{
				pos: position{line: 1134, col: 37, offset: 41387},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1134, col: 37, offset: 41387},
						expr: &ruleRefExpr{
							pos:  position{line: 1134, col: 38, offset: 41388},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1134, col: 44, offset: 41394},
						expr: &ruleRefExpr{
							pos:  position{line: 1134, col: 44, offset: 41394},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1136, col: 1, offset: 41428},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 37, offset: 41464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1136, col: 37, offset: 41464},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 41480},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1138, col: 11, offset: 41516},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1138, col: 11, offset: 41516},
								expr: &ruleRefExpr{
									pos:  position{line: 1138, col: 11, offset: 41516},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1138, col: 18, offset: 41523},
								expr: &seqExpr{
									pos: position{line: 1138, col: 19, offset: 41524},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1138, col: 19, offset: 41524},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1138, col: 23, offset: 41528},
											expr: &litMatcher{
												pos:        position{line: 1138, col: 24, offset: 41529},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 41657},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 41695},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 11, offset: 41714},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 11, offset: 41735},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 41759},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 41785},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 11, offset: 41808},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 41824},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 41853},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 11, offset: 41885},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 41933},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1151, col: 1, offset: 41976},
			expr: &actionExpr{
				pos: position{line: 1151, col: 42, offset: 42017},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1151, col: 42, offset: 42017},
					expr: &charClassMatcher{
						pos:        position{line: 1151, col: 42, offset: 42017},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1155, col: 1, offset: 42235},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 5, offset: 42285},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1156, col: 5, offset: 42285},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1157, col: 7, offset: 42387},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1157, col: 7, offset: 42387},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1157, col: 7, offset: 42387},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1157, col: 11, offset: 42391},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1161, col: 1, offset: 42560},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 5, offset: 42589},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1162, col: 5, offset: 42589},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1162, col: 5, offset: 42589},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 5, offset: 42589},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1162, col: 18, offset: 42602},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1162, col: 40, offset: 42624},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 45, offset: 42629},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1162, col: 55, offset: 42639},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1162, col: 89, offset: 42673},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1164, col: 9, offset: 42830},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1164, col: 9, offset: 42830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1164, col: 9, offset: 42830},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 22, offset: 42843},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 44, offset: 42865},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 49, offset: 42870},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 59, offset: 42880},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 93, offset: 42914},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1167, col: 9, offset: 43114},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1167, col: 9, offset: 43114},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1167, col: 9, offset: 43114},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1167, col: 22, offset: 43127},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1167, col: 44, offset: 43149},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1167, col: 48, offset: 43153},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1167, col: 58, offset: 43163},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1167, col: 92, offset: 43197},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1171, col: 1, offset: 43347},
			expr: &actionExpr{
				pos: position{line: 1171, col: 18, offset: 43364},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1171, col: 18, offset: 43364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1171, col: 18, offset: 43364},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1171, col: 24, offset: 43370},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 25, offset: 43371},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1171, col: 43, offset: 43389},
							expr: &litMatcher{
								pos:        position{line: 1171, col: 44, offset: 43390},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1171, col: 48, offset: 43394},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1171, col: 52, offset: 43398},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1171, col: 61, offset: 43407},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1171, col: 83, offset: 43429},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1175, col: 1, offset: 43525},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 25, offset: 43549},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1175, col: 25, offset: 43549},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 38, offset: 43562},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1177, col: 1, offset: 43581},
			expr: &actionExpr{
				pos: position{line: 1177, col: 21, offset: 43601},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1177, col: 21, offset: 43601},
					expr: &charClassMatcher{
						pos:        position{line: 1177, col: 21, offset: 43601},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1181, col: 1, offset: 43678},
			expr: &actionExpr{
				pos: position{line: 1181, col: 25, offset: 43702},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1181, col: 25, offset: 43702},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1181, col: 25, offset: 43702},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1181, col: 38, offset: 43715},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1181, col: 60, offset: 43737},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1181, col: 64, offset: 43741},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1181, col: 73, offset: 43750},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1181, col: 95, offset: 43772},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1185, col: 1, offset: 43901},
			expr: &actionExpr{
				pos: position{line: 1185, col: 20, offset: 43920},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 20, offset: 43920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1185, col: 20, offset: 43920},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1185, col: 26, offset: 43926},
								expr: &ruleRefExpr{
									pos:  position{line: 1185, col: 27, offset: 43927},
									name: "QuotedTextAttrs",
								},
							},
						},
						&notExpr{
							pos: position{line: 1185, col: 45, offset: 43945},
							expr: &litMatcher{
								pos:        position{line: 1185, col: 46, offset: 43946},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1185, col: 50, offset: 43950},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 54, offset: 43954},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 63, offset: 43963},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1185, col: 87, offset: 43987},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1189, col: 1, offset: 44085},
			expr: &choiceExpr{
				pos: position{line: 1189, col: 27, offset: 44111},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1189, col: 27, offset: 44111},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 40, offset: 44124},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1191, col: 1, offset: 44145},
			expr: &actionExpr{
				pos: position{line: 1191, col: 23, offset: 44167},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1191, col: 23, offset: 44167},
					expr: &charClassMatcher{
						pos:        position{line: 1191, col: 23, offset: 44167},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1195, col: 1, offset: 44244},
			expr: &actionExpr{
				pos: position{line: 1195, col: 27, offset: 44270},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 27, offset: 44270},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1195, col: 27, offset: 44270},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 40, offset: 44283},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1195, col: 62, offset: 44305},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 66, offset: 44309},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1195, col: 75, offset: 44318},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1195, col: 99, offset: 44342},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1202, col: 1, offset: 44584},
			expr: &choiceExpr{
				pos: position{line: 1202, col: 22, offset: 44605},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1202, col: 22, offset: 44605},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 46, offset: 44629},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 70, offset: 44653},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1204, col: 1, offset: 44671},
			expr: &litMatcher{
				pos:        position{line: 1204, col: 32, offset: 44702},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1206, col: 1, offset: 44707},
			expr: &actionExpr{
				pos: position{line: 1206, col: 26, offset: 44732},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1206, col: 26, offset: 44732},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1206, col: 26, offset: 44732},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 54, offset: 44760},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 63, offset: 44769},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1206, col: 93, offset: 44799},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1206, col: 121, offset: 44827},
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 122, offset: 44828},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1210, col: 1, offset: 44933},
			expr: &choiceExpr{
				pos: position{line: 1210, col: 33, offset: 44965},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1210, col: 34, offset: 44966},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1210, col: 34, offset: 44966},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1210, col: 35, offset: 44967},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1210, col: 35, offset: 44967},
											expr: &ruleRefExpr{
												pos:  position{line: 1210, col: 36, offset: 44968},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1210, col: 64, offset: 44996},
											expr: &ruleRefExpr{
												pos:  position{line: 1210, col: 65, offset: 44997},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1210, col: 71, offset: 45003},
											expr: &ruleRefExpr{
												pos:  position{line: 1210, col: 72, offset: 45004},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1210, col: 80, offset: 45012,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1210, col: 83, offset: 45015},
									expr: &seqExpr{
										pos: position{line: 1210, col: 84, offset: 45016},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1210, col: 84, offset: 45016},
												expr: &seqExpr{
													pos: position{line: 1210, col: 86, offset: 45018},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1210, col: 86, offset: 45018},
															expr: &ruleRefExpr{
																pos:  position{line: 1210, col: 86, offset: 45018},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1210, col: 93, offset: 45025},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1210, col: 122, offset: 45054},
												expr: &ruleRefExpr{
													pos:  position{line: 1210, col: 123, offset: 45055},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1210, col: 151, offset: 45083},
												expr: &ruleRefExpr{
													pos:  position{line: 1210, col: 152, offset: 45084},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1210, col: 160, offset: 45092,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1212, col: 7, offset: 45234},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1212, col: 8, offset: 45235},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1212, col: 8, offset: 45235},
									expr: &ruleRefExpr{
										pos:  position{line: 1212, col: 9, offset: 45236},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1212, col: 15, offset: 45242},
									expr: &ruleRefExpr{
										pos:  position{line: 1212, col: 16, offset: 45243},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1212, col: 24, offset: 45251},
									expr: &ruleRefExpr{
										pos:  position{line: 1212, col: 25, offset: 45252},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1212, col: 53, offset: 45280,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1216, col: 1, offset: 45362},
			expr: &litMatcher{
				pos:        position{line: 1216, col: 32, offset: 45393},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1218, col: 1, offset: 45400},
			expr: &actionExpr{
				pos: position{line: 1218, col: 26, offset: 45425},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1218, col: 26, offset: 45425},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1218, col: 26, offset: 45425},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1218, col: 54, offset: 45453},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 63, offset: 45462},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1218, col: 93, offset: 45492},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1218, col: 121, offset: 45520},
							expr: &ruleRefExpr{
								pos:  position{line: 1218, col: 122, offset: 45521},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1222, col: 1, offset: 45626},
			expr: &choiceExpr{
				pos: position{line: 1222, col: 33, offset: 45658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1222, col: 34, offset: 45659},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1222, col: 34, offset: 45659},
							expr: &seqExpr{
								pos: position{line: 1222, col: 35, offset: 45660},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1222, col: 35, offset: 45660},
										expr: &ruleRefExpr{
											pos:  position{line: 1222, col: 36, offset: 45661},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1222, col: 64, offset: 45689,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1224, col: 7, offset: 45854},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1224, col: 7, offset: 45854},
							expr: &seqExpr{
								pos: position{line: 1224, col: 8, offset: 45855},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1224, col: 8, offset: 45855},
										expr: &ruleRefExpr{
											pos:  position{line: 1224, col: 9, offset: 45856},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1224, col: 15, offset: 45862},
										expr: &ruleRefExpr{
											pos:  position{line: 1224, col: 16, offset: 45863},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1224, col: 24, offset: 45871},
										expr: &ruleRefExpr{
											pos:  position{line: 1224, col: 25, offset: 45872},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1224, col: 53, offset: 45900,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1228, col: 1, offset: 45983},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 21, offset: 46003},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1228, col: 21, offset: 46003},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1228, col: 21, offset: 46003},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1228, col: 21, offset: 46003},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1228, col: 30, offset: 46012},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1228, col: 38, offset: 46020},
										expr: &ruleRefExpr{
											pos:  position{line: 1228, col: 39, offset: 46021},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 67, offset: 46049},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1230, col: 5, offset: 46145},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1230, col: 5, offset: 46145},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1230, col: 5, offset: 46145},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1230, col: 15, offset: 46155},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1230, col: 23, offset: 46163},
										expr: &choiceExpr{
											pos: position{line: 1230, col: 24, offset: 46164},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1230, col: 24, offset: 46164},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1230, col: 37, offset: 46177},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1230, col: 65, offset: 46205},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1234, col: 1, offset: 46301},
			expr: &actionExpr{
				pos: position{line: 1234, col: 30, offset: 46330},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1234, col: 30, offset: 46330},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1241, col: 1, offset: 46503},
			expr: &choiceExpr{
				pos: position{line: 1241, col: 19, offset: 46521},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1241, col: 19, offset: 46521},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1241, col: 44, offset: 46546},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1243, col: 1, offset: 46571},
			expr: &choiceExpr{
				pos: position{line: 1243, col: 27, offset: 46597},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1243, col: 27, offset: 46597},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1243, col: 27, offset: 46597},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1243, col: 27, offset: 46597},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 32, offset: 46602},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 36, offset: 46606},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1243, col: 40, offset: 46610},
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 40, offset: 46610},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 47, offset: 46617},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1243, col: 51, offset: 46621},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1243, col: 58, offset: 46628},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1243, col: 79, offset: 46649},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1245, col: 5, offset: 46732},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1245, col: 5, offset: 46732},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1245, col: 5, offset: 46732},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 10, offset: 46737},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 14, offset: 46741},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 18, offset: 46745},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1249, col: 1, offset: 46817},
			expr: &actionExpr{
				pos: position{line: 1249, col: 27, offset: 46843},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1249, col: 27, offset: 46843},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1249, col: 27, offset: 46843},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1249, col: 35, offset: 46851},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 40, offset: 46856},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1249, col: 54, offset: 46870},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 72, offset: 46888},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1253, col: 1, offset: 47011},
			expr: &ruleRefExpr{
				pos:  position{line: 1253, col: 24, offset: 47034},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1258, col: 1, offset: 47156},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 9, offset: 47164},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1258, col: 9, offset: 47164},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 24, offset: 47179},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1261, col: 1, offset: 47260},
			expr: &actionExpr{
				pos: position{line: 1261, col: 17, offset: 47276},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 17, offset: 47276},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1261, col: 17, offset: 47276},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 25, offset: 47284},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 30, offset: 47289},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 40, offset: 47299},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1261, col: 58, offset: 47317},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1265, col: 1, offset: 47428},
			expr: &actionExpr{
				pos: position{line: 1265, col: 17, offset: 47444},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 17, offset: 47444},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1265, col: 17, offset: 47444},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1265, col: 22, offset: 47449},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 42, offset: 47469},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1265, col: 59, offset: 47486},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 60, offset: 47487},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1269, col: 1, offset: 47580},
			expr: &actionExpr{
				pos: position{line: 1269, col: 19, offset: 47598},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1269, col: 19, offset: 47598},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1269, col: 19, offset: 47598},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1269, col: 23, offset: 47602},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1269, col: 33, offset: 47612},
								expr: &ruleRefExpr{
									pos:  position{line: 1269, col: 34, offset: 47613},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1270, col: 5, offset: 47645},
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 5, offset: 47645},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 12, offset: 47652},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1270, col: 23, offset: 47663},
								expr: &ruleRefExpr{
									pos:  position{line: 1270, col: 24, offset: 47664},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1270, col: 43, offset: 47683},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1274, col: 1, offset: 47800},
			expr: &actionExpr{
				pos: position{line: 1274, col: 30, offset: 47829},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1274, col: 30, offset: 47829},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1276, col: 5, offset: 47880},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1276, col: 6, offset: 47881},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1276, col: 6, offset: 47881},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1276, col: 6, offset: 47881},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1276, col: 11, offset: 47886},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1276, col: 20, offset: 47895},
												expr: &choiceExpr{
													pos: position{line: 1276, col: 21, offset: 47896},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1276, col: 21, offset: 47896},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1276, col: 34, offset: 47909},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1276, col: 56, offset: 47931},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1276, col: 61, offset: 47936},
											expr: &notExpr{
												pos: position{line: 1276, col: 63, offset: 47938},
												expr: &litMatcher{
													pos:        position{line: 1276, col: 64, offset: 47939},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1276, col: 69, offset: 47944},
											expr: &litMatcher{
												pos:        position{line: 1276, col: 69, offset: 47944},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1280, col: 6, offset: 48071},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1280, col: 6, offset: 48071},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1280, col: 6, offset: 48071},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1280, col: 15, offset: 48080},
												expr: &choiceExpr{
													pos: position{line: 1280, col: 16, offset: 48081},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1280, col: 16, offset: 48081},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1280, col: 29, offset: 48094},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1280, col: 53, offset: 48118},
											expr: &notExpr{
												pos: position{line: 1280, col: 55, offset: 48120},
												expr: &litMatcher{
													pos:        position{line: 1280, col: 56, offset: 48121},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1280, col: 61, offset: 48126},
											expr: &litMatcher{
												pos:        position{line: 1280, col: 61, offset: 48126},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1286, col: 1, offset: 48240},
			expr: &actionExpr{
				pos: position{line: 1286, col: 18, offset: 48257},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1286, col: 18, offset: 48257},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1290, col: 1, offset: 48343},
			expr: &actionExpr{
				pos: position{line: 1290, col: 24, offset: 48366},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1290, col: 24, offset: 48366},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1294, col: 1, offset: 48459},
			expr: &actionExpr{
				pos: position{line: 1294, col: 26, offset: 48484},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1294, col: 26, offset: 48484},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1299, col: 1, offset: 48641},
			expr: &actionExpr{
				pos: position{line: 1300, col: 5, offset: 48661},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 5, offset: 48661},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1300, col: 5, offset: 48661},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1300, col: 14, offset: 48670},
								expr: &choiceExpr{
									pos: position{line: 1300, col: 15, offset: 48671},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1300, col: 15, offset: 48671},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1301, col: 11, offset: 48686},
											expr: &ruleRefExpr{
												pos:  position{line: 1301, col: 11, offset: 48686},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1302, col: 11, offset: 48704},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1303, col: 11, offset: 48728},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 11, offset: 48750},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1305, col: 11, offset: 48768},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1305, col: 21, offset: 48778},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1309, col: 1, offset: 48848},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 17, offset: 48864},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1309, col: 17, offset: 48864},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 40, offset: 48887},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1312, col: 1, offset: 49015},
			expr: &actionExpr{
				pos: position{line: 1312, col: 25, offset: 49039},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 25, offset: 49039},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1312, col: 25, offset: 49039},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 33, offset: 49047},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1312, col: 38, offset: 49052},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1312, col: 38, offset: 49052},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1312, col: 57, offset: 49071},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 79, offset: 49093},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 97, offset: 49111},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1316, col: 1, offset: 49222},
			expr: &actionExpr{
				pos: position{line: 1316, col: 25, offset: 49246},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1316, col: 25, offset: 49246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1316, col: 25, offset: 49246},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1316, col: 30, offset: 49251},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1316, col: 48, offset: 49269},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1316, col: 65, offset: 49286},
								expr: &ruleRefExpr{
									pos:  position{line: 1316, col: 66, offset: 49287},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1323, col: 1, offset: 49482},
			expr: &actionExpr{
				pos: position{line: 1323, col: 15, offset: 49496},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1323, col: 15, offset: 49496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1323, col: 15, offset: 49496},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1323, col: 26, offset: 49507},
								expr: &ruleRefExpr{
									pos:  position{line: 1323, col: 27, offset: 49508},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1323, col: 40, offset: 49521},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 50, offset: 49531},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 56, offset: 49537},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1323, col: 66, offset: 49547},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 84, offset: 49565},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1323, col: 101, offset: 49582},
							expr: &ruleRefExpr{
								pos:  position{line: 1323, col: 101, offset: 49582},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1323, col: 108, offset: 49589},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1327, col: 1, offset: 49701},
			expr: &actionExpr{
				pos: position{line: 1327, col: 16, offset: 49716},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 16, offset: 49716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1327, col: 16, offset: 49716},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1327, col: 25, offset: 49725},
							expr: &litMatcher{
								pos:        position{line: 1327, col: 26, offset: 49726},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 30, offset: 49730},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 36, offset: 49736},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 46, offset: 49746},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 64, offset: 49764},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1331, col: 1, offset: 49878},
			expr: &actionExpr{
				pos: position{line: 1331, col: 20, offset: 49897},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1331, col: 20, offset: 49897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1331, col: 20, offset: 49897},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 24, offset: 49901},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1331, col: 28, offset: 49905},
								expr: &ruleRefExpr{
									pos:  position{line: 1331, col: 29, offset: 49906},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1331, col: 56, offset: 49933},
							expr: &litMatcher{
								pos:        position{line: 1331, col: 56, offset: 49933},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 61, offset: 49938},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1331, col: 67, offset: 49944},
								expr: &ruleRefExpr{
									pos:  position{line: 1331, col: 68, offset: 49945},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1331, col: 95, offset: 49972},
							expr: &litMatcher{
								pos:        position{line: 1331, col: 95, offset: 49972},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 100, offset: 49977},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1331, col: 107, offset: 49984},
								expr: &ruleRefExpr{
									pos:  position{line: 1331, col: 108, offset: 49985},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1331, col: 135, offset: 50012},
							expr: &litMatcher{
								pos:        position{line: 1331, col: 135, offset: 50012},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1331, col: 140, offset: 50017},
							expr: &ruleRefExpr{
								pos:  position{line: 1331, col: 140, offset: 50017},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1331, col: 147, offset: 50024},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1331, col: 158, offset: 50035},
								expr: &ruleRefExpr{
									pos:  position{line: 1331, col: 159, offset: 50036},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1331, col: 178, offset: 50055},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1338, col: 1, offset: 50345},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 19, offset: 50363},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1338, col: 19, offset: 50363},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1338, col: 19, offset: 50363},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1338, col: 19, offset: 50363},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1338, col: 32, offset: 50376},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1338, col: 41, offset: 50385},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1338, col: 58, offset: 50402},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1340, col: 5, offset: 50470},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1340, col: 5, offset: 50470},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1340, col: 5, offset: 50470},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 17, offset: 50482},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1340, col: 22, offset: 50487},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 35, offset: 50500},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1340, col: 39, offset: 50504},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1340, col: 47, offset: 50512},
										expr: &ruleRefExpr{
											pos:  position{line: 1340, col: 48, offset: 50513},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1340, col: 66, offset: 50531},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1344, col: 1, offset: 50592},
			expr: &ruleRefExpr{
				pos:  position{line: 1344, col: 16, offset: 50607},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1346, col: 1, offset: 50618},
			expr: &actionExpr{
				pos: position{line: 1346, col: 20, offset: 50637},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1346, col: 20, offset: 50637},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1346, col: 29, offset: 50646},
						expr: &seqExpr{
							pos: position{line: 1346, col: 30, offset: 50647},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1346, col: 30, offset: 50647},
									expr: &litMatcher{
										pos:        position{line: 1346, col: 31, offset: 50648},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1346, col: 35, offset: 50652},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1353, col: 1, offset: 50976},
			expr: &actionExpr{
				pos: position{line: 1353, col: 19, offset: 50994},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 19, offset: 50994},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1353, col: 19, offset: 50994},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 20, offset: 50995},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 5, offset: 51083},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1354, col: 12, offset: 51090},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1354, col: 12, offset: 51090},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1355, col: 11, offset: 51113},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1356, col: 11, offset: 51137},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1357, col: 11, offset: 51161},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1358, col: 11, offset: 51183},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1359, col: 11, offset: 51205},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1360, col: 11, offset: 51228},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1361, col: 11, offset: 51256},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1362, col: 11, offset: 51283},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1363, col: 11, offset: 51299},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1367, col: 1, offset: 51340},
			expr: &choiceExpr{
				pos: position{line: 1367, col: 19, offset: 51358},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1367, col: 19, offset: 51358},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1367, col: 19, offset: 51358},
								expr: &ruleRefExpr{
									pos:  position{line: 1367, col: 21, offset: 51360},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1367, col: 31, offset: 51370},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 19, offset: 51441},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 19, offset: 51481},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 19, offset: 51522},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 19, offset: 51563},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 19, offset: 51604},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 19, offset: 51642},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 19, offset: 51682},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1376, col: 1, offset: 51709},
			expr: &choiceExpr{
				pos: position{line: 1376, col: 20, offset: 51728},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1376, col: 20, offset: 51728},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 36, offset: 51744},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1378, col: 1, offset: 51758},
			expr: &actionExpr{
				pos: position{line: 1378, col: 17, offset: 51774},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1378, col: 17, offset: 51774},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1378, col: 17, offset: 51774},
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 18, offset: 51775},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 22, offset: 51779},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1378, col: 31, offset: 51788},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 52, offset: 51809},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1378, col: 61, offset: 51818},
								expr: &ruleRefExpr{
									pos:  position{line: 1378, col: 62, offset: 51819},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1378, col: 73, offset: 51830},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1382, col: 1, offset: 51900},
			expr: &actionExpr{
				pos: position{line: 1382, col: 24, offset: 51923},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1382, col: 24, offset: 51923},
					expr: &seqExpr{
						pos: position{line: 1382, col: 25, offset: 51924},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1382, col: 25, offset: 51924},
								expr: &ruleRefExpr{
									pos:  position{line: 1382, col: 26, offset: 51925},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1382, col: 36, offset: 51935},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1382, col: 36, offset: 51935},
										expr: &ruleRefExpr{
											pos:  position{line: 1382, col: 36, offset: 51935},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1382, col: 45, offset: 51944},
										expr: &charClassMatcher{
											pos:        position{line: 1382, col: 45, offset: 51944},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1386, col: 1, offset: 51994},
			expr: &oneOrMoreExpr{
				pos: position{line: 1386, col: 13, offset: 52006},
				expr: &ruleRefExpr{
					pos:  position{line: 1386, col: 13, offset: 52006},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1388, col: 1, offset: 52016},
			expr: &actionExpr{
				pos: position{line: 1388, col: 12, offset: 52027},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1388, col: 12, offset: 52027},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1388, col: 12, offset: 52027},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1388, col: 16, offset: 52031},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1388, col: 21, offset: 52036},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1388, col: 21, offset: 52036},
									expr: &charClassMatcher{
										pos:        position{line: 1388, col: 21, offset: 52036},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1388, col: 69, offset: 52084},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1388, col: 73, offset: 52088},
							expr: &ruleRefExpr{
								pos:  position{line: 1388, col: 73, offset: 52088},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1388, col: 80, offset: 52095},
							expr: &choiceExpr{
								pos: position{line: 1388, col: 82, offset: 52097},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1388, col: 82, offset: 52097},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 88, offset: 52103},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1392, col: 1, offset: 52156},
			expr: &actionExpr{
				pos: position{line: 1392, col: 20, offset: 52175},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 20, offset: 52175},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1392, col: 20, offset: 52175},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1392, col: 25, offset: 52180},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1392, col: 48, offset: 52203},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1392, col: 61, offset: 52216},
								expr: &ruleRefExpr{
									pos:  position{line: 1392, col: 61, offset: 52216},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1396, col: 1, offset: 52313},
			expr: &actionExpr{
				pos: position{line: 1396, col: 26, offset: 52338},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1396, col: 26, offset: 52338},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1396, col: 26, offset: 52338},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1396, col: 30, offset: 52342},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1396, col: 35, offset: 52347},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1396, col: 35, offset: 52347},
									expr: &charClassMatcher{
										pos:        position{line: 1396, col: 35, offset: 52347},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1396, col: 83, offset: 52395},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1396, col: 87, offset: 52399},
							expr: &ruleRefExpr{
								pos:  position{line: 1396, col: 87, offset: 52399},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1403, col: 1, offset: 52626},
			expr: &seqExpr{
				pos: position{line: 1403, col: 25, offset: 52650},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1403, col: 25, offset: 52650},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1403, col: 31, offset: 52656},
						expr: &ruleRefExpr{
							pos:  position{line: 1403, col: 31, offset: 52656},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 38, offset: 52663},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1405, col: 1, offset: 52723},
			expr: &seqExpr{
				pos: position{line: 1405, col: 30, offset: 52752},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1405, col: 30, offset: 52752},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1405, col: 36, offset: 52758},
						expr: &ruleRefExpr{
							pos:  position{line: 1405, col: 36, offset: 52758},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 43, offset: 52765},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1407, col: 1, offset: 52770},
			expr: &choiceExpr{
				pos: position{line: 1407, col: 28, offset: 52797},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1407, col: 29, offset: 52798},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1407, col: 29, offset: 52798},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1407, col: 35, offset: 52804},
								expr: &ruleRefExpr{
									pos:  position{line: 1407, col: 35, offset: 52804},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1407, col: 42, offset: 52811},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 49, offset: 52818},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1409, col: 1, offset: 52823},
			expr: &actionExpr{
				pos: position{line: 1409, col: 16, offset: 52838},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 16, offset: 52838},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1409, col: 16, offset: 52838},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1409, col: 27, offset: 52849},
								expr: &ruleRefExpr{
									pos:  position{line: 1409, col: 28, offset: 52850},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1409, col: 41, offset: 52863},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 67, offset: 52889},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 76, offset: 52898},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1409, col: 104, offset: 52926},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1413, col: 1, offset: 53041},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1413, col: 31, offset: 53071},
				expr: &actionExpr{
					pos: position{line: 1413, col: 32, offset: 53072},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1413, col: 32, offset: 53072},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1413, col: 32, offset: 53072},
								expr: &ruleRefExpr{
									pos:  position{line: 1413, col: 33, offset: 53073},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1413, col: 57, offset: 53097},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1413, col: 66, offset: 53106},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1420, col: 1, offset: 53443},
			expr: &seqExpr{
				pos: position{line: 1420, col: 26, offset: 53468},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1420, col: 26, offset: 53468},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1420, col: 33, offset: 53475},
						expr: &ruleRefExpr{
							pos:  position{line: 1420, col: 33, offset: 53475},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 40, offset: 53482},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1422, col: 1, offset: 53487},
			expr: &seqExpr{
				pos: position{line: 1422, col: 31, offset: 53517},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1422, col: 31, offset: 53517},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1422, col: 38, offset: 53524},
						expr: &ruleRefExpr{
							pos:  position{line: 1422, col: 38, offset: 53524},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1422, col: 45, offset: 53531},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1424, col: 1, offset: 53536},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 29, offset: 53564},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1424, col: 30, offset: 53565},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1424, col: 30, offset: 53565},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1424, col: 37, offset: 53572},
								expr: &ruleRefExpr{
									pos:  position{line: 1424, col: 37, offset: 53572},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1424, col: 44, offset: 53579},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1424, col: 51, offset: 53586},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1426, col: 1, offset: 53591},
			expr: &actionExpr{
				pos: position{line: 1426, col: 17, offset: 53607},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1426, col: 17, offset: 53607},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1426, col: 17, offset: 53607},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1426, col: 28, offset: 53618},
								expr: &ruleRefExpr{
									pos:  position{line: 1426, col: 29, offset: 53619},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 42, offset: 53632},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1426, col: 69, offset: 53659},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1426, col: 78, offset: 53668},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 107, offset: 53697},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1430, col: 1, offset: 53814},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1430, col: 32, offset: 53845},
				expr: &actionExpr{
					pos: position{line: 1430, col: 33, offset: 53846},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1430, col: 33, offset: 53846},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1430, col: 33, offset: 53846},
								expr: &ruleRefExpr{
									pos:  position{line: 1430, col: 34, offset: 53847},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1430, col: 59, offset: 53872},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1430, col: 68, offset: 53881},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1437, col: 1, offset: 54218},
			expr: &seqExpr{
				pos: position{line: 1437, col: 26, offset: 54243},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1437, col: 26, offset: 54243},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1437, col: 33, offset: 54250},
						expr: &ruleRefExpr{
							pos:  position{line: 1437, col: 33, offset: 54250},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1437, col: 40, offset: 54257},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1439, col: 1, offset: 54262},
			expr: &seqExpr{
				pos: position{line: 1439, col: 31, offset: 54292},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1439, col: 31, offset: 54292},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1439, col: 38, offset: 54299},
						expr: &ruleRefExpr{
							pos:  position{line: 1439, col: 38, offset: 54299},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1439, col: 45, offset: 54306},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1441, col: 1, offset: 54311},
			expr: &choiceExpr{
				pos: position{line: 1441, col: 29, offset: 54339},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1441, col: 30, offset: 54340},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1441, col: 30, offset: 54340},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1441, col: 37, offset: 54347},
								expr: &ruleRefExpr{
									pos:  position{line: 1441, col: 37, offset: 54347},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1441, col: 44, offset: 54354},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1441, col: 51, offset: 54361},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1443, col: 1, offset: 54366},
			expr: &actionExpr{
				pos: position{line: 1443, col: 17, offset: 54382},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1443, col: 17, offset: 54382},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1443, col: 17, offset: 54382},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1443, col: 28, offset: 54393},
								expr: &ruleRefExpr{
									pos:  position{line: 1443, col: 29, offset: 54394},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1443, col: 42, offset: 54407},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1443, col: 69, offset: 54434},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1443, col: 78, offset: 54443},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1443, col: 107, offset: 54472},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1447, col: 1, offset: 54589},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1447, col: 32, offset: 54620},
				expr: &actionExpr{
					pos: position{line: 1447, col: 33, offset: 54621},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1447, col: 33, offset: 54621},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1447, col: 33, offset: 54621},
								expr: &ruleRefExpr{
									pos:  position{line: 1447, col: 34, offset: 54622},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1447, col: 59, offset: 54647},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1447, col: 68, offset: 54656},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1454, col: 1, offset: 54991},
			expr: &seqExpr{
				pos: position{line: 1454, col: 24, offset: 55014},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1454, col: 24, offset: 55014},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1454, col: 31, offset: 55021},
						expr: &ruleRefExpr{
							pos:  position{line: 1454, col: 31, offset: 55021},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 38, offset: 55028},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1456, col: 1, offset: 55058},
			expr: &seqExpr{
				pos: position{line: 1456, col: 29, offset: 55086},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1456, col: 29, offset: 55086},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1456, col: 36, offset: 55093},
						expr: &ruleRefExpr{
							pos:  position{line: 1456, col: 36, offset: 55093},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 43, offset: 55100},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1458, col: 1, offset: 55130},
			expr: &choiceExpr{
				pos: position{line: 1458, col: 27, offset: 55156},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1458, col: 28, offset: 55157},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1458, col: 28, offset: 55157},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1458, col: 35, offset: 55164},
								expr: &ruleRefExpr{
									pos:  position{line: 1458, col: 35, offset: 55164},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1458, col: 42, offset: 55171},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 49, offset: 55178},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1460, col: 1, offset: 55208},
			expr: &actionExpr{
				pos: position{line: 1460, col: 15, offset: 55222},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 15, offset: 55222},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1460, col: 15, offset: 55222},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1460, col: 26, offset: 55233},
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 27, offset: 55234},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1460, col: 40, offset: 55247},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 65, offset: 55272},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 74, offset: 55281},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1460, col: 101, offset: 55308},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1464, col: 1, offset: 55421},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1464, col: 30, offset: 55450},
				expr: &actionExpr{
					pos: position{line: 1464, col: 31, offset: 55451},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1464, col: 31, offset: 55451},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1464, col: 31, offset: 55451},
								expr: &ruleRefExpr{
									pos:  position{line: 1464, col: 32, offset: 55452},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1464, col: 55, offset: 55475},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1464, col: 64, offset: 55484},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1473, col: 1, offset: 55868},
			expr: &actionExpr{
				pos: position{line: 1473, col: 15, offset: 55882},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1473, col: 15, offset: 55882},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1473, col: 15, offset: 55882},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1473, col: 27, offset: 55894},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1474, col: 5, offset: 55911},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1478, col: 5, offset: 56106},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 30, offset: 56131},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1478, col: 39, offset: 56140},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1478, col: 66, offset: 56167},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1482, col: 1, offset: 56288},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1482, col: 30, offset: 56317},
				expr: &actionExpr{
					pos: position{line: 1482, col: 31, offset: 56318},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1482, col: 31, offset: 56318},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1482, col: 31, offset: 56318},
								expr: &ruleRefExpr{
									pos:  position{line: 1482, col: 32, offset: 56319},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1482, col: 55, offset: 56342},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1482, col: 64, offset: 56351},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1489, col: 1, offset: 56688},
			expr: &seqExpr{
				pos: position{line: 1489, col: 26, offset: 56713},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1489, col: 26, offset: 56713},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1489, col: 33, offset: 56720},
						expr: &ruleRefExpr{
							pos:  position{line: 1489, col: 33, offset: 56720},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1489, col: 40, offset: 56727},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1491, col: 1, offset: 56732},
			expr: &seqExpr{
				pos: position{line: 1491, col: 31, offset: 56762},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1491, col: 31, offset: 56762},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1491, col: 38, offset: 56769},
						expr: &ruleRefExpr{
							pos:  position{line: 1491, col: 38, offset: 56769},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1491, col: 45, offset: 56776},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1493, col: 1, offset: 56781},
			expr: &choiceExpr{
				pos: position{line: 1493, col: 29, offset: 56809},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1493, col: 30, offset: 56810},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1493, col: 30, offset: 56810},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1493, col: 37, offset: 56817},
								expr: &ruleRefExpr{
									pos:  position{line: 1493, col: 37, offset: 56817},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1493, col: 44, offset: 56824},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1493, col: 51, offset: 56831},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1495, col: 1, offset: 56836},
			expr: &actionExpr{
				pos: position{line: 1495, col: 17, offset: 56852},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1495, col: 17, offset: 56852},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1495, col: 17, offset: 56852},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1495, col: 28, offset: 56863},
								expr: &ruleRefExpr{
									pos:  position{line: 1495, col: 29, offset: 56864},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1495, col: 42, offset: 56877},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1495, col: 69, offset: 56904},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1495, col: 78, offset: 56913},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1495, col: 107, offset: 56942},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1499, col: 1, offset: 57059},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1499, col: 32, offset: 57090},
				expr: &actionExpr{
					pos: position{line: 1499, col: 33, offset: 57091},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1499, col: 33, offset: 57091},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1499, col: 33, offset: 57091},
								expr: &ruleRefExpr{
									pos:  position{line: 1499, col: 34, offset: 57092},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1499, col: 59, offset: 57117},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1499, col: 68, offset: 57126},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1506, col: 1, offset: 57467},
			expr: &seqExpr{
				pos: position{line: 1506, col: 30, offset: 57496},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1506, col: 30, offset: 57496},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1506, col: 37, offset: 57503},
						expr: &ruleRefExpr{
							pos:  position{line: 1506, col: 37, offset: 57503},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1506, col: 44, offset: 57510},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1508, col: 1, offset: 57515},
			expr: &seqExpr{
				pos: position{line: 1508, col: 35, offset: 57549},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1508, col: 35, offset: 57549},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1508, col: 42, offset: 57556},
						expr: &ruleRefExpr{
							pos:  position{line: 1508, col: 42, offset: 57556},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 49, offset: 57563},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1510, col: 1, offset: 57568},
			expr: &choiceExpr{
				pos: position{line: 1510, col: 33, offset: 57600},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1510, col: 34, offset: 57601},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1510, col: 34, offset: 57601},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1510, col: 41, offset: 57608},
								expr: &ruleRefExpr{
									pos:  position{line: 1510, col: 41, offset: 57608},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1510, col: 48, offset: 57615},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1510, col: 55, offset: 57622},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1512, col: 1, offset: 57627},
			expr: &actionExpr{
				pos: position{line: 1512, col: 21, offset: 57647},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1512, col: 21, offset: 57647},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1512, col: 21, offset: 57647},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1512, col: 32, offset: 57658},
								expr: &ruleRefExpr{
									pos:  position{line: 1512, col: 33, offset: 57659},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1512, col: 46, offset: 57672},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1512, col: 77, offset: 57703},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1512, col: 86, offset: 57712},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1512, col: 119, offset: 57745},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1516, col: 1, offset: 57870},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1516, col: 36, offset: 57905},
				expr: &actionExpr{
					pos: position{line: 1516, col: 37, offset: 57906},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1516, col: 37, offset: 57906},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1516, col: 37, offset: 57906},
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 38, offset: 57907},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1516, col: 67, offset: 57936},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 76, offset: 57945},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1524, col: 1, offset: 58291},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1524, col: 23, offset: 58313},
				expr: &ruleRefExpr{
					pos:  position{line: 1524, col: 23, offset: 58313},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1526, col: 1, offset: 58334},
			expr: &actionExpr{
				pos: position{line: 1527, col: 5, offset: 58361},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1527, col: 5, offset: 58361},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1527, col: 5, offset: 58361},
							expr: &ruleRefExpr{
								pos:  position{line: 1527, col: 6, offset: 58362},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1527, col: 10, offset: 58366},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1527, col: 19, offset: 58375},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1527, col: 19, offset: 58375},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1528, col: 15, offset: 58400},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1529, col: 15, offset: 58428},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1530, col: 15, offset: 58454},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1531, col: 15, offset: 58485},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1532, col: 15, offset: 58518},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1533, col: 15, offset: 58549},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1534, col: 15, offset: 58588},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1535, col: 15, offset: 58617},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1536, col: 15, offset: 58645},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1537, col: 15, offset: 58681},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1538, col: 15, offset: 58711},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1539, col: 15, offset: 58752},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1543, col: 1, offset: 58801},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1543, col: 22, offset: 58822},
				expr: &ruleRefExpr{
					pos:  position{line: 1543, col: 22, offset: 58822},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1545, col: 1, offset: 58842},
			expr: &actionExpr{
				pos: position{line: 1545, col: 22, offset: 58863},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1545, col: 22, offset: 58863},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1545, col: 22, offset: 58863},
							expr: &ruleRefExpr{
								pos:  position{line: 1545, col: 23, offset: 58864},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1545, col: 27, offset: 58868},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1545, col: 36, offset: 58877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1545, col: 36, offset: 58877},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1545, col: 48, offset: 58889},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1549, col: 1, offset: 58939},
			expr: &actionExpr{
				pos: position{line: 1549, col: 24, offset: 58962},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1549, col: 24, offset: 58962},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1549, col: 30, offset: 58968},
						expr: &ruleRefExpr{
							pos:  position{line: 1549, col: 31, offset: 58969},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1553, col: 1, offset: 59059},
			expr: &actionExpr{
				pos: position{line: 1553, col: 28, offset: 59086},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1553, col: 28, offset: 59086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1553, col: 28, offset: 59086},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1553, col: 37, offset: 59095},
								expr: &ruleRefExpr{
									pos:  position{line: 1553, col: 38, offset: 59096},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1553, col: 54, offset: 59112},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1560, col: 1, offset: 59354},
			expr: &actionExpr{
				pos: position{line: 1560, col: 10, offset: 59363},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1560, col: 10, offset: 59363},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1560, col: 10, offset: 59363},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1560, col: 21, offset: 59374},
								expr: &ruleRefExpr{
									pos:  position{line: 1560, col: 22, offset: 59375},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1560, col: 35, offset: 59388},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1561, col: 5, offset: 59407},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1561, col: 12, offset: 59414},
								expr: &ruleRefExpr{
									pos:  position{line: 1561, col: 13, offset: 59415},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1562, col: 5, offset: 59437},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1562, col: 11, offset: 59443},
								expr: &ruleRefExpr{
									pos:  position{line: 1562, col: 12, offset: 59444},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1563, col: 6, offset: 59461},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1563, col: 6, offset: 59461},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1563, col: 23, offset: 59478},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1567, col: 1, offset: 59593},
			expr: &seqExpr{
				pos: position{line: 1567, col: 23, offset: 59615},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1567, col: 23, offset: 59615},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1567, col: 27, offset: 59619},
						expr: &ruleRefExpr{
							pos:  position{line: 1567, col: 27, offset: 59619},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1569, col: 1, offset: 59627},
			expr: &seqExpr{
				pos: position{line: 1569, col: 19, offset: 59645},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1569, col: 19, offset: 59645},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1569, col: 26, offset: 59652},
						expr: &ruleRefExpr{
							pos:  position{line: 1569, col: 26, offset: 59652},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1569, col: 33, offset: 59659},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1572, col: 1, offset: 59727},
			expr: &actionExpr{
				pos: position{line: 1572, col: 20, offset: 59746},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1572, col: 20, offset: 59746},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1572, col: 20, offset: 59746},
							expr: &ruleRefExpr{
								pos:  position{line: 1572, col: 21, offset: 59747},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1572, col: 36, offset: 59762},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1572, col: 42, offset: 59768},
								expr: &ruleRefExpr{
									pos:  position{line: 1572, col: 43, offset: 59769},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1572, col: 55, offset: 59781},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1572, col: 59, offset: 59785},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1576, col: 1, offset: 59853},
			expr: &actionExpr{
				pos: position{line: 1576, col: 14, offset: 59866},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1576, col: 14, offset: 59866},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1576, col: 14, offset: 59866},
							expr: &ruleRefExpr{
								pos:  position{line: 1576, col: 15, offset: 59867},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1576, col: 30, offset: 59882},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1576, col: 36, offset: 59888},
								expr: &ruleRefExpr{
									pos:  position{line: 1576, col: 37, offset: 59889},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1576, col: 49, offset: 59901},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1576, col: 53, offset: 59905},
							expr: &ruleRefExpr{
								pos:  position{line: 1576, col: 53, offset: 59905},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1580, col: 1, offset: 59974},
			expr: &actionExpr{
				pos: position{line: 1580, col: 14, offset: 59987},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1580, col: 14, offset: 59987},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1580, col: 14, offset: 59987},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1580, col: 33, offset: 60006},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1580, col: 42, offset: 60015},
								expr: &seqExpr{
									pos: position{line: 1580, col: 43, offset: 60016},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1580, col: 43, offset: 60016},
											expr: &ruleRefExpr{
												pos:  position{line: 1580, col: 44, offset: 60017},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1580, col: 63, offset: 60036},
											expr: &ruleRefExpr{
												pos:  position{line: 1580, col: 64, offset: 60037},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1580, col: 68, offset: 60041},
											expr: &ruleRefExpr{
												pos:  position{line: 1580, col: 68, offset: 60041},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1580, col: 75, offset: 60048},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1580, col: 89, offset: 60062},
											expr: &ruleRefExpr{
												pos:  position{line: 1580, col: 89, offset: 60062},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1587, col: 1, offset: 60311},
			expr: &seqExpr{
				pos: position{line: 1587, col: 26, offset: 60336},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1587, col: 26, offset: 60336},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1587, col: 33, offset: 60343},
						expr: &ruleRefExpr{
							pos:  position{line: 1587, col: 33, offset: 60343},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1587, col: 40, offset: 60350},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1589, col: 1, offset: 60355},
			expr: &seqExpr{
				pos: position{line: 1589, col: 31, offset: 60385},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1589, col: 31, offset: 60385},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1589, col: 38, offset: 60392},
						expr: &ruleRefExpr{
							pos:  position{line: 1589, col: 38, offset: 60392},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 45, offset: 60399},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1591, col: 1, offset: 60404},
			expr: &choiceExpr{
				pos: position{line: 1591, col: 29, offset: 60432},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1591, col: 30, offset: 60433},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1591, col: 30, offset: 60433},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1591, col: 37, offset: 60440},
								expr: &ruleRefExpr{
									pos:  position{line: 1591, col: 37, offset: 60440},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1591, col: 44, offset: 60447},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 51, offset: 60454},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1593, col: 1, offset: 60459},
			expr: &actionExpr{
				pos: position{line: 1593, col: 17, offset: 60475},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 17, offset: 60475},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1593, col: 17, offset: 60475},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1593, col: 44, offset: 60502},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 53, offset: 60511},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1593, col: 83, offset: 60541},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1597, col: 1, offset: 60651},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1597, col: 32, offset: 60682},
				expr: &actionExpr{
					pos: position{line: 1597, col: 33, offset: 60683},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1597, col: 33, offset: 60683},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1597, col: 33, offset: 60683},
								expr: &ruleRefExpr{
									pos:  position{line: 1597, col: 34, offset: 60684},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1597, col: 59, offset: 60709},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1597, col: 68, offset: 60718},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1601, col: 1, offset: 60859},
			expr: &actionExpr{
				pos: position{line: 1601, col: 22, offset: 60880},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 22, offset: 60880},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1601, col: 22, offset: 60880},
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 23, offset: 60881},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1601, col: 45, offset: 60903},
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 45, offset: 60903},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1601, col: 52, offset: 60910},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 57, offset: 60915},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 66, offset: 60924},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1601, col: 92, offset: 60950},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1605, col: 1, offset: 61015},
			expr: &actionExpr{
				pos: position{line: 1605, col: 29, offset: 61043},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1605, col: 29, offset: 61043},
					expr: &charClassMatcher{
						pos:        position{line: 1605, col: 29, offset: 61043},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1613, col: 1, offset: 61356},
			expr: &choiceExpr{
				pos: position{line: 1613, col: 17, offset: 61372},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1613, col: 17, offset: 61372},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1613, col: 49, offset: 61404},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1613, col: 78, offset: 61433},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1615, col: 1, offset: 61469},
			expr: &litMatcher{
				pos:        position{line: 1615, col: 26, offset: 61494},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1618, col: 1, offset: 61566},
			expr: &actionExpr{
				pos: position{line: 1618, col: 31, offset: 61596},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1618, col: 31, offset: 61596},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1618, col: 31, offset: 61596},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1618, col: 42, offset: 61607},
								expr: &ruleRefExpr{
									pos:  position{line: 1618, col: 43, offset: 61608},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1618, col: 56, offset: 61621},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1618, col: 63, offset: 61628},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1623, col: 1, offset: 61858},
			expr: &actionExpr{
				pos: position{line: 1624, col: 5, offset: 61898},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1624, col: 5, offset: 61898},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1624, col: 5, offset: 61898},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1624, col: 16, offset: 61909},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1624, col: 16, offset: 61909},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1624, col: 16, offset: 61909},
											expr: &ruleRefExpr{
												pos:  position{line: 1624, col: 16, offset: 61909},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1624, col: 23, offset: 61916},
											expr: &charClassMatcher{
												pos:        position{line: 1624, col: 23, offset: 61916},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1626, col: 8, offset: 61969},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1627, col: 5, offset: 62032},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1627, col: 16, offset: 62043},
								expr: &actionExpr{
									pos: position{line: 1628, col: 9, offset: 62053},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1628, col: 9, offset: 62053},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1628, col: 9, offset: 62053},
												expr: &ruleRefExpr{
													pos:  position{line: 1628, col: 10, offset: 62054},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1629, col: 9, offset: 62073},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1629, col: 20, offset: 62084},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1629, col: 20, offset: 62084},
														expr: &charClassMatcher{
															pos:        position{line: 1629, col: 20, offset: 62084},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1631, col: 12, offset: 62145},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1638, col: 1, offset: 62375},
			expr: &actionExpr{
				pos: position{line: 1638, col: 39, offset: 62413},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1638, col: 39, offset: 62413},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1638, col: 39, offset: 62413},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1638, col: 50, offset: 62424},
								expr: &ruleRefExpr{
									pos:  position{line: 1638, col: 51, offset: 62425},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1639, col: 9, offset: 62446},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1639, col: 31, offset: 62468},
							expr: &ruleRefExpr{
								pos:  position{line: 1639, col: 31, offset: 62468},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1639, col: 38, offset: 62475},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1639, col: 46, offset: 62483},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1639, col: 53, offset: 62490},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1639, col: 95, offset: 62532},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1639, col: 96, offset: 62533},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1639, col: 96, offset: 62533},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1639, col: 118, offset: 62555},
											expr: &ruleRefExpr{
												pos:  position{line: 1639, col: 118, offset: 62555},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 125, offset: 62562},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1639, col: 132, offset: 62569},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1644, col: 1, offset: 62728},
			expr: &actionExpr{
				pos: position{line: 1644, col: 44, offset: 62771},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1644, col: 44, offset: 62771},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1644, col: 50, offset: 62777},
						expr: &ruleRefExpr{
							pos:  position{line: 1644, col: 51, offset: 62778},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1648, col: 1, offset: 62862},
			expr: &actionExpr{
				pos: position{line: 1649, col: 5, offset: 62917},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1649, col: 5, offset: 62917},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1649, col: 5, offset: 62917},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1649, col: 11, offset: 62923},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1649, col: 11, offset: 62923},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1649, col: 11, offset: 62923},
											expr: &ruleRefExpr{
												pos:  position{line: 1649, col: 12, offset: 62924},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1649, col: 34, offset: 62946},
											expr: &charClassMatcher{
												pos:        position{line: 1649, col: 34, offset: 62946},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1651, col: 8, offset: 62999},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1656, col: 1, offset: 63125},
			expr: &actionExpr{
				pos: position{line: 1657, col: 5, offset: 63163},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1657, col: 5, offset: 63163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1657, col: 5, offset: 63163},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1657, col: 16, offset: 63174},
								expr: &ruleRefExpr{
									pos:  position{line: 1657, col: 17, offset: 63175},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1658, col: 5, offset: 63192},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1665, col: 5, offset: 63399},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1665, col: 12, offset: 63406},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1669, col: 1, offset: 63556},
			expr: &actionExpr{
				pos: position{line: 1669, col: 16, offset: 63571},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1669, col: 16, offset: 63571},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1674, col: 1, offset: 63654},
			expr: &actionExpr{
				pos: position{line: 1674, col: 39, offset: 63692},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1674, col: 39, offset: 63692},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1674, col: 45, offset: 63698},
						expr: &ruleRefExpr{
							pos:  position{line: 1674, col: 46, offset: 63699},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1678, col: 1, offset: 63779},
			expr: &actionExpr{
				pos: position{line: 1678, col: 38, offset: 63816},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1678, col: 38, offset: 63816},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1678, col: 38, offset: 63816},
							expr: &ruleRefExpr{
								pos:  position{line: 1678, col: 39, offset: 63817},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1678, col: 49, offset: 63827},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1678, col: 58, offset: 63836},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1678, col: 58, offset: 63836},
									expr: &charClassMatcher{
										pos:        position{line: 1678, col: 58, offset: 63836},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1680, col: 4, offset: 63881},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1687, col: 1, offset: 64067},
			expr: &actionExpr{
				pos: position{line: 1687, col: 14, offset: 64080},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1687, col: 14, offset: 64080},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1687, col: 14, offset: 64080},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1687, col: 19, offset: 64085},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1687, col: 25, offset: 64091},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1687, col: 43, offset: 64109},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1691, col: 1, offset: 64174},
			expr: &actionExpr{
				pos: position{line: 1691, col: 21, offset: 64194},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1691, col: 21, offset: 64194},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1691, col: 30, offset: 64203},
						expr: &choiceExpr{
							pos: position{line: 1691, col: 31, offset: 64204},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1691, col: 31, offset: 64204},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1691, col: 38, offset: 64211},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1691, col: 51, offset: 64224},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1691, col: 59, offset: 64232},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1691, col: 60, offset: 64233},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1691, col: 60, offset: 64233},
												expr: &litMatcher{
													pos:        position{line: 1691, col: 61, offset: 64234},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1691, col: 66, offset: 64239,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1697, col: 1, offset: 64345},
			expr: &actionExpr{
				pos: position{line: 1697, col: 23, offset: 64367},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1697, col: 23, offset: 64367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1697, col: 23, offset: 64367},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1697, col: 29, offset: 64373},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1697, col: 36, offset: 64380},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1698, col: 5, offset: 64412},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1698, col: 11, offset: 64418},
								expr: &actionExpr{
									pos: position{line: 1698, col: 12, offset: 64419},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1698, col: 12, offset: 64419},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1698, col: 12, offset: 64419},
												expr: &ruleRefExpr{
													pos:  position{line: 1698, col: 12, offset: 64419},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1698, col: 19, offset: 64426},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1698, col: 23, offset: 64430},
												expr: &ruleRefExpr{
													pos:  position{line: 1698, col: 23, offset: 64430},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1698, col: 30, offset: 64437},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1698, col: 39, offset: 64446},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 5, offset: 64504},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1699, col: 11, offset: 64510},
								expr: &actionExpr{
									pos: position{line: 1699, col: 12, offset: 64511},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1699, col: 12, offset: 64511},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1699, col: 12, offset: 64511},
												expr: &ruleRefExpr{
													pos:  position{line: 1699, col: 12, offset: 64511},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1699, col: 19, offset: 64518},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1699, col: 23, offset: 64522},
												expr: &ruleRefExpr{
													pos:  position{line: 1699, col: 23, offset: 64522},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1699, col: 30, offset: 64529},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1699, col: 39, offset: 64538},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1700, col: 5, offset: 64596},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1704, col: 1, offset: 64675},
			expr: &actionExpr{
				pos: position{line: 1704, col: 30, offset: 64704},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1704, col: 30, offset: 64704},
					expr: &choiceExpr{
						pos: position{line: 1704, col: 31, offset: 64705},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1704, col: 31, offset: 64705},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1704, col: 42, offset: 64716},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1711, col: 1, offset: 64865},
			expr: &actionExpr{
				pos: position{line: 1711, col: 14, offset: 64878},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1711, col: 14, offset: 64878},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1711, col: 14, offset: 64878},
							expr: &ruleRefExpr{
								pos:  position{line: 1711, col: 15, offset: 64879},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1711, col: 19, offset: 64883},
							expr: &ruleRefExpr{
								pos:  position{line: 1711, col: 19, offset: 64883},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1711, col: 26, offset: 64890},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1718, col: 1, offset: 65037},
			expr: &charClassMatcher{
				pos:        position{line: 1718, col: 13, offset: 65049},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1720, col: 1, offset: 65059},
			expr: &choiceExpr{
				pos: position{line: 1720, col: 16, offset: 65074},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1720, col: 16, offset: 65074},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1720, col: 22, offset: 65080},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1720, col: 28, offset: 65086},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1720, col: 34, offset: 65092},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1720, col: 40, offset: 65098},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1720, col: 46, offset: 65104},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1722, col: 1, offset: 65110},
			expr: &actionExpr{
				pos: position{line: 1722, col: 14, offset: 65123},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1722, col: 14, offset: 65123},
					expr: &charClassMatcher{
						pos:        position{line: 1722, col: 14, offset: 65123},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1726, col: 1, offset: 65169},
			expr: &choiceExpr{
				pos: position{line: 1730, col: 5, offset: 65496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1730, col: 5, offset: 65496},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1730, col: 5, offset: 65496},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1730, col: 5, offset: 65496},
									expr: &charClassMatcher{
										pos:        position{line: 1730, col: 5, offset: 65496},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1730, col: 15, offset: 65506},
									expr: &choiceExpr{
										pos: position{line: 1730, col: 17, offset: 65508},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1730, col: 17, offset: 65508},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1730, col: 30, offset: 65521},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1732, col: 9, offset: 65591},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1732, col: 9, offset: 65591},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1732, col: 9, offset: 65591},
									expr: &charClassMatcher{
										pos:        position{line: 1732, col: 9, offset: 65591},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1732, col: 19, offset: 65601},
									expr: &seqExpr{
										pos: position{line: 1732, col: 20, offset: 65602},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1732, col: 20, offset: 65602},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1732, col: 27, offset: 65609},
												expr: &charClassMatcher{
													pos:        position{line: 1732, col: 27, offset: 65609},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1736, col: 1, offset: 65685},
			expr: &choiceExpr{
				pos: position{line: 1737, col: 5, offset: 65766},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1737, col: 5, offset: 65766},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1737, col: 5, offset: 65766},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1737, col: 5, offset: 65766},
									expr: &charClassMatcher{
										pos:        position{line: 1737, col: 5, offset: 65766},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1737, col: 20, offset: 65781},
									expr: &choiceExpr{
										pos: position{line: 1737, col: 22, offset: 65783},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1737, col: 22, offset: 65783},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1737, col: 32, offset: 65793},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1739, col: 9, offset: 65863},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1742, col: 1, offset: 65963},
			expr: &actionExpr{
				pos: position{line: 1742, col: 12, offset: 65974},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1742, col: 12, offset: 65974},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1746, col: 1, offset: 66039},
			expr: &actionExpr{
				pos: position{line: 1746, col: 17, offset: 66055},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1746, col: 17, offset: 66055},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1746, col: 22, offset: 66060},
						expr: &choiceExpr{
							pos: position{line: 1746, col: 23, offset: 66061},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1746, col: 23, offset: 66061},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1746, col: 34, offset: 66072},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1750, col: 1, offset: 66156},
			expr: &actionExpr{
				pos: position{line: 1750, col: 25, offset: 66180},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1750, col: 25, offset: 66180},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1750, col: 30, offset: 66185},
						expr: &charClassMatcher{
							pos:        position{line: 1750, col: 31, offset: 66186},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1754, col: 1, offset: 66258},
			expr: &actionExpr{
				pos: position{line: 1754, col: 13, offset: 66270},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1754, col: 13, offset: 66270},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1754, col: 13, offset: 66270},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1754, col: 20, offset: 66277},
								expr: &ruleRefExpr{
									pos:  position{line: 1754, col: 21, offset: 66278},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1754, col: 34, offset: 66291},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1754, col: 39, offset: 66296},
								expr: &choiceExpr{
									pos: position{line: 1754, col: 40, offset: 66297},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1754, col: 40, offset: 66297},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1754, col: 51, offset: 66308},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1758, col: 1, offset: 66396},
			expr: &actionExpr{
				pos: position{line: 1758, col: 23, offset: 66418},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1758, col: 23, offset: 66418},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1758, col: 23, offset: 66418},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1758, col: 31, offset: 66426},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 43, offset: 66438},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1758, col: 48, offset: 66443},
								expr: &choiceExpr{
									pos: position{line: 1758, col: 49, offset: 66444},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1758, col: 49, offset: 66444},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1758, col: 60, offset: 66455},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1762, col: 1, offset: 66543},
			expr: &oneOrMoreExpr{
				pos: position{line: 1762, col: 13, offset: 66555},
				expr: &charClassMatcher{
					pos:        position{line: 1762, col: 14, offset: 66556},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1764, col: 1, offset: 66690},
			expr: &actionExpr{
				pos: position{line: 1764, col: 21, offset: 66710},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1764, col: 21, offset: 66710},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1764, col: 21, offset: 66710},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 29, offset: 66718},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1764, col: 41, offset: 66730},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1764, col: 47, offset: 66736},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1769, col: 1, offset: 66984},
			expr: &oneOrMoreExpr{
				pos: position{line: 1769, col: 22, offset: 67005},
				expr: &charClassMatcher{
					pos:        position{line: 1769, col: 23, offset: 67006},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1771, col: 1, offset: 67138},
			expr: &actionExpr{
				pos: position{line: 1771, col: 9, offset: 67146},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1771, col: 9, offset: 67146},
					expr: &charClassMatcher{
						pos:        position{line: 1771, col: 9, offset: 67146},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1775, col: 1, offset: 67194},
			expr: &choiceExpr{
				pos: position{line: 1775, col: 15, offset: 67208},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1775, col: 15, offset: 67208},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1775, col: 27, offset: 67220},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1775, col: 40, offset: 67233},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1775, col: 51, offset: 67244},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1775, col: 62, offset: 67255},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1777, col: 1, offset: 67266},
			expr: &actionExpr{
				pos: position{line: 1777, col: 7, offset: 67272},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1777, col: 7, offset: 67272},
					expr: &charClassMatcher{
						pos:        position{line: 1777, col: 7, offset: 67272},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1781, col: 1, offset: 67397},
			expr: &actionExpr{
				pos: position{line: 1781, col: 10, offset: 67406},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1781, col: 10, offset: 67406},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1785, col: 1, offset: 67448},
			expr: &actionExpr{
				pos: position{line: 1785, col: 11, offset: 67458},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1785, col: 11, offset: 67458},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1785, col: 11, offset: 67458},
							expr: &litMatcher{
								pos:        position{line: 1785, col: 11, offset: 67458},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1785, col: 16, offset: 67463},
							expr: &ruleRefExpr{
								pos:  position{line: 1785, col: 16, offset: 67463},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1789, col: 1, offset: 67515},
			expr: &choiceExpr{
				pos: position{line: 1789, col: 10, offset: 67524},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1789, col: 10, offset: 67524},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1789, col: 16, offset: 67530},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1789, col: 16, offset: 67530},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1793, col: 1, offset: 67571},
			expr: &choiceExpr{
				pos: position{line: 1793, col: 12, offset: 67582},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1793, col: 12, offset: 67582},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1793, col: 21, offset: 67591},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1793, col: 28, offset: 67598},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1795, col: 1, offset: 67604},
			expr: &notExpr{
				pos: position{line: 1795, col: 8, offset: 67611},
				expr: &anyMatcher{
					line: 1795, col: 9, offset: 67612,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1797, col: 1, offset: 67615},
			expr: &choiceExpr{
				pos: position{line: 1797, col: 8, offset: 67622},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1797, col: 8, offset: 67622},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 18, offset: 67632},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {
	//return []interface{}{types.Attributes{ "role": role }}, nil
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextRoleWord6() (interface{}, error) {
	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord6()
}

func (c *current) onQuotedTextRoleWord1(role interface{}) (interface{}, error) {
	return role, nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {
	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole5()
}

func (c *current) onQuotedTextShortRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1(stack["role"])
}

func (c *current) onQuotedTextShortID5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID5()
}

func (c *current) onQuotedTextShortID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1(stack["id"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText19(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText19(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText16(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText16(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
