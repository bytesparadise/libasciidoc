// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1621},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1646},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1684},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1730},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1737},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1738},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1775},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1812},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1812},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1812},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1813},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1822},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1829},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1829},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1854},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1878},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1903},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1925},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1944},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1995},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2019},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2059},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2093},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2130},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2193},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2215},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2222},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2223},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2244},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2265},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2265},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2266},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2275},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2282},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2294},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2440},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2455},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2473},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2492},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2492},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2513},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2521},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2522},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2547},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2627},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2652},
						val:        "---",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 93, col: 32, offset: 2658},
						expr: &ruleRefExpr{
							pos:  position{line: 93, col: 32, offset: 2658},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 36, offset: 2662},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2667},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2693},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2693},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2694},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2695},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2695},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2696},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2717,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2883},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2901},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2901},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2905},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2909},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2916},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2931},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2935},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2935},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2953},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 103, col: 9, offset: 2965},
							expr: &choiceExpr{
								pos: position{line: 103, col: 10, offset: 2966},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 103, col: 10, offset: 2966},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 103, col: 30, offset: 2986},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 3009},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 18, offset: 3018},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 18, offset: 3018},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3045},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3046},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 105, col: 10, offset: 3046},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3066},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3089},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 19, offset: 3099},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 19, offset: 3099},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 110, col: 1, offset: 3200},
			expr: &choiceExpr{
				pos: position{line: 110, col: 20, offset: 3219},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 110, col: 20, offset: 3219},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 48, offset: 3247},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 112, col: 1, offset: 3277},
			expr: &actionExpr{
				pos: position{line: 112, col: 30, offset: 3306},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 112, col: 30, offset: 3306},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 30, offset: 3306},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 30, offset: 3306},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 112, col: 34, offset: 3310},
							expr: &litMatcher{
								pos:        position{line: 112, col: 35, offset: 3311},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 39, offset: 3315},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 112, col: 48, offset: 3324},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 3324},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 65, offset: 3341},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 116, col: 1, offset: 3411},
			expr: &actionExpr{
				pos: position{line: 116, col: 33, offset: 3443},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 116, col: 33, offset: 3443},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 33, offset: 3443},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 33, offset: 3443},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 37, offset: 3447},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 116, col: 48, offset: 3458},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 56, offset: 3466},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 116, col: 72, offset: 3482},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 120, col: 1, offset: 3561},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3579},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3579},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 19, offset: 3579},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 19, offset: 3579},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 23, offset: 3583},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 33, offset: 3593},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 53, offset: 3613},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 120, col: 59, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 60, offset: 3620},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 82, offset: 3642},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 82, offset: 3642},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 120, col: 86, offset: 3646},
							expr: &litMatcher{
								pos:        position{line: 120, col: 86, offset: 3646},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 91, offset: 3651},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 91, offset: 3651},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 125, col: 1, offset: 3793},
			expr: &actionExpr{
				pos: position{line: 125, col: 23, offset: 3815},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 125, col: 23, offset: 3815},
					expr: &choiceExpr{
						pos: position{line: 125, col: 24, offset: 3816},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 125, col: 24, offset: 3816},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 125, col: 37, offset: 3829},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 125, col: 37, offset: 3829},
										expr: &litMatcher{
											pos:        position{line: 125, col: 38, offset: 3830},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 42, offset: 3834},
										expr: &litMatcher{
											pos:        position{line: 125, col: 43, offset: 3835},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 47, offset: 3839},
										expr: &ruleRefExpr{
											pos:  position{line: 125, col: 48, offset: 3840},
											name: "Newline",
										},
									},
									&anyMatcher{
										line: 125, col: 56, offset: 3848,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 129, col: 1, offset: 3889},
			expr: &actionExpr{
				pos: position{line: 129, col: 24, offset: 3912},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 129, col: 24, offset: 3912},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 24, offset: 3912},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3916},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 129, col: 35, offset: 3923},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 129, col: 35, offset: 3923},
									expr: &choiceExpr{
										pos: position{line: 129, col: 36, offset: 3924},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 129, col: 36, offset: 3924},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 129, col: 49, offset: 3937},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 129, col: 49, offset: 3937},
														expr: &litMatcher{
															pos:        position{line: 129, col: 50, offset: 3938},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 129, col: 54, offset: 3942},
														expr: &ruleRefExpr{
															pos:  position{line: 129, col: 55, offset: 3943},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 129, col: 60, offset: 3948,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 4, offset: 3989},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 137, col: 1, offset: 4150},
			expr: &actionExpr{
				pos: position{line: 137, col: 21, offset: 4170},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 137, col: 21, offset: 4170},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 21, offset: 4170},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 21, offset: 4170},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 137, col: 25, offset: 4174},
							expr: &litMatcher{
								pos:        position{line: 137, col: 26, offset: 4175},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 30, offset: 4179},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 138, col: 9, offset: 4198},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 138, col: 10, offset: 4199},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 138, col: 10, offset: 4199},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 10, offset: 4199},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 21, offset: 4210},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 45, offset: 4234},
													expr: &litMatcher{
														pos:        position{line: 138, col: 45, offset: 4234},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 50, offset: 4239},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 58, offset: 4247},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 59, offset: 4248},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 82, offset: 4271},
													expr: &litMatcher{
														pos:        position{line: 138, col: 82, offset: 4271},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 87, offset: 4276},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 97, offset: 4286},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 98, offset: 4287},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 15, offset: 4404},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 140, col: 15, offset: 4404},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 15, offset: 4404},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 24, offset: 4413},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 46, offset: 4435},
													expr: &litMatcher{
														pos:        position{line: 140, col: 46, offset: 4435},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 51, offset: 4440},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 61, offset: 4450},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 62, offset: 4451},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 13, offset: 4560},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 147, col: 1, offset: 4690},
			expr: &choiceExpr{
				pos: position{line: 147, col: 27, offset: 4716},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 27, offset: 4716},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 147, col: 27, offset: 4716},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 147, col: 27, offset: 4716},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 32, offset: 4721},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 39, offset: 4728},
									expr: &choiceExpr{
										pos: position{line: 147, col: 40, offset: 4729},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 40, offset: 4729},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 52, offset: 4741},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 62, offset: 4751},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 62, offset: 4751},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 63, offset: 4752},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 67, offset: 4756},
														expr: &litMatcher{
															pos:        position{line: 147, col: 68, offset: 4757},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 72, offset: 4761},
														expr: &litMatcher{
															pos:        position{line: 147, col: 73, offset: 4762},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 78, offset: 4767,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4809},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4809},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 149, col: 5, offset: 4809},
									expr: &litMatcher{
										pos:        position{line: 149, col: 5, offset: 4809},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 11, offset: 4815},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 18, offset: 4822},
									expr: &choiceExpr{
										pos: position{line: 149, col: 19, offset: 4823},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 149, col: 19, offset: 4823},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 149, col: 31, offset: 4835},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 149, col: 41, offset: 4845},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 149, col: 41, offset: 4845},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 42, offset: 4846},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 149, col: 46, offset: 4850},
														expr: &litMatcher{
															pos:        position{line: 149, col: 47, offset: 4851},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 149, col: 51, offset: 4855},
														expr: &litMatcher{
															pos:        position{line: 149, col: 52, offset: 4856},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 149, col: 57, offset: 4861,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 149, col: 62, offset: 4866},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 62, offset: 4866},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 149, col: 66, offset: 4870},
									expr: &litMatcher{
										pos:        position{line: 149, col: 67, offset: 4871},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 153, col: 1, offset: 4911},
			expr: &actionExpr{
				pos: position{line: 153, col: 25, offset: 4935},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 153, col: 25, offset: 4935},
					expr: &choiceExpr{
						pos: position{line: 153, col: 26, offset: 4936},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 153, col: 26, offset: 4936},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 153, col: 38, offset: 4948},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 153, col: 48, offset: 4958},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 153, col: 48, offset: 4958},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 49, offset: 4959},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 153, col: 53, offset: 4963},
										expr: &litMatcher{
											pos:        position{line: 153, col: 54, offset: 4964},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 153, col: 59, offset: 4969,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 157, col: 1, offset: 5010},
			expr: &actionExpr{
				pos: position{line: 157, col: 27, offset: 5036},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 157, col: 27, offset: 5036},
					expr: &choiceExpr{
						pos: position{line: 157, col: 28, offset: 5037},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 28, offset: 5037},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 40, offset: 5049},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 157, col: 50, offset: 5059},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 157, col: 50, offset: 5059},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 51, offset: 5060},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 157, col: 56, offset: 5065,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 164, col: 1, offset: 5221},
			expr: &actionExpr{
				pos: position{line: 164, col: 33, offset: 5253},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 164, col: 33, offset: 5253},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 33, offset: 5253},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 5257},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 43, offset: 5263},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 66, offset: 5286},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 70, offset: 5290},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 76, offset: 5296},
								expr: &actionExpr{
									pos: position{line: 164, col: 77, offset: 5297},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 164, col: 78, offset: 5298},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 164, col: 78, offset: 5298},
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 78, offset: 5298},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 164, col: 82, offset: 5302},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 89, offset: 5309},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 164, col: 138, offset: 5358},
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 138, offset: 5358},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 142, offset: 5362},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 171, col: 1, offset: 5610},
			expr: &actionExpr{
				pos: position{line: 171, col: 26, offset: 5635},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 171, col: 26, offset: 5635},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 171, col: 27, offset: 5636},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 171, col: 27, offset: 5636},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 35, offset: 5644},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 43, offset: 5652},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 171, col: 51, offset: 5660},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 171, col: 56, offset: 5665},
							expr: &choiceExpr{
								pos: position{line: 171, col: 57, offset: 5666},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 171, col: 57, offset: 5666},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 65, offset: 5674},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 73, offset: 5682},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 171, col: 81, offset: 5690},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 175, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5758},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5758},
					expr: &seqExpr{
						pos: position{line: 175, col: 28, offset: 5759},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 175, col: 28, offset: 5759},
								expr: &ruleRefExpr{
									pos:  position{line: 175, col: 29, offset: 5760},
									name: "Newline",
								},
							},
							&anyMatcher{
								line: 175, col: 37, offset: 5768,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 179, col: 1, offset: 5808},
			expr: &choiceExpr{
				pos: position{line: 179, col: 27, offset: 5834},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 179, col: 27, offset: 5834},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 179, col: 27, offset: 5834},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 27, offset: 5834},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 32, offset: 5839},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 38, offset: 5845},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 61, offset: 5868},
									val:        ":",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 179, col: 65, offset: 5872},
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 65, offset: 5872},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 69, offset: 5876},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5944},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5944},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 5944},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 181, col: 9, offset: 5948},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 15, offset: 5954},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 181, col: 38, offset: 5977},
									val:        "!:",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 181, col: 43, offset: 5982},
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 43, offset: 5982},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 47, offset: 5986},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 185, col: 1, offset: 6053},
			expr: &actionExpr{
				pos: position{line: 185, col: 34, offset: 6086},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 185, col: 34, offset: 6086},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 34, offset: 6086},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 185, col: 38, offset: 6090},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 44, offset: 6096},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 67, offset: 6119},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 192, col: 1, offset: 6307},
			expr: &actionExpr{
				pos: position{line: 192, col: 22, offset: 6328},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 192, col: 22, offset: 6328},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 192, col: 22, offset: 6328},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 192, col: 28, offset: 6334},
								expr: &ruleRefExpr{
									pos:  position{line: 192, col: 29, offset: 6335},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 192, col: 48, offset: 6354},
							expr: &ruleRefExpr{
								pos:  position{line: 192, col: 48, offset: 6354},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 196, col: 1, offset: 6436},
			expr: &actionExpr{
				pos: position{line: 196, col: 21, offset: 6456},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 196, col: 21, offset: 6456},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 196, col: 21, offset: 6456},
							expr: &choiceExpr{
								pos: position{line: 196, col: 23, offset: 6458},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 196, col: 23, offset: 6458},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 29, offset: 6464},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 35, offset: 6470},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 6546},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 197, col: 11, offset: 6552},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 11, offset: 6552},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6573},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6597},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6620},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6648},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6676},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6703},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6730},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6767},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6795},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6978},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 7001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 7001},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 7019},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 7036},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 7049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 7049},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 7049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 7049},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 7054},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 7058},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 7062},
									val:        "]]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 213, col: 32, offset: 7067},
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 32, offset: 7067},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 36, offset: 7071},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 7124},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 7124},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 7124},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 7129},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 7133},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 7137},
									val:        "]",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 215, col: 23, offset: 7142},
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 23, offset: 7142},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 27, offset: 7146},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7198},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7217},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7217},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7217},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7222},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7226},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7230},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7235},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7235},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7509},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7525},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7525},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 225, col: 21, offset: 7529},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 28, offset: 7536},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 225, col: 28, offset: 7536},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 225, col: 28, offset: 7536},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 225, col: 38, offset: 7546},
											expr: &choiceExpr{
												pos: position{line: 225, col: 39, offset: 7547},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 225, col: 39, offset: 7547},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 225, col: 51, offset: 7559},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 225, col: 61, offset: 7569},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 225, col: 61, offset: 7569},
																expr: &ruleRefExpr{
																	pos:  position{line: 225, col: 62, offset: 7570},
																	name: "Newline",
																},
															},
															&anyMatcher{
																line: 225, col: 70, offset: 7578,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 4, offset: 7619},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 233, col: 1, offset: 7771},
			expr: &actionExpr{
				pos: position{line: 233, col: 16, offset: 7786},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 233, col: 16, offset: 7786},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 16, offset: 7786},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7791},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 233, col: 27, offset: 7797},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 233, col: 27, offset: 7797},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 27, offset: 7797},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 233, col: 37, offset: 7807},
											expr: &choiceExpr{
												pos: position{line: 233, col: 38, offset: 7808},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 233, col: 38, offset: 7808},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 233, col: 50, offset: 7820},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 233, col: 60, offset: 7830},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 233, col: 60, offset: 7830},
																expr: &ruleRefExpr{
																	pos:  position{line: 233, col: 61, offset: 7831},
																	name: "Newline",
																},
															},
															&notExpr{
																pos: position{line: 233, col: 69, offset: 7839},
																expr: &litMatcher{
																	pos:        position{line: 233, col: 70, offset: 7840},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 233, col: 74, offset: 7844,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 235, col: 4, offset: 7885},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 235, col: 8, offset: 7889},
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 8, offset: 7889},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 12, offset: 7893},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 239, col: 1, offset: 7949},
			expr: &actionExpr{
				pos: position{line: 239, col: 21, offset: 7969},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 21, offset: 7969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 21, offset: 7969},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 33, offset: 7981},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 33, offset: 7981},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 37, offset: 7985},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 244, col: 1, offset: 8117},
			expr: &actionExpr{
				pos: position{line: 244, col: 30, offset: 8146},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 244, col: 30, offset: 8146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 30, offset: 8146},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 34, offset: 8150},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 37, offset: 8153},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 53, offset: 8169},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 57, offset: 8173},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 57, offset: 8173},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 61, offset: 8177},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 249, col: 1, offset: 8332},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8352},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8352},
							val:        "[source",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 250, col: 5, offset: 8367},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 250, col: 14, offset: 8376},
								expr: &actionExpr{
									pos: position{line: 250, col: 15, offset: 8377},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 250, col: 15, offset: 8377},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 250, col: 15, offset: 8377},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 250, col: 19, offset: 8381},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 250, col: 24, offset: 8386},
													expr: &ruleRefExpr{
														pos:  position{line: 250, col: 25, offset: 8387},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 8442},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 12, offset: 8449},
								expr: &actionExpr{
									pos: position{line: 251, col: 13, offset: 8450},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 251, col: 13, offset: 8450},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 251, col: 13, offset: 8450},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 251, col: 17, offset: 8454},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 251, col: 22, offset: 8459},
													expr: &ruleRefExpr{
														pos:  position{line: 251, col: 23, offset: 8460},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 252, col: 5, offset: 8507},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 9, offset: 8511},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 9, offset: 8511},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 13, offset: 8515},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 257, col: 1, offset: 8666},
			expr: &actionExpr{
				pos: position{line: 257, col: 19, offset: 8684},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 257, col: 19, offset: 8684},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 19, offset: 8684},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 257, col: 23, offset: 8688},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 257, col: 34, offset: 8699},
								expr: &ruleRefExpr{
									pos:  position{line: 257, col: 35, offset: 8700},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 54, offset: 8719},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 257, col: 58, offset: 8723},
							expr: &ruleRefExpr{
								pos:  position{line: 257, col: 58, offset: 8723},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 62, offset: 8727},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 261, col: 1, offset: 8799},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 8824},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 8824},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 8824},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 262, col: 5, offset: 8824},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 10, offset: 8829},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 262, col: 24, offset: 8843},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 262, col: 28, offset: 8847},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 262, col: 34, offset: 8853},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 35, offset: 8854},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 262, col: 52, offset: 8871},
									expr: &litMatcher{
										pos:        position{line: 262, col: 52, offset: 8871},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 262, col: 57, offset: 8876},
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 57, offset: 8876},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 9, offset: 8981},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 264, col: 9, offset: 8981},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 264, col: 9, offset: 8981},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 14, offset: 8986},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 264, col: 28, offset: 9000},
									expr: &litMatcher{
										pos:        position{line: 264, col: 28, offset: 9000},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 264, col: 33, offset: 9005},
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 33, offset: 9005},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 268, col: 1, offset: 9098},
			expr: &actionExpr{
				pos: position{line: 268, col: 17, offset: 9114},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 268, col: 17, offset: 9114},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 268, col: 17, offset: 9114},
							expr: &litMatcher{
								pos:        position{line: 268, col: 18, offset: 9115},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 26, offset: 9123},
							expr: &litMatcher{
								pos:        position{line: 268, col: 27, offset: 9124},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 35, offset: 9132},
							expr: &litMatcher{
								pos:        position{line: 268, col: 36, offset: 9133},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 46, offset: 9143},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 47, offset: 9144},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 54, offset: 9151},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 268, col: 58, offset: 9155},
								expr: &choiceExpr{
									pos: position{line: 268, col: 59, offset: 9156},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 268, col: 59, offset: 9156},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 268, col: 71, offset: 9168},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 92, offset: 9189},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 92, offset: 9189},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 272, col: 1, offset: 9229},
			expr: &actionExpr{
				pos: position{line: 272, col: 19, offset: 9247},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 272, col: 19, offset: 9247},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 272, col: 25, offset: 9253},
						expr: &choiceExpr{
							pos: position{line: 272, col: 26, offset: 9254},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 272, col: 26, offset: 9254},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 38, offset: 9266},
									name: "Spaces",
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 47, offset: 9275},
									name: "OtherAttributeChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 276, col: 1, offset: 9333},
			expr: &actionExpr{
				pos: position{line: 276, col: 29, offset: 9361},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 29, offset: 9361},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 276, col: 29, offset: 9361},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 276, col: 35, offset: 9367},
								expr: &choiceExpr{
									pos: position{line: 276, col: 36, offset: 9368},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 276, col: 36, offset: 9368},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 276, col: 48, offset: 9380},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 276, col: 57, offset: 9389},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 276, col: 78, offset: 9410},
							expr: &litMatcher{
								pos:        position{line: 276, col: 79, offset: 9411},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 280, col: 1, offset: 9577},
			expr: &seqExpr{
				pos: position{line: 280, col: 24, offset: 9600},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 280, col: 24, offset: 9600},
						expr: &ruleRefExpr{
							pos:  position{line: 280, col: 25, offset: 9601},
							name: "Newline",
						},
					},
					&notExpr{
						pos: position{line: 280, col: 33, offset: 9609},
						expr: &litMatcher{
							pos:        position{line: 280, col: 34, offset: 9610},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 280, col: 38, offset: 9614},
						expr: &litMatcher{
							pos:        position{line: 280, col: 39, offset: 9615},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 280, col: 43, offset: 9619},
						expr: &litMatcher{
							pos:        position{line: 280, col: 44, offset: 9620},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 280, col: 48, offset: 9624,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 282, col: 1, offset: 9628},
			expr: &actionExpr{
				pos: position{line: 282, col: 21, offset: 9648},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 282, col: 21, offset: 9648},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 282, col: 21, offset: 9648},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 282, col: 36, offset: 9663},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 36, offset: 9663},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 282, col: 40, offset: 9667},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 286, col: 1, offset: 9740},
			expr: &actionExpr{
				pos: position{line: 286, col: 20, offset: 9759},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 286, col: 20, offset: 9759},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 20, offset: 9759},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 29, offset: 9768},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 29, offset: 9768},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 286, col: 33, offset: 9772},
							expr: &litMatcher{
								pos:        position{line: 286, col: 33, offset: 9772},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 38, offset: 9777},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 45, offset: 9784},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 46, offset: 9785},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 286, col: 63, offset: 9802},
							expr: &litMatcher{
								pos:        position{line: 286, col: 63, offset: 9802},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 68, offset: 9807},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 74, offset: 9813},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 75, offset: 9814},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 92, offset: 9831},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 96, offset: 9835},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 96, offset: 9835},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 100, offset: 9839},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 290, col: 1, offset: 9908},
			expr: &actionExpr{
				pos: position{line: 290, col: 20, offset: 9927},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 290, col: 20, offset: 9927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 20, offset: 9927},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 29, offset: 9936},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 29, offset: 9936},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 33, offset: 9940},
							expr: &litMatcher{
								pos:        position{line: 290, col: 33, offset: 9940},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 38, offset: 9945},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 45, offset: 9952},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 46, offset: 9953},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 63, offset: 9970},
							expr: &litMatcher{
								pos:        position{line: 290, col: 63, offset: 9970},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 68, offset: 9975},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 74, offset: 9981},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 75, offset: 9982},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 92, offset: 9999},
							val:        "]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 96, offset: 10003},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 96, offset: 10003},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 100, offset: 10007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 294, col: 1, offset: 10094},
			expr: &actionExpr{
				pos: position{line: 294, col: 19, offset: 10112},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 294, col: 19, offset: 10112},
					expr: &choiceExpr{
						pos: position{line: 294, col: 20, offset: 10113},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 294, col: 20, offset: 10113},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 294, col: 32, offset: 10125},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 294, col: 42, offset: 10135},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 294, col: 42, offset: 10135},
										expr: &litMatcher{
											pos:        position{line: 294, col: 43, offset: 10136},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 294, col: 47, offset: 10140},
										expr: &litMatcher{
											pos:        position{line: 294, col: 48, offset: 10141},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 294, col: 52, offset: 10145},
										expr: &ruleRefExpr{
											pos:  position{line: 294, col: 53, offset: 10146},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 294, col: 57, offset: 10150,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 298, col: 1, offset: 10191},
			expr: &actionExpr{
				pos: position{line: 298, col: 21, offset: 10211},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 298, col: 21, offset: 10211},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 298, col: 21, offset: 10211},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 298, col: 25, offset: 10215},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 298, col: 31, offset: 10221},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 32, offset: 10222},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 51, offset: 10241},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 305, col: 1, offset: 10415},
			expr: &actionExpr{
				pos: position{line: 305, col: 12, offset: 10426},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 305, col: 12, offset: 10426},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 305, col: 12, offset: 10426},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 23, offset: 10437},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 24, offset: 10438},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 5, offset: 10462},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 306, col: 12, offset: 10469},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 306, col: 12, offset: 10469},
									expr: &litMatcher{
										pos:        position{line: 306, col: 13, offset: 10470},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 310, col: 5, offset: 10561},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 314, col: 5, offset: 10713},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 5, offset: 10713},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 9, offset: 10717},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 16, offset: 10724},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 31, offset: 10739},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 314, col: 35, offset: 10743},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 35, offset: 10743},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 53, offset: 10761},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 318, col: 1, offset: 10867},
			expr: &actionExpr{
				pos: position{line: 318, col: 18, offset: 10884},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 318, col: 18, offset: 10884},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 318, col: 27, offset: 10893},
						expr: &seqExpr{
							pos: position{line: 318, col: 28, offset: 10894},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 318, col: 28, offset: 10894},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 29, offset: 10895},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 318, col: 37, offset: 10903},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 38, offset: 10904},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 318, col: 54, offset: 10920},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 322, col: 1, offset: 11041},
			expr: &actionExpr{
				pos: position{line: 322, col: 17, offset: 11057},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 322, col: 17, offset: 11057},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 322, col: 26, offset: 11066},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 322, col: 26, offset: 11066},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 11087},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 11105},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 11130},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 11152},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 11175},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 11, offset: 11190},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 329, col: 11, offset: 11215},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 330, col: 11, offset: 11236},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 11, offset: 11276},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 332, col: 11, offset: 11296},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 333, col: 11, offset: 11316},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 340, col: 1, offset: 11471},
			expr: &seqExpr{
				pos: position{line: 340, col: 31, offset: 11501},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 340, col: 31, offset: 11501},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 41, offset: 11511},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 345, col: 1, offset: 11622},
			expr: &actionExpr{
				pos: position{line: 345, col: 19, offset: 11640},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 345, col: 19, offset: 11640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 345, col: 19, offset: 11640},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 25, offset: 11646},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 40, offset: 11661},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 345, col: 45, offset: 11666},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 52, offset: 11673},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 68, offset: 11689},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 75, offset: 11696},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 349, col: 1, offset: 11837},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 11856},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 349, col: 20, offset: 11856},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 349, col: 20, offset: 11856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 26, offset: 11862},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 41, offset: 11877},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 349, col: 45, offset: 11881},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 52, offset: 11888},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 68, offset: 11904},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 75, offset: 11911},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 353, col: 1, offset: 12053},
			expr: &actionExpr{
				pos: position{line: 353, col: 18, offset: 12070},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 353, col: 18, offset: 12070},
					expr: &choiceExpr{
						pos: position{line: 353, col: 19, offset: 12071},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 353, col: 19, offset: 12071},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 353, col: 33, offset: 12085},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 353, col: 39, offset: 12091},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 357, col: 1, offset: 12133},
			expr: &actionExpr{
				pos: position{line: 357, col: 19, offset: 12151},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 357, col: 19, offset: 12151},
					expr: &choiceExpr{
						pos: position{line: 357, col: 20, offset: 12152},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 357, col: 20, offset: 12152},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 357, col: 33, offset: 12165},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 357, col: 33, offset: 12165},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 34, offset: 12166},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 357, col: 37, offset: 12169},
										expr: &litMatcher{
											pos:        position{line: 357, col: 38, offset: 12170},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 357, col: 42, offset: 12174},
										expr: &litMatcher{
											pos:        position{line: 357, col: 43, offset: 12175},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 357, col: 47, offset: 12179},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 48, offset: 12180},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 357, col: 52, offset: 12184,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 361, col: 1, offset: 12225},
			expr: &actionExpr{
				pos: position{line: 361, col: 24, offset: 12248},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 361, col: 24, offset: 12248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 24, offset: 12248},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 361, col: 28, offset: 12252},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 361, col: 34, offset: 12258},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 35, offset: 12259},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 54, offset: 12278},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 368, col: 1, offset: 12458},
			expr: &actionExpr{
				pos: position{line: 368, col: 18, offset: 12475},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 368, col: 18, offset: 12475},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 368, col: 18, offset: 12475},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 368, col: 24, offset: 12481},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 368, col: 24, offset: 12481},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 368, col: 24, offset: 12481},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 368, col: 36, offset: 12493},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 368, col: 42, offset: 12499},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 368, col: 56, offset: 12513},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 368, col: 74, offset: 12531},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 370, col: 8, offset: 12685},
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 8, offset: 12685},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 12, offset: 12689},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 374, col: 1, offset: 12741},
			expr: &actionExpr{
				pos: position{line: 374, col: 26, offset: 12766},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 374, col: 26, offset: 12766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 26, offset: 12766},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 374, col: 30, offset: 12770},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 374, col: 36, offset: 12776},
								expr: &choiceExpr{
									pos: position{line: 374, col: 37, offset: 12777},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 374, col: 37, offset: 12777},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 374, col: 59, offset: 12799},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 374, col: 80, offset: 12820},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 99, offset: 12839},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 378, col: 1, offset: 12909},
			expr: &actionExpr{
				pos: position{line: 378, col: 24, offset: 12932},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 378, col: 24, offset: 12932},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 24, offset: 12932},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 33, offset: 12941},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 40, offset: 12948},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 378, col: 66, offset: 12974},
							expr: &litMatcher{
								pos:        position{line: 378, col: 66, offset: 12974},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 382, col: 1, offset: 13033},
			expr: &actionExpr{
				pos: position{line: 382, col: 29, offset: 13061},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 29, offset: 13061},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 382, col: 29, offset: 13061},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 382, col: 36, offset: 13068},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 382, col: 36, offset: 13068},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 383, col: 11, offset: 13185},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 384, col: 11, offset: 13221},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 11, offset: 13247},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 386, col: 11, offset: 13279},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 11, offset: 13311},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 388, col: 11, offset: 13338},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 388, col: 31, offset: 13358},
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 31, offset: 13358},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 388, col: 36, offset: 13363},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 388, col: 36, offset: 13363},
									expr: &litMatcher{
										pos:        position{line: 388, col: 37, offset: 13364},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 388, col: 43, offset: 13370},
									expr: &litMatcher{
										pos:        position{line: 388, col: 44, offset: 13371},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 392, col: 1, offset: 13403},
			expr: &actionExpr{
				pos: position{line: 392, col: 23, offset: 13425},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 23, offset: 13425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 23, offset: 13425},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 30, offset: 13432},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 30, offset: 13432},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 47, offset: 13449},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13471},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13478},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13479},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13479},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13479},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13483},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13490},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13490},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13507},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 399, col: 1, offset: 13645},
			expr: &actionExpr{
				pos: position{line: 399, col: 29, offset: 13673},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 399, col: 29, offset: 13673},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 29, offset: 13673},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 34, offset: 13678},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 399, col: 41, offset: 13685},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 399, col: 41, offset: 13685},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 58, offset: 13702},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 5, offset: 13724},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 12, offset: 13731},
								expr: &actionExpr{
									pos: position{line: 400, col: 13, offset: 13732},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 400, col: 13, offset: 13732},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 400, col: 13, offset: 13732},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 400, col: 17, offset: 13736},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 400, col: 24, offset: 13743},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 400, col: 24, offset: 13743},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 400, col: 41, offset: 13760},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 9, offset: 13813},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 406, col: 1, offset: 13903},
			expr: &actionExpr{
				pos: position{line: 406, col: 19, offset: 13921},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 406, col: 19, offset: 13921},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 406, col: 19, offset: 13921},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 26, offset: 13928},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 34, offset: 13936},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 406, col: 39, offset: 13941},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 44, offset: 13946},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 410, col: 1, offset: 14034},
			expr: &actionExpr{
				pos: position{line: 410, col: 25, offset: 14058},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 410, col: 25, offset: 14058},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 25, offset: 14058},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 410, col: 30, offset: 14063},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 37, offset: 14070},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 45, offset: 14078},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 410, col: 50, offset: 14083},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 55, offset: 14088},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 63, offset: 14096},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 414, col: 1, offset: 14181},
			expr: &actionExpr{
				pos: position{line: 414, col: 20, offset: 14200},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 20, offset: 14200},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 414, col: 32, offset: 14212},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 418, col: 1, offset: 14307},
			expr: &actionExpr{
				pos: position{line: 418, col: 26, offset: 14332},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 418, col: 26, offset: 14332},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 418, col: 26, offset: 14332},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 418, col: 31, offset: 14337},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 43, offset: 14349},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 51, offset: 14357},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 422, col: 1, offset: 14449},
			expr: &actionExpr{
				pos: position{line: 422, col: 23, offset: 14471},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 422, col: 23, offset: 14471},
					expr: &seqExpr{
						pos: position{line: 422, col: 24, offset: 14472},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 422, col: 24, offset: 14472},
								expr: &litMatcher{
									pos:        position{line: 422, col: 25, offset: 14473},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 422, col: 29, offset: 14477},
								expr: &litMatcher{
									pos:        position{line: 422, col: 30, offset: 14478},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 422, col: 34, offset: 14482},
								expr: &ruleRefExpr{
									pos:  position{line: 422, col: 35, offset: 14483},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 422, col: 38, offset: 14486,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 426, col: 1, offset: 14526},
			expr: &actionExpr{
				pos: position{line: 426, col: 23, offset: 14548},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 426, col: 23, offset: 14548},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 426, col: 24, offset: 14549},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 24, offset: 14549},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 426, col: 34, offset: 14559},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 426, col: 42, offset: 14567},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 48, offset: 14573},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 426, col: 73, offset: 14598},
							expr: &litMatcher{
								pos:        position{line: 426, col: 73, offset: 14598},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 430, col: 1, offset: 14747},
			expr: &actionExpr{
				pos: position{line: 430, col: 28, offset: 14774},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 430, col: 28, offset: 14774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 430, col: 28, offset: 14774},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 35, offset: 14781},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 430, col: 54, offset: 14800},
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 54, offset: 14800},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 430, col: 59, offset: 14805},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 430, col: 59, offset: 14805},
									expr: &litMatcher{
										pos:        position{line: 430, col: 60, offset: 14806},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 430, col: 66, offset: 14812},
									expr: &litMatcher{
										pos:        position{line: 430, col: 67, offset: 14813},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 434, col: 1, offset: 14845},
			expr: &actionExpr{
				pos: position{line: 434, col: 22, offset: 14866},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 434, col: 22, offset: 14866},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 22, offset: 14866},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 29, offset: 14873},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 5, offset: 14887},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 435, col: 12, offset: 14894},
								expr: &actionExpr{
									pos: position{line: 435, col: 13, offset: 14895},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 435, col: 13, offset: 14895},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 435, col: 13, offset: 14895},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 435, col: 17, offset: 14899},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 435, col: 24, offset: 14906},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 441, col: 1, offset: 15037},
			expr: &choiceExpr{
				pos: position{line: 441, col: 13, offset: 15049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 441, col: 13, offset: 15049},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 441, col: 13, offset: 15049},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 441, col: 18, offset: 15054},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 441, col: 18, offset: 15054},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 441, col: 30, offset: 15066},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 443, col: 5, offset: 15134},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 443, col: 5, offset: 15134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 443, col: 5, offset: 15134},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 443, col: 9, offset: 15138},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 443, col: 14, offset: 15143},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 443, col: 14, offset: 15143},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 443, col: 26, offset: 15155},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 447, col: 1, offset: 15223},
			expr: &actionExpr{
				pos: position{line: 447, col: 16, offset: 15238},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 447, col: 16, offset: 15238},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 16, offset: 15238},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 447, col: 23, offset: 15245},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 447, col: 23, offset: 15245},
									expr: &litMatcher{
										pos:        position{line: 447, col: 24, offset: 15246},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 450, col: 5, offset: 15300},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 460, col: 1, offset: 15594},
			expr: &actionExpr{
				pos: position{line: 460, col: 21, offset: 15614},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 460, col: 21, offset: 15614},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 460, col: 21, offset: 15614},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 460, col: 29, offset: 15622},
								expr: &choiceExpr{
									pos: position{line: 460, col: 30, offset: 15623},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 460, col: 30, offset: 15623},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 53, offset: 15646},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 460, col: 74, offset: 15667},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 460, col: 74, offset: 15667,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 107, offset: 15700},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 464, col: 1, offset: 15771},
			expr: &actionExpr{
				pos: position{line: 464, col: 25, offset: 15795},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 464, col: 25, offset: 15795},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 464, col: 25, offset: 15795},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 464, col: 33, offset: 15803},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 464, col: 38, offset: 15808},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 38, offset: 15808},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 464, col: 78, offset: 15848},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 468, col: 1, offset: 15913},
			expr: &actionExpr{
				pos: position{line: 468, col: 23, offset: 15935},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 468, col: 23, offset: 15935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 468, col: 23, offset: 15935},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 468, col: 31, offset: 15943},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 468, col: 36, offset: 15948},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 468, col: 36, offset: 15948},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 468, col: 76, offset: 15988},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 475, col: 1, offset: 16152},
			expr: &oneOrMoreExpr{
				pos: position{line: 475, col: 14, offset: 16165},
				expr: &ruleRefExpr{
					pos:  position{line: 475, col: 14, offset: 16165},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 477, col: 1, offset: 16176},
			expr: &choiceExpr{
				pos: position{line: 477, col: 13, offset: 16188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 477, col: 13, offset: 16188},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 31, offset: 16206},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 51, offset: 16226},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 69, offset: 16244},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 479, col: 1, offset: 16270},
			expr: &choiceExpr{
				pos: position{line: 479, col: 18, offset: 16287},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 479, col: 18, offset: 16287},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 479, col: 18, offset: 16287},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 27, offset: 16296},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 481, col: 9, offset: 16353},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 481, col: 9, offset: 16353},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 481, col: 15, offset: 16359},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 16, offset: 16360},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 485, col: 1, offset: 16452},
			expr: &actionExpr{
				pos: position{line: 485, col: 22, offset: 16473},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 485, col: 22, offset: 16473},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 485, col: 22, offset: 16473},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 23, offset: 16474},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16482},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16483},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 487, col: 5, offset: 16498},
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 6, offset: 16499},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 488, col: 5, offset: 16521},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 6, offset: 16522},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 489, col: 5, offset: 16548},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 6, offset: 16549},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 490, col: 5, offset: 16577},
							expr: &seqExpr{
								pos: position{line: 490, col: 7, offset: 16579},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 490, col: 7, offset: 16579},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 490, col: 33, offset: 16605},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 491, col: 5, offset: 16636},
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 6, offset: 16637},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 492, col: 5, offset: 16662},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 6, offset: 16663},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 493, col: 5, offset: 16684},
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 6, offset: 16685},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 5, offset: 16704},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 495, col: 9, offset: 16719},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 495, col: 9, offset: 16719},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 495, col: 9, offset: 16719},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 495, col: 18, offset: 16728},
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 19, offset: 16729},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 495, col: 35, offset: 16745},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 495, col: 45, offset: 16755},
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 46, offset: 16756},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 12, offset: 16908},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 501, col: 1, offset: 16955},
			expr: &seqExpr{
				pos: position{line: 501, col: 25, offset: 16979},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 501, col: 25, offset: 16979},
						val:        "+",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 501, col: 29, offset: 16983},
						expr: &ruleRefExpr{
							pos:  position{line: 501, col: 29, offset: 16983},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 501, col: 33, offset: 16987},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 503, col: 1, offset: 16993},
			expr: &actionExpr{
				pos: position{line: 503, col: 29, offset: 17021},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 503, col: 29, offset: 17021},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 29, offset: 17021},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 503, col: 41, offset: 17033},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 41, offset: 17033},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 53, offset: 17045},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 74, offset: 17066},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 82, offset: 17074},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 510, col: 1, offset: 17316},
			expr: &actionExpr{
				pos: position{line: 510, col: 20, offset: 17335},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 510, col: 20, offset: 17335},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 20, offset: 17335},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 510, col: 31, offset: 17346},
								expr: &ruleRefExpr{
									pos:  position{line: 510, col: 32, offset: 17347},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 52, offset: 17367},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 60, offset: 17375},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 83, offset: 17398},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 92, offset: 17407},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 514, col: 1, offset: 17547},
			expr: &actionExpr{
				pos: position{line: 515, col: 5, offset: 17577},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 515, col: 5, offset: 17577},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 515, col: 5, offset: 17577},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 5, offset: 17577},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 515, col: 9, offset: 17581},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 517, col: 9, offset: 17644},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 517, col: 9, offset: 17644},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 517, col: 9, offset: 17644},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 517, col: 9, offset: 17644},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 517, col: 16, offset: 17651},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 517, col: 16, offset: 17651},
															expr: &litMatcher{
																pos:        position{line: 517, col: 17, offset: 17652},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 521, col: 9, offset: 17752},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 540, col: 11, offset: 18469},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 540, col: 11, offset: 18469},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 540, col: 11, offset: 18469},
													expr: &charClassMatcher{
														pos:        position{line: 540, col: 12, offset: 18470},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 540, col: 20, offset: 18478},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 542, col: 13, offset: 18589},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 542, col: 13, offset: 18589},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 542, col: 14, offset: 18590},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 542, col: 21, offset: 18597},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 544, col: 13, offset: 18711},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 544, col: 13, offset: 18711},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 544, col: 14, offset: 18712},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 544, col: 21, offset: 18719},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 546, col: 13, offset: 18833},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 546, col: 13, offset: 18833},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 546, col: 13, offset: 18833},
													expr: &charClassMatcher{
														pos:        position{line: 546, col: 14, offset: 18834},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 546, col: 22, offset: 18842},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 548, col: 13, offset: 18956},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 548, col: 13, offset: 18956},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 548, col: 13, offset: 18956},
													expr: &charClassMatcher{
														pos:        position{line: 548, col: 14, offset: 18957},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 548, col: 22, offset: 18965},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 550, col: 12, offset: 19078},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 12, offset: 19078},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 554, col: 1, offset: 19110},
			expr: &actionExpr{
				pos: position{line: 554, col: 27, offset: 19136},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 554, col: 27, offset: 19136},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 554, col: 37, offset: 19146},
						expr: &ruleRefExpr{
							pos:  position{line: 554, col: 37, offset: 19146},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 561, col: 1, offset: 19346},
			expr: &actionExpr{
				pos: position{line: 561, col: 22, offset: 19367},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 561, col: 22, offset: 19367},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 22, offset: 19367},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 561, col: 33, offset: 19378},
								expr: &ruleRefExpr{
									pos:  position{line: 561, col: 34, offset: 19379},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 54, offset: 19399},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 62, offset: 19407},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 87, offset: 19432},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 561, col: 98, offset: 19443},
								expr: &ruleRefExpr{
									pos:  position{line: 561, col: 99, offset: 19444},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 129, offset: 19474},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 138, offset: 19483},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 565, col: 1, offset: 19641},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 19673},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 19673},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 566, col: 5, offset: 19673},
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 5, offset: 19673},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 9, offset: 19677},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 566, col: 17, offset: 19685},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 568, col: 9, offset: 19742},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 568, col: 9, offset: 19742},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 568, col: 9, offset: 19742},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 568, col: 16, offset: 19749},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 568, col: 16, offset: 19749},
															expr: &litMatcher{
																pos:        position{line: 568, col: 17, offset: 19750},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 572, col: 9, offset: 19850},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 589, col: 14, offset: 20557},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 589, col: 21, offset: 20564},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 589, col: 22, offset: 20565},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 591, col: 13, offset: 20651},
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 13, offset: 20651},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 595, col: 1, offset: 20684},
			expr: &actionExpr{
				pos: position{line: 595, col: 32, offset: 20715},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 595, col: 32, offset: 20715},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 595, col: 32, offset: 20715},
							expr: &litMatcher{
								pos:        position{line: 595, col: 33, offset: 20716},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 37, offset: 20720},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 596, col: 7, offset: 20734},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 596, col: 7, offset: 20734},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 596, col: 7, offset: 20734},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 597, col: 7, offset: 20779},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 597, col: 7, offset: 20779},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 598, col: 7, offset: 20822},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 598, col: 7, offset: 20822},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 599, col: 7, offset: 20864},
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 7, offset: 20864},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 603, col: 1, offset: 20903},
			expr: &actionExpr{
				pos: position{line: 603, col: 29, offset: 20931},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 603, col: 29, offset: 20931},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 603, col: 39, offset: 20941},
						expr: &ruleRefExpr{
							pos:  position{line: 603, col: 39, offset: 20941},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 610, col: 1, offset: 21257},
			expr: &actionExpr{
				pos: position{line: 610, col: 20, offset: 21276},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 610, col: 20, offset: 21276},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 610, col: 20, offset: 21276},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 610, col: 31, offset: 21287},
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 32, offset: 21288},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 52, offset: 21308},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 58, offset: 21314},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 85, offset: 21341},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 96, offset: 21352},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 122, offset: 21378},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 610, col: 134, offset: 21390},
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 135, offset: 21391},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 614, col: 1, offset: 21537},
			expr: &actionExpr{
				pos: position{line: 614, col: 30, offset: 21566},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 614, col: 30, offset: 21566},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 614, col: 39, offset: 21575},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 614, col: 39, offset: 21575},
							expr: &choiceExpr{
								pos: position{line: 614, col: 40, offset: 21576},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 614, col: 40, offset: 21576},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 614, col: 52, offset: 21588},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 614, col: 62, offset: 21598},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 614, col: 62, offset: 21598},
												expr: &ruleRefExpr{
													pos:  position{line: 614, col: 63, offset: 21599},
													name: "Newline",
												},
											},
											&notExpr{
												pos: position{line: 614, col: 71, offset: 21607},
												expr: &ruleRefExpr{
													pos:  position{line: 614, col: 72, offset: 21608},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 614, col: 97, offset: 21633,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 620, col: 1, offset: 21762},
			expr: &actionExpr{
				pos: position{line: 620, col: 24, offset: 21785},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 620, col: 24, offset: 21785},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 620, col: 33, offset: 21794},
						expr: &seqExpr{
							pos: position{line: 620, col: 34, offset: 21795},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 620, col: 34, offset: 21795},
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 35, offset: 21796},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 620, col: 43, offset: 21804},
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 44, offset: 21805},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 620, col: 69, offset: 21830},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 624, col: 1, offset: 21965},
			expr: &actionExpr{
				pos: position{line: 624, col: 31, offset: 21995},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 624, col: 31, offset: 21995},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 624, col: 40, offset: 22004},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 624, col: 40, offset: 22004},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 22025},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 22043},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 22068},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 22090},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 629, col: 11, offset: 22113},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 630, col: 11, offset: 22128},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 631, col: 11, offset: 22153},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 632, col: 11, offset: 22174},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 633, col: 11, offset: 22214},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 634, col: 11, offset: 22234},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 635, col: 11, offset: 22254},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 639, col: 1, offset: 22296},
			expr: &actionExpr{
				pos: position{line: 640, col: 5, offset: 22329},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 640, col: 5, offset: 22329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 22329},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 640, col: 16, offset: 22340},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 640, col: 16, offset: 22340},
									expr: &litMatcher{
										pos:        position{line: 640, col: 17, offset: 22341},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 643, col: 5, offset: 22399},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 647, col: 6, offset: 22575},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 647, col: 6, offset: 22575},
									expr: &choiceExpr{
										pos: position{line: 647, col: 7, offset: 22576},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 7, offset: 22576},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 12, offset: 22581},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 647, col: 24, offset: 22593},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 651, col: 1, offset: 22633},
			expr: &actionExpr{
				pos: position{line: 651, col: 31, offset: 22663},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 651, col: 31, offset: 22663},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 651, col: 40, offset: 22672},
						expr: &ruleRefExpr{
							pos:  position{line: 651, col: 41, offset: 22673},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 658, col: 1, offset: 22864},
			expr: &choiceExpr{
				pos: position{line: 658, col: 19, offset: 22882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 658, col: 19, offset: 22882},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 658, col: 19, offset: 22882},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 660, col: 9, offset: 22928},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 660, col: 9, offset: 22928},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 662, col: 9, offset: 22976},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 662, col: 9, offset: 22976},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 664, col: 9, offset: 23034},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 664, col: 9, offset: 23034},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 666, col: 9, offset: 23088},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 666, col: 9, offset: 23088},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 675, col: 1, offset: 23395},
			expr: &choiceExpr{
				pos: position{line: 677, col: 5, offset: 23442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 23442},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 23442},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 677, col: 5, offset: 23442},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 677, col: 16, offset: 23453},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 17, offset: 23454},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 677, col: 37, offset: 23474},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 677, col: 40, offset: 23477},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 677, col: 56, offset: 23493},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 677, col: 61, offset: 23498},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 677, col: 67, offset: 23504},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 68, offset: 23505},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 23697},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 23697},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 681, col: 5, offset: 23697},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 681, col: 16, offset: 23708},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 17, offset: 23709},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 681, col: 37, offset: 23729},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 681, col: 43, offset: 23735},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 44, offset: 23736},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 686, col: 1, offset: 23901},
			expr: &actionExpr{
				pos: position{line: 686, col: 20, offset: 23920},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 686, col: 20, offset: 23920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 686, col: 20, offset: 23920},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 686, col: 31, offset: 23931},
								expr: &ruleRefExpr{
									pos:  position{line: 686, col: 32, offset: 23932},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 687, col: 5, offset: 23957},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 695, col: 5, offset: 24248},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 16, offset: 24259},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 24282},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 16, offset: 24293},
								expr: &ruleRefExpr{
									pos:  position{line: 696, col: 17, offset: 24294},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 700, col: 1, offset: 24428},
			expr: &actionExpr{
				pos: position{line: 700, col: 19, offset: 24446},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 700, col: 19, offset: 24446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 700, col: 19, offset: 24446},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 30, offset: 24457},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 50, offset: 24477},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 700, col: 61, offset: 24488},
								expr: &ruleRefExpr{
									pos:  position{line: 700, col: 62, offset: 24489},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 704, col: 1, offset: 24595},
			expr: &actionExpr{
				pos: position{line: 704, col: 23, offset: 24617},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 704, col: 23, offset: 24617},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 704, col: 23, offset: 24617},
							expr: &seqExpr{
								pos: position{line: 704, col: 25, offset: 24619},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 704, col: 25, offset: 24619},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 704, col: 51, offset: 24645},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 5, offset: 24675},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 705, col: 15, offset: 24685},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 705, col: 15, offset: 24685},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 705, col: 26, offset: 24696},
										expr: &ruleRefExpr{
											pos:  position{line: 705, col: 26, offset: 24696},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 42, offset: 24712},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 705, col: 52, offset: 24722},
								expr: &ruleRefExpr{
									pos:  position{line: 705, col: 53, offset: 24723},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 705, col: 65, offset: 24735},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 709, col: 1, offset: 24825},
			expr: &actionExpr{
				pos: position{line: 709, col: 23, offset: 24847},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 709, col: 23, offset: 24847},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 709, col: 33, offset: 24857},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 713, col: 1, offset: 24903},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 24955},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 24955},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 24955},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 715, col: 5, offset: 24955},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 715, col: 16, offset: 24966},
										expr: &ruleRefExpr{
											pos:  position{line: 715, col: 17, offset: 24967},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 716, col: 5, offset: 24991},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 723, col: 5, offset: 25203},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 723, col: 8, offset: 25206},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 723, col: 24, offset: 25222},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 723, col: 29, offset: 25227},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 723, col: 35, offset: 25233},
										expr: &ruleRefExpr{
											pos:  position{line: 723, col: 36, offset: 25234},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 25426},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 25426},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 727, col: 5, offset: 25426},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 727, col: 16, offset: 25437},
										expr: &ruleRefExpr{
											pos:  position{line: 727, col: 17, offset: 25438},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 728, col: 5, offset: 25462},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 735, col: 5, offset: 25674},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 735, col: 11, offset: 25680},
										expr: &ruleRefExpr{
											pos:  position{line: 735, col: 12, offset: 25681},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 739, col: 1, offset: 25782},
			expr: &actionExpr{
				pos: position{line: 739, col: 19, offset: 25800},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 739, col: 19, offset: 25800},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 739, col: 19, offset: 25800},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 20, offset: 25801},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 739, col: 24, offset: 25805},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 25, offset: 25806},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 740, col: 5, offset: 25820},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 740, col: 15, offset: 25830},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 740, col: 15, offset: 25830},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 740, col: 15, offset: 25830},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 740, col: 24, offset: 25839},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 742, col: 9, offset: 25931},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 742, col: 9, offset: 25931},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 742, col: 9, offset: 25931},
													expr: &ruleRefExpr{
														pos:  position{line: 742, col: 10, offset: 25932},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 742, col: 25, offset: 25947},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 742, col: 34, offset: 25956},
														expr: &ruleRefExpr{
															pos:  position{line: 742, col: 35, offset: 25957},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 742, col: 51, offset: 25973},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 742, col: 61, offset: 25983},
														expr: &ruleRefExpr{
															pos:  position{line: 742, col: 62, offset: 25984},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 742, col: 74, offset: 25996},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 748, col: 1, offset: 26132},
			expr: &actionExpr{
				pos: position{line: 748, col: 18, offset: 26149},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 748, col: 18, offset: 26149},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 748, col: 18, offset: 26149},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 19, offset: 26150},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 748, col: 23, offset: 26154},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 24, offset: 26155},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 5, offset: 26170},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 749, col: 14, offset: 26179},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 749, col: 14, offset: 26179},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26200},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26218},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26241},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26257},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26280},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26306},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 26328},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 11, offset: 26354},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 758, col: 11, offset: 26381},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 759, col: 11, offset: 26422},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 760, col: 11, offset: 26449},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 761, col: 11, offset: 26469},
										name: "ConceleadIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 762, col: 11, offset: 26498},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 770, col: 1, offset: 26761},
			expr: &actionExpr{
				pos: position{line: 770, col: 37, offset: 26797},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 770, col: 37, offset: 26797},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 770, col: 37, offset: 26797},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 38, offset: 26798},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 770, col: 48, offset: 26808},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 49, offset: 26809},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 64, offset: 26824},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 770, col: 73, offset: 26833},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 74, offset: 26834},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 108, offset: 26868},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 770, col: 118, offset: 26878},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 119, offset: 26879},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 770, col: 131, offset: 26891},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 774, col: 1, offset: 26982},
			expr: &actionExpr{
				pos: position{line: 774, col: 36, offset: 27017},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 774, col: 36, offset: 27017},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 774, col: 36, offset: 27017},
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 37, offset: 27018},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 774, col: 41, offset: 27022},
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 42, offset: 27023},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 775, col: 5, offset: 27038},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 775, col: 14, offset: 27047},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 775, col: 14, offset: 27047},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 27068},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 27086},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 27109},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 27125},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 27148},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 27170},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 27196},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 27222},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 27242},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 788, col: 1, offset: 27284},
			expr: &actionExpr{
				pos: position{line: 788, col: 22, offset: 27305},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 788, col: 22, offset: 27305},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 788, col: 22, offset: 27305},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 788, col: 33, offset: 27316},
								expr: &ruleRefExpr{
									pos:  position{line: 788, col: 34, offset: 27317},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 54, offset: 27337},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 788, col: 60, offset: 27343},
								expr: &actionExpr{
									pos: position{line: 788, col: 61, offset: 27344},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 788, col: 61, offset: 27344},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 788, col: 61, offset: 27344},
												expr: &ruleRefExpr{
													pos:  position{line: 788, col: 62, offset: 27345},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 788, col: 66, offset: 27349},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 788, col: 72, offset: 27355},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 794, col: 1, offset: 27475},
			expr: &actionExpr{
				pos: position{line: 794, col: 26, offset: 27500},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 794, col: 26, offset: 27500},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 794, col: 26, offset: 27500},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 27, offset: 27501},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 794, col: 42, offset: 27516},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 43, offset: 27517},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 53, offset: 27527},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 794, col: 62, offset: 27536},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 63, offset: 27537},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 94, offset: 27568},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 794, col: 104, offset: 27578},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 105, offset: 27579},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 117, offset: 27591},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 798, col: 1, offset: 27682},
			expr: &actionExpr{
				pos: position{line: 798, col: 33, offset: 27714},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 798, col: 33, offset: 27714},
					expr: &seqExpr{
						pos: position{line: 798, col: 34, offset: 27715},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 798, col: 34, offset: 27715},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 35, offset: 27716},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 798, col: 39, offset: 27720},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 40, offset: 27721},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 798, col: 50, offset: 27731,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 805, col: 1, offset: 27955},
			expr: &actionExpr{
				pos: position{line: 805, col: 14, offset: 27968},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 805, col: 14, offset: 27968},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 805, col: 14, offset: 27968},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 805, col: 17, offset: 27971},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 805, col: 21, offset: 27975},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 21, offset: 27975},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 805, col: 25, offset: 27979},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 26, offset: 27980},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 812, col: 1, offset: 28264},
			expr: &actionExpr{
				pos: position{line: 812, col: 15, offset: 28278},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 812, col: 15, offset: 28278},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 812, col: 15, offset: 28278},
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 16, offset: 28279},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 812, col: 19, offset: 28282},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 812, col: 25, offset: 28288},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 812, col: 25, offset: 28288},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 15, offset: 28312},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 15, offset: 28338},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 15, offset: 28367},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 816, col: 15, offset: 28396},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 817, col: 15, offset: 28427},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 818, col: 15, offset: 28458},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 819, col: 15, offset: 28491},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 820, col: 15, offset: 28527},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 821, col: 15, offset: 28563},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 822, col: 15, offset: 28600},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 826, col: 1, offset: 28754},
			expr: &choiceExpr{
				pos: position{line: 826, col: 21, offset: 28774},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 826, col: 21, offset: 28774},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 28, offset: 28781},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 34, offset: 28787},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 41, offset: 28794},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 47, offset: 28800},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 54, offset: 28807},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 60, offset: 28813},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 66, offset: 28819},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 828, col: 1, offset: 28824},
			expr: &choiceExpr{
				pos: position{line: 828, col: 33, offset: 28856},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 828, col: 33, offset: 28856},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 828, col: 39, offset: 28862},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 828, col: 39, offset: 28862},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 832, col: 1, offset: 28995},
			expr: &actionExpr{
				pos: position{line: 832, col: 25, offset: 29019},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 832, col: 25, offset: 29019},
					expr: &litMatcher{
						pos:        position{line: 832, col: 25, offset: 29019},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 836, col: 1, offset: 29060},
			expr: &actionExpr{
				pos: position{line: 836, col: 25, offset: 29084},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 836, col: 25, offset: 29084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 836, col: 25, offset: 29084},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 836, col: 30, offset: 29089},
							expr: &litMatcher{
								pos:        position{line: 836, col: 30, offset: 29089},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 844, col: 1, offset: 29186},
			expr: &choiceExpr{
				pos: position{line: 844, col: 13, offset: 29198},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 844, col: 13, offset: 29198},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 844, col: 35, offset: 29220},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 846, col: 1, offset: 29241},
			expr: &actionExpr{
				pos: position{line: 846, col: 24, offset: 29264},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 846, col: 24, offset: 29264},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 846, col: 24, offset: 29264},
							expr: &litMatcher{
								pos:        position{line: 846, col: 25, offset: 29265},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 846, col: 30, offset: 29270},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 846, col: 35, offset: 29275},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 45, offset: 29285},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 846, col: 74, offset: 29314},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 850, col: 1, offset: 29440},
			expr: &seqExpr{
				pos: position{line: 850, col: 32, offset: 29471},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 850, col: 32, offset: 29471},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 850, col: 59, offset: 29498},
						expr: &seqExpr{
							pos: position{line: 850, col: 60, offset: 29499},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 850, col: 60, offset: 29499},
									expr: &litMatcher{
										pos:        position{line: 850, col: 62, offset: 29501},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 850, col: 69, offset: 29508},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 850, col: 69, offset: 29508},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 850, col: 74, offset: 29513},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 852, col: 1, offset: 29578},
			expr: &actionExpr{
				pos: position{line: 852, col: 31, offset: 29608},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 852, col: 31, offset: 29608},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 852, col: 31, offset: 29608},
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 32, offset: 29609},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 40, offset: 29617},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 852, col: 49, offset: 29626},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 852, col: 49, offset: 29626},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 853, col: 11, offset: 29657},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 29679},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 29703},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 29727},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 29753},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 29776},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 29798},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 29821},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 29861},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 29894},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 866, col: 1, offset: 30039},
			expr: &actionExpr{
				pos: position{line: 866, col: 27, offset: 30065},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 866, col: 27, offset: 30065},
					exprs: []interface{}{
						&anyMatcher{
							line: 866, col: 28, offset: 30066,
						},
						&zeroOrMoreExpr{
							pos: position{line: 866, col: 31, offset: 30069},
							expr: &seqExpr{
								pos: position{line: 866, col: 32, offset: 30070},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 866, col: 32, offset: 30070},
										expr: &litMatcher{
											pos:        position{line: 866, col: 33, offset: 30071},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 866, col: 38, offset: 30076},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 39, offset: 30077},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 866, col: 42, offset: 30080},
										expr: &litMatcher{
											pos:        position{line: 866, col: 43, offset: 30081},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 866, col: 47, offset: 30085},
										expr: &litMatcher{
											pos:        position{line: 866, col: 48, offset: 30086},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 866, col: 52, offset: 30090},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 53, offset: 30091},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 866, col: 61, offset: 30099},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 62, offset: 30100},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 866, col: 74, offset: 30112,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 870, col: 1, offset: 30172},
			expr: &choiceExpr{
				pos: position{line: 870, col: 24, offset: 30195},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 870, col: 24, offset: 30195},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 870, col: 24, offset: 30195},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 870, col: 24, offset: 30195},
									expr: &litMatcher{
										pos:        position{line: 870, col: 25, offset: 30196},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 29, offset: 30200},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 870, col: 33, offset: 30204},
									expr: &litMatcher{
										pos:        position{line: 870, col: 34, offset: 30205},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 870, col: 38, offset: 30209},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 48, offset: 30219},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 77, offset: 30248},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 30429},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 872, col: 5, offset: 30429},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 872, col: 5, offset: 30429},
									expr: &litMatcher{
										pos:        position{line: 872, col: 6, offset: 30430},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 11, offset: 30435},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 872, col: 15, offset: 30439},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 872, col: 25, offset: 30449},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 872, col: 25, offset: 30449},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 872, col: 29, offset: 30453},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 58, offset: 30482},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 876, col: 1, offset: 30681},
			expr: &seqExpr{
				pos: position{line: 876, col: 32, offset: 30712},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 876, col: 32, offset: 30712},
						expr: &ruleRefExpr{
							pos:  position{line: 876, col: 33, offset: 30713},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 876, col: 36, offset: 30716},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 876, col: 63, offset: 30743},
						expr: &seqExpr{
							pos: position{line: 876, col: 64, offset: 30744},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 876, col: 64, offset: 30744},
									expr: &seqExpr{
										pos: position{line: 876, col: 66, offset: 30746},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 876, col: 66, offset: 30746},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 876, col: 70, offset: 30750},
												expr: &ruleRefExpr{
													pos:  position{line: 876, col: 71, offset: 30751},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 876, col: 81, offset: 30761},
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 81, offset: 30761},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 876, col: 85, offset: 30765},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 878, col: 1, offset: 30796},
			expr: &actionExpr{
				pos: position{line: 878, col: 31, offset: 30826},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 878, col: 31, offset: 30826},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 878, col: 31, offset: 30826},
							expr: &ruleRefExpr{
								pos:  position{line: 878, col: 32, offset: 30827},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 878, col: 40, offset: 30835},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 878, col: 49, offset: 30844},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 878, col: 49, offset: 30844},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 30874},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 880, col: 11, offset: 30896},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 30920},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 882, col: 11, offset: 30944},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 883, col: 11, offset: 30970},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 884, col: 11, offset: 30993},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 11, offset: 31015},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 886, col: 11, offset: 31038},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 887, col: 11, offset: 31078},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 888, col: 11, offset: 31111},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 892, col: 1, offset: 31256},
			expr: &actionExpr{
				pos: position{line: 892, col: 27, offset: 31282},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 892, col: 27, offset: 31282},
					exprs: []interface{}{
						&anyMatcher{
							line: 892, col: 28, offset: 31283,
						},
						&zeroOrMoreExpr{
							pos: position{line: 892, col: 31, offset: 31286},
							expr: &seqExpr{
								pos: position{line: 892, col: 32, offset: 31287},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 892, col: 32, offset: 31287},
										expr: &litMatcher{
											pos:        position{line: 892, col: 33, offset: 31288},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 892, col: 37, offset: 31292},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 38, offset: 31293},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 892, col: 41, offset: 31296},
										expr: &litMatcher{
											pos:        position{line: 892, col: 42, offset: 31297},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 892, col: 46, offset: 31301},
										expr: &litMatcher{
											pos:        position{line: 892, col: 47, offset: 31302},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 892, col: 51, offset: 31306},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 52, offset: 31307},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 892, col: 60, offset: 31315},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 61, offset: 31316},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 892, col: 73, offset: 31328,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 896, col: 1, offset: 31388},
			expr: &choiceExpr{
				pos: position{line: 897, col: 5, offset: 31412},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 31412},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 897, col: 5, offset: 31412},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 897, col: 5, offset: 31412},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 18, offset: 31425},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 40, offset: 31447},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 897, col: 45, offset: 31452},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 55, offset: 31462},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 84, offset: 31491},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 9, offset: 31648},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 899, col: 9, offset: 31648},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 899, col: 9, offset: 31648},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 22, offset: 31661},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 44, offset: 31683},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 899, col: 49, offset: 31688},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 59, offset: 31698},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 88, offset: 31727},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 902, col: 9, offset: 31927},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 902, col: 9, offset: 31927},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 902, col: 9, offset: 31927},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 22, offset: 31940},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 44, offset: 31962},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 902, col: 48, offset: 31966},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 58, offset: 31976},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 87, offset: 32005},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 910, col: 1, offset: 32213},
			expr: &choiceExpr{
				pos: position{line: 910, col: 15, offset: 32227},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 910, col: 15, offset: 32227},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 910, col: 39, offset: 32251},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 912, col: 1, offset: 32274},
			expr: &actionExpr{
				pos: position{line: 912, col: 26, offset: 32299},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 912, col: 26, offset: 32299},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 912, col: 26, offset: 32299},
							expr: &litMatcher{
								pos:        position{line: 912, col: 27, offset: 32300},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 912, col: 32, offset: 32305},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 912, col: 37, offset: 32310},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 912, col: 47, offset: 32320},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 912, col: 78, offset: 32351},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 916, col: 1, offset: 32478},
			expr: &seqExpr{
				pos: position{line: 916, col: 34, offset: 32511},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 916, col: 34, offset: 32511},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 916, col: 63, offset: 32540},
						expr: &seqExpr{
							pos: position{line: 916, col: 64, offset: 32541},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 916, col: 64, offset: 32541},
									expr: &litMatcher{
										pos:        position{line: 916, col: 66, offset: 32543},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 916, col: 73, offset: 32550},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 916, col: 73, offset: 32550},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 916, col: 78, offset: 32555},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 918, col: 1, offset: 32622},
			expr: &actionExpr{
				pos: position{line: 918, col: 33, offset: 32654},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 918, col: 33, offset: 32654},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 918, col: 33, offset: 32654},
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 34, offset: 32655},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 42, offset: 32663},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 918, col: 51, offset: 32672},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 918, col: 51, offset: 32672},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 32705},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 32725},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 32749},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 32773},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 32799},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 32822},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 32844},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 32867},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 32902},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 931, col: 1, offset: 33047},
			expr: &actionExpr{
				pos: position{line: 931, col: 29, offset: 33075},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 931, col: 29, offset: 33075},
					exprs: []interface{}{
						&anyMatcher{
							line: 931, col: 30, offset: 33076,
						},
						&zeroOrMoreExpr{
							pos: position{line: 931, col: 33, offset: 33079},
							expr: &seqExpr{
								pos: position{line: 931, col: 34, offset: 33080},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 931, col: 34, offset: 33080},
										expr: &litMatcher{
											pos:        position{line: 931, col: 35, offset: 33081},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 40, offset: 33086},
										expr: &litMatcher{
											pos:        position{line: 931, col: 41, offset: 33087},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 45, offset: 33091},
										expr: &litMatcher{
											pos:        position{line: 931, col: 46, offset: 33092},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 50, offset: 33096},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 51, offset: 33097},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 931, col: 59, offset: 33105},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 60, offset: 33106},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 931, col: 72, offset: 33118,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 935, col: 1, offset: 33178},
			expr: &choiceExpr{
				pos: position{line: 935, col: 26, offset: 33203},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 935, col: 26, offset: 33203},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 935, col: 26, offset: 33203},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 935, col: 26, offset: 33203},
									expr: &litMatcher{
										pos:        position{line: 935, col: 27, offset: 33204},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 935, col: 31, offset: 33208},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 935, col: 35, offset: 33212},
									expr: &litMatcher{
										pos:        position{line: 935, col: 36, offset: 33213},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 935, col: 40, offset: 33217},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 50, offset: 33227},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 935, col: 81, offset: 33258},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 33441},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 33441},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 937, col: 5, offset: 33441},
									expr: &litMatcher{
										pos:        position{line: 937, col: 6, offset: 33442},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 11, offset: 33447},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 937, col: 15, offset: 33451},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 937, col: 25, offset: 33461},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 937, col: 25, offset: 33461},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 937, col: 29, offset: 33465},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 60, offset: 33496},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 941, col: 1, offset: 33699},
			expr: &seqExpr{
				pos: position{line: 941, col: 34, offset: 33732},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 941, col: 34, offset: 33732},
						expr: &ruleRefExpr{
							pos:  position{line: 941, col: 35, offset: 33733},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 38, offset: 33736},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 941, col: 67, offset: 33765},
						expr: &seqExpr{
							pos: position{line: 941, col: 68, offset: 33766},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 941, col: 68, offset: 33766},
									expr: &seqExpr{
										pos: position{line: 941, col: 70, offset: 33768},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 941, col: 70, offset: 33768},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 941, col: 74, offset: 33772},
												expr: &ruleRefExpr{
													pos:  position{line: 941, col: 75, offset: 33773},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 941, col: 85, offset: 33783},
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 85, offset: 33783},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 89, offset: 33787},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 943, col: 1, offset: 33819},
			expr: &actionExpr{
				pos: position{line: 943, col: 33, offset: 33851},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 943, col: 33, offset: 33851},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 943, col: 33, offset: 33851},
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 34, offset: 33852},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 943, col: 42, offset: 33860},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 943, col: 51, offset: 33869},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 943, col: 51, offset: 33869},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 33901},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 945, col: 11, offset: 33921},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 946, col: 11, offset: 33945},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 947, col: 11, offset: 33969},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 948, col: 11, offset: 33995},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 949, col: 11, offset: 34018},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 950, col: 11, offset: 34040},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 951, col: 11, offset: 34063},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 952, col: 11, offset: 34098},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 956, col: 1, offset: 34243},
			expr: &actionExpr{
				pos: position{line: 956, col: 29, offset: 34271},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 956, col: 29, offset: 34271},
					exprs: []interface{}{
						&anyMatcher{
							line: 956, col: 30, offset: 34272,
						},
						&zeroOrMoreExpr{
							pos: position{line: 956, col: 33, offset: 34275},
							expr: &seqExpr{
								pos: position{line: 956, col: 34, offset: 34276},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 956, col: 34, offset: 34276},
										expr: &litMatcher{
											pos:        position{line: 956, col: 35, offset: 34277},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 956, col: 39, offset: 34281},
										expr: &ruleRefExpr{
											pos:  position{line: 956, col: 40, offset: 34282},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 956, col: 43, offset: 34285},
										expr: &litMatcher{
											pos:        position{line: 956, col: 44, offset: 34286},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 956, col: 48, offset: 34290},
										expr: &litMatcher{
											pos:        position{line: 956, col: 49, offset: 34291},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 956, col: 53, offset: 34295},
										expr: &ruleRefExpr{
											pos:  position{line: 956, col: 54, offset: 34296},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 956, col: 62, offset: 34304},
										expr: &ruleRefExpr{
											pos:  position{line: 956, col: 63, offset: 34305},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 956, col: 75, offset: 34317,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 960, col: 1, offset: 34377},
			expr: &choiceExpr{
				pos: position{line: 961, col: 5, offset: 34403},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 34403},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 34403},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 961, col: 5, offset: 34403},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 18, offset: 34416},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 40, offset: 34438},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 961, col: 45, offset: 34443},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 55, offset: 34453},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 86, offset: 34484},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 963, col: 9, offset: 34641},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 963, col: 9, offset: 34641},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 963, col: 9, offset: 34641},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 22, offset: 34654},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 963, col: 44, offset: 34676},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 963, col: 49, offset: 34681},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 59, offset: 34691},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 963, col: 90, offset: 34722},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 9, offset: 34922},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 966, col: 9, offset: 34922},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 966, col: 9, offset: 34922},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 22, offset: 34935},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 44, offset: 34957},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 966, col: 48, offset: 34961},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 58, offset: 34971},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 89, offset: 35002},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 973, col: 1, offset: 35212},
			expr: &choiceExpr{
				pos: position{line: 973, col: 18, offset: 35229},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 973, col: 18, offset: 35229},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 45, offset: 35256},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 975, col: 1, offset: 35282},
			expr: &actionExpr{
				pos: position{line: 975, col: 29, offset: 35310},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 975, col: 29, offset: 35310},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 975, col: 29, offset: 35310},
							expr: &litMatcher{
								pos:        position{line: 975, col: 30, offset: 35311},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 975, col: 35, offset: 35316},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 975, col: 40, offset: 35321},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 50, offset: 35331},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 975, col: 84, offset: 35365},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 979, col: 1, offset: 35495},
			expr: &seqExpr{
				pos: position{line: 979, col: 37, offset: 35531},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 979, col: 37, offset: 35531},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 979, col: 69, offset: 35563},
						expr: &seqExpr{
							pos: position{line: 979, col: 70, offset: 35564},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 979, col: 70, offset: 35564},
									expr: &litMatcher{
										pos:        position{line: 979, col: 72, offset: 35566},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 979, col: 79, offset: 35573},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 979, col: 79, offset: 35573},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 979, col: 84, offset: 35578},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 981, col: 1, offset: 35647},
			expr: &actionExpr{
				pos: position{line: 981, col: 36, offset: 35682},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 981, col: 36, offset: 35682},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 981, col: 36, offset: 35682},
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 37, offset: 35683},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 981, col: 45, offset: 35691},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 981, col: 54, offset: 35700},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 981, col: 54, offset: 35700},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 35736},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 11, offset: 35755},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 984, col: 11, offset: 35777},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 35801},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 986, col: 11, offset: 35827},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 11, offset: 35850},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 988, col: 11, offset: 35872},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 989, col: 11, offset: 35895},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 990, col: 11, offset: 35933},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 994, col: 1, offset: 36078},
			expr: &actionExpr{
				pos: position{line: 994, col: 32, offset: 36109},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 994, col: 32, offset: 36109},
					exprs: []interface{}{
						&anyMatcher{
							line: 994, col: 33, offset: 36110,
						},
						&zeroOrMoreExpr{
							pos: position{line: 994, col: 36, offset: 36113},
							expr: &seqExpr{
								pos: position{line: 994, col: 37, offset: 36114},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 994, col: 37, offset: 36114},
										expr: &litMatcher{
											pos:        position{line: 994, col: 38, offset: 36115},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 994, col: 43, offset: 36120},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 44, offset: 36121},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 994, col: 47, offset: 36124},
										expr: &litMatcher{
											pos:        position{line: 994, col: 48, offset: 36125},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 994, col: 52, offset: 36129},
										expr: &litMatcher{
											pos:        position{line: 994, col: 53, offset: 36130},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 994, col: 57, offset: 36134},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 58, offset: 36135},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 994, col: 66, offset: 36143},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 67, offset: 36144},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 994, col: 79, offset: 36156,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 998, col: 1, offset: 36216},
			expr: &choiceExpr{
				pos: position{line: 998, col: 29, offset: 36244},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 998, col: 29, offset: 36244},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 998, col: 29, offset: 36244},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 998, col: 29, offset: 36244},
									expr: &litMatcher{
										pos:        position{line: 998, col: 30, offset: 36245},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 998, col: 34, offset: 36249},
									expr: &litMatcher{
										pos:        position{line: 998, col: 35, offset: 36250},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 998, col: 40, offset: 36255},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 998, col: 44, offset: 36259},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 998, col: 54, offset: 36269},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 998, col: 88, offset: 36303},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 36489},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 1000, col: 5, offset: 36489},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1000, col: 5, offset: 36489},
									expr: &litMatcher{
										pos:        position{line: 1000, col: 6, offset: 36490},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 11, offset: 36495},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 15, offset: 36499},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1000, col: 25, offset: 36509},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1000, col: 25, offset: 36509},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1000, col: 29, offset: 36513},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 63, offset: 36547},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1004, col: 1, offset: 36756},
			expr: &seqExpr{
				pos: position{line: 1004, col: 37, offset: 36792},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1004, col: 37, offset: 36792},
						expr: &ruleRefExpr{
							pos:  position{line: 1004, col: 38, offset: 36793},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 41, offset: 36796},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1004, col: 73, offset: 36828},
						expr: &seqExpr{
							pos: position{line: 1004, col: 74, offset: 36829},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1004, col: 74, offset: 36829},
									expr: &seqExpr{
										pos: position{line: 1004, col: 76, offset: 36831},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1004, col: 76, offset: 36831},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 1004, col: 80, offset: 36835},
												expr: &ruleRefExpr{
													pos:  position{line: 1004, col: 81, offset: 36836},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1004, col: 91, offset: 36846},
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 91, offset: 36846},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 95, offset: 36850},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1006, col: 1, offset: 36885},
			expr: &actionExpr{
				pos: position{line: 1006, col: 37, offset: 36921},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1006, col: 37, offset: 36921},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1006, col: 46, offset: 36930},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1006, col: 46, offset: 36930},
								name: "Newline",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 11, offset: 36968},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 11, offset: 37004},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 11, offset: 37024},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 11, offset: 37045},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 11, offset: 37069},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1012, col: 11, offset: 37095},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1013, col: 11, offset: 37118},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1014, col: 11, offset: 37140},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 11, offset: 37163},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1016, col: 11, offset: 37201},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1020, col: 1, offset: 37346},
			expr: &actionExpr{
				pos: position{line: 1020, col: 32, offset: 37377},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 32, offset: 37377},
					exprs: []interface{}{
						&anyMatcher{
							line: 1020, col: 33, offset: 37378,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1020, col: 36, offset: 37381},
							expr: &seqExpr{
								pos: position{line: 1020, col: 37, offset: 37382},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1020, col: 37, offset: 37382},
										expr: &ruleRefExpr{
											pos:  position{line: 1020, col: 38, offset: 37383},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 41, offset: 37386},
										expr: &litMatcher{
											pos:        position{line: 1020, col: 42, offset: 37387},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 46, offset: 37391},
										expr: &litMatcher{
											pos:        position{line: 1020, col: 47, offset: 37392},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 51, offset: 37396},
										expr: &litMatcher{
											pos:        position{line: 1020, col: 52, offset: 37397},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 56, offset: 37401},
										expr: &ruleRefExpr{
											pos:  position{line: 1020, col: 57, offset: 37402},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 65, offset: 37410},
										expr: &ruleRefExpr{
											pos:  position{line: 1020, col: 66, offset: 37411},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1020, col: 78, offset: 37423,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1024, col: 1, offset: 37504},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 37533},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 37533},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 37533},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1025, col: 5, offset: 37533},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 18, offset: 37546},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 40, offset: 37568},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 45, offset: 37573},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 55, offset: 37583},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 89, offset: 37617},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1027, col: 9, offset: 37774},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1027, col: 9, offset: 37774},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1027, col: 9, offset: 37774},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1027, col: 22, offset: 37787},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1027, col: 44, offset: 37809},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 49, offset: 37814},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1027, col: 59, offset: 37824},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1027, col: 93, offset: 37858},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 9, offset: 38058},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1030, col: 9, offset: 38058},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 9, offset: 38058},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 22, offset: 38071},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 44, offset: 38093},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 48, offset: 38097},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 58, offset: 38107},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 92, offset: 38141},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1034, col: 1, offset: 38291},
			expr: &actionExpr{
				pos: position{line: 1034, col: 18, offset: 38308},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 18, offset: 38308},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1034, col: 18, offset: 38308},
							expr: &litMatcher{
								pos:        position{line: 1034, col: 19, offset: 38309},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 23, offset: 38313},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 27, offset: 38317},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 36, offset: 38326},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 58, offset: 38348},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1038, col: 1, offset: 38437},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 25, offset: 38461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1038, col: 25, offset: 38461},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 38, offset: 38474},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1040, col: 1, offset: 38493},
			expr: &actionExpr{
				pos: position{line: 1040, col: 21, offset: 38513},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1040, col: 21, offset: 38513},
					expr: &seqExpr{
						pos: position{line: 1040, col: 22, offset: 38514},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1040, col: 22, offset: 38514},
								expr: &ruleRefExpr{
									pos:  position{line: 1040, col: 23, offset: 38515},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1040, col: 31, offset: 38523},
								expr: &ruleRefExpr{
									pos:  position{line: 1040, col: 32, offset: 38524},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1040, col: 35, offset: 38527},
								expr: &litMatcher{
									pos:        position{line: 1040, col: 36, offset: 38528},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1040, col: 40, offset: 38532,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1044, col: 1, offset: 38565},
			expr: &actionExpr{
				pos: position{line: 1044, col: 25, offset: 38589},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 25, offset: 38589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1044, col: 25, offset: 38589},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 38, offset: 38602},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 60, offset: 38624},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 64, offset: 38628},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 73, offset: 38637},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 95, offset: 38659},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1048, col: 1, offset: 38788},
			expr: &actionExpr{
				pos: position{line: 1048, col: 20, offset: 38807},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 20, offset: 38807},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1048, col: 20, offset: 38807},
							expr: &litMatcher{
								pos:        position{line: 1048, col: 21, offset: 38808},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1048, col: 25, offset: 38812},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 29, offset: 38816},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 38, offset: 38825},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1048, col: 62, offset: 38849},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1052, col: 1, offset: 38940},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 27, offset: 38966},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 27, offset: 38966},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 40, offset: 38979},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1054, col: 1, offset: 39000},
			expr: &actionExpr{
				pos: position{line: 1054, col: 23, offset: 39022},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1054, col: 23, offset: 39022},
					expr: &seqExpr{
						pos: position{line: 1054, col: 24, offset: 39023},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1054, col: 24, offset: 39023},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 25, offset: 39024},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1054, col: 33, offset: 39032},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 34, offset: 39033},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1054, col: 37, offset: 39036},
								expr: &litMatcher{
									pos:        position{line: 1054, col: 38, offset: 39037},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1054, col: 42, offset: 39041,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1058, col: 1, offset: 39074},
			expr: &actionExpr{
				pos: position{line: 1058, col: 27, offset: 39100},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 27, offset: 39100},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1058, col: 27, offset: 39100},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 40, offset: 39113},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1058, col: 62, offset: 39135},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 66, offset: 39139},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 75, offset: 39148},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1058, col: 99, offset: 39172},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1065, col: 1, offset: 39408},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 16, offset: 39423},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1065, col: 16, offset: 39423},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 40, offset: 39447},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 64, offset: 39471},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1067, col: 1, offset: 39489},
			expr: &litMatcher{
				pos:        position{line: 1067, col: 32, offset: 39520},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1069, col: 1, offset: 39525},
			expr: &actionExpr{
				pos: position{line: 1069, col: 26, offset: 39550},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 26, offset: 39550},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1069, col: 26, offset: 39550},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 54, offset: 39578},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 63, offset: 39587},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 93, offset: 39617},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1069, col: 121, offset: 39645},
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 122, offset: 39646},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1073, col: 1, offset: 39745},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 33, offset: 39777},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1073, col: 34, offset: 39778},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1073, col: 34, offset: 39778},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1073, col: 35, offset: 39779},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1073, col: 35, offset: 39779},
											expr: &ruleRefExpr{
												pos:  position{line: 1073, col: 36, offset: 39780},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1073, col: 64, offset: 39808},
											expr: &ruleRefExpr{
												pos:  position{line: 1073, col: 65, offset: 39809},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1073, col: 68, offset: 39812},
											expr: &ruleRefExpr{
												pos:  position{line: 1073, col: 69, offset: 39813},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1073, col: 77, offset: 39821,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1073, col: 80, offset: 39824},
									expr: &seqExpr{
										pos: position{line: 1073, col: 81, offset: 39825},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1073, col: 81, offset: 39825},
												expr: &seqExpr{
													pos: position{line: 1073, col: 83, offset: 39827},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1073, col: 83, offset: 39827},
															expr: &ruleRefExpr{
																pos:  position{line: 1073, col: 83, offset: 39827},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1073, col: 87, offset: 39831},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1073, col: 116, offset: 39860},
												expr: &ruleRefExpr{
													pos:  position{line: 1073, col: 117, offset: 39861},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1073, col: 145, offset: 39889},
												expr: &ruleRefExpr{
													pos:  position{line: 1073, col: 146, offset: 39890},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1073, col: 154, offset: 39898,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1075, col: 7, offset: 40040},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1075, col: 8, offset: 40041},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1075, col: 8, offset: 40041},
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 9, offset: 40042},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1075, col: 12, offset: 40045},
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 13, offset: 40046},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1075, col: 21, offset: 40054},
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 22, offset: 40055},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1075, col: 50, offset: 40083,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1079, col: 1, offset: 40165},
			expr: &litMatcher{
				pos:        position{line: 1079, col: 32, offset: 40196},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1081, col: 1, offset: 40203},
			expr: &actionExpr{
				pos: position{line: 1081, col: 26, offset: 40228},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 26, offset: 40228},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1081, col: 26, offset: 40228},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 54, offset: 40256},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 63, offset: 40265},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1081, col: 93, offset: 40295},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1081, col: 121, offset: 40323},
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 122, offset: 40324},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1085, col: 1, offset: 40423},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 33, offset: 40455},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1085, col: 34, offset: 40456},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1085, col: 34, offset: 40456},
							expr: &seqExpr{
								pos: position{line: 1085, col: 35, offset: 40457},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1085, col: 35, offset: 40457},
										expr: &ruleRefExpr{
											pos:  position{line: 1085, col: 36, offset: 40458},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1085, col: 64, offset: 40486,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 7, offset: 40651},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1087, col: 7, offset: 40651},
							expr: &seqExpr{
								pos: position{line: 1087, col: 8, offset: 40652},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1087, col: 8, offset: 40652},
										expr: &ruleRefExpr{
											pos:  position{line: 1087, col: 9, offset: 40653},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1087, col: 12, offset: 40656},
										expr: &ruleRefExpr{
											pos:  position{line: 1087, col: 13, offset: 40657},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1087, col: 21, offset: 40665},
										expr: &ruleRefExpr{
											pos:  position{line: 1087, col: 22, offset: 40666},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1087, col: 50, offset: 40694,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1091, col: 1, offset: 40777},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 21, offset: 40797},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1091, col: 21, offset: 40797},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1091, col: 21, offset: 40797},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 21, offset: 40797},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 30, offset: 40806},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1091, col: 38, offset: 40814},
										expr: &ruleRefExpr{
											pos:  position{line: 1091, col: 39, offset: 40815},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1091, col: 67, offset: 40843},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 40933},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 40933},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 40933},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 15, offset: 40943},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1093, col: 23, offset: 40951},
										expr: &choiceExpr{
											pos: position{line: 1093, col: 24, offset: 40952},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1093, col: 24, offset: 40952},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1093, col: 37, offset: 40965},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1093, col: 65, offset: 40993},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1097, col: 1, offset: 41083},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 31, offset: 41113},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 31, offset: 41113},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 43, offset: 41125},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1097, col: 52, offset: 41134},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1097, col: 53, offset: 41135},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1097, col: 53, offset: 41135},
									expr: &litMatcher{
										pos:        position{line: 1097, col: 54, offset: 41136},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1097, col: 58, offset: 41140,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1104, col: 1, offset: 41310},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 19, offset: 41328},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1104, col: 19, offset: 41328},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 44, offset: 41353},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1106, col: 1, offset: 41378},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 27, offset: 41404},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1106, col: 27, offset: 41404},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1106, col: 27, offset: 41404},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1106, col: 27, offset: 41404},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 32, offset: 41409},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 36, offset: 41413},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1106, col: 40, offset: 41417},
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 40, offset: 41417},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 44, offset: 41421},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 48, offset: 41425},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 55, offset: 41432},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 76, offset: 41453},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 41536},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 41536},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1108, col: 5, offset: 41536},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 10, offset: 41541},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 14, offset: 41545},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1108, col: 18, offset: 41549},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1112, col: 1, offset: 41621},
			expr: &actionExpr{
				pos: position{line: 1112, col: 27, offset: 41647},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 27, offset: 41647},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1112, col: 27, offset: 41647},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 35, offset: 41655},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 40, offset: 41660},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 54, offset: 41674},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 72, offset: 41692},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1116, col: 1, offset: 41822},
			expr: &actionExpr{
				pos: position{line: 1116, col: 24, offset: 41845},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1116, col: 24, offset: 41845},
					expr: &choiceExpr{
						pos: position{line: 1116, col: 25, offset: 41846},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1116, col: 25, offset: 41846},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1116, col: 37, offset: 41858},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1116, col: 47, offset: 41868},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1116, col: 47, offset: 41868},
										expr: &litMatcher{
											pos:        position{line: 1116, col: 48, offset: 41869},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1116, col: 54, offset: 41875,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1123, col: 1, offset: 42017},
			expr: &choiceExpr{
				pos: position{line: 1123, col: 9, offset: 42025},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1123, col: 9, offset: 42025},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 24, offset: 42040},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1126, col: 1, offset: 42121},
			expr: &actionExpr{
				pos: position{line: 1126, col: 17, offset: 42137},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 17, offset: 42137},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1126, col: 17, offset: 42137},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 25, offset: 42145},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1126, col: 30, offset: 42150},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1126, col: 30, offset: 42150},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 41, offset: 42161},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 55, offset: 42175},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1126, col: 73, offset: 42193},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1130, col: 1, offset: 42311},
			expr: &actionExpr{
				pos: position{line: 1130, col: 17, offset: 42327},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 17, offset: 42327},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1130, col: 17, offset: 42327},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1130, col: 22, offset: 42332},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 32, offset: 42342},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1130, col: 49, offset: 42359},
								expr: &ruleRefExpr{
									pos:  position{line: 1130, col: 50, offset: 42360},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1134, col: 1, offset: 42453},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 19, offset: 42471},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 19, offset: 42471},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 44, offset: 42496},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1136, col: 1, offset: 42523},
			expr: &actionExpr{
				pos: position{line: 1136, col: 27, offset: 42549},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 27, offset: 42549},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1136, col: 27, offset: 42549},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1136, col: 31, offset: 42553},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1136, col: 36, offset: 42558},
								expr: &ruleRefExpr{
									pos:  position{line: 1136, col: 37, offset: 42559},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1136, col: 66, offset: 42588},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1140, col: 1, offset: 42650},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 5, offset: 42722},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 42722},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 42722},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 5, offset: 42722},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 10, offset: 42727},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1142, col: 19, offset: 42736},
										expr: &seqExpr{
											pos: position{line: 1142, col: 20, offset: 42737},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1142, col: 20, offset: 42737},
													expr: &litMatcher{
														pos:        position{line: 1142, col: 21, offset: 42738},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1142, col: 25, offset: 42742},
													expr: &litMatcher{
														pos:        position{line: 1142, col: 26, offset: 42743},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1142, col: 30, offset: 42747},
													expr: &litMatcher{
														pos:        position{line: 1142, col: 31, offset: 42748},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1142, col: 37, offset: 42754},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1142, col: 37, offset: 42754},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1142, col: 50, offset: 42767},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1142, col: 63, offset: 42780},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1142, col: 73, offset: 42790},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1142, col: 74, offset: 42791},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1142, col: 74, offset: 42791},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1142, col: 75, offset: 42792},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1142, col: 78, offset: 42795,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 11, offset: 42864},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1144, col: 16, offset: 42869},
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 16, offset: 42869},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1144, col: 24, offset: 42877},
									expr: &notExpr{
										pos: position{line: 1144, col: 26, offset: 42879},
										expr: &litMatcher{
											pos:        position{line: 1144, col: 27, offset: 42880},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 43005},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1148, col: 5, offset: 43005},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 5, offset: 43005},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1148, col: 14, offset: 43014},
										expr: &seqExpr{
											pos: position{line: 1148, col: 15, offset: 43015},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1148, col: 15, offset: 43015},
													expr: &litMatcher{
														pos:        position{line: 1148, col: 16, offset: 43016},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1148, col: 20, offset: 43020},
													expr: &litMatcher{
														pos:        position{line: 1148, col: 21, offset: 43021},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1148, col: 26, offset: 43026},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1148, col: 26, offset: 43026},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1148, col: 39, offset: 43039},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1148, col: 52, offset: 43052},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1148, col: 62, offset: 43062},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1148, col: 63, offset: 43063},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1148, col: 63, offset: 43063},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1148, col: 64, offset: 43064},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1148, col: 67, offset: 43067,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1150, col: 11, offset: 43136},
									expr: &notExpr{
										pos: position{line: 1150, col: 13, offset: 43138},
										expr: &litMatcher{
											pos:        position{line: 1150, col: 14, offset: 43139},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1155, col: 1, offset: 43219},
			expr: &actionExpr{
				pos: position{line: 1155, col: 30, offset: 43248},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 30, offset: 43248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1155, col: 30, offset: 43248},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 34, offset: 43252},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1155, col: 39, offset: 43257},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 40, offset: 43258},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1155, col: 60, offset: 43278},
							expr: &litMatcher{
								pos:        position{line: 1155, col: 60, offset: 43278},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1155, col: 65, offset: 43283},
							expr: &ruleRefExpr{
								pos:  position{line: 1155, col: 65, offset: 43283},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 69, offset: 43287},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1155, col: 80, offset: 43298},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 81, offset: 43299},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1155, col: 100, offset: 43318},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1159, col: 1, offset: 43403},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 43466},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1161, col: 5, offset: 43466},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1161, col: 5, offset: 43466},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1161, col: 5, offset: 43466},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1161, col: 10, offset: 43471},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1161, col: 19, offset: 43480},
										expr: &seqExpr{
											pos: position{line: 1161, col: 20, offset: 43481},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1161, col: 20, offset: 43481},
													expr: &litMatcher{
														pos:        position{line: 1161, col: 21, offset: 43482},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1161, col: 25, offset: 43486},
													expr: &litMatcher{
														pos:        position{line: 1161, col: 26, offset: 43487},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1161, col: 30, offset: 43491},
													expr: &litMatcher{
														pos:        position{line: 1161, col: 31, offset: 43492},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1161, col: 37, offset: 43498},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1161, col: 37, offset: 43498},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1161, col: 50, offset: 43511},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1161, col: 63, offset: 43524},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1161, col: 73, offset: 43534},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1161, col: 74, offset: 43535},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1161, col: 74, offset: 43535},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1161, col: 75, offset: 43536},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1161, col: 92, offset: 43553,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1163, col: 11, offset: 43622},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1163, col: 16, offset: 43627},
									expr: &ruleRefExpr{
										pos:  position{line: 1163, col: 16, offset: 43627},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1163, col: 24, offset: 43635},
									expr: &notExpr{
										pos: position{line: 1163, col: 26, offset: 43637},
										expr: &litMatcher{
											pos:        position{line: 1163, col: 27, offset: 43638},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1167, col: 5, offset: 43763},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1167, col: 5, offset: 43763},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1167, col: 5, offset: 43763},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1167, col: 14, offset: 43772},
										expr: &seqExpr{
											pos: position{line: 1167, col: 15, offset: 43773},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1167, col: 15, offset: 43773},
													expr: &litMatcher{
														pos:        position{line: 1167, col: 16, offset: 43774},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1167, col: 20, offset: 43778},
													expr: &litMatcher{
														pos:        position{line: 1167, col: 21, offset: 43779},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1167, col: 25, offset: 43783},
													expr: &litMatcher{
														pos:        position{line: 1167, col: 26, offset: 43784},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1167, col: 31, offset: 43789},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1167, col: 31, offset: 43789},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1167, col: 44, offset: 43802},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1167, col: 57, offset: 43815},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1167, col: 67, offset: 43825},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1167, col: 68, offset: 43826},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1167, col: 68, offset: 43826},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1167, col: 69, offset: 43827},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1167, col: 86, offset: 43844,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1169, col: 11, offset: 43913},
									expr: &notExpr{
										pos: position{line: 1169, col: 13, offset: 43915},
										expr: &litMatcher{
											pos:        position{line: 1169, col: 14, offset: 43916},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1174, col: 1, offset: 44066},
			expr: &actionExpr{
				pos: position{line: 1175, col: 5, offset: 44086},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 5, offset: 44086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1175, col: 5, offset: 44086},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1175, col: 14, offset: 44095},
								expr: &choiceExpr{
									pos: position{line: 1175, col: 15, offset: 44096},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1175, col: 15, offset: 44096},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1176, col: 11, offset: 44117},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1177, col: 11, offset: 44135},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1178, col: 11, offset: 44159},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1179, col: 11, offset: 44179},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1180, col: 11, offset: 44201},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 21, offset: 44211},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1184, col: 1, offset: 44281},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 17, offset: 44297},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1184, col: 17, offset: 44297},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 40, offset: 44320},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1187, col: 1, offset: 44456},
			expr: &actionExpr{
				pos: position{line: 1187, col: 25, offset: 44480},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 25, offset: 44480},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1187, col: 25, offset: 44480},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 33, offset: 44488},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1187, col: 38, offset: 44493},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1187, col: 38, offset: 44493},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 57, offset: 44512},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 79, offset: 44534},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 97, offset: 44552},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1191, col: 1, offset: 44670},
			expr: &actionExpr{
				pos: position{line: 1191, col: 25, offset: 44694},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 25, offset: 44694},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1191, col: 25, offset: 44694},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 30, offset: 44699},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 48, offset: 44717},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1191, col: 65, offset: 44734},
								expr: &ruleRefExpr{
									pos:  position{line: 1191, col: 66, offset: 44735},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1195, col: 1, offset: 44828},
			expr: &choiceExpr{
				pos: position{line: 1195, col: 15, offset: 44842},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1195, col: 15, offset: 44842},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 30, offset: 44857},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1197, col: 1, offset: 44877},
			expr: &actionExpr{
				pos: position{line: 1197, col: 23, offset: 44899},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 23, offset: 44899},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1197, col: 23, offset: 44899},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 28, offset: 44904},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 38, offset: 44914},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 56, offset: 44932},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1204, col: 1, offset: 45267},
			expr: &actionExpr{
				pos: position{line: 1204, col: 15, offset: 45281},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 15, offset: 45281},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 15, offset: 45281},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1204, col: 26, offset: 45292},
								expr: &ruleRefExpr{
									pos:  position{line: 1204, col: 27, offset: 45293},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1204, col: 47, offset: 45313},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 57, offset: 45323},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1204, col: 63, offset: 45329},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1204, col: 63, offset: 45329},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 74, offset: 45340},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 88, offset: 45354},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 106, offset: 45372},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1204, col: 123, offset: 45389},
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 123, offset: 45389},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 127, offset: 45393},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1208, col: 1, offset: 45512},
			expr: &actionExpr{
				pos: position{line: 1208, col: 16, offset: 45527},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 16, offset: 45527},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1208, col: 16, offset: 45527},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1208, col: 25, offset: 45536},
							expr: &litMatcher{
								pos:        position{line: 1208, col: 26, offset: 45537},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 30, offset: 45541},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1208, col: 36, offset: 45547},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1208, col: 36, offset: 45547},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 47, offset: 45558},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 61, offset: 45572},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 79, offset: 45590},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1212, col: 1, offset: 45711},
			expr: &actionExpr{
				pos: position{line: 1212, col: 20, offset: 45730},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 20, offset: 45730},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1212, col: 20, offset: 45730},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 24, offset: 45734},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 28, offset: 45738},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 29, offset: 45739},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1212, col: 56, offset: 45766},
							expr: &litMatcher{
								pos:        position{line: 1212, col: 56, offset: 45766},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 61, offset: 45771},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 67, offset: 45777},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 68, offset: 45778},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1212, col: 95, offset: 45805},
							expr: &litMatcher{
								pos:        position{line: 1212, col: 95, offset: 45805},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 100, offset: 45810},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 107, offset: 45817},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 108, offset: 45818},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1212, col: 135, offset: 45845},
							expr: &litMatcher{
								pos:        position{line: 1212, col: 135, offset: 45845},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1212, col: 140, offset: 45850},
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 140, offset: 45850},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 144, offset: 45854},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1212, col: 155, offset: 45865},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 156, offset: 45866},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1212, col: 175, offset: 45885},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1219, col: 1, offset: 46175},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 19, offset: 46193},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1219, col: 19, offset: 46193},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1219, col: 19, offset: 46193},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1219, col: 19, offset: 46193},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 32, offset: 46206},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 41, offset: 46215},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 58, offset: 46232},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 46300},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1221, col: 5, offset: 46300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1221, col: 5, offset: 46300},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 21, offset: 46316},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1221, col: 26, offset: 46321},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 39, offset: 46334},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 43, offset: 46338},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1221, col: 52, offset: 46347},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 69, offset: 46364},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1223, col: 5, offset: 46442},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1223, col: 5, offset: 46442},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1223, col: 5, offset: 46442},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 21, offset: 46458},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 26, offset: 46463},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 39, offset: 46476},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1227, col: 1, offset: 46584},
			expr: &actionExpr{
				pos: position{line: 1227, col: 16, offset: 46599},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1227, col: 16, offset: 46599},
					expr: &choiceExpr{
						pos: position{line: 1227, col: 17, offset: 46600},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1227, col: 17, offset: 46600},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1227, col: 29, offset: 46612},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1227, col: 39, offset: 46622},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1227, col: 39, offset: 46622},
										expr: &litMatcher{
											pos:        position{line: 1227, col: 40, offset: 46623},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1227, col: 44, offset: 46627},
										expr: &litMatcher{
											pos:        position{line: 1227, col: 45, offset: 46628},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1227, col: 49, offset: 46632},
										expr: &ruleRefExpr{
											pos:  position{line: 1227, col: 50, offset: 46633},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1227, col: 55, offset: 46638,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1231, col: 1, offset: 46723},
			expr: &actionExpr{
				pos: position{line: 1231, col: 20, offset: 46742},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1231, col: 20, offset: 46742},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1231, col: 29, offset: 46751},
						expr: &seqExpr{
							pos: position{line: 1231, col: 30, offset: 46752},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1231, col: 30, offset: 46752},
									expr: &litMatcher{
										pos:        position{line: 1231, col: 31, offset: 46753},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1231, col: 35, offset: 46757},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 36, offset: 46758},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1231, col: 40, offset: 46762},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 40, offset: 46762},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1231, col: 44, offset: 46766},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 45, offset: 46767},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1231, col: 61, offset: 46783},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1231, col: 75, offset: 46797},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 75, offset: 46797},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1238, col: 1, offset: 47111},
			expr: &actionExpr{
				pos: position{line: 1238, col: 19, offset: 47129},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 19, offset: 47129},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1238, col: 19, offset: 47129},
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 20, offset: 47130},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 5, offset: 47159},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1239, col: 12, offset: 47166},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1239, col: 12, offset: 47166},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 11, offset: 47189},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1241, col: 11, offset: 47213},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 47237},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 47259},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 47281},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 47304},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 47332},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 47348},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1251, col: 1, offset: 47389},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 19, offset: 47407},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1251, col: 19, offset: 47407},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 19, offset: 47448},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 19, offset: 47488},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 19, offset: 47529},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 19, offset: 47570},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 19, offset: 47611},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 19, offset: 47649},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1263, col: 1, offset: 47868},
			expr: &seqExpr{
				pos: position{line: 1263, col: 25, offset: 47892},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1263, col: 25, offset: 47892},
						val:        "```",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1263, col: 31, offset: 47898},
						expr: &ruleRefExpr{
							pos:  position{line: 1263, col: 31, offset: 47898},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 35, offset: 47902},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1265, col: 1, offset: 47907},
			expr: &actionExpr{
				pos: position{line: 1265, col: 16, offset: 47922},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 16, offset: 47922},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1265, col: 16, offset: 47922},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1265, col: 27, offset: 47933},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 28, offset: 47934},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1265, col: 48, offset: 47954},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 69, offset: 47975},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1265, col: 77, offset: 47983},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 78, offset: 47984},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1265, col: 100, offset: 48006},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1265, col: 100, offset: 48006},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1265, col: 123, offset: 48029},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1269, col: 1, offset: 48137},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 23, offset: 48159},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1269, col: 23, offset: 48159},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 35, offset: 48171},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 51, offset: 48187},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 62, offset: 48198},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1272, col: 1, offset: 48238},
			expr: &actionExpr{
				pos: position{line: 1272, col: 25, offset: 48262},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1272, col: 25, offset: 48262},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1272, col: 31, offset: 48268},
						expr: &ruleRefExpr{
							pos:  position{line: 1272, col: 32, offset: 48269},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1276, col: 1, offset: 48382},
			expr: &actionExpr{
				pos: position{line: 1276, col: 29, offset: 48410},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 29, offset: 48410},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1276, col: 29, offset: 48410},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 30, offset: 48411},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1276, col: 51, offset: 48432},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 52, offset: 48433},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 62, offset: 48443},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 68, offset: 48449},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1283, col: 1, offset: 48687},
			expr: &seqExpr{
				pos: position{line: 1283, col: 26, offset: 48712},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1283, col: 26, offset: 48712},
						val:        "----",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1283, col: 33, offset: 48719},
						expr: &ruleRefExpr{
							pos:  position{line: 1283, col: 33, offset: 48719},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 37, offset: 48723},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1285, col: 1, offset: 48728},
			expr: &actionExpr{
				pos: position{line: 1285, col: 17, offset: 48744},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1285, col: 17, offset: 48744},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1285, col: 17, offset: 48744},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1285, col: 28, offset: 48755},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 29, offset: 48756},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1285, col: 49, offset: 48776},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 71, offset: 48798},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1285, col: 79, offset: 48806},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 80, offset: 48807},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1285, col: 103, offset: 48830},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1285, col: 103, offset: 48830},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1285, col: 127, offset: 48854},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1289, col: 1, offset: 48963},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 24, offset: 48986},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 24, offset: 48986},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 40, offset: 49002},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 64, offset: 49026},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1291, col: 1, offset: 49037},
			expr: &actionExpr{
				pos: position{line: 1291, col: 26, offset: 49062},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1291, col: 26, offset: 49062},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1291, col: 32, offset: 49068},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 33, offset: 49069},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1295, col: 1, offset: 49188},
			expr: &actionExpr{
				pos: position{line: 1295, col: 30, offset: 49217},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 30, offset: 49217},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1295, col: 30, offset: 49217},
							expr: &ruleRefExpr{
								pos:  position{line: 1295, col: 31, offset: 49218},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 53, offset: 49240},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1295, col: 59, offset: 49246},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1295, col: 59, offset: 49246},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1295, col: 59, offset: 49246},
											expr: &ruleRefExpr{
												pos:  position{line: 1295, col: 60, offset: 49247},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1295, col: 64, offset: 49251},
											expr: &choiceExpr{
												pos: position{line: 1295, col: 65, offset: 49252},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1295, col: 65, offset: 49252},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1295, col: 77, offset: 49264},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1295, col: 87, offset: 49274},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1295, col: 87, offset: 49274},
																expr: &ruleRefExpr{
																	pos:  position{line: 1295, col: 88, offset: 49275},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1295, col: 92, offset: 49279,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1295, col: 128, offset: 49315},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1302, col: 1, offset: 49641},
			expr: &seqExpr{
				pos: position{line: 1302, col: 26, offset: 49666},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1302, col: 26, offset: 49666},
						val:        "====",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1302, col: 33, offset: 49673},
						expr: &ruleRefExpr{
							pos:  position{line: 1302, col: 33, offset: 49673},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 37, offset: 49677},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1304, col: 1, offset: 49682},
			expr: &actionExpr{
				pos: position{line: 1304, col: 17, offset: 49698},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 17, offset: 49698},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1304, col: 17, offset: 49698},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1304, col: 28, offset: 49709},
								expr: &ruleRefExpr{
									pos:  position{line: 1304, col: 29, offset: 49710},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1304, col: 49, offset: 49730},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 71, offset: 49752},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1304, col: 79, offset: 49760},
								expr: &choiceExpr{
									pos: position{line: 1304, col: 80, offset: 49761},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1304, col: 80, offset: 49761},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 92, offset: 49773},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 108, offset: 49789},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 119, offset: 49800},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1304, col: 145, offset: 49826},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1304, col: 145, offset: 49826},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1304, col: 169, offset: 49850},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1309, col: 1, offset: 49977},
			expr: &actionExpr{
				pos: position{line: 1309, col: 26, offset: 50002},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1309, col: 26, offset: 50002},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1309, col: 32, offset: 50008},
						expr: &ruleRefExpr{
							pos:  position{line: 1309, col: 33, offset: 50009},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1313, col: 1, offset: 50123},
			expr: &actionExpr{
				pos: position{line: 1313, col: 30, offset: 50152},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 30, offset: 50152},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1313, col: 30, offset: 50152},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 31, offset: 50153},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1313, col: 53, offset: 50175},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 54, offset: 50176},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1313, col: 64, offset: 50186},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 70, offset: 50192},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1320, col: 1, offset: 50428},
			expr: &seqExpr{
				pos: position{line: 1320, col: 24, offset: 50451},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1320, col: 24, offset: 50451},
						val:        "____",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1320, col: 31, offset: 50458},
						expr: &ruleRefExpr{
							pos:  position{line: 1320, col: 31, offset: 50458},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 35, offset: 50462},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1322, col: 1, offset: 50492},
			expr: &actionExpr{
				pos: position{line: 1322, col: 15, offset: 50506},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 15, offset: 50506},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1322, col: 15, offset: 50506},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1322, col: 26, offset: 50517},
								expr: &ruleRefExpr{
									pos:  position{line: 1322, col: 27, offset: 50518},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1322, col: 47, offset: 50538},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 67, offset: 50558},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1322, col: 75, offset: 50566},
								expr: &ruleRefExpr{
									pos:  position{line: 1322, col: 76, offset: 50567},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1322, col: 97, offset: 50588},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1322, col: 97, offset: 50588},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1322, col: 119, offset: 50610},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1326, col: 1, offset: 50717},
			expr: &actionExpr{
				pos: position{line: 1327, col: 5, offset: 50743},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 5, offset: 50743},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1327, col: 5, offset: 50743},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 6, offset: 50744},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1327, col: 26, offset: 50764},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 27, offset: 50765},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 31, offset: 50769},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1327, col: 40, offset: 50778},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1327, col: 40, offset: 50778},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 15, offset: 50803},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 15, offset: 50831},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 15, offset: 50857},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 15, offset: 50880},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 15, offset: 50906},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 15, offset: 50933},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 15, offset: 50960},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 15, offset: 50987},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 15, offset: 51019},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 15, offset: 51045},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 15, offset: 51072},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 15, offset: 51093},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1340, col: 15, offset: 51121},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1341, col: 15, offset: 51165},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1342, col: 15, offset: 51203},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 15, offset: 51244},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1347, col: 1, offset: 51303},
			expr: &actionExpr{
				pos: position{line: 1347, col: 24, offset: 51326},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1347, col: 24, offset: 51326},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1347, col: 30, offset: 51332},
						expr: &ruleRefExpr{
							pos:  position{line: 1347, col: 31, offset: 51333},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1356, col: 1, offset: 51679},
			expr: &actionExpr{
				pos: position{line: 1356, col: 15, offset: 51693},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1356, col: 15, offset: 51693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1356, col: 15, offset: 51693},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1356, col: 27, offset: 51705},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1357, col: 5, offset: 51729},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 5, offset: 51915},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 25, offset: 51935},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1361, col: 33, offset: 51943},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 34, offset: 51944},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1361, col: 55, offset: 51965},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1361, col: 55, offset: 51965},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 77, offset: 51987},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1365, col: 1, offset: 52102},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 22, offset: 52123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1365, col: 22, offset: 52123},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 41, offset: 52142},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 53, offset: 52154},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1367, col: 1, offset: 52175},
			expr: &actionExpr{
				pos: position{line: 1367, col: 21, offset: 52195},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1367, col: 21, offset: 52195},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1367, col: 21, offset: 52195},
							expr: &ruleRefExpr{
								pos:  position{line: 1367, col: 22, offset: 52196},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 42, offset: 52216},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1367, col: 51, offset: 52225},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1372, col: 1, offset: 52287},
			expr: &actionExpr{
				pos: position{line: 1372, col: 24, offset: 52310},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1372, col: 24, offset: 52310},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1372, col: 30, offset: 52316},
						expr: &ruleRefExpr{
							pos:  position{line: 1372, col: 31, offset: 52317},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1376, col: 1, offset: 52407},
			expr: &actionExpr{
				pos: position{line: 1376, col: 28, offset: 52434},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 28, offset: 52434},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1376, col: 28, offset: 52434},
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 29, offset: 52435},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1376, col: 49, offset: 52455},
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 50, offset: 52456},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 60, offset: 52466},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1376, col: 66, offset: 52472},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1376, col: 66, offset: 52472},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1376, col: 66, offset: 52472},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1376, col: 75, offset: 52481},
												expr: &ruleRefExpr{
													pos:  position{line: 1376, col: 76, offset: 52482},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1376, col: 109, offset: 52515},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1382, col: 1, offset: 52611},
			expr: &actionExpr{
				pos: position{line: 1382, col: 35, offset: 52645},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 35, offset: 52645},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1382, col: 35, offset: 52645},
							expr: &ruleRefExpr{
								pos:  position{line: 1382, col: 36, offset: 52646},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1382, col: 40, offset: 52650},
							expr: &ruleRefExpr{
								pos:  position{line: 1382, col: 41, offset: 52651},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 5, offset: 52666},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1383, col: 14, offset: 52675},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1383, col: 14, offset: 52675},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 11, offset: 52693},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 11, offset: 52716},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 11, offset: 52732},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 11, offset: 52755},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 11, offset: 52781},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 11, offset: 52803},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 11, offset: 52829},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1391, col: 11, offset: 52856},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1392, col: 11, offset: 52897},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 11, offset: 52924},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 11, offset: 52944},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1401, col: 1, offset: 53176},
			expr: &seqExpr{
				pos: position{line: 1401, col: 26, offset: 53201},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1401, col: 26, offset: 53201},
						val:        "****",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1401, col: 33, offset: 53208},
						expr: &ruleRefExpr{
							pos:  position{line: 1401, col: 33, offset: 53208},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 37, offset: 53212},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1403, col: 1, offset: 53217},
			expr: &actionExpr{
				pos: position{line: 1403, col: 17, offset: 53233},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 17, offset: 53233},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 17, offset: 53233},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1403, col: 28, offset: 53244},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 29, offset: 53245},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1403, col: 49, offset: 53265},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1403, col: 71, offset: 53287},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1403, col: 79, offset: 53295},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 80, offset: 53296},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1403, col: 104, offset: 53320},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1403, col: 104, offset: 53320},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1403, col: 128, offset: 53344},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1407, col: 1, offset: 53453},
			expr: &choiceExpr{
				pos: position{line: 1407, col: 24, offset: 53476},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1407, col: 24, offset: 53476},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 36, offset: 53488},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 52, offset: 53504},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 63, offset: 53515},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 81, offset: 53533},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1409, col: 1, offset: 53556},
			expr: &actionExpr{
				pos: position{line: 1409, col: 20, offset: 53575},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 20, offset: 53575},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1409, col: 20, offset: 53575},
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 21, offset: 53576},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 34, offset: 53589},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 43, offset: 53598},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1414, col: 1, offset: 53661},
			expr: &actionExpr{
				pos: position{line: 1414, col: 26, offset: 53686},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1414, col: 26, offset: 53686},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1414, col: 32, offset: 53692},
						expr: &ruleRefExpr{
							pos:  position{line: 1414, col: 33, offset: 53693},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1418, col: 1, offset: 53807},
			expr: &actionExpr{
				pos: position{line: 1418, col: 30, offset: 53836},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1418, col: 30, offset: 53836},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1418, col: 30, offset: 53836},
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 31, offset: 53837},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1418, col: 53, offset: 53859},
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 54, offset: 53860},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1418, col: 64, offset: 53870},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 70, offset: 53876},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1426, col: 1, offset: 54107},
			expr: &actionExpr{
				pos: position{line: 1426, col: 10, offset: 54116},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1426, col: 10, offset: 54116},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1426, col: 10, offset: 54116},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1426, col: 21, offset: 54127},
								expr: &ruleRefExpr{
									pos:  position{line: 1426, col: 22, offset: 54128},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 42, offset: 54148},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1427, col: 5, offset: 54167},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1427, col: 12, offset: 54174},
								expr: &ruleRefExpr{
									pos:  position{line: 1427, col: 13, offset: 54175},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1428, col: 5, offset: 54197},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1428, col: 11, offset: 54203},
								expr: &ruleRefExpr{
									pos:  position{line: 1428, col: 12, offset: 54204},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1429, col: 6, offset: 54221},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1429, col: 6, offset: 54221},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1429, col: 23, offset: 54238},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1433, col: 1, offset: 54353},
			expr: &seqExpr{
				pos: position{line: 1433, col: 23, offset: 54375},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1433, col: 23, offset: 54375},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1433, col: 27, offset: 54379},
						expr: &ruleRefExpr{
							pos:  position{line: 1433, col: 27, offset: 54379},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1435, col: 1, offset: 54384},
			expr: &seqExpr{
				pos: position{line: 1435, col: 19, offset: 54402},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1435, col: 19, offset: 54402},
						val:        "|===",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1435, col: 26, offset: 54409},
						expr: &ruleRefExpr{
							pos:  position{line: 1435, col: 26, offset: 54409},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 30, offset: 54413},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1438, col: 1, offset: 54481},
			expr: &actionExpr{
				pos: position{line: 1438, col: 20, offset: 54500},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 20, offset: 54500},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1438, col: 20, offset: 54500},
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 21, offset: 54501},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 36, offset: 54516},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1438, col: 42, offset: 54522},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 43, offset: 54523},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 55, offset: 54535},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 59, offset: 54539},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1442, col: 1, offset: 54607},
			expr: &actionExpr{
				pos: position{line: 1442, col: 14, offset: 54620},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 14, offset: 54620},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1442, col: 14, offset: 54620},
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 15, offset: 54621},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 30, offset: 54636},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1442, col: 36, offset: 54642},
								expr: &ruleRefExpr{
									pos:  position{line: 1442, col: 37, offset: 54643},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1442, col: 49, offset: 54655},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1442, col: 53, offset: 54659},
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 53, offset: 54659},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1446, col: 1, offset: 54728},
			expr: &actionExpr{
				pos: position{line: 1446, col: 14, offset: 54741},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 14, offset: 54741},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1446, col: 14, offset: 54741},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 33, offset: 54760},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1446, col: 42, offset: 54769},
								expr: &seqExpr{
									pos: position{line: 1446, col: 43, offset: 54770},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1446, col: 43, offset: 54770},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 44, offset: 54771},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1446, col: 63, offset: 54790},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 64, offset: 54791},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1446, col: 68, offset: 54795},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 68, offset: 54795},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1446, col: 72, offset: 54799},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1446, col: 86, offset: 54813},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 86, offset: 54813},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1453, col: 1, offset: 55059},
			expr: &litMatcher{
				pos:        position{line: 1453, col: 26, offset: 55084},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1455, col: 1, offset: 55092},
			expr: &actionExpr{
				pos: position{line: 1455, col: 17, offset: 55108},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 17, offset: 55108},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1455, col: 17, offset: 55108},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1455, col: 39, offset: 55130},
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 39, offset: 55130},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1455, col: 43, offset: 55134},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 51, offset: 55142},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1455, col: 59, offset: 55150},
								expr: &ruleRefExpr{
									pos:  position{line: 1455, col: 60, offset: 55151},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1455, col: 81, offset: 55172},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1455, col: 82, offset: 55173},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1455, col: 82, offset: 55173},
											name: "CommentBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1455, col: 104, offset: 55195},
											expr: &ruleRefExpr{
												pos:  position{line: 1455, col: 104, offset: 55195},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1455, col: 108, offset: 55199},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1455, col: 115, offset: 55206},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1459, col: 1, offset: 55312},
			expr: &actionExpr{
				pos: position{line: 1459, col: 21, offset: 55332},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 21, offset: 55332},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1459, col: 21, offset: 55332},
							expr: &choiceExpr{
								pos: position{line: 1459, col: 22, offset: 55333},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1459, col: 22, offset: 55333},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1459, col: 34, offset: 55345},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1459, col: 44, offset: 55355},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1459, col: 44, offset: 55355},
												expr: &ruleRefExpr{
													pos:  position{line: 1459, col: 45, offset: 55356},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1459, col: 67, offset: 55378},
												expr: &ruleRefExpr{
													pos:  position{line: 1459, col: 68, offset: 55379},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1459, col: 72, offset: 55383,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1459, col: 77, offset: 55388},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1463, col: 1, offset: 55428},
			expr: &actionExpr{
				pos: position{line: 1463, col: 22, offset: 55449},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 22, offset: 55449},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1463, col: 22, offset: 55449},
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 23, offset: 55450},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1463, col: 45, offset: 55472},
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 45, offset: 55472},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1463, col: 49, offset: 55476},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 54, offset: 55481},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 63, offset: 55490},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 89, offset: 55516},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1467, col: 1, offset: 55581},
			expr: &actionExpr{
				pos: position{line: 1467, col: 29, offset: 55609},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1467, col: 29, offset: 55609},
					expr: &choiceExpr{
						pos: position{line: 1467, col: 30, offset: 55610},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1467, col: 30, offset: 55610},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1467, col: 42, offset: 55622},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1467, col: 52, offset: 55632},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1467, col: 52, offset: 55632},
										expr: &ruleRefExpr{
											pos:  position{line: 1467, col: 53, offset: 55633},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1467, col: 58, offset: 55638,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1475, col: 1, offset: 55947},
			expr: &choiceExpr{
				pos: position{line: 1475, col: 17, offset: 55963},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1475, col: 17, offset: 55963},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 49, offset: 55995},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 78, offset: 56024},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1477, col: 1, offset: 56060},
			expr: &litMatcher{
				pos:        position{line: 1477, col: 26, offset: 56085},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1480, col: 1, offset: 56157},
			expr: &actionExpr{
				pos: position{line: 1480, col: 31, offset: 56187},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1480, col: 31, offset: 56187},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1480, col: 31, offset: 56187},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1480, col: 42, offset: 56198},
								expr: &ruleRefExpr{
									pos:  position{line: 1480, col: 43, offset: 56199},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 63, offset: 56219},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 70, offset: 56226},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1485, col: 1, offset: 56456},
			expr: &actionExpr{
				pos: position{line: 1486, col: 5, offset: 56496},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 5, offset: 56496},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1486, col: 5, offset: 56496},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1486, col: 16, offset: 56507},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1486, col: 16, offset: 56507},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1486, col: 16, offset: 56507},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1486, col: 19, offset: 56510},
											expr: &choiceExpr{
												pos: position{line: 1486, col: 20, offset: 56511},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1486, col: 20, offset: 56511},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1486, col: 32, offset: 56523},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1486, col: 41, offset: 56532},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1486, col: 42, offset: 56533},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1486, col: 42, offset: 56533},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1486, col: 43, offset: 56534},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1486, col: 48, offset: 56539,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1490, col: 8, offset: 56630},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 56693},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1491, col: 16, offset: 56704},
								expr: &actionExpr{
									pos: position{line: 1492, col: 9, offset: 56714},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1492, col: 9, offset: 56714},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1492, col: 9, offset: 56714},
												expr: &ruleRefExpr{
													pos:  position{line: 1492, col: 10, offset: 56715},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1493, col: 9, offset: 56734},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1493, col: 20, offset: 56745},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1493, col: 20, offset: 56745},
														expr: &choiceExpr{
															pos: position{line: 1493, col: 21, offset: 56746},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1493, col: 21, offset: 56746},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1493, col: 33, offset: 56758},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1493, col: 43, offset: 56768},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1493, col: 43, offset: 56768},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1493, col: 44, offset: 56769},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1493, col: 49, offset: 56774,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1495, col: 12, offset: 56831},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1502, col: 1, offset: 57061},
			expr: &actionExpr{
				pos: position{line: 1502, col: 39, offset: 57099},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 39, offset: 57099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1502, col: 39, offset: 57099},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1502, col: 50, offset: 57110},
								expr: &ruleRefExpr{
									pos:  position{line: 1502, col: 51, offset: 57111},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1503, col: 9, offset: 57139},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1503, col: 31, offset: 57161},
							expr: &ruleRefExpr{
								pos:  position{line: 1503, col: 31, offset: 57161},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1503, col: 35, offset: 57165},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1503, col: 43, offset: 57173},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1503, col: 50, offset: 57180},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1503, col: 92, offset: 57222},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1503, col: 93, offset: 57223},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1503, col: 93, offset: 57223},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1503, col: 115, offset: 57245},
											expr: &ruleRefExpr{
												pos:  position{line: 1503, col: 115, offset: 57245},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1503, col: 119, offset: 57249},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1503, col: 126, offset: 57256},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1508, col: 1, offset: 57415},
			expr: &actionExpr{
				pos: position{line: 1508, col: 44, offset: 57458},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1508, col: 44, offset: 57458},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1508, col: 50, offset: 57464},
						expr: &ruleRefExpr{
							pos:  position{line: 1508, col: 51, offset: 57465},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1512, col: 1, offset: 57549},
			expr: &actionExpr{
				pos: position{line: 1513, col: 5, offset: 57604},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1513, col: 5, offset: 57604},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1513, col: 5, offset: 57604},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1513, col: 11, offset: 57610},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1513, col: 11, offset: 57610},
									expr: &choiceExpr{
										pos: position{line: 1513, col: 12, offset: 57611},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1513, col: 12, offset: 57611},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1513, col: 24, offset: 57623},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1513, col: 34, offset: 57633},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1513, col: 34, offset: 57633},
														expr: &ruleRefExpr{
															pos:  position{line: 1513, col: 35, offset: 57634},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1513, col: 57, offset: 57656},
														expr: &ruleRefExpr{
															pos:  position{line: 1513, col: 58, offset: 57657},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1513, col: 62, offset: 57661,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1515, col: 8, offset: 57710},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1520, col: 1, offset: 57836},
			expr: &actionExpr{
				pos: position{line: 1521, col: 5, offset: 57874},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 5, offset: 57874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1521, col: 5, offset: 57874},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 16, offset: 57885},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 17, offset: 57886},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1522, col: 5, offset: 57910},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 5, offset: 58124},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 12, offset: 58131},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1533, col: 1, offset: 58281},
			expr: &actionExpr{
				pos: position{line: 1533, col: 16, offset: 58296},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1533, col: 16, offset: 58296},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1538, col: 1, offset: 58379},
			expr: &actionExpr{
				pos: position{line: 1538, col: 39, offset: 58417},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1538, col: 39, offset: 58417},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1538, col: 45, offset: 58423},
						expr: &ruleRefExpr{
							pos:  position{line: 1538, col: 46, offset: 58424},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1542, col: 1, offset: 58504},
			expr: &actionExpr{
				pos: position{line: 1542, col: 38, offset: 58541},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1542, col: 38, offset: 58541},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1542, col: 38, offset: 58541},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1542, col: 44, offset: 58547},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1542, col: 44, offset: 58547},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1542, col: 44, offset: 58547},
											expr: &ruleRefExpr{
												pos:  position{line: 1542, col: 46, offset: 58549},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1542, col: 57, offset: 58560},
											expr: &choiceExpr{
												pos: position{line: 1542, col: 58, offset: 58561},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1542, col: 58, offset: 58561},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1542, col: 70, offset: 58573},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1542, col: 80, offset: 58583},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1542, col: 80, offset: 58583},
																expr: &ruleRefExpr{
																	pos:  position{line: 1542, col: 81, offset: 58584},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1542, col: 86, offset: 58589,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1544, col: 4, offset: 58630},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ConceleadIndexTerm",
			pos:  position{line: 1551, col: 1, offset: 58804},
			expr: &actionExpr{
				pos: position{line: 1551, col: 23, offset: 58826},
				run: (*parser).callonConceleadIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1551, col: 23, offset: 58826},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1551, col: 23, offset: 58826},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 29, offset: 58832},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1551, col: 35, offset: 58838},
								name: "Alphanums",
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 45, offset: 58848},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1551, col: 51, offset: 58854},
								expr: &actionExpr{
									pos: position{line: 1551, col: 52, offset: 58855},
									run: (*parser).callonConceleadIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1551, col: 52, offset: 58855},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1551, col: 52, offset: 58855},
												expr: &ruleRefExpr{
													pos:  position{line: 1551, col: 52, offset: 58855},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1551, col: 56, offset: 58859},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1551, col: 60, offset: 58863},
												expr: &ruleRefExpr{
													pos:  position{line: 1551, col: 60, offset: 58863},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1551, col: 64, offset: 58867},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1551, col: 72, offset: 58875},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 9, offset: 58923},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1553, col: 15, offset: 58929},
								expr: &actionExpr{
									pos: position{line: 1553, col: 16, offset: 58930},
									run: (*parser).callonConceleadIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1553, col: 16, offset: 58930},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1553, col: 16, offset: 58930},
												expr: &ruleRefExpr{
													pos:  position{line: 1553, col: 16, offset: 58930},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1553, col: 20, offset: 58934},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1553, col: 24, offset: 58938},
												expr: &ruleRefExpr{
													pos:  position{line: 1553, col: 24, offset: 58938},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1553, col: 28, offset: 58942},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1553, col: 36, offset: 58950},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1555, col: 9, offset: 58998},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1562, col: 1, offset: 59182},
			expr: &actionExpr{
				pos: position{line: 1562, col: 14, offset: 59195},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 14, offset: 59195},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1562, col: 14, offset: 59195},
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 15, offset: 59196},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1562, col: 19, offset: 59200},
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 19, offset: 59200},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1562, col: 23, offset: 59204},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1569, col: 1, offset: 59351},
			expr: &charClassMatcher{
				pos:        position{line: 1569, col: 13, offset: 59363},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1571, col: 1, offset: 59373},
			expr: &choiceExpr{
				pos: position{line: 1571, col: 16, offset: 59388},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1571, col: 16, offset: 59388},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 22, offset: 59394},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 28, offset: 59400},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 34, offset: 59406},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 40, offset: 59412},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 46, offset: 59418},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1573, col: 1, offset: 59424},
			expr: &actionExpr{
				pos: position{line: 1573, col: 14, offset: 59437},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1573, col: 14, offset: 59437},
					expr: &charClassMatcher{
						pos:        position{line: 1573, col: 14, offset: 59437},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1577, col: 1, offset: 59483},
			expr: &litMatcher{
				pos:        position{line: 1577, col: 8, offset: 59490},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1579, col: 1, offset: 59495},
			expr: &actionExpr{
				pos: position{line: 1579, col: 15, offset: 59509},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 15, offset: 59509},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1579, col: 15, offset: 59509},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1579, col: 25, offset: 59519},
							expr: &choiceExpr{
								pos: position{line: 1579, col: 27, offset: 59521},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1579, col: 27, offset: 59521},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 32, offset: 59526},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1584, col: 1, offset: 59791},
			expr: &actionExpr{
				pos: position{line: 1584, col: 14, offset: 59804},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1584, col: 15, offset: 59805},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1584, col: 15, offset: 59805},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1584, col: 27, offset: 59817},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1584, col: 46, offset: 59836},
							expr: &actionExpr{
								pos: position{line: 1584, col: 47, offset: 59837},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1584, col: 47, offset: 59837},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1584, col: 48, offset: 59838},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1584, col: 48, offset: 59838},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 49, offset: 59839},
														name: "Newline",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 57, offset: 59847},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 58, offset: 59848},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 61, offset: 59851},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 62, offset: 59852},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 66, offset: 59856},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 67, offset: 59857},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 84, offset: 59874},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 85, offset: 59875},
														name: "LabeledListItemSeparator",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 110, offset: 59900},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 111, offset: 59901},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1584, col: 123, offset: 59913,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1584, col: 126, offset: 59916},
											expr: &ruleRefExpr{
												pos:  position{line: 1584, col: 126, offset: 59916},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1586, col: 7, offset: 60025},
							expr: &litMatcher{
								pos:        position{line: 1586, col: 7, offset: 60025},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1590, col: 1, offset: 60206},
			expr: &oneOrMoreExpr{
				pos: position{line: 1590, col: 11, offset: 60216},
				expr: &ruleRefExpr{
					pos:  position{line: 1590, col: 11, offset: 60216},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1592, col: 1, offset: 60222},
			expr: &actionExpr{
				pos: position{line: 1592, col: 17, offset: 60238},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1592, col: 17, offset: 60238},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1592, col: 26, offset: 60247},
						expr: &choiceExpr{
							pos: position{line: 1592, col: 27, offset: 60248},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1592, col: 27, offset: 60248},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1592, col: 38, offset: 60259},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1596, col: 1, offset: 60351},
			expr: &actionExpr{
				pos: position{line: 1596, col: 25, offset: 60375},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1596, col: 25, offset: 60375},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1596, col: 34, offset: 60384},
						expr: &seqExpr{
							pos: position{line: 1596, col: 35, offset: 60385},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1596, col: 35, offset: 60385},
									expr: &ruleRefExpr{
										pos:  position{line: 1596, col: 36, offset: 60386},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1596, col: 40, offset: 60390},
									expr: &ruleRefExpr{
										pos:  position{line: 1596, col: 41, offset: 60391},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1596, col: 44, offset: 60394},
									expr: &litMatcher{
										pos:        position{line: 1596, col: 45, offset: 60395},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1596, col: 49, offset: 60399,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1600, col: 1, offset: 60463},
			expr: &actionExpr{
				pos: position{line: 1600, col: 13, offset: 60475},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1600, col: 13, offset: 60475},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1600, col: 23, offset: 60485},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1600, col: 23, offset: 60485},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1600, col: 34, offset: 60496},
								expr: &choiceExpr{
									pos: position{line: 1600, col: 35, offset: 60497},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1600, col: 35, offset: 60497},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1600, col: 46, offset: 60508},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1604, col: 1, offset: 60601},
			expr: &oneOrMoreExpr{
				pos: position{line: 1604, col: 13, offset: 60613},
				expr: &choiceExpr{
					pos: position{line: 1604, col: 14, offset: 60614},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1604, col: 14, offset: 60614},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1604, col: 99, offset: 60699},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1604, col: 105, offset: 60705},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1606, col: 1, offset: 60826},
			expr: &actionExpr{
				pos: position{line: 1606, col: 21, offset: 60846},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1606, col: 21, offset: 60846},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1606, col: 31, offset: 60856},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1606, col: 31, offset: 60856},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1606, col: 42, offset: 60867},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1610, col: 1, offset: 60946},
			expr: &oneOrMoreExpr{
				pos: position{line: 1610, col: 22, offset: 60967},
				expr: &choiceExpr{
					pos: position{line: 1610, col: 23, offset: 60968},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1610, col: 23, offset: 60968},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1610, col: 110, offset: 61055},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1610, col: 116, offset: 61061},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1612, col: 1, offset: 61110},
			expr: &actionExpr{
				pos: position{line: 1612, col: 8, offset: 61117},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1612, col: 8, offset: 61117},
					expr: &choiceExpr{
						pos: position{line: 1612, col: 9, offset: 61118},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1612, col: 9, offset: 61118},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1612, col: 22, offset: 61131},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1612, col: 22, offset: 61131},
										expr: &ruleRefExpr{
											pos:  position{line: 1612, col: 23, offset: 61132},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1612, col: 31, offset: 61140},
										expr: &ruleRefExpr{
											pos:  position{line: 1612, col: 32, offset: 61141},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1612, col: 35, offset: 61144},
										expr: &litMatcher{
											pos:        position{line: 1612, col: 36, offset: 61145},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1612, col: 40, offset: 61149},
										expr: &litMatcher{
											pos:        position{line: 1612, col: 41, offset: 61150},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1612, col: 46, offset: 61155,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1616, col: 1, offset: 61196},
			expr: &choiceExpr{
				pos: position{line: 1616, col: 15, offset: 61210},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1616, col: 15, offset: 61210},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 27, offset: 61222},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 40, offset: 61235},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 51, offset: 61246},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 62, offset: 61257},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1618, col: 1, offset: 61268},
			expr: &actionExpr{
				pos: position{line: 1618, col: 7, offset: 61274},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1618, col: 7, offset: 61274},
					expr: &choiceExpr{
						pos: position{line: 1618, col: 8, offset: 61275},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1618, col: 8, offset: 61275},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1618, col: 21, offset: 61288},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1618, col: 21, offset: 61288},
										expr: &ruleRefExpr{
											pos:  position{line: 1618, col: 22, offset: 61289},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 30, offset: 61297},
										expr: &ruleRefExpr{
											pos:  position{line: 1618, col: 31, offset: 61298},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 34, offset: 61301},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 35, offset: 61302},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 39, offset: 61306},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 40, offset: 61307},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 44, offset: 61311},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 45, offset: 61312},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 50, offset: 61317},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 51, offset: 61318},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 56, offset: 61323},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 57, offset: 61324},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1618, col: 62, offset: 61329,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1622, col: 1, offset: 61370},
			expr: &actionExpr{
				pos: position{line: 1622, col: 10, offset: 61379},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1622, col: 10, offset: 61379},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1626, col: 1, offset: 61421},
			expr: &actionExpr{
				pos: position{line: 1626, col: 11, offset: 61431},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1626, col: 11, offset: 61431},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1626, col: 11, offset: 61431},
							expr: &litMatcher{
								pos:        position{line: 1626, col: 11, offset: 61431},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1626, col: 16, offset: 61436},
							expr: &ruleRefExpr{
								pos:  position{line: 1626, col: 16, offset: 61436},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1630, col: 1, offset: 61488},
			expr: &choiceExpr{
				pos: position{line: 1630, col: 7, offset: 61494},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1630, col: 7, offset: 61494},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1630, col: 13, offset: 61500},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1630, col: 13, offset: 61500},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1634, col: 1, offset: 61541},
			expr: &choiceExpr{
				pos: position{line: 1634, col: 12, offset: 61552},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1634, col: 12, offset: 61552},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 21, offset: 61561},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 28, offset: 61568},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1636, col: 1, offset: 61574},
			expr: &notExpr{
				pos: position{line: 1636, col: 8, offset: 61581},
				expr: &anyMatcher{
					line: 1636, col: 9, offset: 61582,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1638, col: 1, offset: 61585},
			expr: &choiceExpr{
				pos: position{line: 1638, col: 8, offset: 61592},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1638, col: 8, offset: 61592},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 18, offset: 61602},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onConceleadIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm8(stack["content"])
}

func (c *current) onConceleadIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm19(stack["content"])
}

func (c *current) onConceleadIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConceleadIndexTerm(term1, term2, term3)

}

func (p *parser) callonConceleadIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
