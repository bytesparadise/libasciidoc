// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1536},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1561},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1588},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1618},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1645},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1681},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1706},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1739},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1766},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1804},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1830},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1862},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1875},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1921},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1928},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1929},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1968},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 2005},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 2005},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 2005},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 2006},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2016},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 12, offset: 2023},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 12, offset: 2023},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2049},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2102},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2127},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2153},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2175},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2200},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2227},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2257},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2285},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2321},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2346},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2379},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2406},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2444},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2470},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2512},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2534},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2541},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2542},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2565},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2586},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2586},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2586},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2587},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2597},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2604},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2604},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2616},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2769},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2784},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2804},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2823},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2823},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2823},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2844},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2852},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2853},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2878},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2962},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2987},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2987},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2993},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2993},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 3000},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 3007},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 3033},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 3033},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 3034},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 3035},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 3035},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 3036},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 3057,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3230},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3248},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3248},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3252},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3252},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3259},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3266},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3281},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3285},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3285},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3303},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3316},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3317},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3317},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3337},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3361},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3370},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3370},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3398},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3399},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 114, col: 10, offset: 3399},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 30, offset: 3419},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3443},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3453},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3453},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3558},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3577},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3605},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3637},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3666},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3666},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3666},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3666},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3673},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3674},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3678},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3687},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3687},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3704},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3778},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3810},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3810},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3810},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3810},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3817},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3828},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3836},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3852},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3935},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3953},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3953},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3953},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3953},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3960},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3970},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3990},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3996},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3997},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 4019},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 4019},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 4026},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 4026},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 4031},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 4031},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4181},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4203},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4203},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4203},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4254},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4277},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4277},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4277},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4281},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4288},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4289},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4289},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4338},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4505},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4525},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4525},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4525},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4525},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4532},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4533},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4537},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4557},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4558},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4558},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4558},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4569},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4593},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4593},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4598},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4606},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4607},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4630},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4630},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4635},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4645},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4646},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4765},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4765},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4765},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4774},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4796},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4796},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4801},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4811},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4812},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4923},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 5058},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 5084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 5084},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 5084},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 5084},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 5089},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 5096},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 5096},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 5146},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 5146},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 5146},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 5146},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 5152},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 5159},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 5159},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 5170},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 5170},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 5177},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 5178},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5222},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5246},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5246},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5246},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5296},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5322},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5322},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5322},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5482},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5506},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5506},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5510},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5516},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5531},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5545},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5551},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5552},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5553},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5553},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5553},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5560},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5567},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5643},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5643},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5650},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5914},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5914},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5914},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5924},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5925},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5977},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 6006},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 6006},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 6006},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 6055},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 6073},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 6073},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 6073},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 6073},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 6078},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 6084},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 6099},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 6103},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 6103},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 6110},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 6172},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 6172},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 6172},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 6176},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 6182},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 6197},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 6202},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 6202},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 6209},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6272},
			expr: &actionExpr{
				pos: position{line: 197, col: 26, offset: 6297},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 197, col: 26, offset: 6297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 197, col: 26, offset: 6297},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 30, offset: 6301},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 36, offset: 6307},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 197, col: 51, offset: 6322},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 201, col: 1, offset: 6392},
			expr: &actionExpr{
				pos: position{line: 201, col: 15, offset: 6406},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 15, offset: 6406},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 15, offset: 6406},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 21, offset: 6412},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 22, offset: 6413},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 41, offset: 6432},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 41, offset: 6432},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6506},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6526},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6526},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6526},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6528},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6528},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6534},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6540},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6617},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6623},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6623},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6645},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6670},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6694},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6723},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6752},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6780},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6808},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6846},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6875},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6913},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 221, col: 1, offset: 7101},
			expr: &choiceExpr{
				pos: position{line: 221, col: 24, offset: 7124},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 24, offset: 7124},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 42, offset: 7142},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 223, col: 1, offset: 7161},
			expr: &choiceExpr{
				pos: position{line: 223, col: 14, offset: 7174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 223, col: 14, offset: 7174},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 223, col: 14, offset: 7174},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 14, offset: 7174},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 19, offset: 7179},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7183},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 27, offset: 7187},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 32, offset: 7192},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 32, offset: 7192},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 39, offset: 7199},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 7254},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 225, col: 5, offset: 7254},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 225, col: 5, offset: 7254},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 225, col: 10, offset: 7259},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 14, offset: 7263},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 225, col: 18, offset: 7267},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 23, offset: 7272},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 23, offset: 7272},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 225, col: 30, offset: 7279},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 229, col: 1, offset: 7335},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7354},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7354},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7354},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 25, offset: 7359},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 29, offset: 7363},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 33, offset: 7367},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 38, offset: 7372},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 38, offset: 7372},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 235, col: 1, offset: 7655},
			expr: &actionExpr{
				pos: position{line: 235, col: 17, offset: 7671},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 235, col: 17, offset: 7671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 17, offset: 7671},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 21, offset: 7675},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 28, offset: 7682},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 49, offset: 7703},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 239, col: 1, offset: 7765},
			expr: &actionExpr{
				pos: position{line: 239, col: 24, offset: 7788},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 239, col: 24, offset: 7788},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 239, col: 24, offset: 7788},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 32, offset: 7796},
							expr: &charClassMatcher{
								pos:        position{line: 239, col: 32, offset: 7796},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 245, col: 1, offset: 8029},
			expr: &actionExpr{
				pos: position{line: 245, col: 16, offset: 8044},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 245, col: 16, offset: 8044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 16, offset: 8044},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 21, offset: 8049},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 245, col: 27, offset: 8055},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 245, col: 27, offset: 8055},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 245, col: 27, offset: 8055},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 245, col: 36, offset: 8064},
											expr: &charClassMatcher{
												pos:        position{line: 245, col: 36, offset: 8064},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 4, offset: 8113},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 8, offset: 8117},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 8, offset: 8117},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 15, offset: 8124},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 251, col: 1, offset: 8184},
			expr: &actionExpr{
				pos: position{line: 251, col: 21, offset: 8204},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 251, col: 21, offset: 8204},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 21, offset: 8204},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 33, offset: 8216},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 33, offset: 8216},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 40, offset: 8223},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 255, col: 1, offset: 8279},
			expr: &actionExpr{
				pos: position{line: 255, col: 30, offset: 8308},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 255, col: 30, offset: 8308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 30, offset: 8308},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 39, offset: 8317},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 39, offset: 8317},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 46, offset: 8324},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 260, col: 1, offset: 8470},
			expr: &actionExpr{
				pos: position{line: 260, col: 30, offset: 8499},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 260, col: 30, offset: 8499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 30, offset: 8499},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 34, offset: 8503},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 37, offset: 8506},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 53, offset: 8522},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 57, offset: 8526},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 57, offset: 8526},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 64, offset: 8533},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 265, col: 1, offset: 8693},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 8713},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 8713},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 8713},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8729},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 14, offset: 8738},
								expr: &actionExpr{
									pos: position{line: 266, col: 15, offset: 8739},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 266, col: 15, offset: 8739},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 266, col: 15, offset: 8739},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 19, offset: 8743},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 266, col: 24, offset: 8748},
													expr: &ruleRefExpr{
														pos:  position{line: 266, col: 25, offset: 8749},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 5, offset: 8805},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 12, offset: 8812},
								expr: &actionExpr{
									pos: position{line: 267, col: 13, offset: 8813},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 267, col: 13, offset: 8813},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 267, col: 13, offset: 8813},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 17, offset: 8817},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 267, col: 22, offset: 8822},
													expr: &ruleRefExpr{
														pos:  position{line: 267, col: 23, offset: 8823},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 5, offset: 8871},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 9, offset: 8875},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 9, offset: 8875},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 16, offset: 8882},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 273, col: 1, offset: 9038},
			expr: &actionExpr{
				pos: position{line: 273, col: 19, offset: 9056},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 273, col: 19, offset: 9056},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 19, offset: 9056},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 23, offset: 9060},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 273, col: 34, offset: 9071},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 35, offset: 9072},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 54, offset: 9091},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 58, offset: 9095},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 58, offset: 9095},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 65, offset: 9102},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 277, col: 1, offset: 9178},
			expr: &choiceExpr{
				pos: position{line: 277, col: 21, offset: 9198},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 21, offset: 9198},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 49, offset: 9226},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 279, col: 1, offset: 9258},
			expr: &actionExpr{
				pos: position{line: 279, col: 30, offset: 9287},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 279, col: 30, offset: 9287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 30, offset: 9287},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 35, offset: 9292},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 49, offset: 9306},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 53, offset: 9310},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 59, offset: 9316},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 60, offset: 9317},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 77, offset: 9334},
							expr: &litMatcher{
								pos:        position{line: 279, col: 77, offset: 9334},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 82, offset: 9339},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 82, offset: 9339},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 283, col: 1, offset: 9442},
			expr: &actionExpr{
				pos: position{line: 283, col: 33, offset: 9474},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 283, col: 33, offset: 9474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 33, offset: 9474},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 38, offset: 9479},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 52, offset: 9493},
							expr: &litMatcher{
								pos:        position{line: 283, col: 52, offset: 9493},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 57, offset: 9498},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 57, offset: 9498},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 287, col: 1, offset: 9590},
			expr: &actionExpr{
				pos: position{line: 287, col: 17, offset: 9606},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 287, col: 17, offset: 9606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 287, col: 17, offset: 9606},
							expr: &litMatcher{
								pos:        position{line: 287, col: 18, offset: 9607},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 26, offset: 9615},
							expr: &litMatcher{
								pos:        position{line: 287, col: 27, offset: 9616},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 35, offset: 9624},
							expr: &litMatcher{
								pos:        position{line: 287, col: 36, offset: 9625},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 46, offset: 9635},
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 48, offset: 9637},
								expr: &ruleRefExpr{
									pos:  position{line: 287, col: 48, offset: 9637},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 56, offset: 9645},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 61, offset: 9650},
								expr: &charClassMatcher{
									pos:        position{line: 287, col: 61, offset: 9650},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 75, offset: 9664},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 75, offset: 9664},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 291, col: 1, offset: 9711},
			expr: &actionExpr{
				pos: position{line: 291, col: 19, offset: 9729},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 19, offset: 9729},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 291, col: 26, offset: 9736},
						expr: &charClassMatcher{
							pos:        position{line: 291, col: 26, offset: 9736},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 295, col: 1, offset: 9791},
			expr: &actionExpr{
				pos: position{line: 295, col: 29, offset: 9819},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 295, col: 29, offset: 9819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 295, col: 29, offset: 9819},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 295, col: 36, offset: 9826},
								expr: &charClassMatcher{
									pos:        position{line: 295, col: 36, offset: 9826},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 295, col: 50, offset: 9840},
							expr: &litMatcher{
								pos:        position{line: 295, col: 51, offset: 9841},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 299, col: 1, offset: 10011},
			expr: &actionExpr{
				pos: position{line: 299, col: 21, offset: 10031},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 299, col: 21, offset: 10031},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 21, offset: 10031},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 36, offset: 10046},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 36, offset: 10046},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 43, offset: 10053},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 303, col: 1, offset: 10123},
			expr: &actionExpr{
				pos: position{line: 303, col: 20, offset: 10142},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 303, col: 20, offset: 10142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 20, offset: 10142},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 29, offset: 10151},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 29, offset: 10151},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 36, offset: 10158},
							expr: &litMatcher{
								pos:        position{line: 303, col: 36, offset: 10158},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 41, offset: 10163},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 48, offset: 10170},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 49, offset: 10171},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 66, offset: 10188},
							expr: &litMatcher{
								pos:        position{line: 303, col: 66, offset: 10188},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 71, offset: 10193},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 77, offset: 10199},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 78, offset: 10200},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 95, offset: 10217},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 99, offset: 10221},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 99, offset: 10221},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 106, offset: 10228},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 307, col: 1, offset: 10301},
			expr: &actionExpr{
				pos: position{line: 307, col: 20, offset: 10320},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 307, col: 20, offset: 10320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 307, col: 20, offset: 10320},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 29, offset: 10329},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 29, offset: 10329},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 36, offset: 10336},
							expr: &litMatcher{
								pos:        position{line: 307, col: 36, offset: 10336},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 41, offset: 10341},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 48, offset: 10348},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 49, offset: 10349},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 66, offset: 10366},
							expr: &litMatcher{
								pos:        position{line: 307, col: 66, offset: 10366},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 71, offset: 10371},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 77, offset: 10377},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 78, offset: 10378},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 95, offset: 10395},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 99, offset: 10399},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 99, offset: 10399},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 106, offset: 10406},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 311, col: 1, offset: 10497},
			expr: &actionExpr{
				pos: position{line: 311, col: 19, offset: 10515},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 311, col: 20, offset: 10516},
					expr: &charClassMatcher{
						pos:        position{line: 311, col: 20, offset: 10516},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 315, col: 1, offset: 10569},
			expr: &actionExpr{
				pos: position{line: 315, col: 21, offset: 10589},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 315, col: 21, offset: 10589},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 21, offset: 10589},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 25, offset: 10593},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 315, col: 31, offset: 10599},
								expr: &ruleRefExpr{
									pos:  position{line: 315, col: 32, offset: 10600},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 51, offset: 10619},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 328, col: 1, offset: 11100},
			expr: &actionExpr{
				pos: position{line: 328, col: 20, offset: 11119},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 328, col: 20, offset: 11119},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 328, col: 27, offset: 11126},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 328, col: 27, offset: 11126},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 44, offset: 11143},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 335, col: 1, offset: 11412},
			expr: &actionExpr{
				pos: position{line: 335, col: 19, offset: 11430},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 335, col: 19, offset: 11430},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 335, col: 19, offset: 11430},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 23, offset: 11434},
							label: "role",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 28, offset: 11439},
								expr: &ruleRefExpr{
									pos:  position{line: 335, col: 28, offset: 11439},
									name: "QuotedTextRoleWord",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 48, offset: 11459},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 339, col: 1, offset: 11519},
			expr: &actionExpr{
				pos: position{line: 339, col: 23, offset: 11541},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &seqExpr{
					pos: position{line: 339, col: 23, offset: 11541},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 339, col: 23, offset: 11541},
							expr: &charClassMatcher{
								pos:        position{line: 339, col: 24, offset: 11542},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 29, offset: 11547},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 339, col: 35, offset: 11553},
								run: (*parser).callonQuotedTextRoleWord6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 339, col: 35, offset: 11553},
									expr: &charClassMatcher{
										pos:        position{line: 339, col: 35, offset: 11553},
										val:        "[^\\]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 348, col: 1, offset: 11869},
			expr: &actionExpr{
				pos: position{line: 348, col: 24, offset: 11892},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 348, col: 24, offset: 11892},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 24, offset: 11892},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 28, offset: 11896},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 348, col: 34, offset: 11902},
								expr: &choiceExpr{
									pos: position{line: 348, col: 36, offset: 11904},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 348, col: 36, offset: 11904},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 348, col: 58, offset: 11926},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 348, col: 79, offset: 11947},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 352, col: 1, offset: 11982},
			expr: &actionExpr{
				pos: position{line: 352, col: 24, offset: 12005},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 352, col: 24, offset: 12005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 24, offset: 12005},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 28, offset: 12009},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 352, col: 34, offset: 12015},
								run: (*parser).callonQuotedTextShortRole5,
								expr: &oneOrMoreExpr{
									pos: position{line: 352, col: 34, offset: 12015},
									expr: &charClassMatcher{
										pos:        position{line: 352, col: 34, offset: 12015},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 358, col: 1, offset: 12128},
			expr: &actionExpr{
				pos: position{line: 358, col: 22, offset: 12149},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 358, col: 22, offset: 12149},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 22, offset: 12149},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 26, offset: 12153},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 358, col: 30, offset: 12157},
								run: (*parser).callonQuotedTextShortID5,
								expr: &oneOrMoreExpr{
									pos: position{line: 358, col: 30, offset: 12157},
									expr: &charClassMatcher{
										pos:        position{line: 358, col: 30, offset: 12157},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 364, col: 1, offset: 12264},
			expr: &actionExpr{
				pos: position{line: 364, col: 25, offset: 12288},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 364, col: 25, offset: 12288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 364, col: 25, offset: 12288},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 364, col: 36, offset: 12299},
								expr: &ruleRefExpr{
									pos:  position{line: 364, col: 37, offset: 12300},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 364, col: 56, offset: 12319},
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 56, offset: 12319},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 364, col: 67, offset: 12330},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 372, col: 1, offset: 12597},
			expr: &choiceExpr{
				pos: position{line: 372, col: 17, offset: 12613},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 372, col: 17, offset: 12613},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 38, offset: 12634},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 374, col: 1, offset: 12656},
			expr: &actionExpr{
				pos: position{line: 374, col: 23, offset: 12678},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 374, col: 23, offset: 12678},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 374, col: 23, offset: 12678},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 46, offset: 12701},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 55, offset: 12710},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 82, offset: 12737},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 378, col: 1, offset: 12845},
			expr: &actionExpr{
				pos: position{line: 378, col: 31, offset: 12875},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 378, col: 31, offset: 12875},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 378, col: 41, offset: 12885},
						expr: &ruleRefExpr{
							pos:  position{line: 378, col: 41, offset: 12885},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 382, col: 1, offset: 12967},
			expr: &seqExpr{
				pos: position{line: 382, col: 27, offset: 12993},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 382, col: 27, offset: 12993},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 382, col: 32, offset: 12998},
						expr: &charClassMatcher{
							pos:        position{line: 382, col: 33, offset: 12999},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 384, col: 1, offset: 13012},
			expr: &litMatcher{
				pos:        position{line: 384, col: 25, offset: 13036},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 387, col: 1, offset: 13127},
			expr: &actionExpr{
				pos: position{line: 387, col: 30, offset: 13156},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 387, col: 30, offset: 13156},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 388, col: 9, offset: 13175},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 388, col: 9, offset: 13175},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 388, col: 9, offset: 13175},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 388, col: 19, offset: 13185},
										expr: &ruleRefExpr{
											pos:  position{line: 388, col: 20, offset: 13186},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 389, col: 11, offset: 13243},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 389, col: 11, offset: 13243},
										expr: &ruleRefExpr{
											pos:  position{line: 389, col: 11, offset: 13243},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 389, col: 18, offset: 13250},
										expr: &ruleRefExpr{
											pos:  position{line: 389, col: 19, offset: 13251},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 390, col: 11, offset: 13283},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 390, col: 11, offset: 13283},
										expr: &litMatcher{
											pos:        position{line: 390, col: 12, offset: 13284},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 390, col: 16, offset: 13288},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 13337},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 392, col: 11, offset: 13359},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 393, col: 11, offset: 13382},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 394, col: 11, offset: 13408},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 395, col: 11, offset: 13437},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 11, offset: 13453},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 397, col: 11, offset: 13486},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 398, col: 11, offset: 13506},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 399, col: 11, offset: 13528},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 400, col: 11, offset: 13550},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 401, col: 11, offset: 13575},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 402, col: 11, offset: 13602},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 402, col: 11, offset: 13602},
										expr: &litMatcher{
											pos:        position{line: 402, col: 12, offset: 13603},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 17, offset: 13608},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 403, col: 11, offset: 13633},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 404, col: 11, offset: 13663},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 405, col: 11, offset: 13692},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 409, col: 1, offset: 13762},
			expr: &choiceExpr{
				pos: position{line: 409, col: 41, offset: 13802},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 409, col: 41, offset: 13802},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 409, col: 55, offset: 13816},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 409, col: 55, offset: 13816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 409, col: 55, offset: 13816},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 409, col: 59, offset: 13820},
									expr: &litMatcher{
										pos:        position{line: 409, col: 60, offset: 13821},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 413, col: 1, offset: 13884},
			expr: &actionExpr{
				pos: position{line: 413, col: 23, offset: 13906},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 413, col: 23, offset: 13906},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 413, col: 23, offset: 13906},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 46, offset: 13929},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 55, offset: 13938},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 413, col: 82, offset: 13965},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 417, col: 1, offset: 14073},
			expr: &actionExpr{
				pos: position{line: 417, col: 31, offset: 14103},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 417, col: 31, offset: 14103},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 417, col: 41, offset: 14113},
						expr: &ruleRefExpr{
							pos:  position{line: 417, col: 41, offset: 14113},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 422, col: 1, offset: 14278},
			expr: &actionExpr{
				pos: position{line: 422, col: 30, offset: 14307},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 422, col: 30, offset: 14307},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 423, col: 9, offset: 14326},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 423, col: 9, offset: 14326},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 423, col: 9, offset: 14326},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 423, col: 19, offset: 14336},
										expr: &ruleRefExpr{
											pos:  position{line: 423, col: 20, offset: 14337},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 424, col: 11, offset: 14394},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 424, col: 11, offset: 14394},
										expr: &ruleRefExpr{
											pos:  position{line: 424, col: 11, offset: 14394},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 424, col: 18, offset: 14401},
										expr: &ruleRefExpr{
											pos:  position{line: 424, col: 19, offset: 14402},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 14434},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 426, col: 11, offset: 14452},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 14474},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 428, col: 11, offset: 14497},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 429, col: 11, offset: 14523},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 14552},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 431, col: 11, offset: 14568},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 11, offset: 14601},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 433, col: 11, offset: 14621},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 434, col: 11, offset: 14643},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 435, col: 11, offset: 14665},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 436, col: 11, offset: 14690},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 437, col: 11, offset: 14717},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 437, col: 11, offset: 14717},
										expr: &litMatcher{
											pos:        position{line: 437, col: 12, offset: 14718},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 437, col: 18, offset: 14724},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 438, col: 11, offset: 14749},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 439, col: 11, offset: 14779},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 440, col: 11, offset: 14808},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 444, col: 1, offset: 14886},
			expr: &seqExpr{
				pos: position{line: 444, col: 27, offset: 14912},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 444, col: 27, offset: 14912},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 444, col: 33, offset: 14918},
						expr: &charClassMatcher{
							pos:        position{line: 444, col: 34, offset: 14919},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 446, col: 1, offset: 14932},
			expr: &litMatcher{
				pos:        position{line: 446, col: 25, offset: 14956},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 448, col: 1, offset: 14965},
			expr: &actionExpr{
				pos: position{line: 448, col: 41, offset: 15005},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 448, col: 42, offset: 15006},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 448, col: 42, offset: 15006},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 448, col: 56, offset: 15020},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 448, col: 56, offset: 15020},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 448, col: 60, offset: 15024},
									expr: &litMatcher{
										pos:        position{line: 448, col: 61, offset: 15025},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 455, col: 1, offset: 15197},
			expr: &actionExpr{
				pos: position{line: 455, col: 12, offset: 15208},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 455, col: 12, offset: 15208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 455, col: 12, offset: 15208},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 455, col: 23, offset: 15219},
								expr: &ruleRefExpr{
									pos:  position{line: 455, col: 24, offset: 15220},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 456, col: 5, offset: 15238},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 456, col: 12, offset: 15245},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 456, col: 12, offset: 15245},
									expr: &litMatcher{
										pos:        position{line: 456, col: 13, offset: 15246},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 460, col: 5, offset: 15341},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 464, col: 5, offset: 15497},
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 5, offset: 15497},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 12, offset: 15504},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 464, col: 19, offset: 15511},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 464, col: 34, offset: 15526},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 464, col: 38, offset: 15530},
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 38, offset: 15530},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 464, col: 56, offset: 15548},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 468, col: 1, offset: 15658},
			expr: &actionExpr{
				pos: position{line: 468, col: 18, offset: 15675},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 468, col: 18, offset: 15675},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 468, col: 27, offset: 15684},
						expr: &seqExpr{
							pos: position{line: 468, col: 28, offset: 15685},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 468, col: 28, offset: 15685},
									expr: &ruleRefExpr{
										pos:  position{line: 468, col: 29, offset: 15686},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 468, col: 37, offset: 15694},
									expr: &ruleRefExpr{
										pos:  position{line: 468, col: 38, offset: 15695},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 468, col: 54, offset: 15711},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 472, col: 1, offset: 15836},
			expr: &actionExpr{
				pos: position{line: 472, col: 17, offset: 15852},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 472, col: 17, offset: 15852},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 472, col: 26, offset: 15861},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 472, col: 26, offset: 15861},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 15877},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 474, col: 11, offset: 15923},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 11, offset: 15923},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 15942},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 15968},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 15997},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 16019},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 479, col: 11, offset: 16042},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 480, col: 11, offset: 16058},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 481, col: 11, offset: 16084},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 482, col: 11, offset: 16108},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 483, col: 11, offset: 16130},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 484, col: 11, offset: 16148},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 485, col: 11, offset: 16181},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 486, col: 11, offset: 16210},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 493, col: 1, offset: 16368},
			expr: &seqExpr{
				pos: position{line: 493, col: 31, offset: 16398},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 493, col: 31, offset: 16398},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 493, col: 41, offset: 16408},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 498, col: 1, offset: 16524},
			expr: &actionExpr{
				pos: position{line: 498, col: 19, offset: 16542},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 498, col: 19, offset: 16542},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 498, col: 19, offset: 16542},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 25, offset: 16548},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 498, col: 40, offset: 16563},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 45, offset: 16568},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 52, offset: 16575},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 68, offset: 16591},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 75, offset: 16598},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 502, col: 1, offset: 16717},
			expr: &actionExpr{
				pos: position{line: 502, col: 20, offset: 16736},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 502, col: 20, offset: 16736},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 502, col: 20, offset: 16736},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 26, offset: 16742},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 502, col: 41, offset: 16757},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 502, col: 45, offset: 16761},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 52, offset: 16768},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 502, col: 68, offset: 16784},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 75, offset: 16791},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 506, col: 1, offset: 16911},
			expr: &actionExpr{
				pos: position{line: 506, col: 18, offset: 16928},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 506, col: 19, offset: 16929},
					expr: &charClassMatcher{
						pos:        position{line: 506, col: 19, offset: 16929},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 510, col: 1, offset: 16982},
			expr: &actionExpr{
				pos: position{line: 510, col: 19, offset: 17000},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 510, col: 19, offset: 17000},
					expr: &charClassMatcher{
						pos:        position{line: 510, col: 19, offset: 17000},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 514, col: 1, offset: 17052},
			expr: &actionExpr{
				pos: position{line: 514, col: 24, offset: 17075},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 514, col: 24, offset: 17075},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 514, col: 24, offset: 17075},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 514, col: 28, offset: 17079},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 514, col: 34, offset: 17085},
								expr: &ruleRefExpr{
									pos:  position{line: 514, col: 35, offset: 17086},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 514, col: 54, offset: 17105},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 521, col: 1, offset: 17294},
			expr: &actionExpr{
				pos: position{line: 521, col: 18, offset: 17311},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 521, col: 18, offset: 17311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 521, col: 18, offset: 17311},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 521, col: 24, offset: 17317},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 521, col: 24, offset: 17317},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 521, col: 24, offset: 17317},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 521, col: 36, offset: 17329},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 521, col: 42, offset: 17335},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 521, col: 56, offset: 17349},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 521, col: 74, offset: 17367},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 523, col: 8, offset: 17516},
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 8, offset: 17516},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 15, offset: 17523},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 527, col: 1, offset: 17579},
			expr: &actionExpr{
				pos: position{line: 527, col: 26, offset: 17604},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 527, col: 26, offset: 17604},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 527, col: 26, offset: 17604},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 30, offset: 17608},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 527, col: 36, offset: 17614},
								expr: &choiceExpr{
									pos: position{line: 527, col: 37, offset: 17615},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 527, col: 37, offset: 17615},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 527, col: 59, offset: 17637},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 527, col: 80, offset: 17658},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 527, col: 99, offset: 17677},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 531, col: 1, offset: 17753},
			expr: &actionExpr{
				pos: position{line: 531, col: 24, offset: 17776},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 531, col: 24, offset: 17776},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 531, col: 24, offset: 17776},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 531, col: 33, offset: 17785},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 531, col: 40, offset: 17792},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 531, col: 66, offset: 17818},
							expr: &litMatcher{
								pos:        position{line: 531, col: 66, offset: 17818},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 535, col: 1, offset: 17881},
			expr: &actionExpr{
				pos: position{line: 535, col: 29, offset: 17909},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 535, col: 29, offset: 17909},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 535, col: 29, offset: 17909},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 535, col: 36, offset: 17916},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 535, col: 36, offset: 17916},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 11, offset: 18034},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 18071},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 11, offset: 18098},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 11, offset: 18131},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 540, col: 11, offset: 18164},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 11, offset: 18192},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 541, col: 31, offset: 18212},
							expr: &ruleRefExpr{
								pos:  position{line: 541, col: 31, offset: 18212},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 541, col: 39, offset: 18220},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 541, col: 39, offset: 18220},
									expr: &litMatcher{
										pos:        position{line: 541, col: 40, offset: 18221},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 541, col: 46, offset: 18227},
									expr: &litMatcher{
										pos:        position{line: 541, col: 47, offset: 18228},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 545, col: 1, offset: 18264},
			expr: &actionExpr{
				pos: position{line: 545, col: 23, offset: 18286},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 545, col: 23, offset: 18286},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 23, offset: 18286},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 545, col: 30, offset: 18293},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 545, col: 30, offset: 18293},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 545, col: 47, offset: 18310},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 5, offset: 18333},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 546, col: 12, offset: 18340},
								expr: &actionExpr{
									pos: position{line: 546, col: 13, offset: 18341},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 546, col: 13, offset: 18341},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 546, col: 13, offset: 18341},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 546, col: 17, offset: 18345},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 546, col: 24, offset: 18352},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 546, col: 24, offset: 18352},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 546, col: 41, offset: 18369},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 552, col: 1, offset: 18513},
			expr: &actionExpr{
				pos: position{line: 552, col: 29, offset: 18541},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 552, col: 29, offset: 18541},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 552, col: 29, offset: 18541},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 552, col: 34, offset: 18546},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 552, col: 41, offset: 18553},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 552, col: 41, offset: 18553},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 552, col: 58, offset: 18570},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 553, col: 5, offset: 18593},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 553, col: 12, offset: 18600},
								expr: &actionExpr{
									pos: position{line: 553, col: 13, offset: 18601},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 553, col: 13, offset: 18601},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 553, col: 13, offset: 18601},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 553, col: 17, offset: 18605},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 553, col: 24, offset: 18612},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 553, col: 24, offset: 18612},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 553, col: 41, offset: 18629},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 555, col: 9, offset: 18684},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 559, col: 1, offset: 18778},
			expr: &actionExpr{
				pos: position{line: 559, col: 19, offset: 18796},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 559, col: 19, offset: 18796},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 559, col: 19, offset: 18796},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 26, offset: 18803},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 559, col: 34, offset: 18811},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 39, offset: 18816},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 44, offset: 18821},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 563, col: 1, offset: 18913},
			expr: &actionExpr{
				pos: position{line: 563, col: 25, offset: 18937},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 563, col: 25, offset: 18937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 563, col: 25, offset: 18937},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 563, col: 30, offset: 18942},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 37, offset: 18949},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 563, col: 45, offset: 18957},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 563, col: 50, offset: 18962},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 55, offset: 18967},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 563, col: 63, offset: 18975},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 567, col: 1, offset: 19064},
			expr: &actionExpr{
				pos: position{line: 567, col: 20, offset: 19083},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 567, col: 20, offset: 19083},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 567, col: 32, offset: 19095},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 571, col: 1, offset: 19194},
			expr: &actionExpr{
				pos: position{line: 571, col: 26, offset: 19219},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 571, col: 26, offset: 19219},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 571, col: 26, offset: 19219},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 31, offset: 19224},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 43, offset: 19236},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 571, col: 51, offset: 19244},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 575, col: 1, offset: 19340},
			expr: &actionExpr{
				pos: position{line: 575, col: 23, offset: 19362},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 575, col: 23, offset: 19362},
					expr: &charClassMatcher{
						pos:        position{line: 575, col: 23, offset: 19362},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 579, col: 1, offset: 19411},
			expr: &actionExpr{
				pos: position{line: 579, col: 23, offset: 19433},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 579, col: 23, offset: 19433},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 579, col: 24, offset: 19434},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 579, col: 24, offset: 19434},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 579, col: 34, offset: 19444},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 579, col: 42, offset: 19452},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 48, offset: 19458},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 579, col: 73, offset: 19483},
							expr: &litMatcher{
								pos:        position{line: 579, col: 73, offset: 19483},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 583, col: 1, offset: 19636},
			expr: &actionExpr{
				pos: position{line: 583, col: 28, offset: 19663},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 583, col: 28, offset: 19663},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 583, col: 28, offset: 19663},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 35, offset: 19670},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 583, col: 54, offset: 19689},
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 54, offset: 19689},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 583, col: 62, offset: 19697},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 583, col: 62, offset: 19697},
									expr: &litMatcher{
										pos:        position{line: 583, col: 63, offset: 19698},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 583, col: 69, offset: 19704},
									expr: &litMatcher{
										pos:        position{line: 583, col: 70, offset: 19705},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 587, col: 1, offset: 19741},
			expr: &actionExpr{
				pos: position{line: 587, col: 22, offset: 19762},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 587, col: 22, offset: 19762},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 587, col: 22, offset: 19762},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 587, col: 29, offset: 19769},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 19784},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 588, col: 12, offset: 19791},
								expr: &actionExpr{
									pos: position{line: 588, col: 13, offset: 19792},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 588, col: 13, offset: 19792},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 588, col: 13, offset: 19792},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 588, col: 17, offset: 19796},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 588, col: 24, offset: 19803},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 594, col: 1, offset: 19940},
			expr: &choiceExpr{
				pos: position{line: 594, col: 13, offset: 19952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 594, col: 13, offset: 19952},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 594, col: 13, offset: 19952},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 594, col: 18, offset: 19957},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 594, col: 18, offset: 19957},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 594, col: 30, offset: 19969},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 596, col: 5, offset: 20039},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 596, col: 5, offset: 20039},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 596, col: 5, offset: 20039},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 596, col: 9, offset: 20043},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 596, col: 14, offset: 20048},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 596, col: 14, offset: 20048},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 596, col: 26, offset: 20060},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 600, col: 1, offset: 20132},
			expr: &actionExpr{
				pos: position{line: 600, col: 16, offset: 20147},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 600, col: 16, offset: 20147},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 16, offset: 20147},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 600, col: 23, offset: 20154},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 600, col: 23, offset: 20154},
									expr: &litMatcher{
										pos:        position{line: 600, col: 24, offset: 20155},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 603, col: 5, offset: 20212},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 611, col: 1, offset: 20462},
			expr: &zeroOrMoreExpr{
				pos: position{line: 611, col: 24, offset: 20485},
				expr: &choiceExpr{
					pos: position{line: 611, col: 25, offset: 20486},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 611, col: 25, offset: 20486},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 611, col: 41, offset: 20502},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 613, col: 1, offset: 20524},
			expr: &actionExpr{
				pos: position{line: 613, col: 21, offset: 20544},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 613, col: 21, offset: 20544},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 613, col: 21, offset: 20544},
							expr: &ruleRefExpr{
								pos:  position{line: 613, col: 22, offset: 20545},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 613, col: 26, offset: 20549},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 613, col: 35, offset: 20558},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 613, col: 35, offset: 20558},
									expr: &charClassMatcher{
										pos:        position{line: 613, col: 35, offset: 20558},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 615, col: 12, offset: 20622},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 622, col: 1, offset: 20828},
			expr: &actionExpr{
				pos: position{line: 622, col: 21, offset: 20848},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 622, col: 21, offset: 20848},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 622, col: 21, offset: 20848},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 622, col: 29, offset: 20856},
								expr: &choiceExpr{
									pos: position{line: 622, col: 30, offset: 20857},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 622, col: 30, offset: 20857},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 622, col: 53, offset: 20880},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 622, col: 74, offset: 20901},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 622, col: 74, offset: 20901,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 622, col: 107, offset: 20934},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 626, col: 1, offset: 21009},
			expr: &actionExpr{
				pos: position{line: 626, col: 25, offset: 21033},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 626, col: 25, offset: 21033},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 626, col: 25, offset: 21033},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 626, col: 33, offset: 21041},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 626, col: 38, offset: 21046},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 626, col: 38, offset: 21046},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 626, col: 78, offset: 21086},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 630, col: 1, offset: 21155},
			expr: &actionExpr{
				pos: position{line: 630, col: 23, offset: 21177},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 630, col: 23, offset: 21177},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 630, col: 23, offset: 21177},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 630, col: 31, offset: 21185},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 630, col: 36, offset: 21190},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 630, col: 36, offset: 21190},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 630, col: 76, offset: 21230},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 637, col: 1, offset: 21401},
			expr: &choiceExpr{
				pos: position{line: 637, col: 18, offset: 21418},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 637, col: 18, offset: 21418},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 637, col: 18, offset: 21418},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 27, offset: 21427},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 639, col: 9, offset: 21486},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 639, col: 9, offset: 21486},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 639, col: 15, offset: 21492},
								expr: &ruleRefExpr{
									pos:  position{line: 639, col: 16, offset: 21493},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 643, col: 1, offset: 21589},
			expr: &actionExpr{
				pos: position{line: 643, col: 22, offset: 21610},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 643, col: 22, offset: 21610},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 643, col: 22, offset: 21610},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 23, offset: 21611},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 644, col: 5, offset: 21620},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 6, offset: 21621},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 645, col: 5, offset: 21637},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 6, offset: 21638},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 646, col: 5, offset: 21661},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 6, offset: 21662},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 647, col: 5, offset: 21689},
							expr: &ruleRefExpr{
								pos:  position{line: 647, col: 6, offset: 21690},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 648, col: 5, offset: 21719},
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 6, offset: 21720},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 649, col: 5, offset: 21747},
							expr: &ruleRefExpr{
								pos:  position{line: 649, col: 6, offset: 21748},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 650, col: 5, offset: 21774},
							expr: &ruleRefExpr{
								pos:  position{line: 650, col: 6, offset: 21775},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 651, col: 5, offset: 21797},
							expr: &ruleRefExpr{
								pos:  position{line: 651, col: 6, offset: 21798},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 652, col: 5, offset: 21818},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 6, offset: 21819},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 21847},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 653, col: 11, offset: 21853},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 653, col: 11, offset: 21853},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 653, col: 20, offset: 21862},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 21, offset: 21863},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 655, col: 12, offset: 21964},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 659, col: 1, offset: 22007},
			expr: &seqExpr{
				pos: position{line: 659, col: 25, offset: 22031},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 659, col: 25, offset: 22031},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 659, col: 29, offset: 22035},
						expr: &ruleRefExpr{
							pos:  position{line: 659, col: 29, offset: 22035},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 659, col: 36, offset: 22042},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 661, col: 1, offset: 22116},
			expr: &actionExpr{
				pos: position{line: 661, col: 29, offset: 22144},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 661, col: 29, offset: 22144},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 661, col: 29, offset: 22144},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 661, col: 50, offset: 22165},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 58, offset: 22173},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 665, col: 1, offset: 22283},
			expr: &actionExpr{
				pos: position{line: 665, col: 29, offset: 22311},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 665, col: 29, offset: 22311},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 665, col: 29, offset: 22311},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 30, offset: 22312},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 666, col: 5, offset: 22322},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 666, col: 14, offset: 22331},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 666, col: 14, offset: 22331},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22357},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 22382},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 22437},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 22459},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 22484},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 22512},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 22542},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22609},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 11, offset: 22661},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 677, col: 11, offset: 22686},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 678, col: 11, offset: 22719},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 679, col: 11, offset: 22746},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 680, col: 11, offset: 22784},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 681, col: 11, offset: 22810},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 688, col: 1, offset: 22980},
			expr: &actionExpr{
				pos: position{line: 688, col: 20, offset: 22999},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 688, col: 20, offset: 22999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 688, col: 20, offset: 22999},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 688, col: 31, offset: 23010},
								expr: &ruleRefExpr{
									pos:  position{line: 688, col: 32, offset: 23011},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 688, col: 45, offset: 23024},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 53, offset: 23032},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 688, col: 76, offset: 23055},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 688, col: 85, offset: 23064},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 692, col: 1, offset: 23208},
			expr: &actionExpr{
				pos: position{line: 693, col: 5, offset: 23239},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 693, col: 5, offset: 23239},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 693, col: 5, offset: 23239},
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 5, offset: 23239},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 693, col: 12, offset: 23246},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 695, col: 9, offset: 23311},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 695, col: 9, offset: 23311},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 695, col: 9, offset: 23311},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 695, col: 9, offset: 23311},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 695, col: 16, offset: 23318},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 695, col: 16, offset: 23318},
															expr: &litMatcher{
																pos:        position{line: 695, col: 17, offset: 23319},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 699, col: 9, offset: 23423},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 718, col: 11, offset: 24159},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 718, col: 11, offset: 24159},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 718, col: 11, offset: 24159},
													expr: &charClassMatcher{
														pos:        position{line: 718, col: 12, offset: 24160},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 718, col: 20, offset: 24168},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 720, col: 13, offset: 24281},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 720, col: 13, offset: 24281},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 720, col: 14, offset: 24282},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 720, col: 21, offset: 24289},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 722, col: 13, offset: 24405},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 722, col: 13, offset: 24405},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 722, col: 14, offset: 24406},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 722, col: 21, offset: 24413},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 724, col: 13, offset: 24529},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 724, col: 13, offset: 24529},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 724, col: 13, offset: 24529},
													expr: &charClassMatcher{
														pos:        position{line: 724, col: 14, offset: 24530},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 724, col: 22, offset: 24538},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 726, col: 13, offset: 24654},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 726, col: 13, offset: 24654},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 726, col: 13, offset: 24654},
													expr: &charClassMatcher{
														pos:        position{line: 726, col: 14, offset: 24655},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 726, col: 22, offset: 24663},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 728, col: 12, offset: 24778},
							expr: &ruleRefExpr{
								pos:  position{line: 728, col: 12, offset: 24778},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 732, col: 1, offset: 24817},
			expr: &actionExpr{
				pos: position{line: 732, col: 27, offset: 24843},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 732, col: 27, offset: 24843},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 732, col: 37, offset: 24853},
						expr: &ruleRefExpr{
							pos:  position{line: 732, col: 37, offset: 24853},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 739, col: 1, offset: 25060},
			expr: &actionExpr{
				pos: position{line: 739, col: 22, offset: 25081},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 739, col: 22, offset: 25081},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 739, col: 22, offset: 25081},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 33, offset: 25092},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 34, offset: 25093},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 47, offset: 25106},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 55, offset: 25114},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 80, offset: 25139},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 91, offset: 25150},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 92, offset: 25151},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 122, offset: 25181},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 131, offset: 25190},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 743, col: 1, offset: 25352},
			expr: &actionExpr{
				pos: position{line: 744, col: 5, offset: 25385},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 744, col: 5, offset: 25385},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 744, col: 5, offset: 25385},
							expr: &ruleRefExpr{
								pos:  position{line: 744, col: 5, offset: 25385},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 744, col: 12, offset: 25392},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 744, col: 20, offset: 25400},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 746, col: 9, offset: 25459},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 746, col: 9, offset: 25459},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 746, col: 9, offset: 25459},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 746, col: 16, offset: 25466},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 746, col: 16, offset: 25466},
															expr: &litMatcher{
																pos:        position{line: 746, col: 17, offset: 25467},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 750, col: 9, offset: 25571},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 767, col: 14, offset: 26295},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 767, col: 21, offset: 26302},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 767, col: 22, offset: 26303},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 769, col: 13, offset: 26391},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 13, offset: 26391},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 773, col: 1, offset: 26431},
			expr: &actionExpr{
				pos: position{line: 773, col: 32, offset: 26462},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 773, col: 32, offset: 26462},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 773, col: 32, offset: 26462},
							expr: &litMatcher{
								pos:        position{line: 773, col: 33, offset: 26463},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 773, col: 37, offset: 26467},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 774, col: 7, offset: 26482},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 774, col: 7, offset: 26482},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 774, col: 7, offset: 26482},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 775, col: 7, offset: 26528},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 775, col: 7, offset: 26528},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 776, col: 7, offset: 26572},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 776, col: 7, offset: 26572},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 777, col: 7, offset: 26615},
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 7, offset: 26615},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 781, col: 1, offset: 26661},
			expr: &actionExpr{
				pos: position{line: 781, col: 29, offset: 26689},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 781, col: 29, offset: 26689},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 781, col: 39, offset: 26699},
						expr: &ruleRefExpr{
							pos:  position{line: 781, col: 39, offset: 26699},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 788, col: 1, offset: 27022},
			expr: &actionExpr{
				pos: position{line: 788, col: 20, offset: 27041},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 788, col: 20, offset: 27041},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 788, col: 20, offset: 27041},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 788, col: 31, offset: 27052},
								expr: &ruleRefExpr{
									pos:  position{line: 788, col: 32, offset: 27053},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 45, offset: 27066},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 51, offset: 27072},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 80, offset: 27101},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 788, col: 91, offset: 27112},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 117, offset: 27138},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 788, col: 129, offset: 27150},
								expr: &ruleRefExpr{
									pos:  position{line: 788, col: 130, offset: 27151},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 792, col: 1, offset: 27301},
			expr: &seqExpr{
				pos: position{line: 792, col: 26, offset: 27326},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 792, col: 26, offset: 27326},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 792, col: 54, offset: 27354},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 794, col: 1, offset: 27382},
			expr: &choiceExpr{
				pos: position{line: 794, col: 33, offset: 27414},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 794, col: 33, offset: 27414},
						expr: &charClassMatcher{
							pos:        position{line: 794, col: 33, offset: 27414},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 794, col: 45, offset: 27426},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 794, col: 45, offset: 27426},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 794, col: 49, offset: 27430},
								expr: &litMatcher{
									pos:        position{line: 794, col: 50, offset: 27431},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 795, col: 1, offset: 27436},
			expr: &actionExpr{
				pos: position{line: 795, col: 32, offset: 27467},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 795, col: 32, offset: 27467},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 795, col: 42, offset: 27477},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 795, col: 42, offset: 27477},
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 42, offset: 27477},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 801, col: 1, offset: 27638},
			expr: &actionExpr{
				pos: position{line: 801, col: 24, offset: 27661},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 801, col: 24, offset: 27661},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 801, col: 33, offset: 27670},
						expr: &seqExpr{
							pos: position{line: 801, col: 34, offset: 27671},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 801, col: 34, offset: 27671},
									expr: &ruleRefExpr{
										pos:  position{line: 801, col: 35, offset: 27672},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 801, col: 43, offset: 27680},
									expr: &litMatcher{
										pos:        position{line: 801, col: 44, offset: 27681},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 801, col: 49, offset: 27686},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 805, col: 1, offset: 27817},
			expr: &actionExpr{
				pos: position{line: 805, col: 31, offset: 27847},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 805, col: 31, offset: 27847},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 805, col: 40, offset: 27856},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 805, col: 40, offset: 27856},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 27872},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 807, col: 11, offset: 27922},
								expr: &ruleRefExpr{
									pos:  position{line: 807, col: 11, offset: 27922},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 808, col: 11, offset: 27941},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 809, col: 11, offset: 27967},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 27997},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 28018},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 28047},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 28069},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 814, col: 11, offset: 28093},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 815, col: 11, offset: 28109},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 816, col: 11, offset: 28135},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 817, col: 11, offset: 28159},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 818, col: 11, offset: 28181},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 819, col: 11, offset: 28199},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 820, col: 11, offset: 28232},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 28261},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 825, col: 1, offset: 28304},
			expr: &actionExpr{
				pos: position{line: 826, col: 5, offset: 28338},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 826, col: 5, offset: 28338},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 826, col: 5, offset: 28338},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 826, col: 16, offset: 28349},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 826, col: 16, offset: 28349},
									expr: &litMatcher{
										pos:        position{line: 826, col: 17, offset: 28350},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 829, col: 5, offset: 28411},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 833, col: 6, offset: 28591},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 833, col: 6, offset: 28591},
									expr: &choiceExpr{
										pos: position{line: 833, col: 7, offset: 28592},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 833, col: 7, offset: 28592},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 833, col: 15, offset: 28600},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 833, col: 27, offset: 28612},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 837, col: 1, offset: 28656},
			expr: &actionExpr{
				pos: position{line: 837, col: 31, offset: 28686},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 837, col: 31, offset: 28686},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 837, col: 40, offset: 28695},
						expr: &ruleRefExpr{
							pos:  position{line: 837, col: 41, offset: 28696},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 844, col: 1, offset: 28894},
			expr: &choiceExpr{
				pos: position{line: 844, col: 19, offset: 28912},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 844, col: 19, offset: 28912},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 844, col: 19, offset: 28912},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 846, col: 9, offset: 28960},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 846, col: 9, offset: 28960},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 848, col: 9, offset: 29010},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 848, col: 9, offset: 29010},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 850, col: 9, offset: 29070},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 850, col: 9, offset: 29070},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 852, col: 9, offset: 29126},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 852, col: 9, offset: 29126},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 861, col: 1, offset: 29442},
			expr: &choiceExpr{
				pos: position{line: 863, col: 5, offset: 29491},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 29491},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 863, col: 5, offset: 29491},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 863, col: 5, offset: 29491},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 863, col: 16, offset: 29502},
										expr: &ruleRefExpr{
											pos:  position{line: 863, col: 17, offset: 29503},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 863, col: 30, offset: 29516},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 863, col: 33, offset: 29519},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 863, col: 49, offset: 29535},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 863, col: 54, offset: 29540},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 863, col: 60, offset: 29546},
										expr: &ruleRefExpr{
											pos:  position{line: 863, col: 61, offset: 29547},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 29732},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 29732},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 867, col: 5, offset: 29732},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 867, col: 16, offset: 29743},
										expr: &ruleRefExpr{
											pos:  position{line: 867, col: 17, offset: 29744},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 867, col: 30, offset: 29757},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 867, col: 35, offset: 29762},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 867, col: 44, offset: 29771},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 29970},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 871, col: 5, offset: 29970},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 871, col: 5, offset: 29970},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 871, col: 16, offset: 29981},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 17, offset: 29982},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 871, col: 30, offset: 29995},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 878, col: 7, offset: 30281},
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 8, offset: 30282},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 878, col: 23, offset: 30297},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 32, offset: 30306},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 882, col: 5, offset: 30507},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 882, col: 5, offset: 30507},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 882, col: 5, offset: 30507},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 882, col: 16, offset: 30518},
										expr: &ruleRefExpr{
											pos:  position{line: 882, col: 17, offset: 30519},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 882, col: 30, offset: 30532},
									expr: &ruleRefExpr{
										pos:  position{line: 882, col: 31, offset: 30533},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 882, col: 46, offset: 30548},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 882, col: 52, offset: 30554},
										expr: &ruleRefExpr{
											pos:  position{line: 882, col: 53, offset: 30555},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 886, col: 1, offset: 30655},
			expr: &oneOrMoreExpr{
				pos: position{line: 886, col: 38, offset: 30692},
				expr: &actionExpr{
					pos: position{line: 886, col: 39, offset: 30693},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 886, col: 39, offset: 30693},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 886, col: 39, offset: 30693},
								expr: &ruleRefExpr{
									pos:  position{line: 886, col: 40, offset: 30694},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 886, col: 50, offset: 30704},
								expr: &litMatcher{
									pos:        position{line: 886, col: 50, offset: 30704},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 886, col: 56, offset: 30710},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 886, col: 65, offset: 30719},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 890, col: 1, offset: 30864},
			expr: &actionExpr{
				pos: position{line: 890, col: 34, offset: 30897},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 890, col: 34, offset: 30897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 890, col: 34, offset: 30897},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 890, col: 40, offset: 30903},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 890, col: 48, offset: 30911},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 890, col: 49, offset: 30912},
									expr: &charClassMatcher{
										pos:        position{line: 890, col: 49, offset: 30912},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 892, col: 8, offset: 30964},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 896, col: 1, offset: 31000},
			expr: &oneOrMoreExpr{
				pos: position{line: 896, col: 36, offset: 31035},
				expr: &actionExpr{
					pos: position{line: 896, col: 37, offset: 31036},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 896, col: 37, offset: 31036},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 896, col: 37, offset: 31036},
								expr: &ruleRefExpr{
									pos:  position{line: 896, col: 38, offset: 31037},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 896, col: 48, offset: 31047},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 896, col: 57, offset: 31056},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 901, col: 1, offset: 31274},
			expr: &actionExpr{
				pos: position{line: 901, col: 20, offset: 31293},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 901, col: 20, offset: 31293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 901, col: 20, offset: 31293},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 901, col: 31, offset: 31304},
								expr: &ruleRefExpr{
									pos:  position{line: 901, col: 32, offset: 31305},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 902, col: 5, offset: 31324},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 910, col: 5, offset: 31618},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 910, col: 16, offset: 31629},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 911, col: 5, offset: 31653},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 911, col: 16, offset: 31664},
								expr: &ruleRefExpr{
									pos:  position{line: 911, col: 17, offset: 31665},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 915, col: 1, offset: 31803},
			expr: &actionExpr{
				pos: position{line: 916, col: 5, offset: 31831},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 916, col: 5, offset: 31831},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 916, col: 5, offset: 31831},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 916, col: 15, offset: 31841},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 916, col: 15, offset: 31841},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 916, col: 20, offset: 31846},
										expr: &ruleRefExpr{
											pos:  position{line: 916, col: 20, offset: 31846},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 916, col: 36, offset: 31862},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 920, col: 1, offset: 31937},
			expr: &actionExpr{
				pos: position{line: 920, col: 23, offset: 31959},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 920, col: 23, offset: 31959},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 920, col: 33, offset: 31969},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 925, col: 1, offset: 32094},
			expr: &choiceExpr{
				pos: position{line: 927, col: 5, offset: 32152},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 927, col: 5, offset: 32152},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 927, col: 5, offset: 32152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 927, col: 5, offset: 32152},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 927, col: 16, offset: 32163},
										expr: &ruleRefExpr{
											pos:  position{line: 927, col: 17, offset: 32164},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 927, col: 30, offset: 32177},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 927, col: 33, offset: 32180},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 927, col: 49, offset: 32196},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 927, col: 54, offset: 32201},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 927, col: 61, offset: 32208},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 5, offset: 32412},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 931, col: 5, offset: 32412},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 931, col: 5, offset: 32412},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 931, col: 16, offset: 32423},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 17, offset: 32424},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 931, col: 30, offset: 32437},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 37, offset: 32444},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 935, col: 1, offset: 32549},
			expr: &actionExpr{
				pos: position{line: 935, col: 28, offset: 32576},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 935, col: 28, offset: 32576},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 935, col: 28, offset: 32576},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 935, col: 39, offset: 32587},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 935, col: 59, offset: 32607},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 935, col: 70, offset: 32618},
								expr: &seqExpr{
									pos: position{line: 935, col: 71, offset: 32619},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 935, col: 71, offset: 32619},
											expr: &ruleRefExpr{
												pos:  position{line: 935, col: 72, offset: 32620},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 935, col: 93, offset: 32641},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 939, col: 1, offset: 32751},
			expr: &choiceExpr{
				pos: position{line: 941, col: 5, offset: 32805},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 941, col: 5, offset: 32805},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 941, col: 5, offset: 32805},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 941, col: 5, offset: 32805},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 941, col: 16, offset: 32816},
										expr: &ruleRefExpr{
											pos:  position{line: 941, col: 17, offset: 32817},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 942, col: 5, offset: 32835},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 949, col: 5, offset: 33047},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 8, offset: 33050},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 24, offset: 33066},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 949, col: 29, offset: 33071},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 949, col: 35, offset: 33077},
										expr: &ruleRefExpr{
											pos:  position{line: 949, col: 36, offset: 33078},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 5, offset: 33274},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 953, col: 5, offset: 33274},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 953, col: 5, offset: 33274},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 953, col: 16, offset: 33285},
										expr: &ruleRefExpr{
											pos:  position{line: 953, col: 17, offset: 33286},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 954, col: 5, offset: 33304},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 961, col: 5, offset: 33516},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 961, col: 11, offset: 33522},
										expr: &ruleRefExpr{
											pos:  position{line: 961, col: 12, offset: 33523},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 965, col: 1, offset: 33628},
			expr: &actionExpr{
				pos: position{line: 965, col: 19, offset: 33646},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 965, col: 19, offset: 33646},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 965, col: 19, offset: 33646},
							expr: &ruleRefExpr{
								pos:  position{line: 965, col: 20, offset: 33647},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 966, col: 5, offset: 33662},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 966, col: 15, offset: 33672},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 966, col: 15, offset: 33672},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 966, col: 15, offset: 33672},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 966, col: 24, offset: 33681},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 968, col: 9, offset: 33775},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 968, col: 9, offset: 33775},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 968, col: 9, offset: 33775},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 968, col: 18, offset: 33784},
														expr: &ruleRefExpr{
															pos:  position{line: 968, col: 19, offset: 33785},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 968, col: 35, offset: 33801},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 974, col: 1, offset: 33924},
			expr: &actionExpr{
				pos: position{line: 975, col: 5, offset: 33948},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 975, col: 5, offset: 33948},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 975, col: 14, offset: 33957},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 975, col: 14, offset: 33957},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 976, col: 11, offset: 34009},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 977, col: 11, offset: 34055},
								expr: &ruleRefExpr{
									pos:  position{line: 977, col: 11, offset: 34055},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 978, col: 11, offset: 34074},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 978, col: 11, offset: 34074},
										expr: &ruleRefExpr{
											pos:  position{line: 978, col: 12, offset: 34075},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 979, col: 13, offset: 34094},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 979, col: 13, offset: 34094},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 34122},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 34148},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 34170},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 34196},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 34224},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 985, col: 15, offset: 34245},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 15, offset: 34279},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 987, col: 15, offset: 34310},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 988, col: 15, offset: 34341},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 989, col: 15, offset: 34373},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 990, col: 15, offset: 34411},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 991, col: 15, offset: 34442},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 992, col: 15, offset: 34476},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 993, col: 15, offset: 34501},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 994, col: 15, offset: 34534},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1001, col: 1, offset: 34764},
			expr: &actionExpr{
				pos: position{line: 1001, col: 14, offset: 34777},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 14, offset: 34777},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1001, col: 14, offset: 34777},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1001, col: 20, offset: 34783},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1001, col: 24, offset: 34787},
							expr: &ruleRefExpr{
								pos:  position{line: 1001, col: 24, offset: 34787},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1001, col: 31, offset: 34794},
							expr: &ruleRefExpr{
								pos:  position{line: 1001, col: 32, offset: 34795},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1008, col: 1, offset: 35086},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 15, offset: 35100},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1008, col: 15, offset: 35100},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 41, offset: 35126},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 65, offset: 35150},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1010, col: 1, offset: 35171},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 32, offset: 35202},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1010, col: 32, offset: 35202},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1010, col: 32, offset: 35202},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1010, col: 36, offset: 35206},
								expr: &litMatcher{
									pos:        position{line: 1010, col: 37, offset: 35207},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1010, col: 43, offset: 35213},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1010, col: 43, offset: 35213},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1010, col: 47, offset: 35217},
								expr: &litMatcher{
									pos:        position{line: 1010, col: 48, offset: 35218},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1010, col: 54, offset: 35224},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1010, col: 54, offset: 35224},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1010, col: 58, offset: 35228},
								expr: &litMatcher{
									pos:        position{line: 1010, col: 59, offset: 35229},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1010, col: 65, offset: 35235},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1010, col: 65, offset: 35235},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1010, col: 69, offset: 35239},
								expr: &litMatcher{
									pos:        position{line: 1010, col: 70, offset: 35240},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1012, col: 1, offset: 35247},
			expr: &choiceExpr{
				pos: position{line: 1012, col: 34, offset: 35280},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1012, col: 34, offset: 35280},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1012, col: 41, offset: 35287},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1012, col: 48, offset: 35294},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1012, col: 55, offset: 35301},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1012, col: 62, offset: 35308},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1012, col: 68, offset: 35314},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1014, col: 1, offset: 35321},
			expr: &actionExpr{
				pos: position{line: 1014, col: 26, offset: 35346},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1014, col: 26, offset: 35346},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1014, col: 32, offset: 35352},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1014, col: 32, offset: 35352},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 15, offset: 35388},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1016, col: 15, offset: 35425},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1017, col: 15, offset: 35462},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1018, col: 15, offset: 35503},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1019, col: 15, offset: 35533},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1020, col: 15, offset: 35565},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1024, col: 1, offset: 35723},
			expr: &choiceExpr{
				pos: position{line: 1024, col: 28, offset: 35750},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1024, col: 28, offset: 35750},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1025, col: 15, offset: 35785},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 15, offset: 35822},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 15, offset: 35859},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1029, col: 1, offset: 35887},
			expr: &choiceExpr{
				pos: position{line: 1029, col: 22, offset: 35908},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1029, col: 22, offset: 35908},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 15, offset: 35940},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1031, col: 15, offset: 35973},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 15, offset: 36006},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 15, offset: 36043},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 15, offset: 36080},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1036, col: 1, offset: 36106},
			expr: &choiceExpr{
				pos: position{line: 1036, col: 33, offset: 36138},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1036, col: 33, offset: 36138},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1036, col: 39, offset: 36144},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1036, col: 39, offset: 36144},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1040, col: 1, offset: 36281},
			expr: &actionExpr{
				pos: position{line: 1040, col: 25, offset: 36305},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1040, col: 25, offset: 36305},
					expr: &litMatcher{
						pos:        position{line: 1040, col: 25, offset: 36305},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1044, col: 1, offset: 36350},
			expr: &actionExpr{
				pos: position{line: 1044, col: 25, offset: 36374},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 25, offset: 36374},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1044, col: 25, offset: 36374},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1044, col: 30, offset: 36379},
							expr: &litMatcher{
								pos:        position{line: 1044, col: 30, offset: 36379},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1052, col: 1, offset: 36484},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 13, offset: 36496},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 13, offset: 36496},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 35, offset: 36518},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1054, col: 1, offset: 36587},
			expr: &actionExpr{
				pos: position{line: 1054, col: 24, offset: 36610},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1054, col: 24, offset: 36610},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1054, col: 24, offset: 36610},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1054, col: 30, offset: 36616},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 31, offset: 36617},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1054, col: 49, offset: 36635},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1054, col: 54, offset: 36640},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1054, col: 64, offset: 36650},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1054, col: 93, offset: 36679},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1058, col: 1, offset: 36770},
			expr: &seqExpr{
				pos: position{line: 1058, col: 32, offset: 36801},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1058, col: 32, offset: 36801},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1058, col: 59, offset: 36828},
						expr: &seqExpr{
							pos: position{line: 1058, col: 60, offset: 36829},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1058, col: 60, offset: 36829},
									expr: &litMatcher{
										pos:        position{line: 1058, col: 62, offset: 36831},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1058, col: 69, offset: 36838},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1058, col: 69, offset: 36838},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1058, col: 77, offset: 36846},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1060, col: 1, offset: 36913},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 31, offset: 36943},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1060, col: 31, offset: 36943},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1061, col: 11, offset: 36959},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1061, col: 11, offset: 36959},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1061, col: 19, offset: 36967},
								expr: &ruleRefExpr{
									pos:  position{line: 1061, col: 20, offset: 36968},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 36987},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 11, offset: 37018},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 37042},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 37064},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 11, offset: 37086},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 37111},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1068, col: 11, offset: 37136},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1069, col: 11, offset: 37163},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1070, col: 11, offset: 37181},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1071, col: 11, offset: 37203},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1072, col: 11, offset: 37226},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 11, offset: 37242},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1074, col: 11, offset: 37271},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 11, offset: 37304},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1076, col: 11, offset: 37333},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1079, col: 1, offset: 37375},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 5, offset: 37420},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1080, col: 5, offset: 37420},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1081, col: 7, offset: 37518},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1081, col: 7, offset: 37518},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 7, offset: 37518},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1081, col: 12, offset: 37523},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1085, col: 1, offset: 37690},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 24, offset: 37713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1085, col: 24, offset: 37713},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1085, col: 24, offset: 37713},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1085, col: 24, offset: 37713},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1085, col: 30, offset: 37719},
										expr: &ruleRefExpr{
											pos:  position{line: 1085, col: 31, offset: 37720},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1085, col: 51, offset: 37740},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1085, col: 51, offset: 37740},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1085, col: 55, offset: 37744},
											expr: &litMatcher{
												pos:        position{line: 1085, col: 56, offset: 37745},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1085, col: 61, offset: 37750},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1085, col: 71, offset: 37760},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1085, col: 100, offset: 37789},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1085, col: 104, offset: 37793},
									expr: &notExpr{
										pos: position{line: 1085, col: 106, offset: 37795},
										expr: &ruleRefExpr{
											pos:  position{line: 1085, col: 107, offset: 37796},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 5, offset: 37992},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1087, col: 5, offset: 37992},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1087, col: 5, offset: 37992},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1087, col: 11, offset: 37998},
										expr: &ruleRefExpr{
											pos:  position{line: 1087, col: 12, offset: 37999},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 30, offset: 38017},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1087, col: 34, offset: 38021},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1087, col: 44, offset: 38031},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1087, col: 44, offset: 38031},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1087, col: 48, offset: 38035},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1087, col: 77, offset: 38064},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1091, col: 1, offset: 38274},
			expr: &seqExpr{
				pos: position{line: 1091, col: 32, offset: 38305},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1091, col: 32, offset: 38305},
						expr: &ruleRefExpr{
							pos:  position{line: 1091, col: 33, offset: 38306},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1091, col: 39, offset: 38312},
						expr: &ruleRefExpr{
							pos:  position{line: 1091, col: 39, offset: 38312},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1093, col: 1, offset: 38343},
			expr: &choiceExpr{
				pos: position{line: 1093, col: 31, offset: 38373},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1093, col: 31, offset: 38373},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1094, col: 11, offset: 38389},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1094, col: 11, offset: 38389},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1094, col: 19, offset: 38397},
								expr: &ruleRefExpr{
									pos:  position{line: 1094, col: 20, offset: 38398},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 38417},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 38448},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1097, col: 11, offset: 38472},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1097, col: 11, offset: 38472},
								expr: &ruleRefExpr{
									pos:  position{line: 1097, col: 11, offset: 38472},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1097, col: 18, offset: 38479},
								expr: &seqExpr{
									pos: position{line: 1097, col: 19, offset: 38480},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1097, col: 19, offset: 38480},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1097, col: 23, offset: 38484},
											expr: &litMatcher{
												pos:        position{line: 1097, col: 24, offset: 38485},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 38502},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 38524},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 38546},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 11, offset: 38571},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 11, offset: 38596},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1103, col: 11, offset: 38623},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 11, offset: 38641},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1105, col: 11, offset: 38663},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1106, col: 11, offset: 38687},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 11, offset: 38705},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1108, col: 11, offset: 38734},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1109, col: 11, offset: 38767},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 11, offset: 38796},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1112, col: 1, offset: 38836},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 5, offset: 38881},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1113, col: 5, offset: 38881},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1114, col: 7, offset: 38979},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1114, col: 7, offset: 38979},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1114, col: 7, offset: 38979},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 11, offset: 38983},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1118, col: 1, offset: 39150},
			expr: &choiceExpr{
				pos: position{line: 1119, col: 5, offset: 39175},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1119, col: 5, offset: 39175},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1119, col: 5, offset: 39175},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1119, col: 5, offset: 39175},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1119, col: 18, offset: 39188},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1119, col: 40, offset: 39210},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1119, col: 45, offset: 39215},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1119, col: 55, offset: 39225},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1119, col: 84, offset: 39254},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 9, offset: 39413},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1121, col: 9, offset: 39413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 9, offset: 39413},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 22, offset: 39426},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 44, offset: 39448},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1121, col: 49, offset: 39453},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1121, col: 59, offset: 39463},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1121, col: 88, offset: 39492},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1124, col: 9, offset: 39695},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1124, col: 9, offset: 39695},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1124, col: 9, offset: 39695},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 22, offset: 39708},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 44, offset: 39730},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 48, offset: 39734},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1124, col: 58, offset: 39744},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1124, col: 87, offset: 39773},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1132, col: 1, offset: 39989},
			expr: &choiceExpr{
				pos: position{line: 1132, col: 15, offset: 40003},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1132, col: 15, offset: 40003},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 39, offset: 40027},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1134, col: 1, offset: 40052},
			expr: &actionExpr{
				pos: position{line: 1134, col: 26, offset: 40077},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1134, col: 26, offset: 40077},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1134, col: 26, offset: 40077},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1134, col: 32, offset: 40083},
								expr: &ruleRefExpr{
									pos:  position{line: 1134, col: 33, offset: 40084},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1134, col: 51, offset: 40102},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1134, col: 56, offset: 40107},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 66, offset: 40117},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1134, col: 97, offset: 40148},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1138, col: 1, offset: 40286},
			expr: &seqExpr{
				pos: position{line: 1138, col: 34, offset: 40319},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1138, col: 34, offset: 40319},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1138, col: 63, offset: 40348},
						expr: &seqExpr{
							pos: position{line: 1138, col: 64, offset: 40349},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1138, col: 64, offset: 40349},
									expr: &litMatcher{
										pos:        position{line: 1138, col: 66, offset: 40351},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1138, col: 73, offset: 40358},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1138, col: 73, offset: 40358},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1138, col: 81, offset: 40366},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1140, col: 1, offset: 40435},
			expr: &choiceExpr{
				pos: position{line: 1140, col: 33, offset: 40467},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1140, col: 33, offset: 40467},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1141, col: 11, offset: 40483},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1141, col: 11, offset: 40483},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1141, col: 19, offset: 40491},
								expr: &ruleRefExpr{
									pos:  position{line: 1141, col: 20, offset: 40492},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 11, offset: 40511},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 40544},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 40568},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 11, offset: 40588},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 40610},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 40635},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 11, offset: 40660},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 40687},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 11, offset: 40705},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 11, offset: 40727},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1152, col: 11, offset: 40751},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1153, col: 11, offset: 40768},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1154, col: 11, offset: 40797},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1155, col: 11, offset: 40826},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1157, col: 1, offset: 40868},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 5, offset: 40915},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1158, col: 5, offset: 40915},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1159, col: 7, offset: 41015},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1159, col: 7, offset: 41015},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1159, col: 7, offset: 41015},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1159, col: 12, offset: 41020},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1163, col: 1, offset: 41189},
			expr: &choiceExpr{
				pos: position{line: 1163, col: 26, offset: 41214},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1163, col: 26, offset: 41214},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1163, col: 26, offset: 41214},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1163, col: 26, offset: 41214},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1163, col: 32, offset: 41220},
										expr: &ruleRefExpr{
											pos:  position{line: 1163, col: 33, offset: 41221},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1163, col: 52, offset: 41240},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1163, col: 52, offset: 41240},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1163, col: 56, offset: 41244},
											expr: &litMatcher{
												pos:        position{line: 1163, col: 57, offset: 41245},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1163, col: 62, offset: 41250},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1163, col: 72, offset: 41260},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1163, col: 103, offset: 41291},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1165, col: 5, offset: 41483},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1165, col: 5, offset: 41483},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1165, col: 5, offset: 41483},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1165, col: 11, offset: 41489},
										expr: &ruleRefExpr{
											pos:  position{line: 1165, col: 12, offset: 41490},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1165, col: 30, offset: 41508},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1165, col: 34, offset: 41512},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1165, col: 44, offset: 41522},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1165, col: 44, offset: 41522},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1165, col: 48, offset: 41526},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1165, col: 79, offset: 41557},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1169, col: 1, offset: 41771},
			expr: &seqExpr{
				pos: position{line: 1169, col: 34, offset: 41804},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1169, col: 34, offset: 41804},
						expr: &ruleRefExpr{
							pos:  position{line: 1169, col: 35, offset: 41805},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1169, col: 41, offset: 41811},
						expr: &ruleRefExpr{
							pos:  position{line: 1169, col: 41, offset: 41811},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1171, col: 1, offset: 41844},
			expr: &choiceExpr{
				pos: position{line: 1171, col: 33, offset: 41876},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1171, col: 33, offset: 41876},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1172, col: 11, offset: 41892},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1172, col: 11, offset: 41892},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1172, col: 19, offset: 41900},
								expr: &ruleRefExpr{
									pos:  position{line: 1172, col: 20, offset: 41901},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 41920},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 11, offset: 41953},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1175, col: 11, offset: 41977},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1175, col: 11, offset: 41977},
								expr: &ruleRefExpr{
									pos:  position{line: 1175, col: 11, offset: 41977},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1175, col: 18, offset: 41984},
								expr: &seqExpr{
									pos: position{line: 1175, col: 19, offset: 41985},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1175, col: 19, offset: 41985},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1175, col: 23, offset: 41989},
											expr: &litMatcher{
												pos:        position{line: 1175, col: 24, offset: 41990},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 42007},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 42027},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 42049},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 42074},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 42099},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 42126},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 42144},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 42166},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 42190},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 11, offset: 42208},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 11, offset: 42238},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 11, offset: 42271},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 11, offset: 42300},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1190, col: 1, offset: 42342},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 5, offset: 42389},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1191, col: 5, offset: 42389},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1192, col: 7, offset: 42489},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1192, col: 7, offset: 42489},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1192, col: 7, offset: 42489},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1192, col: 11, offset: 42493},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1196, col: 1, offset: 42663},
			expr: &choiceExpr{
				pos: position{line: 1197, col: 5, offset: 42690},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1197, col: 5, offset: 42690},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1197, col: 5, offset: 42690},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1197, col: 5, offset: 42690},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 18, offset: 42703},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 40, offset: 42725},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1197, col: 45, offset: 42730},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1197, col: 55, offset: 42740},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1197, col: 86, offset: 42771},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1199, col: 9, offset: 42930},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1199, col: 9, offset: 42930},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1199, col: 9, offset: 42930},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 22, offset: 42943},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 44, offset: 42965},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 49, offset: 42970},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 59, offset: 42980},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 90, offset: 43011},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1202, col: 9, offset: 43214},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1202, col: 9, offset: 43214},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1202, col: 9, offset: 43214},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1202, col: 22, offset: 43227},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1202, col: 44, offset: 43249},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1202, col: 48, offset: 43253},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1202, col: 58, offset: 43263},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1202, col: 89, offset: 43294},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1209, col: 1, offset: 43511},
			expr: &choiceExpr{
				pos: position{line: 1209, col: 18, offset: 43528},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1209, col: 18, offset: 43528},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 45, offset: 43555},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1211, col: 1, offset: 43583},
			expr: &actionExpr{
				pos: position{line: 1211, col: 29, offset: 43611},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 29, offset: 43611},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1211, col: 29, offset: 43611},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1211, col: 35, offset: 43617},
								expr: &ruleRefExpr{
									pos:  position{line: 1211, col: 36, offset: 43618},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1211, col: 54, offset: 43636},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 59, offset: 43641},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 69, offset: 43651},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1211, col: 103, offset: 43685},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1215, col: 1, offset: 43826},
			expr: &seqExpr{
				pos: position{line: 1215, col: 37, offset: 43862},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1215, col: 37, offset: 43862},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1215, col: 69, offset: 43894},
						expr: &seqExpr{
							pos: position{line: 1215, col: 70, offset: 43895},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1215, col: 70, offset: 43895},
									expr: &litMatcher{
										pos:        position{line: 1215, col: 72, offset: 43897},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1215, col: 79, offset: 43904},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1215, col: 79, offset: 43904},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1215, col: 87, offset: 43912},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1217, col: 1, offset: 43983},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 36, offset: 44018},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 36, offset: 44018},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1218, col: 11, offset: 44034},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1218, col: 11, offset: 44034},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1218, col: 19, offset: 44042},
								expr: &ruleRefExpr{
									pos:  position{line: 1218, col: 20, offset: 44043},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 44062},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 44080},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 44116},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 44140},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 44160},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 44182},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 44204},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 44229},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 44256},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 44278},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 44301},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 44317},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 44347},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 44376},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1234, col: 1, offset: 44421},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 5, offset: 44471},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1235, col: 5, offset: 44471},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1236, col: 7, offset: 44574},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1236, col: 7, offset: 44574},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1236, col: 7, offset: 44574},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1236, col: 12, offset: 44579},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1240, col: 1, offset: 44751},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 29, offset: 44779},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1240, col: 29, offset: 44779},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1240, col: 29, offset: 44779},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1240, col: 29, offset: 44779},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1240, col: 35, offset: 44785},
										expr: &ruleRefExpr{
											pos:  position{line: 1240, col: 36, offset: 44786},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1240, col: 55, offset: 44805},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1240, col: 55, offset: 44805},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1240, col: 59, offset: 44809},
											expr: &litMatcher{
												pos:        position{line: 1240, col: 60, offset: 44810},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1240, col: 65, offset: 44815},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1240, col: 75, offset: 44825},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1240, col: 109, offset: 44859},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1242, col: 5, offset: 45054},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1242, col: 5, offset: 45054},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 5, offset: 45054},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1242, col: 11, offset: 45060},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 12, offset: 45061},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 30, offset: 45079},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 34, offset: 45083},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1242, col: 44, offset: 45093},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1242, col: 44, offset: 45093},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1242, col: 48, offset: 45097},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 82, offset: 45131},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1246, col: 1, offset: 45349},
			expr: &seqExpr{
				pos: position{line: 1246, col: 37, offset: 45385},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1246, col: 37, offset: 45385},
						expr: &ruleRefExpr{
							pos:  position{line: 1246, col: 38, offset: 45386},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1246, col: 44, offset: 45392},
						expr: &ruleRefExpr{
							pos:  position{line: 1246, col: 44, offset: 45392},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1248, col: 1, offset: 45428},
			expr: &choiceExpr{
				pos: position{line: 1248, col: 37, offset: 45464},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1248, col: 37, offset: 45464},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1249, col: 11, offset: 45480},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1249, col: 11, offset: 45480},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1249, col: 19, offset: 45488},
								expr: &ruleRefExpr{
									pos:  position{line: 1249, col: 20, offset: 45489},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 45508},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 45544},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1252, col: 11, offset: 45568},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1252, col: 11, offset: 45568},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 11, offset: 45568},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1252, col: 18, offset: 45575},
								expr: &seqExpr{
									pos: position{line: 1252, col: 19, offset: 45576},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1252, col: 19, offset: 45576},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1252, col: 23, offset: 45580},
											expr: &litMatcher{
												pos:        position{line: 1252, col: 24, offset: 45581},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 45710},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 45730},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 45752},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 45774},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 45799},
						name: "SuperscriptText",
					},
					&seqExpr{
						pos: position{line: 1258, col: 11, offset: 45826},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1258, col: 11, offset: 45826},
								expr: &litMatcher{
									pos:        position{line: 1258, col: 12, offset: 45827},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1258, col: 16, offset: 45831},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 45849},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 45871},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 11, offset: 45895},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 45912},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 11, offset: 45942},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 45975},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 46004},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1267, col: 1, offset: 46049},
			expr: &choiceExpr{
				pos: position{line: 1268, col: 5, offset: 46099},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1268, col: 5, offset: 46099},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1269, col: 7, offset: 46202},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1269, col: 7, offset: 46202},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1269, col: 7, offset: 46202},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1269, col: 11, offset: 46206},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1273, col: 1, offset: 46379},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 5, offset: 46409},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1274, col: 5, offset: 46409},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1274, col: 5, offset: 46409},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1274, col: 5, offset: 46409},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 18, offset: 46422},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 40, offset: 46444},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 45, offset: 46449},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 55, offset: 46459},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 89, offset: 46493},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 9, offset: 46652},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1276, col: 9, offset: 46652},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1276, col: 9, offset: 46652},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 22, offset: 46665},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 44, offset: 46687},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 49, offset: 46692},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 59, offset: 46702},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 93, offset: 46736},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1279, col: 9, offset: 46939},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1279, col: 9, offset: 46939},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1279, col: 9, offset: 46939},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 22, offset: 46952},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 44, offset: 46974},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 48, offset: 46978},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 58, offset: 46988},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 92, offset: 47022},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1287, col: 1, offset: 47238},
			expr: &choiceExpr{
				pos: position{line: 1287, col: 15, offset: 47252},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1287, col: 15, offset: 47252},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 39, offset: 47276},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1289, col: 1, offset: 47301},
			expr: &actionExpr{
				pos: position{line: 1289, col: 26, offset: 47326},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1289, col: 26, offset: 47326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1289, col: 26, offset: 47326},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1289, col: 32, offset: 47332},
								expr: &ruleRefExpr{
									pos:  position{line: 1289, col: 33, offset: 47333},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1289, col: 51, offset: 47351},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1289, col: 56, offset: 47356},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1289, col: 66, offset: 47366},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1289, col: 97, offset: 47397},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1293, col: 1, offset: 47535},
			expr: &seqExpr{
				pos: position{line: 1293, col: 34, offset: 47568},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1293, col: 34, offset: 47568},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1293, col: 63, offset: 47597},
						expr: &seqExpr{
							pos: position{line: 1293, col: 64, offset: 47598},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1293, col: 64, offset: 47598},
									expr: &litMatcher{
										pos:        position{line: 1293, col: 66, offset: 47600},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1293, col: 73, offset: 47607},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1293, col: 73, offset: 47607},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1293, col: 81, offset: 47615},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1295, col: 1, offset: 47684},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 33, offset: 47716},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1295, col: 33, offset: 47716},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 47732},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1297, col: 11, offset: 47765},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1297, col: 11, offset: 47765},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1297, col: 19, offset: 47773},
								expr: &ruleRefExpr{
									pos:  position{line: 1297, col: 20, offset: 47774},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 47793},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 47817},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 47837},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 47859},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 11, offset: 47884},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 47909},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 47936},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 47954},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 11, offset: 47976},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 11, offset: 47999},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 11, offset: 48015},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 11, offset: 48044},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 11, offset: 48073},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1312, col: 1, offset: 48115},
			expr: &choiceExpr{
				pos: position{line: 1313, col: 5, offset: 48162},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1313, col: 5, offset: 48162},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1314, col: 7, offset: 48262},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1314, col: 7, offset: 48262},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1314, col: 7, offset: 48262},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1314, col: 12, offset: 48267},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1318, col: 1, offset: 48436},
			expr: &choiceExpr{
				pos: position{line: 1318, col: 26, offset: 48461},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1318, col: 26, offset: 48461},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1318, col: 26, offset: 48461},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1318, col: 26, offset: 48461},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1318, col: 32, offset: 48467},
										expr: &ruleRefExpr{
											pos:  position{line: 1318, col: 33, offset: 48468},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1318, col: 52, offset: 48487},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1318, col: 52, offset: 48487},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1318, col: 56, offset: 48491},
											expr: &litMatcher{
												pos:        position{line: 1318, col: 57, offset: 48492},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1318, col: 62, offset: 48497},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1318, col: 72, offset: 48507},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1318, col: 103, offset: 48538},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1320, col: 5, offset: 48730},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1320, col: 5, offset: 48730},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1320, col: 5, offset: 48730},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1320, col: 11, offset: 48736},
										expr: &ruleRefExpr{
											pos:  position{line: 1320, col: 12, offset: 48737},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 30, offset: 48755},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1320, col: 34, offset: 48759},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1320, col: 44, offset: 48769},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1320, col: 44, offset: 48769},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1320, col: 48, offset: 48773},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1320, col: 79, offset: 48804},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1324, col: 1, offset: 49017},
			expr: &seqExpr{
				pos: position{line: 1324, col: 34, offset: 49050},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1324, col: 34, offset: 49050},
						expr: &ruleRefExpr{
							pos:  position{line: 1324, col: 35, offset: 49051},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1324, col: 41, offset: 49057},
						expr: &ruleRefExpr{
							pos:  position{line: 1324, col: 41, offset: 49057},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1326, col: 1, offset: 49090},
			expr: &choiceExpr{
				pos: position{line: 1326, col: 33, offset: 49122},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1326, col: 33, offset: 49122},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 49138},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1328, col: 11, offset: 49171},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1328, col: 11, offset: 49171},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1328, col: 19, offset: 49179},
								expr: &ruleRefExpr{
									pos:  position{line: 1328, col: 20, offset: 49180},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 49199},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1330, col: 11, offset: 49223},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1330, col: 11, offset: 49223},
								expr: &ruleRefExpr{
									pos:  position{line: 1330, col: 11, offset: 49223},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1330, col: 18, offset: 49230},
								expr: &seqExpr{
									pos: position{line: 1330, col: 19, offset: 49231},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1330, col: 19, offset: 49231},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1330, col: 23, offset: 49235},
											expr: &litMatcher{
												pos:        position{line: 1330, col: 24, offset: 49236},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 49253},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 49273},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 49295},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 49320},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 49345},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 11, offset: 49372},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 49390},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 49412},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 49435},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 49451},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 49480},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 49513},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 49542},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1345, col: 1, offset: 49584},
			expr: &choiceExpr{
				pos: position{line: 1346, col: 5, offset: 49631},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1346, col: 5, offset: 49631},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1347, col: 7, offset: 49729},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1347, col: 7, offset: 49729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1347, col: 7, offset: 49729},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1347, col: 11, offset: 49733},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1351, col: 1, offset: 49900},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 5, offset: 49926},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1352, col: 5, offset: 49926},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1352, col: 5, offset: 49926},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1352, col: 5, offset: 49926},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1352, col: 18, offset: 49939},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 40, offset: 49961},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1352, col: 45, offset: 49966},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1352, col: 55, offset: 49976},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1352, col: 86, offset: 50007},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1354, col: 9, offset: 50166},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1354, col: 9, offset: 50166},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1354, col: 9, offset: 50166},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1354, col: 22, offset: 50179},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1354, col: 44, offset: 50201},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1354, col: 49, offset: 50206},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1354, col: 59, offset: 50216},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1354, col: 90, offset: 50247},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1357, col: 9, offset: 50450},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1357, col: 9, offset: 50450},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1357, col: 9, offset: 50450},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 22, offset: 50463},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 44, offset: 50485},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1357, col: 48, offset: 50489},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1357, col: 58, offset: 50499},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1357, col: 89, offset: 50530},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1362, col: 1, offset: 50685},
			expr: &actionExpr{
				pos: position{line: 1362, col: 18, offset: 50702},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1362, col: 18, offset: 50702},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1362, col: 18, offset: 50702},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1362, col: 24, offset: 50708},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 25, offset: 50709},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1362, col: 43, offset: 50727},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 47, offset: 50731},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 56, offset: 50740},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1362, col: 78, offset: 50762},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1366, col: 1, offset: 50862},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 25, offset: 50886},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1366, col: 25, offset: 50886},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 38, offset: 50899},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1368, col: 1, offset: 50920},
			expr: &actionExpr{
				pos: position{line: 1368, col: 21, offset: 50940},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1368, col: 21, offset: 50940},
					expr: &charClassMatcher{
						pos:        position{line: 1368, col: 21, offset: 50940},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1372, col: 1, offset: 51021},
			expr: &actionExpr{
				pos: position{line: 1372, col: 25, offset: 51045},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 25, offset: 51045},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1372, col: 25, offset: 51045},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1372, col: 38, offset: 51058},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1372, col: 60, offset: 51080},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 64, offset: 51084},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1372, col: 73, offset: 51093},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1372, col: 95, offset: 51115},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1376, col: 1, offset: 51248},
			expr: &actionExpr{
				pos: position{line: 1376, col: 20, offset: 51267},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 20, offset: 51267},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1376, col: 20, offset: 51267},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1376, col: 26, offset: 51273},
								expr: &ruleRefExpr{
									pos:  position{line: 1376, col: 27, offset: 51274},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 45, offset: 51292},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 49, offset: 51296},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 58, offset: 51305},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 82, offset: 51329},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1380, col: 1, offset: 51431},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 27, offset: 51457},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1380, col: 27, offset: 51457},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 40, offset: 51470},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1382, col: 1, offset: 51493},
			expr: &actionExpr{
				pos: position{line: 1382, col: 23, offset: 51515},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1382, col: 23, offset: 51515},
					expr: &charClassMatcher{
						pos:        position{line: 1382, col: 23, offset: 51515},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1386, col: 1, offset: 51596},
			expr: &actionExpr{
				pos: position{line: 1386, col: 27, offset: 51622},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 27, offset: 51622},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1386, col: 27, offset: 51622},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 40, offset: 51635},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 62, offset: 51657},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 66, offset: 51661},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 75, offset: 51670},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 99, offset: 51694},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1393, col: 1, offset: 51943},
			expr: &choiceExpr{
				pos: position{line: 1393, col: 22, offset: 51964},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1393, col: 22, offset: 51964},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 46, offset: 51988},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1393, col: 70, offset: 52012},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1395, col: 1, offset: 52032},
			expr: &litMatcher{
				pos:        position{line: 1395, col: 32, offset: 52063},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1397, col: 1, offset: 52070},
			expr: &actionExpr{
				pos: position{line: 1397, col: 26, offset: 52095},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1397, col: 26, offset: 52095},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1397, col: 26, offset: 52095},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1397, col: 54, offset: 52123},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1397, col: 63, offset: 52132},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1397, col: 93, offset: 52162},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1397, col: 121, offset: 52190},
							expr: &ruleRefExpr{
								pos:  position{line: 1397, col: 122, offset: 52191},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1401, col: 1, offset: 52300},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 33, offset: 52332},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1401, col: 34, offset: 52333},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1401, col: 34, offset: 52333},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1401, col: 35, offset: 52334},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1401, col: 35, offset: 52334},
											expr: &ruleRefExpr{
												pos:  position{line: 1401, col: 36, offset: 52335},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1401, col: 64, offset: 52363},
											expr: &ruleRefExpr{
												pos:  position{line: 1401, col: 65, offset: 52364},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1401, col: 71, offset: 52370},
											expr: &ruleRefExpr{
												pos:  position{line: 1401, col: 72, offset: 52371},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1401, col: 80, offset: 52379,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1401, col: 83, offset: 52382},
									expr: &seqExpr{
										pos: position{line: 1401, col: 84, offset: 52383},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1401, col: 84, offset: 52383},
												expr: &seqExpr{
													pos: position{line: 1401, col: 86, offset: 52385},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1401, col: 86, offset: 52385},
															expr: &ruleRefExpr{
																pos:  position{line: 1401, col: 86, offset: 52385},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1401, col: 93, offset: 52392},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1401, col: 122, offset: 52421},
												expr: &ruleRefExpr{
													pos:  position{line: 1401, col: 123, offset: 52422},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1401, col: 151, offset: 52450},
												expr: &ruleRefExpr{
													pos:  position{line: 1401, col: 152, offset: 52451},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1401, col: 160, offset: 52459,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1403, col: 7, offset: 52603},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1403, col: 8, offset: 52604},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1403, col: 8, offset: 52604},
									expr: &ruleRefExpr{
										pos:  position{line: 1403, col: 9, offset: 52605},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1403, col: 15, offset: 52611},
									expr: &ruleRefExpr{
										pos:  position{line: 1403, col: 16, offset: 52612},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1403, col: 24, offset: 52620},
									expr: &ruleRefExpr{
										pos:  position{line: 1403, col: 25, offset: 52621},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1403, col: 53, offset: 52649,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1407, col: 1, offset: 52735},
			expr: &litMatcher{
				pos:        position{line: 1407, col: 32, offset: 52766},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1409, col: 1, offset: 52775},
			expr: &actionExpr{
				pos: position{line: 1409, col: 26, offset: 52800},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 26, offset: 52800},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1409, col: 26, offset: 52800},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 54, offset: 52828},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 63, offset: 52837},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1409, col: 93, offset: 52867},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1409, col: 121, offset: 52895},
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 122, offset: 52896},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1413, col: 1, offset: 53005},
			expr: &choiceExpr{
				pos: position{line: 1413, col: 33, offset: 53037},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1413, col: 34, offset: 53038},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1413, col: 34, offset: 53038},
							expr: &seqExpr{
								pos: position{line: 1413, col: 35, offset: 53039},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1413, col: 35, offset: 53039},
										expr: &ruleRefExpr{
											pos:  position{line: 1413, col: 36, offset: 53040},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1413, col: 64, offset: 53068,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1415, col: 7, offset: 53235},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1415, col: 7, offset: 53235},
							expr: &seqExpr{
								pos: position{line: 1415, col: 8, offset: 53236},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1415, col: 8, offset: 53236},
										expr: &ruleRefExpr{
											pos:  position{line: 1415, col: 9, offset: 53237},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1415, col: 15, offset: 53243},
										expr: &ruleRefExpr{
											pos:  position{line: 1415, col: 16, offset: 53244},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1415, col: 24, offset: 53252},
										expr: &ruleRefExpr{
											pos:  position{line: 1415, col: 25, offset: 53253},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1415, col: 53, offset: 53281,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1419, col: 1, offset: 53368},
			expr: &choiceExpr{
				pos: position{line: 1419, col: 21, offset: 53388},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1419, col: 21, offset: 53388},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1419, col: 21, offset: 53388},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1419, col: 21, offset: 53388},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1419, col: 30, offset: 53397},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1419, col: 38, offset: 53405},
										expr: &ruleRefExpr{
											pos:  position{line: 1419, col: 39, offset: 53406},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1419, col: 67, offset: 53434},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1421, col: 5, offset: 53532},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1421, col: 5, offset: 53532},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1421, col: 5, offset: 53532},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1421, col: 15, offset: 53542},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1421, col: 23, offset: 53550},
										expr: &choiceExpr{
											pos: position{line: 1421, col: 24, offset: 53551},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1421, col: 24, offset: 53551},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1421, col: 37, offset: 53564},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1421, col: 65, offset: 53592},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1425, col: 1, offset: 53692},
			expr: &actionExpr{
				pos: position{line: 1425, col: 30, offset: 53721},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1425, col: 30, offset: 53721},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1432, col: 1, offset: 53901},
			expr: &choiceExpr{
				pos: position{line: 1432, col: 19, offset: 53919},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1432, col: 19, offset: 53919},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1432, col: 44, offset: 53944},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1434, col: 1, offset: 53971},
			expr: &choiceExpr{
				pos: position{line: 1434, col: 27, offset: 53997},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1434, col: 27, offset: 53997},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1434, col: 27, offset: 53997},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1434, col: 27, offset: 53997},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 32, offset: 54002},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 36, offset: 54006},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1434, col: 40, offset: 54010},
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 40, offset: 54010},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1434, col: 47, offset: 54017},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1434, col: 51, offset: 54021},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1434, col: 58, offset: 54028},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1434, col: 79, offset: 54049},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1436, col: 5, offset: 54134},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1436, col: 5, offset: 54134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1436, col: 5, offset: 54134},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1436, col: 10, offset: 54139},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1436, col: 14, offset: 54143},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1436, col: 18, offset: 54147},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1440, col: 1, offset: 54223},
			expr: &actionExpr{
				pos: position{line: 1440, col: 27, offset: 54249},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1440, col: 27, offset: 54249},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1440, col: 27, offset: 54249},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1440, col: 35, offset: 54257},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 40, offset: 54262},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1440, col: 54, offset: 54276},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1440, col: 72, offset: 54294},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1444, col: 1, offset: 54421},
			expr: &ruleRefExpr{
				pos:  position{line: 1444, col: 24, offset: 54444},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1449, col: 1, offset: 54571},
			expr: &choiceExpr{
				pos: position{line: 1449, col: 9, offset: 54579},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1449, col: 9, offset: 54579},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 24, offset: 54594},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1452, col: 1, offset: 54678},
			expr: &actionExpr{
				pos: position{line: 1452, col: 17, offset: 54694},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1452, col: 17, offset: 54694},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1452, col: 17, offset: 54694},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 25, offset: 54702},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 30, offset: 54707},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1452, col: 40, offset: 54717},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1452, col: 58, offset: 54735},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1456, col: 1, offset: 54850},
			expr: &actionExpr{
				pos: position{line: 1456, col: 17, offset: 54866},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 17, offset: 54866},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1456, col: 17, offset: 54866},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1456, col: 22, offset: 54871},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1456, col: 42, offset: 54891},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1456, col: 59, offset: 54908},
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 60, offset: 54909},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1460, col: 1, offset: 55006},
			expr: &actionExpr{
				pos: position{line: 1460, col: 19, offset: 55024},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 19, offset: 55024},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1460, col: 19, offset: 55024},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 23, offset: 55028},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1460, col: 33, offset: 55038},
								expr: &ruleRefExpr{
									pos:  position{line: 1460, col: 34, offset: 55039},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1461, col: 5, offset: 55072},
							expr: &ruleRefExpr{
								pos:  position{line: 1461, col: 5, offset: 55072},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1461, col: 12, offset: 55079},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1461, col: 23, offset: 55090},
								expr: &ruleRefExpr{
									pos:  position{line: 1461, col: 24, offset: 55091},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1461, col: 43, offset: 55110},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1465, col: 1, offset: 55231},
			expr: &actionExpr{
				pos: position{line: 1465, col: 30, offset: 55260},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1465, col: 30, offset: 55260},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1467, col: 5, offset: 55313},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1467, col: 6, offset: 55314},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1467, col: 6, offset: 55314},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1467, col: 6, offset: 55314},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1467, col: 11, offset: 55319},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1467, col: 20, offset: 55328},
												expr: &choiceExpr{
													pos: position{line: 1467, col: 21, offset: 55329},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1467, col: 21, offset: 55329},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1467, col: 36, offset: 55344},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1467, col: 49, offset: 55357},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1467, col: 71, offset: 55379},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1467, col: 76, offset: 55384},
											expr: &notExpr{
												pos: position{line: 1467, col: 78, offset: 55386},
												expr: &litMatcher{
													pos:        position{line: 1467, col: 79, offset: 55387},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1467, col: 84, offset: 55392},
											expr: &litMatcher{
												pos:        position{line: 1467, col: 84, offset: 55392},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1471, col: 6, offset: 55523},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1471, col: 6, offset: 55523},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1471, col: 6, offset: 55523},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1471, col: 15, offset: 55532},
												expr: &choiceExpr{
													pos: position{line: 1471, col: 16, offset: 55533},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1471, col: 16, offset: 55533},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1471, col: 31, offset: 55548},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1471, col: 44, offset: 55561},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1471, col: 68, offset: 55585},
											expr: &notExpr{
												pos: position{line: 1471, col: 70, offset: 55587},
												expr: &litMatcher{
													pos:        position{line: 1471, col: 71, offset: 55588},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1471, col: 76, offset: 55593},
											expr: &litMatcher{
												pos:        position{line: 1471, col: 76, offset: 55593},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1477, col: 1, offset: 55713},
			expr: &actionExpr{
				pos: position{line: 1477, col: 18, offset: 55730},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1477, col: 18, offset: 55730},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1481, col: 1, offset: 55820},
			expr: &actionExpr{
				pos: position{line: 1481, col: 24, offset: 55843},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1481, col: 24, offset: 55843},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1485, col: 1, offset: 55940},
			expr: &actionExpr{
				pos: position{line: 1485, col: 26, offset: 55965},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1485, col: 26, offset: 55965},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1490, col: 1, offset: 56126},
			expr: &actionExpr{
				pos: position{line: 1491, col: 5, offset: 56146},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1491, col: 5, offset: 56146},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 56146},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1491, col: 14, offset: 56155},
								expr: &choiceExpr{
									pos: position{line: 1491, col: 15, offset: 56156},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1491, col: 15, offset: 56156},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1492, col: 11, offset: 56172},
											name: "Symbol",
										},
										&oneOrMoreExpr{
											pos: position{line: 1493, col: 11, offset: 56190},
											expr: &ruleRefExpr{
												pos:  position{line: 1493, col: 11, offset: 56190},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1494, col: 11, offset: 56209},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1495, col: 11, offset: 56234},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1496, col: 11, offset: 56257},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1497, col: 11, offset: 56286},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1498, col: 11, offset: 56305},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1498, col: 21, offset: 56315},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1502, col: 1, offset: 56389},
			expr: &choiceExpr{
				pos: position{line: 1502, col: 17, offset: 56405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1502, col: 17, offset: 56405},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1502, col: 40, offset: 56428},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1505, col: 1, offset: 56559},
			expr: &actionExpr{
				pos: position{line: 1505, col: 25, offset: 56583},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1505, col: 25, offset: 56583},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1505, col: 25, offset: 56583},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1505, col: 33, offset: 56591},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1505, col: 38, offset: 56596},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1505, col: 38, offset: 56596},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1505, col: 57, offset: 56615},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1505, col: 79, offset: 56637},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1505, col: 97, offset: 56655},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1509, col: 1, offset: 56770},
			expr: &actionExpr{
				pos: position{line: 1509, col: 25, offset: 56794},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1509, col: 25, offset: 56794},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1509, col: 25, offset: 56794},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1509, col: 30, offset: 56799},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1509, col: 48, offset: 56817},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1509, col: 65, offset: 56834},
								expr: &ruleRefExpr{
									pos:  position{line: 1509, col: 66, offset: 56835},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1516, col: 1, offset: 57037},
			expr: &actionExpr{
				pos: position{line: 1516, col: 15, offset: 57051},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 15, offset: 57051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1516, col: 15, offset: 57051},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1516, col: 26, offset: 57062},
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 27, offset: 57063},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1516, col: 40, offset: 57076},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 50, offset: 57086},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 56, offset: 57092},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1516, col: 66, offset: 57102},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 84, offset: 57120},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1516, col: 101, offset: 57137},
							expr: &ruleRefExpr{
								pos:  position{line: 1516, col: 101, offset: 57137},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1516, col: 108, offset: 57144},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1520, col: 1, offset: 57260},
			expr: &actionExpr{
				pos: position{line: 1520, col: 16, offset: 57275},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1520, col: 16, offset: 57275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1520, col: 16, offset: 57275},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1520, col: 25, offset: 57284},
							expr: &litMatcher{
								pos:        position{line: 1520, col: 26, offset: 57285},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1520, col: 30, offset: 57289},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1520, col: 36, offset: 57295},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1520, col: 46, offset: 57305},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1520, col: 64, offset: 57323},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1524, col: 1, offset: 57441},
			expr: &actionExpr{
				pos: position{line: 1524, col: 20, offset: 57460},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1524, col: 20, offset: 57460},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1524, col: 20, offset: 57460},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 24, offset: 57464},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1524, col: 28, offset: 57468},
								expr: &ruleRefExpr{
									pos:  position{line: 1524, col: 29, offset: 57469},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1524, col: 56, offset: 57496},
							expr: &litMatcher{
								pos:        position{line: 1524, col: 56, offset: 57496},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 61, offset: 57501},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1524, col: 67, offset: 57507},
								expr: &ruleRefExpr{
									pos:  position{line: 1524, col: 68, offset: 57508},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1524, col: 95, offset: 57535},
							expr: &litMatcher{
								pos:        position{line: 1524, col: 95, offset: 57535},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 100, offset: 57540},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1524, col: 107, offset: 57547},
								expr: &ruleRefExpr{
									pos:  position{line: 1524, col: 108, offset: 57548},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1524, col: 135, offset: 57575},
							expr: &litMatcher{
								pos:        position{line: 1524, col: 135, offset: 57575},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1524, col: 140, offset: 57580},
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 140, offset: 57580},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 147, offset: 57587},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1524, col: 158, offset: 57598},
								expr: &ruleRefExpr{
									pos:  position{line: 1524, col: 159, offset: 57599},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1524, col: 178, offset: 57618},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1531, col: 1, offset: 57910},
			expr: &actionExpr{
				pos: position{line: 1531, col: 15, offset: 57924},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1531, col: 15, offset: 57924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1531, col: 15, offset: 57924},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 23, offset: 57932},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1531, col: 34, offset: 57943},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1531, col: 34, offset: 57943},
									expr: &charClassMatcher{
										pos:        position{line: 1531, col: 34, offset: 57943},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1531, col: 78, offset: 57987},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1531, col: 96, offset: 58005},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1535, col: 1, offset: 58112},
			expr: &actionExpr{
				pos: position{line: 1535, col: 19, offset: 58130},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 19, offset: 58130},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1535, col: 19, offset: 58130},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 23, offset: 58134},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1535, col: 28, offset: 58139},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 29, offset: 58140},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1535, col: 56, offset: 58167},
							expr: &litMatcher{
								pos:        position{line: 1535, col: 56, offset: 58167},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1535, col: 61, offset: 58172},
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 61, offset: 58172},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 68, offset: 58179},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1535, col: 75, offset: 58186},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 76, offset: 58187},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1535, col: 95, offset: 58206},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1542, col: 1, offset: 58484},
			expr: &choiceExpr{
				pos: position{line: 1542, col: 19, offset: 58502},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1542, col: 19, offset: 58502},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1542, col: 19, offset: 58502},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1542, col: 19, offset: 58502},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1542, col: 32, offset: 58515},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1542, col: 41, offset: 58524},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1542, col: 58, offset: 58541},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1544, col: 5, offset: 58611},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1544, col: 5, offset: 58611},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1544, col: 5, offset: 58611},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1544, col: 17, offset: 58623},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1544, col: 22, offset: 58628},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1544, col: 35, offset: 58641},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1544, col: 39, offset: 58645},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1544, col: 47, offset: 58653},
										expr: &ruleRefExpr{
											pos:  position{line: 1544, col: 48, offset: 58654},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1544, col: 66, offset: 58672},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1548, col: 1, offset: 58737},
			expr: &ruleRefExpr{
				pos:  position{line: 1548, col: 16, offset: 58752},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1550, col: 1, offset: 58765},
			expr: &actionExpr{
				pos: position{line: 1550, col: 20, offset: 58784},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1550, col: 20, offset: 58784},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1550, col: 29, offset: 58793},
						expr: &seqExpr{
							pos: position{line: 1550, col: 30, offset: 58794},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1550, col: 30, offset: 58794},
									expr: &litMatcher{
										pos:        position{line: 1550, col: 31, offset: 58795},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1550, col: 35, offset: 58799},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1557, col: 1, offset: 59130},
			expr: &actionExpr{
				pos: position{line: 1557, col: 19, offset: 59148},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 19, offset: 59148},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1557, col: 19, offset: 59148},
							expr: &ruleRefExpr{
								pos:  position{line: 1557, col: 20, offset: 59149},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1558, col: 5, offset: 59238},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1558, col: 12, offset: 59245},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1558, col: 12, offset: 59245},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1559, col: 11, offset: 59269},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1560, col: 11, offset: 59294},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1561, col: 11, offset: 59319},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1562, col: 11, offset: 59342},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1563, col: 11, offset: 59365},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1564, col: 11, offset: 59389},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1565, col: 11, offset: 59418},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1566, col: 11, offset: 59446},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1567, col: 11, offset: 59463},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1571, col: 1, offset: 59508},
			expr: &choiceExpr{
				pos: position{line: 1571, col: 19, offset: 59526},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1571, col: 19, offset: 59526},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1571, col: 19, offset: 59526},
								expr: &ruleRefExpr{
									pos:  position{line: 1571, col: 21, offset: 59528},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1571, col: 31, offset: 59538},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1572, col: 19, offset: 59610},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1573, col: 19, offset: 59651},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1574, col: 19, offset: 59693},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1575, col: 19, offset: 59735},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1576, col: 19, offset: 59777},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1577, col: 19, offset: 59816},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1578, col: 19, offset: 59857},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1580, col: 1, offset: 59886},
			expr: &choiceExpr{
				pos: position{line: 1580, col: 20, offset: 59905},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1580, col: 20, offset: 59905},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1580, col: 36, offset: 59921},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1582, col: 1, offset: 59937},
			expr: &actionExpr{
				pos: position{line: 1582, col: 17, offset: 59953},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1582, col: 17, offset: 59953},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1582, col: 17, offset: 59953},
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 18, offset: 59954},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 22, offset: 59958},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 31, offset: 59967},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 52, offset: 59988},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1582, col: 61, offset: 59997},
								expr: &ruleRefExpr{
									pos:  position{line: 1582, col: 62, offset: 59998},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1582, col: 73, offset: 60009},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1586, col: 1, offset: 60083},
			expr: &actionExpr{
				pos: position{line: 1586, col: 24, offset: 60106},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1586, col: 24, offset: 60106},
					expr: &seqExpr{
						pos: position{line: 1586, col: 25, offset: 60107},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1586, col: 25, offset: 60107},
								expr: &ruleRefExpr{
									pos:  position{line: 1586, col: 26, offset: 60108},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1586, col: 36, offset: 60118},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1586, col: 36, offset: 60118},
										expr: &ruleRefExpr{
											pos:  position{line: 1586, col: 36, offset: 60118},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1586, col: 45, offset: 60127},
										expr: &charClassMatcher{
											pos:        position{line: 1586, col: 45, offset: 60127},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1590, col: 1, offset: 60181},
			expr: &oneOrMoreExpr{
				pos: position{line: 1590, col: 13, offset: 60193},
				expr: &ruleRefExpr{
					pos:  position{line: 1590, col: 13, offset: 60193},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1592, col: 1, offset: 60205},
			expr: &actionExpr{
				pos: position{line: 1592, col: 12, offset: 60216},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1592, col: 12, offset: 60216},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1592, col: 12, offset: 60216},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1592, col: 16, offset: 60220},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1592, col: 21, offset: 60225},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1592, col: 21, offset: 60225},
									expr: &charClassMatcher{
										pos:        position{line: 1592, col: 21, offset: 60225},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1592, col: 69, offset: 60273},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1592, col: 73, offset: 60277},
							expr: &ruleRefExpr{
								pos:  position{line: 1592, col: 73, offset: 60277},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1592, col: 80, offset: 60284},
							expr: &choiceExpr{
								pos: position{line: 1592, col: 82, offset: 60286},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1592, col: 82, offset: 60286},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1592, col: 88, offset: 60292},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1596, col: 1, offset: 60349},
			expr: &actionExpr{
				pos: position{line: 1596, col: 20, offset: 60368},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 20, offset: 60368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1596, col: 20, offset: 60368},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1596, col: 25, offset: 60373},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1596, col: 48, offset: 60396},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1596, col: 61, offset: 60409},
								expr: &ruleRefExpr{
									pos:  position{line: 1596, col: 61, offset: 60409},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1600, col: 1, offset: 60510},
			expr: &actionExpr{
				pos: position{line: 1600, col: 26, offset: 60535},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1600, col: 26, offset: 60535},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1600, col: 26, offset: 60535},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1600, col: 30, offset: 60539},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1600, col: 35, offset: 60544},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1600, col: 35, offset: 60544},
									expr: &charClassMatcher{
										pos:        position{line: 1600, col: 35, offset: 60544},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1600, col: 83, offset: 60592},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1600, col: 87, offset: 60596},
							expr: &ruleRefExpr{
								pos:  position{line: 1600, col: 87, offset: 60596},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1607, col: 1, offset: 60830},
			expr: &seqExpr{
				pos: position{line: 1607, col: 25, offset: 60854},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1607, col: 25, offset: 60854},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1607, col: 31, offset: 60860},
						expr: &ruleRefExpr{
							pos:  position{line: 1607, col: 31, offset: 60860},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1607, col: 38, offset: 60867},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1609, col: 1, offset: 60929},
			expr: &seqExpr{
				pos: position{line: 1609, col: 30, offset: 60958},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1609, col: 30, offset: 60958},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1609, col: 36, offset: 60964},
						expr: &ruleRefExpr{
							pos:  position{line: 1609, col: 36, offset: 60964},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1609, col: 43, offset: 60971},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1611, col: 1, offset: 60978},
			expr: &choiceExpr{
				pos: position{line: 1611, col: 28, offset: 61005},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1611, col: 29, offset: 61006},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1611, col: 29, offset: 61006},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1611, col: 35, offset: 61012},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 35, offset: 61012},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1611, col: 42, offset: 61019},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1611, col: 49, offset: 61026},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1613, col: 1, offset: 61033},
			expr: &actionExpr{
				pos: position{line: 1613, col: 16, offset: 61048},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1613, col: 16, offset: 61048},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1613, col: 16, offset: 61048},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1613, col: 27, offset: 61059},
								expr: &ruleRefExpr{
									pos:  position{line: 1613, col: 28, offset: 61060},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1613, col: 41, offset: 61073},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1613, col: 67, offset: 61099},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1613, col: 76, offset: 61108},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1613, col: 104, offset: 61136},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1617, col: 1, offset: 61255},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1617, col: 31, offset: 61285},
				expr: &actionExpr{
					pos: position{line: 1617, col: 32, offset: 61286},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1617, col: 32, offset: 61286},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1617, col: 32, offset: 61286},
								expr: &ruleRefExpr{
									pos:  position{line: 1617, col: 33, offset: 61287},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1617, col: 57, offset: 61311},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1617, col: 66, offset: 61320},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1624, col: 1, offset: 61664},
			expr: &seqExpr{
				pos: position{line: 1624, col: 26, offset: 61689},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1624, col: 26, offset: 61689},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1624, col: 33, offset: 61696},
						expr: &ruleRefExpr{
							pos:  position{line: 1624, col: 33, offset: 61696},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1624, col: 40, offset: 61703},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1626, col: 1, offset: 61710},
			expr: &seqExpr{
				pos: position{line: 1626, col: 31, offset: 61740},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1626, col: 31, offset: 61740},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1626, col: 38, offset: 61747},
						expr: &ruleRefExpr{
							pos:  position{line: 1626, col: 38, offset: 61747},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1626, col: 45, offset: 61754},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1628, col: 1, offset: 61761},
			expr: &choiceExpr{
				pos: position{line: 1628, col: 29, offset: 61789},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1628, col: 30, offset: 61790},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1628, col: 30, offset: 61790},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1628, col: 37, offset: 61797},
								expr: &ruleRefExpr{
									pos:  position{line: 1628, col: 37, offset: 61797},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1628, col: 44, offset: 61804},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1628, col: 51, offset: 61811},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1630, col: 1, offset: 61818},
			expr: &actionExpr{
				pos: position{line: 1630, col: 17, offset: 61834},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1630, col: 17, offset: 61834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1630, col: 17, offset: 61834},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1630, col: 28, offset: 61845},
								expr: &ruleRefExpr{
									pos:  position{line: 1630, col: 29, offset: 61846},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1630, col: 42, offset: 61859},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1630, col: 69, offset: 61886},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1630, col: 78, offset: 61895},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1630, col: 107, offset: 61924},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1634, col: 1, offset: 62045},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1634, col: 32, offset: 62076},
				expr: &actionExpr{
					pos: position{line: 1634, col: 33, offset: 62077},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1634, col: 33, offset: 62077},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1634, col: 33, offset: 62077},
								expr: &ruleRefExpr{
									pos:  position{line: 1634, col: 34, offset: 62078},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1634, col: 59, offset: 62103},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1634, col: 68, offset: 62112},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1641, col: 1, offset: 62456},
			expr: &seqExpr{
				pos: position{line: 1641, col: 26, offset: 62481},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1641, col: 26, offset: 62481},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1641, col: 33, offset: 62488},
						expr: &ruleRefExpr{
							pos:  position{line: 1641, col: 33, offset: 62488},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1641, col: 40, offset: 62495},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1643, col: 1, offset: 62502},
			expr: &seqExpr{
				pos: position{line: 1643, col: 31, offset: 62532},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1643, col: 31, offset: 62532},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1643, col: 38, offset: 62539},
						expr: &ruleRefExpr{
							pos:  position{line: 1643, col: 38, offset: 62539},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1643, col: 45, offset: 62546},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1645, col: 1, offset: 62553},
			expr: &choiceExpr{
				pos: position{line: 1645, col: 29, offset: 62581},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1645, col: 30, offset: 62582},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1645, col: 30, offset: 62582},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1645, col: 37, offset: 62589},
								expr: &ruleRefExpr{
									pos:  position{line: 1645, col: 37, offset: 62589},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1645, col: 44, offset: 62596},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1645, col: 51, offset: 62603},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1647, col: 1, offset: 62610},
			expr: &actionExpr{
				pos: position{line: 1647, col: 17, offset: 62626},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1647, col: 17, offset: 62626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1647, col: 17, offset: 62626},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1647, col: 28, offset: 62637},
								expr: &ruleRefExpr{
									pos:  position{line: 1647, col: 29, offset: 62638},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1647, col: 42, offset: 62651},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1647, col: 69, offset: 62678},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1647, col: 78, offset: 62687},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1647, col: 107, offset: 62716},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1651, col: 1, offset: 62837},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1651, col: 32, offset: 62868},
				expr: &actionExpr{
					pos: position{line: 1651, col: 33, offset: 62869},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1651, col: 33, offset: 62869},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1651, col: 33, offset: 62869},
								expr: &ruleRefExpr{
									pos:  position{line: 1651, col: 34, offset: 62870},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1651, col: 59, offset: 62895},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1651, col: 68, offset: 62904},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1658, col: 1, offset: 63246},
			expr: &seqExpr{
				pos: position{line: 1658, col: 24, offset: 63269},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1658, col: 24, offset: 63269},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1658, col: 31, offset: 63276},
						expr: &ruleRefExpr{
							pos:  position{line: 1658, col: 31, offset: 63276},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1658, col: 38, offset: 63283},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1660, col: 1, offset: 63315},
			expr: &seqExpr{
				pos: position{line: 1660, col: 29, offset: 63343},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1660, col: 29, offset: 63343},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1660, col: 36, offset: 63350},
						expr: &ruleRefExpr{
							pos:  position{line: 1660, col: 36, offset: 63350},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1660, col: 43, offset: 63357},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1662, col: 1, offset: 63389},
			expr: &choiceExpr{
				pos: position{line: 1662, col: 27, offset: 63415},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1662, col: 28, offset: 63416},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1662, col: 28, offset: 63416},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1662, col: 35, offset: 63423},
								expr: &ruleRefExpr{
									pos:  position{line: 1662, col: 35, offset: 63423},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1662, col: 42, offset: 63430},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1662, col: 49, offset: 63437},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1664, col: 1, offset: 63469},
			expr: &actionExpr{
				pos: position{line: 1664, col: 15, offset: 63483},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1664, col: 15, offset: 63483},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1664, col: 15, offset: 63483},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1664, col: 26, offset: 63494},
								expr: &ruleRefExpr{
									pos:  position{line: 1664, col: 27, offset: 63495},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 40, offset: 63508},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1664, col: 65, offset: 63533},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1664, col: 74, offset: 63542},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1664, col: 101, offset: 63569},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1668, col: 1, offset: 63686},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1668, col: 30, offset: 63715},
				expr: &actionExpr{
					pos: position{line: 1668, col: 31, offset: 63716},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1668, col: 31, offset: 63716},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1668, col: 31, offset: 63716},
								expr: &ruleRefExpr{
									pos:  position{line: 1668, col: 32, offset: 63717},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1668, col: 55, offset: 63740},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1668, col: 64, offset: 63749},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1677, col: 1, offset: 64142},
			expr: &actionExpr{
				pos: position{line: 1677, col: 15, offset: 64156},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1677, col: 15, offset: 64156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1677, col: 15, offset: 64156},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1677, col: 27, offset: 64168},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1678, col: 5, offset: 64186},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1682, col: 5, offset: 64385},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 30, offset: 64410},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1682, col: 39, offset: 64419},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1682, col: 66, offset: 64446},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1686, col: 1, offset: 64571},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1686, col: 30, offset: 64600},
				expr: &actionExpr{
					pos: position{line: 1686, col: 31, offset: 64601},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1686, col: 31, offset: 64601},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1686, col: 31, offset: 64601},
								expr: &ruleRefExpr{
									pos:  position{line: 1686, col: 32, offset: 64602},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1686, col: 55, offset: 64625},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1686, col: 64, offset: 64634},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1693, col: 1, offset: 64978},
			expr: &seqExpr{
				pos: position{line: 1693, col: 26, offset: 65003},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1693, col: 26, offset: 65003},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1693, col: 33, offset: 65010},
						expr: &ruleRefExpr{
							pos:  position{line: 1693, col: 33, offset: 65010},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1693, col: 40, offset: 65017},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1695, col: 1, offset: 65024},
			expr: &seqExpr{
				pos: position{line: 1695, col: 31, offset: 65054},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1695, col: 31, offset: 65054},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1695, col: 38, offset: 65061},
						expr: &ruleRefExpr{
							pos:  position{line: 1695, col: 38, offset: 65061},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1695, col: 45, offset: 65068},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1697, col: 1, offset: 65075},
			expr: &choiceExpr{
				pos: position{line: 1697, col: 29, offset: 65103},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1697, col: 30, offset: 65104},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1697, col: 30, offset: 65104},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1697, col: 37, offset: 65111},
								expr: &ruleRefExpr{
									pos:  position{line: 1697, col: 37, offset: 65111},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1697, col: 44, offset: 65118},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1697, col: 51, offset: 65125},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1699, col: 1, offset: 65132},
			expr: &actionExpr{
				pos: position{line: 1699, col: 17, offset: 65148},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1699, col: 17, offset: 65148},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1699, col: 17, offset: 65148},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1699, col: 28, offset: 65159},
								expr: &ruleRefExpr{
									pos:  position{line: 1699, col: 29, offset: 65160},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 42, offset: 65173},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1699, col: 69, offset: 65200},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1699, col: 78, offset: 65209},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1699, col: 107, offset: 65238},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1703, col: 1, offset: 65359},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1703, col: 32, offset: 65390},
				expr: &actionExpr{
					pos: position{line: 1703, col: 33, offset: 65391},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1703, col: 33, offset: 65391},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1703, col: 33, offset: 65391},
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 34, offset: 65392},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1703, col: 59, offset: 65417},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1703, col: 68, offset: 65426},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1710, col: 1, offset: 65774},
			expr: &seqExpr{
				pos: position{line: 1710, col: 30, offset: 65803},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1710, col: 30, offset: 65803},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1710, col: 37, offset: 65810},
						expr: &ruleRefExpr{
							pos:  position{line: 1710, col: 37, offset: 65810},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1710, col: 44, offset: 65817},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1712, col: 1, offset: 65824},
			expr: &seqExpr{
				pos: position{line: 1712, col: 35, offset: 65858},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1712, col: 35, offset: 65858},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1712, col: 42, offset: 65865},
						expr: &ruleRefExpr{
							pos:  position{line: 1712, col: 42, offset: 65865},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1712, col: 49, offset: 65872},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1714, col: 1, offset: 65879},
			expr: &choiceExpr{
				pos: position{line: 1714, col: 33, offset: 65911},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1714, col: 34, offset: 65912},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1714, col: 34, offset: 65912},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1714, col: 41, offset: 65919},
								expr: &ruleRefExpr{
									pos:  position{line: 1714, col: 41, offset: 65919},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1714, col: 48, offset: 65926},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1714, col: 55, offset: 65933},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1716, col: 1, offset: 65940},
			expr: &actionExpr{
				pos: position{line: 1716, col: 21, offset: 65960},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1716, col: 21, offset: 65960},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1716, col: 21, offset: 65960},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1716, col: 32, offset: 65971},
								expr: &ruleRefExpr{
									pos:  position{line: 1716, col: 33, offset: 65972},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1716, col: 46, offset: 65985},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1716, col: 77, offset: 66016},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1716, col: 86, offset: 66025},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1716, col: 119, offset: 66058},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1720, col: 1, offset: 66187},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1720, col: 36, offset: 66222},
				expr: &actionExpr{
					pos: position{line: 1720, col: 37, offset: 66223},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1720, col: 37, offset: 66223},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1720, col: 37, offset: 66223},
								expr: &ruleRefExpr{
									pos:  position{line: 1720, col: 38, offset: 66224},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1720, col: 67, offset: 66253},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1720, col: 76, offset: 66262},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1725, col: 1, offset: 66426},
			expr: &actionExpr{
				pos: position{line: 1725, col: 18, offset: 66443},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1725, col: 18, offset: 66443},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1725, col: 19, offset: 66444},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1725, col: 19, offset: 66444},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1725, col: 27, offset: 66452},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1725, col: 37, offset: 66462},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1725, col: 45, offset: 66470},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1725, col: 55, offset: 66480},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1725, col: 63, offset: 66488},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1725, col: 72, offset: 66497},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1733, col: 1, offset: 66755},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1733, col: 23, offset: 66777},
				expr: &ruleRefExpr{
					pos:  position{line: 1733, col: 23, offset: 66777},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1735, col: 1, offset: 66800},
			expr: &actionExpr{
				pos: position{line: 1736, col: 5, offset: 66828},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1736, col: 5, offset: 66828},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1736, col: 5, offset: 66828},
							expr: &ruleRefExpr{
								pos:  position{line: 1736, col: 6, offset: 66829},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1736, col: 10, offset: 66833},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1736, col: 19, offset: 66842},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1736, col: 19, offset: 66842},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1737, col: 15, offset: 66868},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1738, col: 15, offset: 66897},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1739, col: 15, offset: 66923},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1740, col: 15, offset: 66952},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1741, col: 15, offset: 66984},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1742, col: 15, offset: 67018},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1743, col: 15, offset: 67050},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1744, col: 15, offset: 67090},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1745, col: 15, offset: 67120},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1746, col: 15, offset: 67149},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1747, col: 15, offset: 67186},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1748, col: 15, offset: 67217},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1749, col: 15, offset: 67259},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1753, col: 1, offset: 67312},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1753, col: 22, offset: 67333},
				expr: &ruleRefExpr{
					pos:  position{line: 1753, col: 22, offset: 67333},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1755, col: 1, offset: 67355},
			expr: &actionExpr{
				pos: position{line: 1755, col: 22, offset: 67376},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1755, col: 22, offset: 67376},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1755, col: 22, offset: 67376},
							expr: &ruleRefExpr{
								pos:  position{line: 1755, col: 23, offset: 67377},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1755, col: 27, offset: 67381},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1755, col: 36, offset: 67390},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1755, col: 36, offset: 67390},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1755, col: 48, offset: 67402},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1759, col: 1, offset: 67456},
			expr: &actionExpr{
				pos: position{line: 1759, col: 24, offset: 67479},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1759, col: 24, offset: 67479},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1759, col: 30, offset: 67485},
						expr: &ruleRefExpr{
							pos:  position{line: 1759, col: 31, offset: 67486},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1763, col: 1, offset: 67580},
			expr: &actionExpr{
				pos: position{line: 1763, col: 28, offset: 67607},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1763, col: 28, offset: 67607},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1763, col: 28, offset: 67607},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1763, col: 37, offset: 67616},
								expr: &ruleRefExpr{
									pos:  position{line: 1763, col: 38, offset: 67617},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1763, col: 54, offset: 67633},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1770, col: 1, offset: 67882},
			expr: &actionExpr{
				pos: position{line: 1770, col: 10, offset: 67891},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1770, col: 10, offset: 67891},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1770, col: 10, offset: 67891},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1770, col: 21, offset: 67902},
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 22, offset: 67903},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1770, col: 35, offset: 67916},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1771, col: 5, offset: 67936},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1771, col: 12, offset: 67943},
								expr: &ruleRefExpr{
									pos:  position{line: 1771, col: 13, offset: 67944},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1772, col: 5, offset: 67967},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1772, col: 11, offset: 67973},
								expr: &ruleRefExpr{
									pos:  position{line: 1772, col: 12, offset: 67974},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1773, col: 6, offset: 67992},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1773, col: 6, offset: 67992},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1773, col: 23, offset: 68009},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1777, col: 1, offset: 68128},
			expr: &seqExpr{
				pos: position{line: 1777, col: 23, offset: 68150},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1777, col: 23, offset: 68150},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1777, col: 27, offset: 68154},
						expr: &ruleRefExpr{
							pos:  position{line: 1777, col: 27, offset: 68154},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1779, col: 1, offset: 68164},
			expr: &seqExpr{
				pos: position{line: 1779, col: 19, offset: 68182},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1779, col: 19, offset: 68182},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1779, col: 26, offset: 68189},
						expr: &ruleRefExpr{
							pos:  position{line: 1779, col: 26, offset: 68189},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1779, col: 33, offset: 68196},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1782, col: 1, offset: 68267},
			expr: &actionExpr{
				pos: position{line: 1782, col: 20, offset: 68286},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1782, col: 20, offset: 68286},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1782, col: 20, offset: 68286},
							expr: &ruleRefExpr{
								pos:  position{line: 1782, col: 21, offset: 68287},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1782, col: 36, offset: 68302},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1782, col: 42, offset: 68308},
								expr: &ruleRefExpr{
									pos:  position{line: 1782, col: 43, offset: 68309},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 55, offset: 68321},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 59, offset: 68325},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1786, col: 1, offset: 68397},
			expr: &actionExpr{
				pos: position{line: 1786, col: 14, offset: 68410},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1786, col: 14, offset: 68410},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1786, col: 14, offset: 68410},
							expr: &ruleRefExpr{
								pos:  position{line: 1786, col: 15, offset: 68411},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1786, col: 30, offset: 68426},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1786, col: 36, offset: 68432},
								expr: &ruleRefExpr{
									pos:  position{line: 1786, col: 37, offset: 68433},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1786, col: 49, offset: 68445},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1786, col: 53, offset: 68449},
							expr: &ruleRefExpr{
								pos:  position{line: 1786, col: 53, offset: 68449},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1790, col: 1, offset: 68522},
			expr: &actionExpr{
				pos: position{line: 1790, col: 14, offset: 68535},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1790, col: 14, offset: 68535},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1790, col: 14, offset: 68535},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1790, col: 33, offset: 68554},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1790, col: 42, offset: 68563},
								expr: &seqExpr{
									pos: position{line: 1790, col: 43, offset: 68564},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1790, col: 43, offset: 68564},
											expr: &ruleRefExpr{
												pos:  position{line: 1790, col: 44, offset: 68565},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1790, col: 63, offset: 68584},
											expr: &ruleRefExpr{
												pos:  position{line: 1790, col: 64, offset: 68585},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1790, col: 68, offset: 68589},
											expr: &ruleRefExpr{
												pos:  position{line: 1790, col: 68, offset: 68589},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1790, col: 75, offset: 68596},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1790, col: 89, offset: 68610},
											expr: &ruleRefExpr{
												pos:  position{line: 1790, col: 89, offset: 68610},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1797, col: 1, offset: 68866},
			expr: &seqExpr{
				pos: position{line: 1797, col: 26, offset: 68891},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1797, col: 26, offset: 68891},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1797, col: 33, offset: 68898},
						expr: &ruleRefExpr{
							pos:  position{line: 1797, col: 33, offset: 68898},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1797, col: 40, offset: 68905},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1799, col: 1, offset: 68912},
			expr: &seqExpr{
				pos: position{line: 1799, col: 31, offset: 68942},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1799, col: 31, offset: 68942},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1799, col: 38, offset: 68949},
						expr: &ruleRefExpr{
							pos:  position{line: 1799, col: 38, offset: 68949},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1799, col: 45, offset: 68956},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1801, col: 1, offset: 68963},
			expr: &choiceExpr{
				pos: position{line: 1801, col: 29, offset: 68991},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1801, col: 30, offset: 68992},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1801, col: 30, offset: 68992},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1801, col: 37, offset: 68999},
								expr: &ruleRefExpr{
									pos:  position{line: 1801, col: 37, offset: 68999},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1801, col: 44, offset: 69006},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1801, col: 51, offset: 69013},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1803, col: 1, offset: 69020},
			expr: &actionExpr{
				pos: position{line: 1803, col: 17, offset: 69036},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1803, col: 17, offset: 69036},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1803, col: 17, offset: 69036},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1803, col: 44, offset: 69063},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1803, col: 53, offset: 69072},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1803, col: 83, offset: 69102},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1807, col: 1, offset: 69216},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1807, col: 32, offset: 69247},
				expr: &actionExpr{
					pos: position{line: 1807, col: 33, offset: 69248},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1807, col: 33, offset: 69248},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1807, col: 33, offset: 69248},
								expr: &ruleRefExpr{
									pos:  position{line: 1807, col: 34, offset: 69249},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1807, col: 59, offset: 69274},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1807, col: 68, offset: 69283},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1811, col: 1, offset: 69428},
			expr: &actionExpr{
				pos: position{line: 1811, col: 22, offset: 69449},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1811, col: 22, offset: 69449},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1811, col: 22, offset: 69449},
							expr: &ruleRefExpr{
								pos:  position{line: 1811, col: 23, offset: 69450},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1811, col: 45, offset: 69472},
							expr: &ruleRefExpr{
								pos:  position{line: 1811, col: 45, offset: 69472},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1811, col: 52, offset: 69479},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1811, col: 57, offset: 69484},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1811, col: 66, offset: 69493},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1811, col: 92, offset: 69519},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1815, col: 1, offset: 69588},
			expr: &actionExpr{
				pos: position{line: 1815, col: 29, offset: 69616},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1815, col: 29, offset: 69616},
					expr: &charClassMatcher{
						pos:        position{line: 1815, col: 29, offset: 69616},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1823, col: 1, offset: 69937},
			expr: &choiceExpr{
				pos: position{line: 1823, col: 17, offset: 69953},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1823, col: 17, offset: 69953},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1823, col: 49, offset: 69985},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1823, col: 78, offset: 70014},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1825, col: 1, offset: 70052},
			expr: &litMatcher{
				pos:        position{line: 1825, col: 26, offset: 70077},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1828, col: 1, offset: 70152},
			expr: &actionExpr{
				pos: position{line: 1828, col: 31, offset: 70182},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1828, col: 31, offset: 70182},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1828, col: 31, offset: 70182},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1828, col: 42, offset: 70193},
								expr: &ruleRefExpr{
									pos:  position{line: 1828, col: 43, offset: 70194},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1828, col: 56, offset: 70207},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1828, col: 63, offset: 70214},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1833, col: 1, offset: 70449},
			expr: &actionExpr{
				pos: position{line: 1834, col: 5, offset: 70490},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1834, col: 5, offset: 70490},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1834, col: 5, offset: 70490},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1834, col: 16, offset: 70501},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1834, col: 16, offset: 70501},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1834, col: 16, offset: 70501},
											expr: &ruleRefExpr{
												pos:  position{line: 1834, col: 16, offset: 70501},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1834, col: 23, offset: 70508},
											expr: &charClassMatcher{
												pos:        position{line: 1834, col: 23, offset: 70508},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1836, col: 8, offset: 70563},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1837, col: 5, offset: 70627},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1837, col: 16, offset: 70638},
								expr: &actionExpr{
									pos: position{line: 1838, col: 9, offset: 70649},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1838, col: 9, offset: 70649},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1838, col: 9, offset: 70649},
												expr: &ruleRefExpr{
													pos:  position{line: 1838, col: 10, offset: 70650},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1839, col: 9, offset: 70670},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1839, col: 20, offset: 70681},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1839, col: 20, offset: 70681},
														expr: &charClassMatcher{
															pos:        position{line: 1839, col: 20, offset: 70681},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1841, col: 12, offset: 70744},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1848, col: 1, offset: 70981},
			expr: &actionExpr{
				pos: position{line: 1848, col: 39, offset: 71019},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1848, col: 39, offset: 71019},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1848, col: 39, offset: 71019},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1848, col: 50, offset: 71030},
								expr: &ruleRefExpr{
									pos:  position{line: 1848, col: 51, offset: 71031},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1849, col: 9, offset: 71053},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1849, col: 31, offset: 71075},
							expr: &ruleRefExpr{
								pos:  position{line: 1849, col: 31, offset: 71075},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1849, col: 38, offset: 71082},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1849, col: 46, offset: 71090},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1849, col: 53, offset: 71097},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1849, col: 95, offset: 71139},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1849, col: 96, offset: 71140},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1849, col: 96, offset: 71140},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1849, col: 118, offset: 71162},
											expr: &ruleRefExpr{
												pos:  position{line: 1849, col: 118, offset: 71162},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1849, col: 125, offset: 71169},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1849, col: 132, offset: 71176},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1854, col: 1, offset: 71340},
			expr: &actionExpr{
				pos: position{line: 1854, col: 44, offset: 71383},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1854, col: 44, offset: 71383},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1854, col: 50, offset: 71389},
						expr: &ruleRefExpr{
							pos:  position{line: 1854, col: 51, offset: 71390},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1858, col: 1, offset: 71478},
			expr: &actionExpr{
				pos: position{line: 1859, col: 5, offset: 71534},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1859, col: 5, offset: 71534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1859, col: 5, offset: 71534},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1859, col: 11, offset: 71540},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1859, col: 11, offset: 71540},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1859, col: 11, offset: 71540},
											expr: &ruleRefExpr{
												pos:  position{line: 1859, col: 12, offset: 71541},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1859, col: 34, offset: 71563},
											expr: &charClassMatcher{
												pos:        position{line: 1859, col: 34, offset: 71563},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1861, col: 8, offset: 71618},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1866, col: 1, offset: 71749},
			expr: &actionExpr{
				pos: position{line: 1867, col: 5, offset: 71788},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1867, col: 5, offset: 71788},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1867, col: 5, offset: 71788},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1867, col: 16, offset: 71799},
								expr: &ruleRefExpr{
									pos:  position{line: 1867, col: 17, offset: 71800},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1868, col: 5, offset: 71818},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1875, col: 5, offset: 72032},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1875, col: 12, offset: 72039},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1879, col: 1, offset: 72193},
			expr: &actionExpr{
				pos: position{line: 1879, col: 16, offset: 72208},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1879, col: 16, offset: 72208},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1884, col: 1, offset: 72296},
			expr: &actionExpr{
				pos: position{line: 1884, col: 39, offset: 72334},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1884, col: 39, offset: 72334},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1884, col: 45, offset: 72340},
						expr: &ruleRefExpr{
							pos:  position{line: 1884, col: 46, offset: 72341},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1888, col: 1, offset: 72425},
			expr: &actionExpr{
				pos: position{line: 1888, col: 38, offset: 72462},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 38, offset: 72462},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1888, col: 38, offset: 72462},
							expr: &ruleRefExpr{
								pos:  position{line: 1888, col: 39, offset: 72463},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1888, col: 49, offset: 72473},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1888, col: 58, offset: 72482},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1888, col: 58, offset: 72482},
									expr: &charClassMatcher{
										pos:        position{line: 1888, col: 58, offset: 72482},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1890, col: 4, offset: 72529},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1897, col: 1, offset: 72722},
			expr: &actionExpr{
				pos: position{line: 1897, col: 14, offset: 72735},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1897, col: 14, offset: 72735},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1897, col: 14, offset: 72735},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1897, col: 19, offset: 72740},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1897, col: 25, offset: 72746},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1897, col: 43, offset: 72764},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1901, col: 1, offset: 72833},
			expr: &actionExpr{
				pos: position{line: 1901, col: 21, offset: 72853},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1901, col: 21, offset: 72853},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1901, col: 30, offset: 72862},
						expr: &choiceExpr{
							pos: position{line: 1901, col: 31, offset: 72863},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1901, col: 31, offset: 72863},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1901, col: 38, offset: 72870},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1901, col: 53, offset: 72885},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1901, col: 66, offset: 72898},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1901, col: 74, offset: 72906},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1901, col: 75, offset: 72907},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1901, col: 75, offset: 72907},
												expr: &litMatcher{
													pos:        position{line: 1901, col: 76, offset: 72908},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1901, col: 81, offset: 72913,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1907, col: 1, offset: 73025},
			expr: &actionExpr{
				pos: position{line: 1907, col: 23, offset: 73047},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1907, col: 23, offset: 73047},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1907, col: 23, offset: 73047},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1907, col: 29, offset: 73053},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1907, col: 36, offset: 73060},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1908, col: 5, offset: 73093},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1908, col: 11, offset: 73099},
								expr: &actionExpr{
									pos: position{line: 1908, col: 12, offset: 73100},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1908, col: 12, offset: 73100},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1908, col: 12, offset: 73100},
												expr: &ruleRefExpr{
													pos:  position{line: 1908, col: 12, offset: 73100},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1908, col: 19, offset: 73107},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1908, col: 23, offset: 73111},
												expr: &ruleRefExpr{
													pos:  position{line: 1908, col: 23, offset: 73111},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1908, col: 30, offset: 73118},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1908, col: 39, offset: 73127},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1909, col: 5, offset: 73186},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1909, col: 11, offset: 73192},
								expr: &actionExpr{
									pos: position{line: 1909, col: 12, offset: 73193},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1909, col: 12, offset: 73193},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1909, col: 12, offset: 73193},
												expr: &ruleRefExpr{
													pos:  position{line: 1909, col: 12, offset: 73193},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1909, col: 19, offset: 73200},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1909, col: 23, offset: 73204},
												expr: &ruleRefExpr{
													pos:  position{line: 1909, col: 23, offset: 73204},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1909, col: 30, offset: 73211},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1909, col: 39, offset: 73220},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1910, col: 5, offset: 73279},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1914, col: 1, offset: 73362},
			expr: &actionExpr{
				pos: position{line: 1914, col: 30, offset: 73391},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1914, col: 30, offset: 73391},
					expr: &choiceExpr{
						pos: position{line: 1914, col: 31, offset: 73392},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1914, col: 31, offset: 73392},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1914, col: 42, offset: 73403},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1921, col: 1, offset: 73559},
			expr: &actionExpr{
				pos: position{line: 1921, col: 14, offset: 73572},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1921, col: 14, offset: 73572},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1921, col: 14, offset: 73572},
							expr: &ruleRefExpr{
								pos:  position{line: 1921, col: 15, offset: 73573},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1921, col: 19, offset: 73577},
							expr: &ruleRefExpr{
								pos:  position{line: 1921, col: 19, offset: 73577},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1921, col: 26, offset: 73584},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 1929, col: 1, offset: 73737},
			expr: &choiceExpr{
				pos: position{line: 1929, col: 11, offset: 73747},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1929, col: 11, offset: 73747},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1929, col: 24, offset: 73760},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 1929, col: 36, offset: 73772},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 1929, col: 48, offset: 73784},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 1929, col: 61, offset: 73797},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 1931, col: 1, offset: 73809},
			expr: &actionExpr{
				pos: position{line: 1931, col: 15, offset: 73823},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 1931, col: 15, offset: 73823},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 1934, col: 1, offset: 73879},
			expr: &actionExpr{
				pos: position{line: 1934, col: 14, offset: 73892},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 1934, col: 14, offset: 73892},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 1937, col: 1, offset: 73949},
			expr: &actionExpr{
				pos: position{line: 1937, col: 14, offset: 73962},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 1937, col: 14, offset: 73962},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 1940, col: 1, offset: 74020},
			expr: &actionExpr{
				pos: position{line: 1940, col: 15, offset: 74034},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 1940, col: 15, offset: 74034},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 1943, col: 1, offset: 74091},
			expr: &actionExpr{
				pos: position{line: 1943, col: 13, offset: 74103},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 1943, col: 13, offset: 74103},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 1951, col: 1, offset: 74386},
			expr: &actionExpr{
				pos: position{line: 1951, col: 22, offset: 74407},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 1951, col: 22, offset: 74407},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1951, col: 22, offset: 74407},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 1951, col: 31, offset: 74416},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 1951, col: 35, offset: 74420},
							expr: &charClassMatcher{
								pos:        position{line: 1951, col: 36, offset: 74421},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1958, col: 1, offset: 74608},
			expr: &charClassMatcher{
				pos:        position{line: 1958, col: 13, offset: 74620},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1960, col: 1, offset: 74632},
			expr: &choiceExpr{
				pos: position{line: 1960, col: 16, offset: 74647},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1960, col: 16, offset: 74647},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1960, col: 22, offset: 74653},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1960, col: 28, offset: 74659},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1960, col: 34, offset: 74665},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1960, col: 40, offset: 74671},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1960, col: 46, offset: 74677},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1962, col: 1, offset: 74685},
			expr: &actionExpr{
				pos: position{line: 1962, col: 14, offset: 74698},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1962, col: 14, offset: 74698},
					expr: &charClassMatcher{
						pos:        position{line: 1962, col: 14, offset: 74698},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1966, col: 1, offset: 74748},
			expr: &choiceExpr{
				pos: position{line: 1970, col: 5, offset: 75079},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1970, col: 5, offset: 75079},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1970, col: 5, offset: 75079},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1970, col: 5, offset: 75079},
									expr: &charClassMatcher{
										pos:        position{line: 1970, col: 5, offset: 75079},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1970, col: 15, offset: 75089},
									expr: &choiceExpr{
										pos: position{line: 1970, col: 17, offset: 75091},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1970, col: 17, offset: 75091},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1970, col: 30, offset: 75104},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1972, col: 9, offset: 75176},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1972, col: 9, offset: 75176},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1972, col: 9, offset: 75176},
									expr: &charClassMatcher{
										pos:        position{line: 1972, col: 9, offset: 75176},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1972, col: 19, offset: 75186},
									expr: &seqExpr{
										pos: position{line: 1972, col: 20, offset: 75187},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1972, col: 20, offset: 75187},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1972, col: 27, offset: 75194},
												expr: &charClassMatcher{
													pos:        position{line: 1972, col: 27, offset: 75194},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1976, col: 1, offset: 75274},
			expr: &choiceExpr{
				pos: position{line: 1977, col: 5, offset: 75356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1977, col: 5, offset: 75356},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1977, col: 5, offset: 75356},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1977, col: 5, offset: 75356},
									expr: &charClassMatcher{
										pos:        position{line: 1977, col: 5, offset: 75356},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1977, col: 19, offset: 75370},
									expr: &choiceExpr{
										pos: position{line: 1977, col: 21, offset: 75372},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1977, col: 21, offset: 75372},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1977, col: 31, offset: 75382},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1979, col: 9, offset: 75453},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1982, col: 1, offset: 75556},
			expr: &actionExpr{
				pos: position{line: 1982, col: 12, offset: 75567},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1982, col: 12, offset: 75567},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1986, col: 1, offset: 75636},
			expr: &actionExpr{
				pos: position{line: 1986, col: 17, offset: 75652},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1986, col: 17, offset: 75652},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1986, col: 22, offset: 75657},
						expr: &choiceExpr{
							pos: position{line: 1986, col: 23, offset: 75658},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1986, col: 23, offset: 75658},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1986, col: 34, offset: 75669},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1990, col: 1, offset: 75757},
			expr: &actionExpr{
				pos: position{line: 1990, col: 25, offset: 75781},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1990, col: 25, offset: 75781},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1990, col: 30, offset: 75786},
						expr: &charClassMatcher{
							pos:        position{line: 1990, col: 31, offset: 75787},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1994, col: 1, offset: 75863},
			expr: &actionExpr{
				pos: position{line: 1994, col: 13, offset: 75875},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1994, col: 13, offset: 75875},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1994, col: 13, offset: 75875},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1994, col: 20, offset: 75882},
								expr: &ruleRefExpr{
									pos:  position{line: 1994, col: 21, offset: 75883},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1994, col: 34, offset: 75896},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1994, col: 39, offset: 75901},
								expr: &choiceExpr{
									pos: position{line: 1994, col: 40, offset: 75902},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1994, col: 40, offset: 75902},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1994, col: 51, offset: 75913},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1998, col: 1, offset: 76005},
			expr: &actionExpr{
				pos: position{line: 1998, col: 23, offset: 76027},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1998, col: 23, offset: 76027},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1998, col: 23, offset: 76027},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1998, col: 31, offset: 76035},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1998, col: 43, offset: 76047},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1998, col: 48, offset: 76052},
								expr: &choiceExpr{
									pos: position{line: 1998, col: 49, offset: 76053},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1998, col: 49, offset: 76053},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1998, col: 60, offset: 76064},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2002, col: 1, offset: 76156},
			expr: &oneOrMoreExpr{
				pos: position{line: 2002, col: 13, offset: 76168},
				expr: &charClassMatcher{
					pos:        position{line: 2002, col: 14, offset: 76169},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2004, col: 1, offset: 76305},
			expr: &actionExpr{
				pos: position{line: 2004, col: 21, offset: 76325},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2004, col: 21, offset: 76325},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2004, col: 21, offset: 76325},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2004, col: 29, offset: 76333},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2004, col: 41, offset: 76345},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2004, col: 47, offset: 76351},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2009, col: 1, offset: 76604},
			expr: &oneOrMoreExpr{
				pos: position{line: 2009, col: 22, offset: 76625},
				expr: &charClassMatcher{
					pos:        position{line: 2009, col: 23, offset: 76626},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2011, col: 1, offset: 76760},
			expr: &actionExpr{
				pos: position{line: 2011, col: 9, offset: 76768},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2011, col: 9, offset: 76768},
					expr: &charClassMatcher{
						pos:        position{line: 2011, col: 9, offset: 76768},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2015, col: 1, offset: 76820},
			expr: &choiceExpr{
				pos: position{line: 2015, col: 15, offset: 76834},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2015, col: 15, offset: 76834},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2015, col: 27, offset: 76846},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2015, col: 40, offset: 76859},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2015, col: 51, offset: 76870},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2015, col: 62, offset: 76881},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2017, col: 1, offset: 76894},
			expr: &actionExpr{
				pos: position{line: 2017, col: 7, offset: 76900},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2017, col: 7, offset: 76900},
					expr: &charClassMatcher{
						pos:        position{line: 2017, col: 7, offset: 76900},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2021, col: 1, offset: 77029},
			expr: &actionExpr{
				pos: position{line: 2021, col: 10, offset: 77038},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2021, col: 10, offset: 77038},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2025, col: 1, offset: 77084},
			expr: &actionExpr{
				pos: position{line: 2025, col: 11, offset: 77094},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2025, col: 11, offset: 77094},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2025, col: 11, offset: 77094},
							expr: &litMatcher{
								pos:        position{line: 2025, col: 11, offset: 77094},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2025, col: 16, offset: 77099},
							expr: &ruleRefExpr{
								pos:  position{line: 2025, col: 16, offset: 77099},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2029, col: 1, offset: 77155},
			expr: &choiceExpr{
				pos: position{line: 2029, col: 10, offset: 77164},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2029, col: 10, offset: 77164},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2029, col: 16, offset: 77170},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2029, col: 16, offset: 77170},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2033, col: 1, offset: 77215},
			expr: &choiceExpr{
				pos: position{line: 2033, col: 12, offset: 77226},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2033, col: 12, offset: 77226},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2033, col: 21, offset: 77235},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2033, col: 28, offset: 77242},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2035, col: 1, offset: 77250},
			expr: &notExpr{
				pos: position{line: 2035, col: 8, offset: 77257},
				expr: &anyMatcher{
					line: 2035, col: 9, offset: 77258,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2037, col: 1, offset: 77263},
			expr: &choiceExpr{
				pos: position{line: 2037, col: 8, offset: 77270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2037, col: 8, offset: 77270},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2037, col: 18, offset: 77280},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {

	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextRoleWord6() (interface{}, error) {

	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord6()
}

func (c *current) onQuotedTextRoleWord1(role interface{}) (interface{}, error) {

	return role, nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole5()
}

func (c *current) onQuotedTextShortRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1(stack["role"])
}

func (c *current) onQuotedTextShortID5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID5()
}

func (c *current) onQuotedTextShortID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1(stack["id"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {

	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {

	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {

	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {

	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {

	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {

	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
